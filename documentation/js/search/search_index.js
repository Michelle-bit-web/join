var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.164,1,0.836]],["body/components/AppComponent.html",[0,0.281,1,1.507,2,1.301,3,0.27,4,0.235,5,1.158,6,1.158,7,1.158,8,0.235,9,3.601,10,1.158,11,1.728,12,1.84,13,1.385,14,2.829,15,1.161,16,1.385,17,5.943,18,1.507,19,1.507,20,2.078,21,1.385,22,5.402,23,1.568,24,5.402,25,0.201,26,0.639,27,5.943,28,4.36,29,0.751,30,2.863,31,3.276,32,2.778,33,0.764,34,5.402,35,2.829,36,4.047,37,5.402,38,1.003,39,3.541,40,4.585,41,4.585,42,4.222,43,5.311,44,2.012,45,2.653,46,3.645,47,0.59,48,0.025,49,0.588,50,0.299,51,0.42,52,0.42,53,4.011,54,1.003,55,3.645,56,3.058,57,4.585,58,4.585,59,2.829,60,0.751,61,0.872,62,4.243,63,2.829,64,1.385,65,3.325,66,3.325,67,2.829,68,4.585,69,1.414,70,4.047,71,0.545,72,2.451,73,3.325,74,0.426,75,0.235,76,5.045,77,1.022,78,4.243,79,4.243,80,1.394,81,2.863,82,2.863,83,2.863,84,3.179,85,0.27,86,0.27,87,0.484,88,0.872,89,3.601,90,4.243,91,1.394,92,2.064,93,3.601,94,4.243,95,4.243,96,4.243,97,1.158,98,1.474,99,1.385,100,1.158,101,1.707,102,1.158,103,0.788,104,0.735,105,1.474,106,1.158,107,0.899,108,1.158,109,1.022,110,1.18,111,1.158,112,1.022,113,1.158,114,1.022,115,1.158,116,1.022,117,1.158,118,1.022,119,1.158,120,1.474,121,1.022,122,1.158,123,1.022,124,1.158,125,1.158,126,1.022,127,1.158,128,1.022,129,1.022,130,1.158,131,1.158,132,1.158,133,1.022,134,1.158,135,0.959,136,1.158,137,1.022,138,1.022,139,0.46,140,0.959,141,1.088,142,1.158,143,0.018,144,0.018]],["title/guards/AuthGuard.html",[145,2.343,146,2.601]],["body/guards/AuthGuard.html",[3,0.309,4,0.269,8,0.269,13,1.249,15,1.174,25,0.23,29,0.818,32,2.804,33,0.756,39,3.718,45,2.495,47,0.677,48,0.025,49,0.482,50,0.269,51,0.482,52,0.582,54,1.092,64,1.509,68,4.994,69,1.33,74,0.402,75,0.269,77,1.173,85,0.309,86,0.309,87,0.528,88,0.95,143,0.02,144,0.02,145,3.971,146,4.921,147,4.869,148,4.133,149,4.994,150,3.971,151,4.994,152,4.994,153,1.646,154,3.718,155,0.818,156,6.833,157,3.648,158,2.271,159,4.869,160,4.994,161,2.495,162,3.33,163,3.081,164,1.933,165,2.669,166,2.495,167,4.869,168,4.408,169,5.884,170,4.408,171,3.081,172,0.475,173,1.247,174,3.081,175,2.192,176,1.523,177,0.756,178,3.648,179,1.329,180,2.55,181,3.648,182,0.818,183,3.286]],["title/injectables/AuthService.html",[158,1.14,177,0.446]],["body/injectables/AuthService.html",[3,0.182,4,0.159,8,0.159,13,0.736,15,1.124,25,0.136,26,0.49,29,0.576,32,2.547,33,0.844,35,2.168,38,1.151,44,1.542,45,1.756,46,2.794,47,0.74,48,0.025,49,0.613,50,0.312,51,0.649,52,0.558,54,0.769,59,2.168,60,0.676,61,0.669,64,1.062,69,1.275,70,3.102,71,0.898,74,0.358,75,0.159,77,0.691,85,0.263,86,0.182,87,0.566,88,1.02,143,0.014,144,0.014,150,2.794,153,1.722,154,3.63,155,0.576,158,1.747,161,1.217,162,3.778,163,2.785,164,2.037,165,1.879,170,3.102,171,2.168,172,0.549,173,0.878,174,2.168,175,1.542,176,1.459,177,0.532,179,0.783,182,0.967,183,1.936,184,1.14,185,2.15,186,2.015,187,2.794,188,3.102,189,4.184,190,3.515,191,1.36,192,3.806,193,3.102,194,1.364,195,2.06,196,4.225,197,4.123,198,2.388,199,4.514,200,3.985,201,4.514,202,4.141,203,3.589,204,4.141,205,4.514,206,4.514,207,2.87,208,5.622,209,3.084,210,4.141,211,4.429,212,3.01,213,2.87,214,1.542,215,1.284,216,2.783,217,4.609,218,2.424,219,4.076,220,2.87,221,1.756,222,1.62,223,2.87,224,3.515,225,1.459,226,3.273,227,3.515,228,2.87,229,3.515,230,3.515,231,3.515,232,3.515,233,3.515,234,4.123,235,2.548,236,3.102,237,2.87,238,1.542,239,4.123,240,3.515,241,4.678,242,2.87,243,4.987,244,2.735,245,2.87,246,3.102,247,2.015,248,2.87,249,1.756,250,3.515,251,5.444,252,2.87,253,3.515,254,1.018,255,1.86,256,1.756,257,2.785,258,2.559,259,3.515,260,3.515,261,2.794,262,2.87,263,2.436,264,2.436,265,2.436,266,2.436,267,2.436,268,2.436,269,2.436,270,1.503,271,2.436,272,1.936,273,2.436,274,1.396,275,1.503,276,1.003,277,0.822,278,1.503,279,4.184,280,4.123,281,4.123,282,1.809,283,2.436,284,2.436,285,3.172,286,0.975,287,3.515,288,1.665,289,3.515,290,3.515,291,3.515,292,4.514,293,3.515,294,3.515,295,2.75,296,2.953,297,4.123,298,3.515,299,3.515,300,3.515,301,3.515,302,3.515,303,2.436,304,2.436,305,2.436,306,4.514,307,2.436,308,2.436,309,2.436,310,2.436,311,2.436,312,2.15,313,4.646,314,3.515,315,2.436,316,2.436,317,2.436,318,2.794,319,2.168,320,2.436,321,2.436,322,2.436,323,1.503,324,2.794,325,2.436,326,3.515,327,2.15,328,2.436,329,2.544,330,3.515,331,2.436,332,2.436,333,1.766,334,1.624,335,2.436,336,2.15,337,2.15,338,1.936,339,2.436]],["title/interfaces/Category.html",[277,0.689,340,1.818]],["body/interfaces/Category.html",[3,0.274,4,0.238,8,0.238,13,1.105,15,0.8,25,0.204,26,0.645,48,0.025,50,0.331,60,0.759,61,1.087,71,0.908,74,0.274,75,0.238,85,0.347,86,0.274,87,0.386,88,0.966,103,0.8,139,0.649,143,0.018,144,0.018,153,1.314,172,0.524,173,1.334,175,1.605,176,1.515,177,0.701,179,1.176,182,0.948,194,1.535,215,1.156,221,2.538,238,1.605,255,1.907,277,0.855,286,0.819,340,3.797,341,2.096,342,2.438,343,3.228,344,1.954,345,3.347,346,3.527,347,3.681,348,1.506,349,2.256,350,1.711,351,1.827,352,2.651,353,4.968,354,2.651,355,3.657,356,3.657,357,4.63,358,3.357,359,3.657,360,3.357,361,3.657,362,2.675,363,3.657,364,5.839,365,2.313,366,3.657,367,0.974,368,2.716,369,3.657,370,5.629,371,3.657,372,2.907,373,3.657,374,3.657,375,2.096,376,3.657,377,3.228,378,2.096,379,3.388,380,3.657,381,3.657,382,2.166,383,3.657,384,4.63,385,4.63,386,3.657,387,3.657,388,3.681,389,3.657,390,3.657,391,1.415,392,1.954,393,2.651]],["title/injectables/CategoryManager.html",[177,0.446,347,2.343]],["body/injectables/CategoryManager.html",[3,0.23,4,0.201,8,0.201,13,0.93,15,0.905,25,0.172,26,0.577,33,0.889,47,0.766,48,0.025,49,0.545,50,0.35,51,0.545,52,0.482,60,0.899,61,1.086,71,0.889,74,0.23,75,0.201,85,0.31,86,0.23,87,0.325,88,1.075,103,0.905,139,0.639,143,0.016,144,0.016,153,1.418,155,0.678,172,0.567,173,1.411,175,1.816,176,1.524,177,0.627,179,0.99,182,0.914,184,1.44,194,1.622,215,1.248,221,2.683,238,1.816,255,2.059,277,0.72,286,0.732,340,3.812,342,3.932,343,5.205,344,1.645,345,3.302,346,3.385,347,3.974,348,1.705,349,2.553,350,1.936,351,2.067,352,3,353,5.121,354,3,355,4.674,356,4.674,357,5.215,358,3.624,359,4.138,360,3.624,361,4.138,362,2.746,363,4.998,364,5.65,365,2.497,366,4.138,367,1.01,368,2.87,369,4.998,370,5.37,371,4.138,372,3.29,373,4.998,374,3.078,375,2.372,376,4.998,377,3.652,378,2.372,379,3.333,380,4.138,381,3.078,382,2.338,383,4.998,384,4.138,385,4.138,386,3.078,387,4.998,388,3.29,389,3.078,390,4.998,391,1.602,392,2.212,393,3.624,394,4.875,395,4.875,396,4.875,397,3.078,398,2.717,399,3.627,400,3.627,401,3.078,402,3.078,403,3.627,404,3.627,405,3.078,406,3.078,407,3.078,408,2.447,409,2.717,410,2.447]],["title/interfaces/Contact.html",[110,0.689,277,0.689]],["body/interfaces/Contact.html",[3,0.209,4,0.182,8,0.182,13,0.845,15,0.612,25,0.156,26,0.62,29,0.458,48,0.025,49,0.653,50,0.313,51,0.608,52,0.326,54,0.612,61,0.737,64,0.845,65,2.028,71,0.896,74,0.377,75,0.182,85,0.333,86,0.209,87,0.592,88,0.992,104,0.791,110,1.441,140,0.745,143,0.015,144,0.015,158,1.721,161,1.397,166,2.222,172,0.526,175,1.227,177,0.673,178,2.469,179,0.899,182,0.936,191,1.082,194,1.171,195,2.222,198,1.832,209,3.112,214,1.227,215,1.111,216,2.222,218,1.597,222,1.576,225,1.1,244,2.551,254,1.03,255,1.597,257,2.391,258,2.915,261,3.081,270,1.725,272,2.223,274,1.603,275,1.725,276,1.152,277,1.04,285,1.725,286,0.964,288,1.344,296,1.725,323,1.725,334,1.865,341,1.603,345,2.222,362,2.441,367,0.892,368,2.071,379,1.865,391,1.5,411,2.223,412,3.875,413,2.485,414,3.954,415,3.081,416,3.081,417,2.584,418,2.071,419,3.081,420,1.5,421,2.584,422,2.81,423,2.028,424,2.028,425,2.028,426,2.797,427,3.081,428,3.081,429,1.725,430,2.223,431,2.223,432,2.724,433,1.227,434,2.223,435,2.028,436,3.421,437,2.584,438,2.469,439,2.028,440,1.858,441,1.725,442,2.469,443,2.797,444,1.865,445,2.797,446,1.521,447,1.308,448,2.469,449,2.028,450,2.797,451,1.603,452,1.227,453,2.469,454,2.797,455,2.797,456,2.223,457,2.797,458,2.797,459,2.797,460,2.469,461,2.797,462,2.222,463,2.797,464,1.603,465,2.469,466,2.797,467,2.797,468,3.421,469,2.797,470,2.469,471,2.797,472,3.875,473,2.797,474,2.797,475,2.797,476,2.797,477,2.797,478,2.797,479,2.797,480,2.797,481,2.797,482,2.797,483,2.797,484,2.797,485,2.797,486,2.797,487,2.797,488,2.797,489,2.797,490,2.797,491,2.797,492,2.797,493,2.797,494,2.797,495,2.797,496,2.797,497,2.222,498,2.107,499,2.797,500,2.028,501,2.797,502,2.962,503,3.482,504,2.797,505,2.797,506,2.797,507,1.813,508,2.797,509,2.797,510,4.447,511,3.875,512,2.584,513,2.028,514,2.797,515,2.797,516,2.028,517,2.028,518,2.797,519,2.028,520,1.725,521,3.225,522,1.603,523,1.725,524,2.797,525,2.81,526,2.797,527,3.875,528,2.028,529,2.028,530,2.81,531,2.469,532,2.028,533,4.447,534,1.603,535,2.797,536,2.797,537,2.028,538,2.797,539,1.865,540,3.875,541,2.469,542,2.028,543,2.028,544,1.397,545,1.308,546,2.797,547,2.223,548,2.797,549,2.028,550,2.797,551,2.797,552,2.797,553,2.797,554,2.797,555,1.397,556,2.797,557,2.469,558,2.469,559,2.797,560,2.797,561,2.797,562,2.222,563,2.797,564,3.875,565,2.55,566,2.797,567,2.797,568,2.797,569,2.469,570,2.797,571,2.797,572,2.797,573,1.227,574,2.797,575,2.797,576,2.797,577,2.797,578,2.223,579,1.495,580,2.797,581,2.797,582,2.797,583,3.875,584,2.797,585,2.797,586,2.797,587,2.797,588,2.797,589,2.797,590,2.797,591,2.797]],["title/components/ContactDetailsComponent.html",[0,0.164,109,0.836]],["body/components/ContactDetailsComponent.html",[0,0.271,1,0.643,2,0.946,3,0.17,4,0.148,5,0.728,6,0.728,7,0.728,8,0.148,10,0.728,11,1.65,12,1.757,14,2.057,15,1.063,16,1.007,18,0.643,19,0.643,20,1.63,21,1.007,23,1.14,25,0.126,26,0.465,29,0.546,33,0.894,35,1.397,38,0.954,44,0.994,47,0.824,48,0.025,49,0.675,50,0.349,51,0.633,52,0.567,59,1.397,60,0.824,61,0.956,63,1.397,64,0.684,69,0.603,71,0.847,74,0.364,75,0.148,80,0.877,84,1.999,85,0.17,86,0.17,87,0.461,88,0.925,91,2.305,97,0.728,98,1.072,99,1.007,100,0.728,101,1.402,102,0.728,103,0.495,104,0.462,105,1.072,106,0.728,107,0.566,108,0.728,109,1.238,110,1.4,111,0.728,112,0.643,113,0.728,114,0.643,115,0.728,116,0.643,117,0.728,118,0.643,119,0.728,120,1.072,121,0.643,122,0.728,123,0.643,124,0.728,125,0.728,126,0.643,127,0.728,128,0.643,129,0.643,130,0.728,131,0.728,132,0.728,133,0.643,134,0.728,135,0.603,136,0.728,137,0.643,138,0.643,139,0.289,140,1.238,141,0.684,142,0.728,143,0.013,144,0.013,155,0.546,172,0.548,173,0.566,176,1.629,180,2.057,182,0.824,194,0.684,214,1.463,222,0.684,235,2.417,244,1.56,249,1.976,254,0.462,276,0.933,286,0.86,324,1.801,338,3.145,345,2.501,352,2.417,367,0.981,378,2.788,391,1.29,414,2.417,420,0.877,432,1.665,446,1.663,451,1.299,452,2.134,456,2.65,498,1.463,543,2.417,545,1.06,555,1.665,565,2.788,573,1.914,592,4.705,593,5.224,594,1.999,595,2.44,596,3.491,597,3.334,598,3.334,599,4.66,600,4.66,601,3.927,602,4.66,603,4.66,604,3.145,605,3.955,606,3.866,607,5.139,608,2.942,609,2.942,610,3.468,611,1.976,612,4.362,613,5.139,614,2.942,615,5.139,616,3.334,617,4.66,618,2.417,619,3.927,620,4.66,621,2.942,622,2.942,623,3.334,624,2.942,625,3.927,626,1.801,627,4.437,628,3.927,629,3.163,630,2.669,631,2.942,632,1.999,633,3.927,634,4.292,635,3.955,636,3.866,637,3.817,638,4.316,639,2.868,640,3.242,641,2.265,642,3.927,643,3.145,644,4.292,645,4.66,646,4.66,647,3.491,648,2.669,649,2.223,650,3.927,651,2.669,652,2.942,653,2.942,654,3.927,655,3.927,656,2.942,657,2.669,658,3.866,659,3.334,660,2.669,661,2.942,662,3.334,663,2.942,664,2.942,665,2.942,666,2.669,667,2.44,668,2.669,669,1.29,670,2.669,671,2.942,672,2.942,673,2.942,674,2.669,675,3.145,676,3.334,677,3.334,678,2.669,679,1.801,680,2.669,681,2.669,682,2.265,683,2.669,684,2.669,685,2.669,686,2.417,687,2.669,688,2.265,689,2.669,690,2.669,691,2.669,692,1.299,693,1.397,694,1.397,695,3.182,696,1.211,697,2.868,698,1.211,699,2.417,700,1.999,701,1.299,702,2.669,703,2.669,704,2.669,705,3.334,706,3.645,707,3.85,708,2.882,709,3.927,710,2.332,711,3.491,712,1.272,713,2.669,714,1.999,715,3.334,716,2.265,717,2.265,718,3.334,719,2.265,720,2.669,721,2.669,722,2.669,723,2.669,724,2.669,725,1.801,726,4.362,727,2.669,728,2.669,729,2.057,730,2.669,731,1.999,732,2.669,733,1.999,734,2.669,735,2.669,736,2.265,737,3.927,738,5.139,739,4.66,740,4.66,741,4.66,742,5.139,743,1.782,744,2.669,745,0.994,746,3.927,747,2.669,748,1.999,749,2.669,750,2.669,751,2.669,752,2.669,753,2.669,754,2.669,755,2.265,756,2.669,757,2.669,758,2.669,759,3.334,760,2.942,761,3.927,762,2.942,763,3.334,764,2.057,765,3.334,766,4.362,767,3.334,768,3.334,769,3.927,770,3.927]],["title/components/ContactFormComponent.html",[0,0.164,112,0.836]],["body/components/ContactFormComponent.html",[0,0.275,1,0.749,2,1.056,3,0.197,4,0.172,5,0.848,6,0.848,7,0.848,8,0.172,10,0.848,11,1.679,12,1.788,16,1.124,18,0.749,19,0.749,20,1.776,21,1.124,23,1.272,25,0.147,26,0.519,29,0.706,33,0.869,35,2.295,44,1.633,47,0.61,48,0.025,49,0.645,50,0.343,51,0.575,52,0.434,54,1.079,57,3.721,60,0.432,61,0.502,69,0.703,71,0.563,74,0.369,75,0.172,80,1.021,85,0.197,86,0.197,87,0.455,88,0.82,91,1.44,97,0.848,98,1.196,99,1.124,100,0.848,101,1.505,102,0.848,103,0.577,104,1.008,105,1.196,106,0.848,107,0.659,108,0.848,109,0.749,110,1.438,111,0.848,112,1.328,113,0.848,114,0.749,115,0.848,116,0.749,117,0.848,118,0.749,119,0.848,120,1.196,121,0.749,122,0.848,123,0.749,124,0.848,125,0.848,126,0.749,127,0.848,128,0.749,129,0.749,130,0.848,131,0.848,132,0.848,133,0.749,134,0.848,135,0.703,136,0.848,137,0.749,138,0.749,139,0.337,140,0.703,141,0.797,142,0.848,143,0.015,144,0.015,155,0.61,172,0.487,180,2.295,191,1.44,194,1.124,195,2.153,198,1.776,214,1.633,222,1.302,225,1.328,244,2.396,247,2.133,254,0.956,276,1.087,286,0.762,288,0.797,323,2.295,329,2.295,348,1.533,350,2.017,367,0.95,378,2.936,392,2.502,414,3.714,416,2.958,420,1.44,429,1.628,432,3.025,433,1.633,440,1.44,449,2.698,451,2.684,452,2.534,462,2.936,464,2.133,465,3.284,521,2.698,531,3.284,542,2.698,545,1.234,555,2.767,565,2.684,573,1.633,592,4.59,595,2.659,596,3.804,606,4.184,610,3.722,611,2.339,618,2.698,629,3.579,664,3.284,665,3.284,692,2.133,699,3.125,701,1.512,759,3.721,760,3.284,771,5.096,772,2.638,773,3.804,774,4.31,775,4.383,776,4.383,777,5.078,778,5.078,779,5.078,780,5.078,781,5.515,782,4.681,783,4.681,784,4.681,785,5.078,786,5.078,787,2.638,788,4.521,789,4.383,790,3.721,791,4.383,792,2.295,793,3.804,794,5.078,795,3.108,796,3.721,797,3.721,798,4.681,799,3.108,800,3.722,801,3.394,802,5.515,803,4.383,804,3.108,805,3.721,806,5.515,807,3.108,808,3.108,809,4.383,810,2.698,811,4.383,812,2.295,813,3.108,814,3.721,815,3.284,816,3.108,817,3.108,818,4.383,819,2.698,820,2.133,821,3.284,822,3.804,823,3.108,824,2.481,825,3.108,826,3.108,827,3.284,828,3.721,829,4.383,830,2.958,831,3.108,832,4.383,833,4.383,834,4.383,835,3.284,836,2.329,837,3.284,838,1.087,839,3.108,840,2.638,841,3.804,842,2.329,843,3.108,844,3.108,845,4.383,846,3.108,847,4.383,848,3.108,849,3.108,850,3.108,851,3.108,852,3.108,853,3.108,854,4.383,855,3.108,856,3.108,857,3.108,858,3.108,859,3.108,860,3.108,861,4.383,862,3.108,863,3.108,864,3.108,865,3.108,866,3.721,867,3.108,868,1.741,869,4.383,870,5.515,871,4.383,872,4.383,873,4.383,874,4.383,875,4.383,876,3.721,877,4.383]],["title/components/ContactListComponent.html",[0,0.164,114,0.836]],["body/components/ContactListComponent.html",[0,0.238,1,0.53,2,0.818,3,0.32,4,0.122,5,0.601,6,0.601,7,0.601,8,0.122,10,0.601,11,1.608,12,1.712,14,1.779,15,0.988,16,0.871,18,0.53,19,0.53,20,1.451,21,0.871,25,0.161,26,0.402,29,0.649,33,0.849,38,1.064,44,1.266,47,0.741,48,0.025,49,0.664,50,0.358,51,0.527,52,0.527,58,2.884,60,0.836,61,0.896,66,2.091,69,0.498,71,0.825,74,0.338,75,0.122,80,0.723,83,1.486,85,0.14,86,0.14,87,0.498,88,0.896,91,1.116,97,0.601,98,0.927,99,0.871,100,0.601,101,1.639,102,0.601,103,0.409,104,0.962,105,0.927,106,0.601,107,0.467,108,0.601,109,0.53,110,1.43,111,0.601,112,0.53,113,0.601,114,1.123,115,0.601,116,0.53,117,0.601,118,0.53,119,0.601,120,0.927,121,0.53,122,0.601,123,0.53,124,0.601,125,0.601,126,0.53,127,0.601,128,0.53,129,0.53,130,0.601,131,0.601,132,0.601,133,0.53,134,0.601,135,0.498,136,0.601,137,0.53,138,0.53,139,0.239,140,0.498,141,0.565,142,0.601,143,0.011,144,0.011,153,1.559,154,2.64,155,0.473,158,1.883,161,1.441,162,2.64,168,2.546,172,0.518,173,0.988,174,2.442,180,1.779,182,0.701,195,1.759,196,3.108,200,3.494,215,1.273,218,1.631,222,1.63,225,0.999,238,1.266,244,2.204,254,0.962,255,2.138,276,0.77,286,0.7,345,3.215,348,1.188,352,3.416,362,2.336,367,0.883,379,2.64,382,1.852,388,1.486,419,2.293,432,1.441,440,1.116,444,1.246,446,1.707,448,2.546,452,2.367,456,2.8,468,2.546,498,2.367,543,2.091,545,1.648,555,1.441,562,1.653,592,4.484,595,2.172,596,3.108,606,3.969,609,2.546,610,3.147,611,1.978,618,2.091,626,1.486,629,2.553,653,2.546,656,2.546,658,3.594,663,2.546,664,2.546,665,2.546,669,1.932,696,2.116,699,2.091,701,1.072,706,2.091,710,1.882,712,0.601,725,2.293,729,3.497,733,1.65,736,1.869,745,1.737,755,1.869,762,1.65,763,2.884,765,2.884,766,2.884,767,2.884,768,2.884,790,2.884,793,3.108,815,2.546,820,1.653,824,1.923,828,2.884,830,2.293,878,1.869,879,4.978,880,1.869,881,2.884,882,4.148,883,3.398,884,4.148,885,4.148,886,4.148,887,4.148,888,4.148,889,3.398,890,3.398,891,3.398,892,4.664,893,3.398,894,4.148,895,3.398,896,1.923,897,1.923,898,2.202,899,4.664,900,3.398,901,2.202,902,2.116,903,3.398,904,2.202,905,4.148,906,3.398,907,2.269,908,3.398,909,2.884,910,4.664,911,2.884,912,2.546,913,3.398,914,2.202,915,4.664,916,3.398,917,3.398,918,2.202,919,2.202,920,3.398,921,2.202,922,3.108,923,3.398,924,2.202,925,3.398,926,2.202,927,2.202,928,2.202,929,2.202,930,2.202,931,2.202,932,2.546,933,3.398,934,2.091,935,2.202,936,2.884,937,3.398,938,3.398,939,2.202,940,2.202,941,1.153,942,2.202,943,2.202,944,2.202,945,2.202,946,4.664,947,3.398,948,2.202,949,2.202,950,2.202,951,1.246,952,2.202,953,1.869,954,2.202,955,1.869,956,1.869,957,2.202,958,2.202,959,2.202,960,2.553,961,2.202,962,2.202,963,2.202,964,2.202,965,2.202,966,2.202,967,2.202,968,2.202,969,2.202,970,1.65,971,2.202,972,3.398,973,2.202,974,2.202,975,2.293,976,2.202,977,2.202,978,3.398,979,3.398,980,3.398,981,3.398,982,1.869,983,4.865,984,2.202,985,5.098,986,3.398,987,3.398,988,4.294,989,4.277,990,1.65,991,1.65,992,4.865,993,3.494,994,2.202,995,3.959,996,3.277,997,2.884,998,4.484,999,2.884,1000,4.664,1001,4.277,1002,3.521,1003,2.293,1004,3.108,1005,2.202,1006,4.277,1007,4.664,1008,4.277,1009,3.398,1010,2.202,1011,2.202,1012,5.039,1013,2.202,1014,4.52,1015,3.959,1016,3.959,1017,4.865,1018,3.521,1019,3.147,1020,3.521,1021,3.398,1022,3.959,1023,3.521,1024,3.398,1025,3.398,1026,1.869,1027,2.202,1028,2.202,1029,4.277,1030,1.65,1031,2.546,1032,3.494,1033,3.398,1034,4.664,1035,3.521,1036,5.267,1037,3.959,1038,3.959,1039,4.664,1040,4.664,1041,3.959,1042,4.664,1043,3.398,1044,3.959,1045,3.398,1046,3.398,1047,2.202,1048,1.869,1049,4.277,1050,4.649,1051,1.869,1052,3.959,1053,3.398,1054,3.398,1055,1.869,1056,3.398,1057,1.869,1058,2.884,1059,2.546,1060,4.277,1061,3.398,1062,2.884,1063,2.202,1064,3.398,1065,4.148,1066,3.959,1067,1.869,1068,1.869,1069,1.869,1070,2.64,1071,1.355,1072,3.959,1073,2.884,1074,2.202,1075,2.884,1076,1.869,1077,3.398,1078,3.398,1079,3.398,1080,3.398,1081,2.202,1082,1.869,1083,2.202,1084,2.202,1085,1.869,1086,2.202,1087,3.521,1088,1.355,1089,2.202,1090,4.664,1091,3.398,1092,1.869,1093,3.521,1094,2.884,1095,3.398,1096,3.398,1097,2.202,1098,2.202,1099,1.869,1100,2.202,1101,2.884,1102,2.884,1103,2.884,1104,2.202,1105,2.202,1106,1.869,1107,1.869,1108,2.202,1109,2.202,1110,2.202,1111,2.202,1112,2.202]],["title/injectables/ContactManager.html",[177,0.446,1113,2.601]],["body/injectables/ContactManager.html",[3,0.223,4,0.194,8,0.194,11,1.149,13,0.9,15,0.885,25,0.256,26,0.564,29,0.488,33,0.889,47,0.907,48,0.025,49,0.645,50,0.37,51,0.645,52,0.62,60,0.664,61,0.938,71,0.874,74,0.303,75,0.194,85,0.223,86,0.223,87,0.545,88,1.012,103,0.885,110,1.451,143,0.016,144,0.016,155,0.664,161,2.023,172,0.574,173,1.402,175,1.777,176,1.463,177,0.613,179,0.958,182,0.892,184,1.395,194,1.673,215,1.011,221,2.464,238,1.777,255,2.281,286,0.527,342,3.933,344,1.593,345,3.049,348,1.668,349,2.498,350,1.894,351,2.023,352,3.576,353,5.01,354,2.936,362,2.701,365,2.464,367,1.003,368,2.843,375,2.828,379,3.066,382,2.308,391,1.567,392,2.164,393,3.576,398,2.631,408,2.37,452,2.334,498,2.55,507,1.894,558,3.574,608,3.574,626,2.37,653,4.354,658,4.229,701,1.709,712,1.302,733,3.574,838,1.228,1113,4.354,1114,5.898,1115,5.417,1116,5.417,1117,4.77,1118,4.049,1119,5.811,1120,5.811,1121,5.811,1122,4.77,1123,4.049,1124,4.77,1125,4.77,1126,5.811,1127,4.049,1128,2.981,1129,4.77,1130,2.981,1131,4.77,1132,3.512,1133,4.049,1134,2.981,1135,4.932,1136,4.932,1137,4.932,1138,4.932,1139,4.049,1140,2.981,1141,2.981,1142,4.77,1143,2.981,1144,4.77,1145,4.77,1146,2.981,1147,4.77,1148,3.512,1149,3.512,1150,2.981,1151,5.417,1152,6.076,1153,3.512,1154,4.77,1155,3.512,1156,3.512,1157,3.512,1158,2.631,1159,3.512,1160,3.512,1161,2.981,1162,2.981]],["title/injectables/ContactService.html",[177,0.446,452,1.293]],["body/injectables/ContactService.html",[3,0.164,4,0.143,8,0.143,13,0.661,15,0.479,25,0.122,26,0.598,29,0.533,33,0.883,47,0.883,48,0.025,49,0.682,50,0.355,51,0.636,52,0.628,54,0.711,60,0.815,61,0.992,64,0.982,65,2.356,71,0.893,74,0.343,75,0.143,85,0.29,86,0.164,87,0.561,88,1.058,104,0.876,110,1.447,140,0.865,143,0.013,144,0.013,155,0.533,158,1.924,161,1.093,166,2.399,172,0.562,175,0.96,177,0.65,178,1.932,179,0.704,182,0.894,184,1.024,191,1.258,194,1.296,195,2.607,198,2.219,209,3.167,214,1.426,215,1.199,216,2.552,218,1.339,222,1.543,225,1.217,226,1.587,244,2.144,254,1.065,255,1.767,257,1.35,258,2.996,261,3.411,270,1.35,272,1.74,274,1.255,275,1.35,276,0.902,277,0.76,285,1.35,286,0.903,288,1.171,296,1.35,323,2.005,334,2.167,345,2.459,362,2.552,367,0.939,368,2.293,379,2.167,391,1.66,411,1.74,412,2.189,413,2.44,414,3.323,415,1.74,416,1.74,417,1.459,418,1.17,419,2.584,420,0.847,421,2.585,422,2.356,423,1.587,424,1.587,425,1.587,426,2.189,427,2.584,428,2.584,429,1.35,430,1.74,431,1.74,432,2.779,433,0.96,434,1.74,435,1.587,436,2.869,437,2.167,438,1.932,439,1.587,440,1.977,441,1.35,442,1.932,443,2.189,444,1.459,445,2.189,446,1.326,447,1.521,448,2.869,449,2.356,450,3.25,451,1.863,452,1.426,453,2.869,454,3.25,455,3.876,456,3.082,457,3.25,458,3.876,459,3.25,460,3.422,461,3.25,462,2.459,463,3.876,464,1.863,465,3.422,466,3.25,467,3.25,468,3.787,469,3.25,470,2.869,471,3.25,472,4.583,473,3.25,474,3.25,475,3.25,476,3.25,477,3.25,478,3.25,479,3.25,480,3.25,481,3.25,482,3.25,483,3.25,484,3.25,485,3.25,486,3.25,487,3.25,488,3.25,489,3.25,490,3.25,491,3.25,492,3.25,493,3.25,494,3.25,495,3.25,496,3.25,497,2.459,498,2.107,499,4.29,500,1.587,501,3.876,502,3.276,503,3.605,504,3.25,505,2.189,506,3.25,507,2.007,508,4.29,509,2.189,510,3.876,511,3.25,512,2.167,513,1.587,514,2.189,515,2.189,516,1.587,517,1.587,518,2.189,519,1.587,520,2.005,521,3.111,522,1.863,523,2.005,524,3.25,525,2.356,526,2.189,527,3.25,528,1.587,529,1.587,530,2.356,531,2.869,532,2.356,533,4.802,534,1.863,535,3.25,536,2.189,537,1.587,538,2.189,539,2.167,540,4.29,541,2.869,542,2.356,543,2.356,544,1.624,545,1.521,546,3.25,547,2.584,548,3.25,549,2.356,550,3.25,551,3.25,552,2.189,553,2.189,554,2.189,555,1.624,556,3.25,557,2.869,558,2.869,559,2.189,560,4.29,561,2.189,562,2.459,563,4.29,564,3.25,565,2.753,566,3.25,567,3.25,568,2.189,569,2.869,570,4.29,571,2.189,572,2.189,573,1.426,574,3.25,575,2.189,576,2.189,577,3.25,578,2.584,579,1.737,580,3.25,581,3.25,582,3.25,583,3.876,584,3.25,585,3.25,586,2.189,587,2.189,588,2.189,589,2.189,590,2.189,591,2.189,608,2.869,609,2.869,652,1.932,656,1.932,658,2.584,782,3.25,1123,3.25,1163,3.829,1164,3.25,1165,3.829,1166,3.829,1167,3.829,1168,3.829,1169,2.189,1170,2.578,1171,2.578,1172,2.578,1173,2.578,1174,2.578,1175,2.578,1176,2.578,1177,2.189,1178,1.932,1179,2.578,1180,2.578,1181,2.578,1182,2.578,1183,2.578,1184,2.578,1185,1.74,1186,2.578,1187,2.189,1188,2.578,1189,2.578,1190,2.578,1191,2.578,1192,2.578,1193,2.578,1194,2.578,1195,2.578,1196,2.578,1197,2.578,1198,2.578,1199,2.578,1200,2.578]],["title/components/ContactsComponent.html",[0,0.164,116,0.836]],["body/components/ContactsComponent.html",[0,0.301,1,0.713,2,1.02,3,0.188,4,0.164,5,0.808,6,0.808,7,0.808,8,0.164,10,0.808,11,1.67,12,1.778,14,2.217,15,1.001,16,1.086,18,0.713,19,0.713,20,1.728,21,1.086,23,1.229,25,0.14,26,0.501,29,0.412,33,0.873,35,2.217,38,1.102,41,3.593,44,1.577,47,0.794,48,0.025,49,0.605,50,0.346,51,0.565,52,0.565,54,0.786,60,0.794,61,0.921,63,2.825,64,1.603,69,0.669,71,0.734,74,0.397,75,0.164,80,0.972,85,0.188,86,0.188,87,0.512,91,2.147,97,0.808,98,1.155,99,1.086,100,0.808,101,1.472,102,0.808,103,0.549,104,0.513,105,1.155,106,0.808,107,0.627,108,0.808,109,1.299,110,1.416,111,0.808,112,1.299,113,0.808,114,1.299,115,0.808,116,1.299,117,0.808,118,0.713,119,0.808,120,1.155,121,0.713,122,0.808,123,0.713,124,0.808,125,0.808,126,0.713,127,0.808,128,0.713,129,0.713,130,0.808,131,0.808,132,0.808,133,0.713,134,0.808,135,0.669,136,0.808,137,0.713,138,0.713,139,0.321,140,0.669,141,0.759,142,0.808,143,0.014,144,0.014,155,0.589,168,4.042,172,0.514,176,1.533,194,1.522,215,0.897,219,3.042,225,1.02,247,2.06,249,2.288,254,0.935,255,1.48,258,2.773,276,1.035,348,1.886,362,1.681,365,2.288,367,1.019,368,1.921,377,3.172,417,1.675,420,1.624,432,2.738,446,1.566,452,2.277,460,3.703,498,1.577,521,2.605,522,2.625,557,3.172,562,2.625,569,3.703,579,1.921,593,2.217,611,2.288,612,4.579,626,1.997,637,3.32,643,2.857,644,4.042,649,3.655,661,4.042,667,1.55,686,1.821,692,2.06,694,1.55,695,3.201,696,2.242,697,1.55,698,1.343,701,1.44,706,3.654,707,3.172,708,2.889,710,2.447,711,2.217,712,1.155,714,2.217,729,3.201,743,1.343,771,2.217,793,3.172,796,3.593,800,4.219,801,3.513,810,2.605,812,2.217,838,1.035,879,2.217,970,3.172,996,3.848,998,3.64,1003,2.857,1070,3.655,1071,1.821,1201,2.512,1202,4.233,1203,4.233,1204,4.195,1205,4.195,1206,4.942,1207,4.942,1208,4.942,1209,4.233,1210,5.394,1211,5.394,1212,3.593,1213,3.593,1214,3.593,1215,4.942,1216,4.233,1217,5.394,1218,4.233,1219,4.233,1220,4.156,1221,4.684,1222,2.959,1223,2.396,1224,2.396,1225,4.233,1226,2.959,1227,2.396,1228,4.455,1229,4.233,1230,2.959,1231,3.593,1232,6.113,1233,2.959,1234,2.959,1235,3.64,1236,2.857,1237,3.593,1238,4.579,1239,2.959,1240,3.593,1241,2.605,1242,3.593,1243,4.233,1244,4.233,1245,3.593,1246,2.959,1247,4.233,1248,3.172,1249,2.605,1250,3.593,1251,2.959,1252,2.959,1253,2.959,1254,1.997,1255,2.959,1256,2.959,1257,4.233,1258,4.233,1259,3.593,1260,3.593,1261,4.233,1262,2.959,1263,3.654,1264,4.233,1265,2.959,1266,2.396,1267,2.959,1268,2.959,1269,2.959,1270,2.959,1271,2.959,1272,4.233,1273,5.394,1274,2.959,1275,4.233,1276,2.959,1277,2.959,1278,2.959,1279,2.959,1280,4.233,1281,2.959,1282,2.512,1283,2.959,1284,2.959,1285,2.512,1286,2.959,1287,2.959,1288,2.959,1289,3.593,1290,4.233,1291,4.233,1292,4.233]],["title/injectables/DragDropManager.html",[177,0.446,1293,2.601]],["body/injectables/DragDropManager.html",[3,0.245,4,0.213,8,0.213,13,0.988,25,0.182,29,0.536,33,0.806,38,0.715,47,0.839,48,0.025,49,0.597,50,0.334,51,0.597,52,0.597,54,0.715,71,0.775,74,0.361,75,0.213,85,0.245,86,0.245,87,0.455,91,2.115,99,1.301,107,1.076,139,0.776,143,0.017,144,0.017,149,4.308,155,0.706,164,2.252,165,1.748,172,0.53,177,0.652,179,1.051,182,0.789,184,1.53,186,2.47,191,1.982,218,1.347,225,0.928,254,0.668,286,1.011,288,0.988,344,1.748,348,2.192,350,2.015,351,2.152,367,1.021,413,1.435,420,1.667,441,3.159,497,2.47,532,3.493,547,2.6,549,3.493,579,2.302,627,4.519,647,2.887,669,1.266,686,2.371,729,2.658,745,1.435,820,1.875,830,2.6,838,1.347,868,2.015,951,2.181,991,3.802,993,3.802,996,3.123,1032,3.802,1059,3.802,1140,3.27,1150,3.27,1235,3.425,1236,3.425,1242,4.308,1293,4.519,1294,5.463,1295,5.917,1296,6.737,1297,6.032,1298,4.308,1299,6.032,1300,5.075,1301,5.075,1302,2.371,1303,2.397,1304,3.853,1305,3.425,1306,5.675,1307,3.853,1308,3.853,1309,2.887,1310,2.872,1311,3.27,1312,4.308,1313,3.27,1314,2.887,1315,5.12,1316,5.075,1317,3.425,1318,5.075,1319,5.075,1320,4.308,1321,5.075,1322,5.075,1323,6.436,1324,6.032,1325,5.075,1326,4.308,1327,5.075,1328,5.075,1329,6.032,1330,4.822,1331,3.853,1332,6.032,1333,6.032,1334,3.853,1335,3.853,1336,3.853,1337,2.6,1338,3.853,1339,3.802,1340,3.853,1341,5.075,1342,5.075,1343,3.853,1344,2.017,1345,3.853,1346,6.562,1347,3.853,1348,6.032,1349,3.853,1350,3.853,1351,1.875,1352,3.853,1353,2.181,1354,3.853,1355,2.181,1356,3.853,1357,3.853,1358,5.075,1359,5.075,1360,5.075,1361,3.853,1362,3.27,1363,4.308,1364,3.425,1365,3.853,1366,3.853,1367,5.075,1368,3.853,1369,3.853,1370,3.853,1371,3.27,1372,3.853,1373,3.853,1374,3.853,1375,3.853,1376,3.853,1377,3.853,1378,3.853]],["title/interfaces/FirestoreTimestamp.html",[277,0.689,1379,2.343]],["body/interfaces/FirestoreTimestamp.html",[0,0.241,3,0.246,4,0.214,8,0.214,11,0.933,12,0.993,15,1.122,16,0.993,20,1.781,21,0.993,23,1.124,25,0.183,29,0.539,32,2.26,33,0.498,38,0.719,48,0.025,67,2.028,71,0.845,74,0.41,75,0.214,77,0.933,80,1.272,85,0.246,86,0.246,87,0.51,88,1.061,92,1.885,135,0.875,139,0.681,143,0.017,144,0.017,155,0.708,158,1.869,161,1.642,164,2.063,172,0.53,176,1.37,180,2.028,182,0.841,194,0.993,222,1.61,238,1.443,249,1.642,254,0.986,277,0.769,282,2.401,286,0.942,288,0.993,341,1.885,420,2.237,440,1.869,441,2.028,444,3.22,446,1.935,595,2.667,604,2.614,667,2.028,669,1.272,692,1.885,694,2.028,695,2.979,696,1.757,697,2.028,698,1.757,708,2.478,710,1.757,712,1.057,731,2.902,743,2.31,868,2.678,902,2.31,941,2.028,975,2.614,1303,2.119,1305,2.614,1344,2.028,1351,1.885,1353,2.192,1355,2.882,1379,4.35,1380,2.902,1381,5.13,1382,3.873,1383,2.614,1384,3.287,1385,3.287,1386,3.287,1387,2.614,1388,2.902,1389,2.614,1390,4.263,1391,3.287,1392,2.902,1393,3.287,1394,3.287,1395,3.22,1396,3.287,1397,3.287,1398,3.287,1399,4.83,1400,3.287,1401,3.287,1402,3.287,1403,3.287,1404,3.287,1405,3.287,1406,3.287,1407,3.287,1408,4.323,1409,3.287,1410,5.13,1411,3.287,1412,3.287,1413,4.323,1414,3.287,1415,3.287,1416,4.323,1417,4.323,1418,4.323,1419,4.323,1420,3.287,1421,2.028,1422,3.287,1423,3.287,1424,3.287,1425,5.33,1426,3.287,1427,2.384,1428,3.287,1429,3.287,1430,3.287,1431,3.287,1432,3.287,1433,3.287,1434,3.287,1435,3.287,1436,3.287,1437,4.323,1438,3.287,1439,4.83,1440,4.323,1441,3.287,1442,2.902,1443,3.287,1444,2.902,1445,2.902,1446,4.83,1447,3.287,1448,3.815,1449,3.287,1450,4.323,1451,5.33,1452,3.287,1453,5.33,1454,3.287,1455,3.287,1456,3.287,1457,4.323,1458,4.323,1459,3.287,1460,3.287,1461,3.287,1462,3.287,1463,4.323,1464,3.287,1465,4.323,1466,4.323,1467,3.287,1468,3.287,1469,3.287,1470,3.287]],["title/components/FooterComponent.html",[0,0.164,118,0.836]],["body/components/FooterComponent.html",[0,0.3,1,1.182,2,1.424,3,0.312,4,0.271,5,1.339,6,1.339,7,1.339,8,0.271,10,1.339,11,1.747,12,1.86,16,1.516,18,1.182,19,1.182,21,1.516,23,1.716,48,0.024,49,0.585,69,1.109,74,0.376,75,0.271,77,1.182,85,0.312,86,0.312,97,1.339,98,1.613,99,1.516,100,1.339,101,1.797,102,1.339,103,0.911,104,0.85,105,1.613,106,1.339,107,1.04,108,1.339,109,1.182,110,1.259,111,1.339,112,1.182,113,1.339,114,1.182,115,1.339,116,1.182,117,1.339,118,1.586,119,1.339,120,1.613,121,1.182,122,1.339,123,1.182,124,1.731,125,1.339,126,1.182,127,1.339,128,1.182,129,1.182,130,1.731,131,1.339,132,1.339,133,1.182,134,1.339,135,1.109,136,1.339,137,1.182,138,1.182,139,0.532,140,1.109,141,1.258,142,1.339,143,0.02,144,0.02,1471,3.019,1472,4.164,1473,5.91,1474,2.878,1475,5.91,1476,5.91,1477,3.638,1478,3.638]],["title/components/HeaderComponent.html",[0,0.164,19,0.836]],["body/components/HeaderComponent.html",[0,0.275,1,0.846,2,1.149,3,0.223,4,0.194,5,0.958,6,1.302,7,0.958,8,0.194,10,0.958,11,1.7,12,1.81,14,2.498,15,1.079,16,1.223,18,0.846,19,1.4,20,1.894,21,1.223,23,1.385,25,0.166,26,0.564,29,0.488,33,0.874,38,0.885,42,3.655,44,1.308,47,0.872,48,0.025,49,0.673,50,0.336,51,0.62,52,0.62,54,1.006,60,0.808,61,0.77,64,1.49,69,0.794,71,0.747,74,0.386,75,0.194,77,0.846,80,1.154,85,0.223,86,0.223,91,2.307,97,0.958,98,1.302,99,1.389,100,0.958,101,1.586,102,0.958,103,0.652,104,0.609,105,1.302,106,0.958,107,0.744,108,0.958,109,0.846,110,1.075,111,0.958,112,0.846,113,0.958,114,0.846,115,0.958,116,0.846,117,0.958,118,0.846,119,0.958,120,1.302,121,0.846,122,0.958,123,0.846,124,1.478,125,0.958,126,0.846,127,0.958,128,0.846,129,0.846,130,1.478,131,0.958,132,0.958,133,0.846,134,0.958,135,0.794,136,0.958,137,0.846,138,0.846,139,0.381,140,0.794,141,0.9,142,0.958,143,0.016,144,0.016,153,1.673,154,3.289,155,0.664,157,2.631,158,1.909,163,2.837,166,1.489,172,0.549,173,1.011,174,2.498,175,1.777,176,1.463,181,2.631,182,0.664,188,4.058,191,1.567,198,1.668,203,3.921,215,1.328,216,1.489,226,2.936,238,1.777,244,2.308,249,2.464,254,0.827,255,2.032,286,0.527,288,0.9,346,2.498,354,2.936,367,0.813,368,1.593,375,1.709,378,2.636,391,1.154,417,2.7,446,1.385,497,1.709,502,2.498,604,3.921,605,4.598,614,3.574,616,4.049,621,3.574,622,3.574,623,4.049,627,3.574,631,3.574,632,2.631,636,3.921,637,3.74,638,4.463,639,3.576,640,3.289,641,2.981,643,3.921,644,4.354,649,2.7,667,1.839,671,2.631,672,4.058,673,2.631,676,2.981,677,2.981,686,2.161,694,1.839,695,3.043,696,1.593,697,2.837,698,1.593,700,2.631,705,2.981,706,3.334,707,3.574,708,2.636,710,2.164,711,2.631,712,0.958,714,2.631,715,4.049,716,2.981,726,2.981,729,3.043,812,1.839,941,1.839,953,2.981,955,2.981,956,2.981,1003,2.37,1249,2.936,1260,4.049,1474,2.458,1477,2.936,1478,2.936,1479,2.981,1480,4.049,1481,4.049,1482,4.77,1483,5.811,1484,4.77,1485,4.77,1486,2.161,1487,2.161,1488,4.598,1489,4.77,1490,3.574,1491,5.157,1492,4.77,1493,4.049,1494,4.77,1495,3.574,1496,4.77,1497,3.512,1498,4.77,1499,3.512,1500,3.512,1501,2.981,1502,3.512,1503,2.37,1504,2.631,1505,3.512,1506,3.512,1507,3.512,1508,2.631,1509,2.981,1510,3.512,1511,2.37,1512,3.512,1513,2.936,1514,4.77,1515,4.77,1516,3.512,1517,4.049,1518,3.512,1519,3.512,1520,3.512,1521,3.512,1522,3.512,1523,3.574,1524,2.936,1525,4.049,1526,4.77,1527,3.574,1528,3.219]],["title/components/HelpComponent.html",[0,0.164,121,0.836]],["body/components/HelpComponent.html",[0,0.246,1,0.784,2,1.09,3,0.207,4,0.18,5,0.888,6,0.888,7,0.888,8,0.18,10,0.888,11,1.687,12,1.796,16,1.161,18,0.784,19,0.784,21,1.161,23,1.314,25,0.154,29,0.453,30,2.196,31,3.206,33,0.582,38,0.84,39,2.562,40,3.843,47,0.453,48,0.024,49,0.585,50,0.18,51,0.322,52,0.515,53,3.513,54,0.84,56,2.562,60,0.783,67,2.371,69,0.736,72,3.186,74,0.331,75,0.18,77,0.784,81,2.196,82,2.196,85,0.207,86,0.207,87,0.292,97,0.888,98,1.235,99,1.161,100,0.888,101,1.536,102,0.888,103,0.604,104,0.902,105,1.235,106,0.888,107,0.69,108,0.888,109,0.784,110,1.321,111,0.888,112,0.784,113,0.888,114,0.784,115,0.888,116,0.784,117,0.888,118,0.784,119,0.888,120,1.235,121,1.475,122,0.888,123,0.784,124,0.888,125,0.888,126,0.784,127,0.888,128,0.784,129,0.784,130,0.888,131,0.888,132,0.888,133,0.784,134,0.888,135,0.736,136,0.888,137,0.784,138,0.784,139,0.706,140,1.177,141,0.835,142,0.888,143,0.015,144,0.015,153,1.09,155,0.63,166,1.92,171,2.371,172,0.263,174,2.371,189,3.055,191,1.487,192,3.797,194,1.161,212,2.562,254,1.061,277,0.899,282,1.686,288,1.161,295,2.562,319,3.354,329,2.371,354,3.463,367,0.679,418,2.054,434,3.055,470,3.392,498,2.454,522,2.738,573,1.686,578,3.797,579,2.054,635,3.843,637,2.786,638,3.055,640,3.185,669,2.104,693,3.206,712,1.235,760,3.392,764,2.371,792,2.371,819,2.786,820,3.117,824,2.562,838,1.138,868,2.616,876,3.843,896,2.562,907,2.203,1003,3.797,1093,3.843,1158,3.392,1185,3.797,1227,3.185,1241,2.786,1254,3.055,1311,4.776,1317,3.055,1326,3.843,1330,3.392,1339,3.392,1351,2.738,1353,2.562,1355,3.185,1395,2.562,1427,2.786,1448,3.392,1474,2.362,1523,4.799,1524,3.942,1525,4.776,1527,4.935,1528,4.132,1529,2.763,1530,4.527,1531,4.527,1532,4.216,1533,3.255,1534,3.392,1535,3.843,1536,3.255,1537,2.203,1538,2.786,1539,2.438,1540,3.843,1541,4.527,1542,5.627,1543,2.763,1544,3.392,1545,3.055,1546,4.527,1547,5.627,1548,4.527,1549,4.527,1550,3.843,1551,3.843,1552,3.392,1553,3.392,1554,3.843,1555,3.843,1556,3.843,1557,4.527,1558,3.843,1559,3.843,1560,4.527,1561,4.527,1562,4.527,1563,3.843,1564,4.527,1565,5.627,1566,3.843,1567,4.527,1568,4.527,1569,4.527,1570,4.527,1571,4.527,1572,3.843,1573,5.627,1574,4.527,1575,3.843,1576,3.843,1577,5.627,1578,3.843,1579,3.843,1580,3.392,1581,3.392,1582,3.843,1583,4.216,1584,4.527,1585,3.843,1586,4.527,1587,3.392,1588,3.843,1589,3.843,1590,3.843,1591,4.527,1592,3.843,1593,3.843,1594,4.527,1595,4.682,1596,3.843,1597,4.527,1598,4.527,1599,3.255,1600,3.055,1601,4.527,1602,3.392,1603,4.527,1604,3.843,1605,5.627,1606,5.627,1607,3.843,1608,3.392,1609,4.527,1610,3.843,1611,2.738,1612,6.715,1613,3.255,1614,4.527,1615,3.843,1616,3.843,1617,4.527,1618,6.405,1619,3.055,1620,4.527,1621,3.392,1622,3.392,1623,4.527,1624,4.527,1625,4.527,1626,4.776,1627,4.527,1628,4.527,1629,3.843,1630,3.392,1631,3.843,1632,4.527,1633,4.527,1634,4.527,1635,4.527,1636,3.843,1637,4.527,1638,4.527,1639,3.843,1640,4.527,1641,4.527,1642,3.843,1643,3.843,1644,4.527,1645,4.527,1646,2.438,1647,3.392,1648,3.255,1649,4.527,1650,2.763,1651,3.255,1652,3.255,1653,2.438,1654,3.255]],["title/components/LegalNoticeComponent.html",[0,0.164,123,0.836]],["body/components/LegalNoticeComponent.html",[0,0.25,1,0.805,2,1.11,3,0.212,4,0.185,5,0.912,6,0.912,7,0.912,8,0.185,10,0.912,11,1.692,12,1.801,16,1.182,18,0.805,19,0.805,21,1.182,23,1.338,25,0.158,29,0.465,30,2.255,31,3.233,33,0.593,39,2.61,47,0.465,48,0.024,49,0.522,50,0.185,51,0.331,52,0.331,53,3.562,54,0.856,56,2.61,64,1.182,69,0.755,72,3.178,74,0.335,75,0.185,77,0.805,81,2.255,82,2.255,85,0.212,86,0.212,87,0.3,91,1.515,97,0.912,98,1.258,99,1.182,100,0.912,101,1.553,102,0.912,103,0.62,104,0.579,105,1.258,106,0.912,107,0.708,108,0.912,109,0.805,110,1.048,111,0.912,112,0.805,113,0.912,114,0.805,115,0.912,116,0.805,117,0.912,118,0.805,119,0.912,120,1.258,121,0.805,122,0.912,123,1.487,124,1.854,125,0.912,126,0.805,127,0.912,128,0.805,129,0.805,130,0.912,131,0.912,132,0.912,133,0.805,134,0.912,135,0.755,136,0.912,137,0.805,138,0.805,139,0.362,140,0.755,141,0.857,142,0.912,143,0.016,144,0.016,155,0.641,166,2.413,172,0.27,212,2.61,225,1.11,249,2.413,282,1.717,295,2.61,319,3.532,337,3.454,367,0.692,532,2.838,544,2.734,578,3.111,764,2.414,805,4.831,819,2.838,820,2.769,821,3.454,824,2.61,838,1.169,1070,2.61,1227,3.221,1309,3.454,1421,3.376,1474,2.395,1478,3.968,1487,2.838,1524,2.838,1532,4.264,1534,3.454,1535,3.914,1537,2.244,1538,2.838,1539,2.504,1550,5.472,1551,3.914,1552,3.454,1553,3.454,1554,3.914,1555,5.621,1556,5.621,1576,3.914,1578,4.831,1579,3.914,1580,3.454,1581,3.454,1587,3.454,1588,3.914,1589,3.914,1590,3.914,1592,3.914,1593,3.914,1608,3.454,1626,3.914,1646,2.504,1647,3.454,1653,2.504,1655,4.481,1656,4.481,1657,2.836,1658,4.611,1659,4.611,1660,3.342,1661,3.342,1662,4.611,1663,4.611,1664,4.611,1665,4.611,1666,4.611,1667,3.914,1668,4.611,1669,4.611,1670,4.611,1671,4.611,1672,4.611,1673,4.611,1674,4.611,1675,4.611,1676,4.611,1677,3.914,1678,5.24,1679,3.914,1680,6.447,1681,4.611,1682,4.831,1683,3.454,1684,4.831,1685,3.914,1686,4.611,1687,4.611,1688,4.611,1689,4.611,1690,6.447,1691,4.611,1692,4.611,1693,4.611,1694,4.611,1695,6.173,1696,5.691,1697,3.342,1698,4.264,1699,4.611,1700,6.173,1701,5.691,1702,4.611,1703,4.611,1704,4.611,1705,4.611,1706,4.611,1707,5.691,1708,5.691,1709,6.173,1710,4.611,1711,3.914,1712,3.914,1713,3.454,1714,4.611,1715,4.611,1716,4.611,1717,4.611,1718,3.914,1719,3.914,1720,4.611,1721,4.611,1722,4.611,1723,4.611,1724,4.611,1725,4.611,1726,4.611,1727,4.611,1728,3.914,1729,4.611,1730,4.611,1731,3.914,1732,5.691,1733,4.611,1734,5.691,1735,3.914,1736,4.611,1737,4.611,1738,4.611,1739,5.691,1740,5.691,1741,4.611,1742,4.611,1743,4.611,1744,4.611,1745,4.611,1746,4.611,1747,4.611,1748,4.611,1749,4.611,1750,3.914,1751,4.611,1752,4.611,1753,6.173,1754,5.691,1755,4.611,1756,4.611,1757,4.611,1758,4.611,1759,4.611,1760,4.611,1761,4.611,1762,5.691,1763,3.914,1764,4.611,1765,4.611,1766,4.611,1767,4.611,1768,4.611,1769,3.914,1770,3.914,1771,4.611,1772,4.611,1773,4.611,1774,4.611,1775,3.914,1776,4.611,1777,4.611,1778,4.611,1779,4.611,1780,4.611,1781,4.611,1782,3.914,1783,4.611,1784,4.611,1785,3.914,1786,3.914,1787,3.914]],["title/components/LoginComponent.html",[0,0.164,126,0.836]],["body/components/LoginComponent.html",[0,0.264,1,0.672,2,0.977,3,0.177,4,0.154,5,0.761,6,0.761,7,0.761,8,0.154,10,0.761,11,1.659,12,1.766,14,2.124,15,1.08,16,1.04,18,0.672,19,0.672,20,1.672,21,1.04,23,1.178,25,0.132,26,0.48,29,0.564,32,2.531,33,0.865,38,0.753,44,2.167,45,1.72,47,0.564,48,0.025,49,0.576,50,0.332,51,0.401,52,0.401,54,0.753,60,0.809,61,0.939,64,1.578,69,1.562,71,0.806,72,1.84,74,0.391,75,0.154,77,0.672,80,0.916,85,0.177,86,0.177,87,0.471,88,1.054,97,0.761,98,1.107,99,1.04,100,0.761,101,1.432,102,0.761,103,0.518,104,0.483,105,1.107,106,0.761,107,0.591,108,0.761,109,0.672,110,0.949,111,0.761,112,0.672,113,0.761,114,0.672,115,0.761,116,0.672,117,0.761,118,1.264,119,0.761,120,1.107,121,0.672,122,0.761,123,0.672,124,0.761,125,0.761,126,1.401,127,0.761,128,1.264,129,0.672,130,0.761,131,0.761,132,0.761,133,0.672,134,0.761,135,0.63,136,0.761,137,0.672,138,0.672,139,0.303,140,0.63,141,0.715,142,0.761,143,0.014,144,0.014,153,1.482,155,0.564,158,2.094,162,2.296,163,2.748,166,1.72,171,2.748,172,0.521,173,1.112,176,1.555,182,0.809,186,1.974,189,3.763,194,1.43,198,2.035,212,2.296,215,0.86,216,2.226,217,2.737,218,1.835,219,3.581,236,3.039,238,1.511,241,4.3,244,2.385,249,1.183,256,1.72,257,1.461,286,0.788,288,1.04,318,2.737,329,1.461,333,2.496,334,2.296,338,2.737,348,1.418,367,0.956,382,1.611,392,1.84,429,1.461,432,2.817,433,1.511,437,2.971,439,3.23,446,1.178,449,3.23,539,2.296,542,2.496,562,2.554,610,3.542,611,2.226,643,1.882,662,3.443,667,1.461,679,3.927,692,1.974,694,1.461,695,2.503,696,1.265,697,1.461,698,1.265,708,1.974,710,1.265,712,0.761,743,1.265,745,1.039,773,3.581,788,4.359,792,2.124,810,2.496,812,2.124,820,2.554,822,3.581,824,2.706,836,3.581,841,3.039,842,2.09,896,2.706,897,2.296,902,1.84,907,1.974,922,4.774,941,1.461,1031,3.039,1220,4.017,1223,2.971,1224,2.971,1231,4.455,1266,2.296,1351,1.974,1383,2.737,1387,1.882,1388,2.09,1389,1.882,1390,4.499,1392,2.09,1395,3.293,1471,4.167,1474,2.169,1486,2.496,1490,3.039,1495,3.039,1501,3.443,1503,2.737,1504,3.039,1509,3.443,1513,3.23,1528,3.927,1537,1.974,1788,2.367,1789,4.056,1790,4.056,1791,4.733,1792,5.097,1793,4.057,1794,4.78,1795,4.057,1796,4.78,1797,4.057,1798,5.248,1799,3.443,1800,4.455,1801,5.248,1802,5.248,1803,5.248,1804,2.789,1805,4.056,1806,4.78,1807,2.789,1808,4.939,1809,4.056,1810,3.443,1811,2.789,1812,3.443,1813,4.733,1814,4.056,1815,2.789,1816,4.056,1817,4.359,1818,4.056,1819,2.789,1820,2.789,1821,2.789,1822,4.056,1823,3.039,1824,2.789,1825,4.939,1826,2.789,1827,4.056,1828,4.056,1829,4.056,1830,5.248,1831,2.789,1832,2.789,1833,3.443,1834,2.789,1835,2.789,1836,2.737,1837,2.789,1838,3.443,1839,2.789,1840,2.367,1841,2.09,1842,2.789,1843,2.789,1844,2.367,1845,2.789,1846,2.789,1847,2.367,1848,2.789,1849,2.789,1850,2.789,1851,2.789,1852,2.789,1853,2.789,1854,2.789,1855,2.789,1856,3.443,1857,2.789,1858,2.789,1859,2.789,1860,4.733,1861,4.455,1862,2.789,1863,3.443,1864,2.789,1865,3.443,1866,3.443,1867,3.443,1868,2.789,1869,2.789,1870,2.367,1871,2.367,1872,2.367,1873,2.367,1874,1.882,1875,2.09,1876,2.367,1877,2.367,1878,2.367,1879,2.367,1880,2.367,1881,2.367,1882,3.039,1883,2.367,1884,2.367]],["title/components/LoginHeaderComponent.html",[0,0.164,128,0.836]],["body/components/LoginHeaderComponent.html",[0,0.302,1,0.977,2,1.264,3,0.258,4,0.224,5,1.107,6,1.107,7,1.107,8,0.224,10,1.107,11,1.722,12,1.833,15,0.753,16,1.346,18,0.977,19,0.977,21,1.346,23,1.524,25,0.192,26,0.621,33,0.791,38,1.142,42,3.543,44,1.955,48,0.025,49,0.519,50,0.29,60,0.73,61,0.848,64,1.346,66,3.231,69,1.502,72,2.382,74,0.37,75,0.224,77,0.977,85,0.258,86,0.258,97,1.107,98,1.433,99,1.346,100,1.107,101,1.679,102,1.107,103,0.753,104,0.703,105,1.433,106,1.107,107,0.86,108,1.107,109,0.977,110,1.155,111,1.107,112,0.977,113,1.107,114,0.977,115,1.107,116,0.977,117,1.107,118,0.977,119,1.107,120,1.433,121,0.977,122,1.107,123,0.977,124,1.107,125,1.107,126,0.977,127,1.107,128,1.482,129,0.977,130,1.107,131,1.107,132,1.107,133,0.977,134,1.107,135,0.917,136,1.107,137,0.977,138,0.977,139,0.44,140,0.917,141,1.041,142,1.107,143,0.018,144,0.018,153,1.264,155,0.73,172,0.424,173,1.113,176,1.264,194,1.745,215,1.113,249,1.721,256,2.226,318,3.543,367,0.923,433,1.955,446,1.689,562,2.555,595,2.125,611,2.61,667,2.125,679,3.543,694,2.125,695,3.047,696,1.841,697,2.125,698,1.841,708,3.177,710,1.841,712,1.588,743,1.841,745,1.511,810,3.231,812,2.749,1220,4.144,1223,2.971,1224,2.971,1263,3.231,1387,2.738,1389,2.738,1395,3.695,1471,3.922,1474,2.64,1480,4.456,1481,4.456,1495,3.933,1503,3.543,1513,3.231,1793,4.94,1795,4.94,1800,5.223,1808,4.456,1817,4.61,1833,4.456,1841,4.775,1844,3.444,1847,3.444,1856,4.456,1882,3.933,1885,5.409,1886,3.444,1887,4.058,1888,5.25,1889,5.25,1890,5.25,1891,4.456,1892,5.25,1893,5.25,1894,4.058,1895,3.231,1896,4.058,1897,4.456,1898,5.25,1899,5.25,1900,5.25,1901,5.639,1902,4.058,1903,4.058,1904,4.058,1905,4.058,1906,4.058,1907,4.058]],["title/injectables/NavigationHistoryService.html",[31,1.818,177,0.446]],["body/injectables/NavigationHistoryService.html",[3,0.264,4,0.23,8,0.23,13,1.508,25,0.196,26,0.63,29,0.577,31,2.789,32,2.754,33,0.825,35,2.789,36,4.649,38,1.219,45,2.921,47,0.577,48,0.025,49,0.41,50,0.295,51,0.41,52,0.527,54,0.989,56,3.867,60,0.577,61,0.67,71,0.844,73,3.278,74,0.374,75,0.23,76,4.992,77,0.999,83,2.8,84,3.109,85,0.264,86,0.264,87,0.372,88,0.95,89,3.522,91,1.363,92,2.019,93,3.522,143,0.018,144,0.018,155,0.741,165,2.979,166,2.259,172,0.539,177,0.685,179,1.132,182,0.818,184,1.648,195,2.897,221,2.259,222,1.646,256,2.259,278,2.789,286,0.623,367,0.799,372,4.188,507,2.464,544,2.632,712,1.132,815,3.99,838,1.451,1088,3.278,1185,4.432,1227,3.512,1254,4.611,1517,4.521,1537,3.02,1538,4.163,1566,4.521,1602,3.109,1610,4.521,1636,3.522,1836,3.594,1908,5.574,1909,3.522,1910,4.521,1911,5.326,1912,5.741,1913,5.847,1914,6.764,1915,5.326,1916,6.934,1917,6.206,1918,6.206,1919,6.206,1920,3.522,1921,5.326,1922,5.326,1923,5.326,1924,5.882,1925,5.326,1926,5.326,1927,4.15,1928,5.326,1929,5.326,1930,4.15,1931,4.15,1932,5.326,1933,5.326,1934,5.326,1935,4.15,1936,5.326,1937,4.15,1938,4.15,1939,4.15,1940,4.15,1941,5.326,1942,4.15,1943,4.15,1944,3.522]],["title/injectables/OverlayManager.html",[177,0.446,1945,2.601]],["body/injectables/OverlayManager.html",[3,0.218,4,0.19,8,0.19,13,0.881,15,0.638,25,0.163,26,0.556,29,0.654,32,2.473,33,0.903,38,1.069,39,2.661,47,0.887,48,0.025,49,0.631,50,0.375,51,0.651,52,0.631,60,0.866,61,0.974,71,0.871,74,0.366,75,0.19,77,0.828,85,0.218,86,0.218,87,0.48,88,1.134,91,2.046,107,0.996,139,0.764,140,1.302,143,0.016,144,0.016,155,0.654,164,2.046,165,1.56,166,1.994,172,0.551,173,1.411,175,1.751,176,1.563,177,0.604,179,0.938,182,0.866,184,1.365,186,2.288,194,1.688,215,0.996,221,2.874,225,0.828,255,1.202,286,0.516,344,1.56,348,1.873,349,2.462,350,1.867,351,1.994,362,2.128,365,1.994,367,0.988,368,2.945,378,1.673,391,1.129,392,2.133,397,2.918,409,2.575,410,2.32,420,1.76,432,2.272,440,1.129,447,1.867,451,2.607,453,2.575,464,1.673,522,1.673,545,1.867,562,1.673,565,2.288,579,2.133,639,2.893,675,4.07,686,2.116,692,1.673,698,1.56,729,3.338,800,4.632,801,2.893,912,2.575,996,3.545,998,4.07,1070,3.524,1071,2.116,1130,2.918,1204,4.547,1205,4.547,1212,3.99,1213,3.99,1214,3.99,1220,3.923,1221,4.315,1228,2.32,1235,3.887,1236,3.172,1237,2.918,1238,4.889,1240,4.547,1245,2.918,1248,4.014,1249,2.116,1250,3.99,1263,2.116,1285,3.99,1289,3.99,1303,2.374,1312,2.918,1315,2.918,1317,3.172,1320,3.99,1344,1.8,1513,2.116,1537,2.288,1611,2.288,1836,2.32,1838,2.918,1920,2.918,1945,4.315,1946,5.978,1947,4.701,1948,5.76,1949,5.357,1950,5.76,1951,3.99,1952,5.357,1953,4.315,1954,5.357,1955,5.357,1956,4.701,1957,5.76,1958,5.76,1959,5.76,1960,5.76,1961,5.76,1962,5.76,1963,4.701,1964,4.701,1965,5.357,1966,3.522,1967,3.438,1968,3.438,1969,2.918,1970,2.575,1971,3.438,1972,3.438,1973,2.918,1974,3.438,1975,3.438,1976,5.76,1977,3.438,1978,3.438,1979,3.438,1980,3.438,1981,3.438,1982,4.701,1983,4.701,1984,3.99,1985,4.701,1986,3.438,1987,3.438,1988,3.438,1989,4.701,1990,3.438,1991,3.438,1992,3.438,1993,3.438,1994,2.918,1995,2.918,1996,3.438,1997,3.438,1998,3.438,1999,3.438,2000,2.918,2001,3.438]],["title/components/PrivacyPolicyComponent.html",[0,0.164,129,0.836]],["body/components/PrivacyPolicyComponent.html",[0,0.193,1,0.517,2,0.802,3,0.259,4,0.119,5,0.586,6,0.586,7,0.586,8,0.119,10,1.114,11,1.602,12,1.735,16,0.854,18,0.517,19,0.517,21,0.854,23,0.967,25,0.102,29,0.298,30,1.448,31,2.759,33,0.591,36,3.948,39,2.603,45,1.412,46,3.556,47,0.298,48,0.024,49,0.493,50,0.304,51,0.212,52,0.212,53,2.754,54,1.303,55,2.247,56,2.603,59,2.759,63,1.744,64,0.854,69,0.923,72,2.706,73,3.243,74,0.259,75,0.119,77,0.517,81,1.448,82,1.448,85,0.136,86,0.136,87,0.192,97,0.586,98,0.909,99,0.854,100,0.586,101,1.255,102,0.586,103,0.398,104,0.372,105,0.909,106,0.586,107,0.455,108,0.586,109,0.517,110,1.267,111,0.586,112,0.517,113,0.586,114,0.517,115,0.586,116,0.517,117,0.586,118,0.517,119,0.586,120,0.909,121,0.517,122,0.586,123,0.517,124,1.657,125,0.586,126,0.517,127,0.586,128,0.517,129,1.269,130,1.859,131,0.586,132,0.586,133,0.517,134,0.586,135,0.485,136,0.586,137,0.517,138,0.517,139,0.54,140,1.319,141,0.55,142,0.586,143,0.011,144,0.011,150,3.556,151,2.827,152,2.827,153,1.108,155,0.733,163,2.409,166,1.951,171,1.744,172,0.173,187,2.247,191,1.094,192,4.025,193,3.446,195,1.412,209,2.087,211,3.835,212,1.885,225,1.728,235,2.05,244,2.449,247,2.238,257,2.976,278,2.409,282,1.713,295,2.982,319,3.373,327,2.495,329,3.229,333,2.05,336,3.446,349,2.759,350,1.323,367,0.5,413,1.24,414,2.831,415,3.556,417,2.603,420,1.094,421,2.603,435,2.831,437,1.885,447,1.323,498,1.24,523,1.744,532,2.831,534,2.238,544,1.412,549,2.05,562,1.621,573,1.24,636,2.247,637,2.831,675,2.247,679,4.347,692,2.765,712,0.909,745,1.24,748,2.495,764,3.555,812,1.744,819,2.05,820,3.001,821,2.495,830,3.835,838,0.75,868,1.827,896,2.603,897,3.217,907,1.621,934,2.05,970,2.495,1004,2.495,1019,2.247,1030,2.495,1070,1.885,1088,2.05,1227,2.603,1236,3.104,1249,2.05,1254,2.247,1263,2.05,1317,2.247,1330,3.446,1421,3.229,1427,2.831,1474,1.852,1477,4.179,1478,3.243,1503,3.556,1504,3.446,1523,2.495,1524,2.05,1527,2.495,1532,3.446,1537,1.621,1538,2.831,1539,1.608,1543,1.821,1544,4.468,1552,2.495,1559,3.904,1572,4.473,1575,3.904,1580,4.258,1581,4.736,1582,2.827,1583,3.446,1585,2.827,1587,2.495,1595,2.247,1602,2.495,1604,2.827,1607,2.827,1608,4.958,1615,3.904,1616,3.904,1619,2.247,1621,2.495,1622,2.495,1629,2.827,1639,3.904,1642,2.827,1643,2.827,1646,1.608,1647,2.495,1650,1.821,1653,1.608,1667,2.827,1677,3.904,1678,2.827,1679,3.904,1682,2.827,1683,3.948,1684,2.827,1685,4.473,1698,4.258,1711,2.827,1712,3.904,1718,4.473,1719,3.904,1728,2.827,1731,2.827,1735,4.473,1769,2.827,1770,2.827,1775,2.827,1782,2.827,1785,2.827,1786,2.827,1787,2.827,1823,3.948,1836,2.247,1877,2.827,1879,2.827,1901,2.827,1910,2.827,1912,4.473,1913,2.827,1969,2.827,2002,3.464,2003,3.464,2004,1.821,2005,3.33,2006,3.33,2007,2.146,2008,3.33,2009,2.146,2010,3.33,2011,3.33,2012,3.33,2013,3.33,2014,3.33,2015,3.33,2016,3.33,2017,3.33,2018,4.6,2019,3.33,2020,5.269,2021,3.33,2022,5.269,2023,3.33,2024,3.33,2025,4.6,2026,4.6,2027,6.321,2028,3.33,2029,2.827,2030,3.33,2031,4.6,2032,4.6,2033,4.6,2034,5.269,2035,3.33,2036,3.33,2037,2.247,2038,3.33,2039,3.33,2040,4.6,2041,3.33,2042,3.33,2043,3.33,2044,3.33,2045,4.6,2046,3.33,2047,3.33,2048,6.167,2049,3.904,2050,6.684,2051,4.473,2052,3.33,2053,4.6,2054,3.33,2055,3.33,2056,3.33,2057,3.33,2058,3.33,2059,4.6,2060,3.33,2061,3.33,2062,4.6,2063,3.33,2064,3.33,2065,5.269,2066,4.6,2067,4.162,2068,3.33,2069,3.33,2070,3.33,2071,3.33,2072,3.33,2073,3.33,2074,3.33,2075,3.33,2076,3.33,2077,3.33,2078,3.33,2079,2.495,2080,4.6,2081,3.33,2082,4.6,2083,3.33,2084,4.6,2085,3.33,2086,5.269,2087,3.33,2088,3.33,2089,3.33,2090,4.6,2091,4.6,2092,3.33,2093,3.33,2094,3.33,2095,3.33,2096,4.6,2097,3.33,2098,3.33,2099,3.33,2100,5.269,2101,3.33,2102,3.33,2103,3.33,2104,3.33,2105,3.904,2106,3.33,2107,3.33,2108,3.33,2109,4.6,2110,3.33,2111,3.33,2112,3.33,2113,3.33,2114,3.33,2115,3.33,2116,4.6,2117,3.33,2118,3.33,2119,3.33,2120,3.33,2121,3.33,2122,3.33,2123,3.33,2124,3.33,2125,3.33,2126,4.6,2127,4.6,2128,5.269,2129,3.33,2130,5.269,2131,3.33,2132,3.33,2133,3.33,2134,3.33,2135,3.33,2136,3.33,2137,4.6,2138,3.33,2139,3.33,2140,3.33,2141,3.33,2142,4.6,2143,3.33,2144,3.33,2145,4.6,2146,3.33,2147,5.269,2148,3.33,2149,3.33,2150,3.33,2151,3.33,2152,3.33,2153,3.33,2154,3.33,2155,4.6,2156,3.33,2157,3.33,2158,3.33,2159,3.33,2160,3.33,2161,3.33,2162,3.33,2163,3.33,2164,3.33,2165,4.6,2166,3.33,2167,3.33,2168,3.33,2169,4.6,2170,3.33,2171,3.33,2172,3.33,2173,3.33,2174,3.33,2175,3.33,2176,3.904,2177,3.33,2178,3.33,2179,3.33,2180,3.33,2181,3.33,2182,4.6,2183,2.827,2184,3.33,2185,3.33,2186,3.33,2187,2.827,2188,3.33,2189,3.33,2190,3.33,2191,3.33,2192,3.33,2193,3.33,2194,2.827,2195,3.33,2196,2.05,2197,3.33,2198,3.33,2199,4.6,2200,3.904,2201,3.33,2202,2.827,2203,3.33,2204,3.33,2205,2.495,2206,4.6,2207,3.446,2208,2.827,2209,2.247,2210,2.827,2211,3.33,2212,2.827,2213,3.33,2214,3.33,2215,3.33,2216,3.33,2217,3.33,2218,3.33,2219,3.33,2220,3.33,2221,3.33,2222,5.269,2223,3.33,2224,4.6,2225,3.33,2226,3.33,2227,3.33,2228,3.33,2229,3.33]],["title/components/SidebarComponent.html",[0,0.164,18,0.836]],["body/components/SidebarComponent.html",[0,0.31,1,1.067,2,1.337,3,0.282,4,0.245,5,1.209,6,1.209,7,1.209,8,0.245,10,1.209,11,1.734,12,1.847,15,1.031,16,1.424,18,1.609,19,1.067,20,2.121,21,1.424,23,1.612,25,0.21,29,0.616,33,0.714,43,5.396,45,2.696,47,0.616,48,0.025,49,0.6,50,0.245,51,0.438,52,0.549,54,1.031,64,1.424,69,1.002,73,3.417,74,0.404,75,0.245,77,1.067,80,1.456,85,0.282,86,0.282,87,0.397,97,1.209,98,1.515,99,1.424,100,1.209,101,1.735,102,1.209,103,0.823,104,1.051,105,1.515,106,1.209,107,0.939,108,1.209,109,1.067,110,1.204,111,1.209,112,1.067,113,1.209,114,1.067,115,1.209,116,1.067,117,1.209,118,1.067,119,1.209,120,1.515,121,1.067,122,1.209,123,1.067,124,1.655,125,1.209,126,1.067,127,1.209,128,1.067,129,1.067,130,1.655,131,1.209,132,1.209,133,1.067,134,1.209,135,1.002,136,1.209,137,1.067,138,1.067,139,0.658,140,1.002,141,1.136,142,1.209,143,0.019,144,0.019,153,1.609,154,3.143,155,0.772,157,3.32,158,2.227,160,4.713,162,3.143,163,3.329,164,1.824,172,0.448,173,1.177,174,2.908,175,2.068,176,1.337,181,3.32,182,0.616,203,4.29,215,1.177,238,2.368,447,2.205,498,2.068,838,1.55,941,2.321,1383,3.747,1474,2.751,1477,3.417,1478,3.417,1528,3.747,1595,3.747,1825,4.713,2176,4.713,2230,3.761,2231,5.553,2232,5.553,2233,4.431,2234,4.431]],["title/components/SignupComponent.html",[0,0.164,133,0.836]],["body/components/SignupComponent.html",[0,0.189,1,0.502,2,0.784,3,0.132,4,0.115,5,0.568,6,0.568,7,0.568,8,0.115,10,0.568,11,1.595,12,1.698,14,1.704,15,0.911,16,0.834,18,0.502,19,0.502,20,1.4,21,0.834,25,0.099,26,0.385,29,0.453,32,2.349,33,0.798,38,0.604,42,1.405,44,1.212,45,1.919,47,0.63,48,0.025,49,0.634,50,0.327,51,0.448,52,0.448,54,0.84,55,2.196,56,1.842,60,0.683,61,0.793,63,2.37,64,0.834,66,2.464,69,1.023,70,4.587,71,0.83,74,0.357,75,0.115,77,0.502,80,0.684,85,0.132,86,0.132,87,0.504,88,0.731,97,0.568,98,0.888,99,0.834,100,0.568,101,1.775,102,0.568,103,0.387,104,0.361,105,0.888,106,0.568,107,0.441,108,0.568,109,0.502,110,1.148,111,0.568,112,0.502,113,0.568,114,0.502,115,0.568,116,0.502,117,0.568,118,1.09,119,0.568,120,0.888,121,0.502,122,0.568,123,0.502,124,0.568,125,0.568,126,0.502,127,0.568,128,0.502,129,0.502,130,1.235,131,0.568,132,0.568,133,1.09,134,0.568,135,0.471,136,0.568,137,0.502,138,0.502,139,0.226,140,0.471,141,0.534,142,0.568,143,0.011,144,0.011,153,1.355,155,0.453,158,1.848,165,1.476,172,0.477,173,1.103,176,1.393,180,1.704,182,0.823,183,1.405,186,1.583,187,4.322,198,1.4,215,0.69,216,1.38,217,3.512,218,1.967,219,3.64,222,1.259,241,4.39,244,2.296,254,0.784,255,1.967,256,1.38,257,2.097,286,0.868,288,0.534,295,1.842,324,1.405,329,1.091,333,2.002,334,1.179,345,3.323,346,1.091,348,1.138,351,1.38,367,0.781,368,2.053,382,2.494,388,1.405,427,3.054,428,2.702,429,1.091,430,2.196,431,2.196,432,2.858,433,2.244,437,2.562,439,3.463,440,1.069,446,1.802,449,2.786,452,2.096,498,1.212,521,1.282,541,1.56,542,3.203,543,2.002,544,1.38,549,2.002,579,1.476,595,2.097,611,1.919,696,0.945,701,1.013,706,2.464,708,1.948,710,0.945,712,0.568,725,3.314,729,3.603,743,0.945,745,2.025,773,3,784,3.842,787,1.768,788,3.899,792,1.704,797,3.399,798,2.762,810,3.203,819,2.786,822,3,824,3.078,836,3.391,840,1.768,841,3.391,842,1.56,878,1.768,881,2.762,896,2.562,897,1.842,902,1.476,932,3.391,941,1.091,982,1.768,983,5.115,985,5.268,988,3.679,989,3.399,990,1.56,991,3.679,992,5.387,993,4.215,995,4.615,996,2.002,997,1.768,998,4.238,999,3.399,1001,2.762,1002,2.762,1004,4.587,1006,1.768,1008,3.842,1014,4.776,1015,4.168,1016,3.399,1017,5.115,1018,2.762,1019,3.054,1020,4.168,1022,4.776,1023,1.768,1026,2.762,1029,4.776,1030,2.438,1031,2.438,1032,4.215,1035,1.768,1036,5.115,1037,2.762,1038,2.762,1041,2.762,1044,4.776,1048,2.762,1049,3.842,1050,4.587,1051,1.768,1052,3.842,1055,1.768,1057,4.168,1058,4.418,1059,3.679,1060,3.842,1062,2.762,1066,3.399,1067,4.168,1068,3.399,1069,2.762,1070,2.779,1071,3.022,1072,4.418,1073,2.762,1075,4.168,1076,2.762,1082,3.399,1085,4.908,1087,1.768,1092,3.399,1094,2.762,1101,3.842,1102,2.762,1103,2.762,1106,1.768,1107,1.768,1187,1.768,1220,1.282,1221,2.438,1223,1.842,1224,1.842,1227,2.266,1235,2.196,1266,1.842,1282,1.768,1351,1.583,1442,1.56,1471,3.865,1474,1.817,1477,2.464,1486,2.002,1513,2.002,1537,1.583,1583,2.438,1611,1.583,1621,2.438,1750,3.399,1791,4.168,1792,3.399,1797,3.399,1799,2.762,1810,2.762,1812,2.762,1813,5.02,1817,1.56,1840,1.768,1860,3.399,1861,2.762,1863,1.768,1865,1.768,1866,1.768,1867,1.768,1870,1.768,1871,1.768,1872,1.768,1873,1.768,1874,1.405,1875,1.56,1876,1.768,1878,2.762,1880,1.768,1881,1.768,1882,3.391,1883,1.768,1884,1.768,1891,3.842,1944,1.768,1984,1.768,2067,2.196,2105,2.762,2187,2.762,2194,4.168,2208,2.762,2235,1.768,2236,4.004,2237,3.254,2238,4.004,2239,4.004,2240,4.91,2241,4.526,2242,3.254,2243,3.254,2244,3.254,2245,2.083,2246,3.254,2247,3.254,2248,2.002,2249,2.083,2250,2.083,2251,4.004,2252,3.254,2253,2.083,2254,3.254,2255,3.254,2256,2.083,2257,5.205,2258,4.91,2259,3.254,2260,4.91,2261,2.083,2262,4.004,2263,4.526,2264,2.083,2265,2.196,2266,2.083,2267,2.083,2268,2.083,2269,2.083,2270,2.083,2271,2.083,2272,2.083,2273,2.083,2274,2.083,2275,3.254,2276,2.083,2277,2.083,2278,2.083,2279,2.083,2280,2.083,2281,2.083,2282,2.083,2283,2.083,2284,3.254,2285,2.083,2286,2.083,2287,2.083,2288,2.083,2289,2.083,2290,2.083,2291,3.254,2292,2.083,2293,3.254,2294,2.083,2295,2.083,2296,3.254,2297,2.083,2298,2.083,2299,2.083,2300,2.083,2301,2.083,2302,2.083,2303,2.083,2304,4.004,2305,2.083,2306,2.083,2307,3.254,2308,2.083,2309,2.083,2310,4.004,2311,5.205,2312,2.083,2313,3.254,2314,5.205,2315,2.083,2316,2.083,2317,2.083,2318,2.083,2319,4.004,2320,2.083,2321,2.083,2322,2.083,2323,2.083,2324,2.083,2325,3.254,2326,2.083,2327,2.083,2328,2.083,2329,3.254,2330,2.083,2331,2.083,2332,2.083,2333,2.083,2334,2.083,2335,2.083,2336,2.083,2337,2.083,2338,3.254,2339,3.254,2340,4.004,2341,3.254,2342,3.254,2343,2.083,2344,2.083,2345,2.083,2346,2.083,2347,2.083,2348,2.196,2349,2.083,2350,3.254,2351,4.004,2352,3.254,2353,3.254,2354,4.004,2355,2.083,2356,2.083,2357,2.083,2358,3.254,2359,2.083,2360,2.083,2361,2.083,2362,2.083,2363,2.083,2364,2.083,2365,4.004,2366,2.083,2367,3.254,2368,2.083,2369,2.083,2370,2.083,2371,2.083,2372,2.083,2373,2.083,2374,2.083,2375,2.083,2376,2.083,2377,2.083,2378,2.083,2379,3.254,2380,2.083,2381,2.083,2382,2.083,2383,2.083,2384,2.083,2385,2.083,2386,2.083,2387,2.083,2388,2.083]],["title/interfaces/Subtask.html",[277,0.689,2389,1.379]],["body/interfaces/Subtask.html",[3,0.224,4,0.195,8,0.195,13,0.903,25,0.167,26,0.566,38,0.887,48,0.025,50,0.3,60,0.49,61,0.982,71,0.905,74,0.224,75,0.195,85,0.304,86,0.224,87,0.593,88,1.013,91,2.174,103,0.654,104,0.61,139,0.382,143,0.016,144,0.016,173,1.329,176,1.511,177,0.614,179,0.961,182,0.846,194,1.56,214,1.312,221,2.579,222,1.608,225,0.848,254,0.828,277,0.699,286,0.873,341,1.714,342,1.994,344,1.598,348,2.034,349,1.844,350,1.399,351,1.494,365,2.467,367,1.047,375,1.714,382,2.681,391,1.57,392,1.598,393,2.168,413,2.616,420,2.198,433,2.39,447,1.399,451,3.122,462,1.714,507,1.399,520,2.503,565,2.64,573,1.312,634,2.639,640,1.994,693,1.844,712,1.48,743,1.598,745,1.312,827,3.581,835,2.639,960,2.168,1241,3.743,1266,1.994,1511,2.377,1611,1.714,1874,3.225,2205,2.639,2389,2.87,2390,2.639,2391,3.225,2392,2.831,2393,2.99,2394,2.99,2395,2.99,2396,2.99,2397,2.99,2398,2.639,2399,4.359,2400,2.99,2401,4.605,2402,2.99,2403,2.99,2404,5.54,2405,2.99,2406,4.938,2407,2.99,2408,5.446,2409,2.99,2410,2.99,2411,5.163,2412,2.99,2413,5.446,2414,2.99,2415,2.99,2416,2.99,2417,4.605,2418,2.99,2419,4.359,2420,4.605,2421,4.057,2422,2.99,2423,2.99,2424,2.377,2425,4.057,2426,2.99,2427,2.639,2428,2.99,2429,2.99,2430,2.99,2431,2.99,2432,2.639,2433,2.99,2434,4.057,2435,2.99,2436,4.057,2437,4.057,2438,2.99,2439,2.99,2440,2.99,2441,4.605,2442,2.99,2443,4.057,2444,2.99,2445,2.99,2446,2.99,2447,2.99,2448,2.99,2449,2.99,2450,2.99,2451,2.99,2452,4.057,2453,2.99,2454,4.057,2455,2.99,2456,2.99,2457,2.99,2458,2.99,2459,4.057,2460,2.99,2461,2.99,2462,1.844,2463,2.99,2464,4.057]],["title/interfaces/Subtask-1.html",[277,0.576,712,0.792,2389,1.152]],["body/interfaces/Subtask-1.html",[3,0.194,4,0.169,8,0.169,13,0.784,25,0.145,26,0.513,28,4.388,38,0.568,48,0.025,50,0.278,51,0.624,52,0.542,54,0.568,67,2.269,71,0.915,74,0.32,75,0.169,85,0.32,86,0.194,87,0.62,88,0.494,92,2.109,104,0.53,139,0.78,143,0.015,144,0.015,153,1.044,164,1.899,172,0.518,173,1.067,177,0.557,179,0.834,182,0.968,191,1.799,198,2.099,209,3.111,214,1.614,215,1.067,216,1.838,218,1.914,222,1.617,225,1.044,247,2.109,254,0.872,256,1.297,258,2.283,270,1.601,274,1.488,275,1.601,276,1.069,277,0.86,278,1.601,282,2.554,285,2.269,286,1.012,288,1.539,296,2.269,340,2.867,341,1.488,346,2.269,358,1.882,360,1.882,365,1.297,382,1.721,391,1.005,413,2.619,418,1.387,421,2.453,422,1.882,423,1.882,424,1.882,425,1.882,440,1.899,446,1.258,447,1.214,462,2.664,464,2.109,497,2.449,500,1.882,502,3.143,503,3.369,507,1.214,512,3.099,513,2.667,516,2.667,517,2.667,519,2.667,520,2.269,522,1.488,523,2.867,525,3.557,528,2.667,529,2.667,530,1.882,534,2.812,537,2.667,539,1.731,544,1.297,545,1.721,555,1.297,573,1.614,669,1.005,693,1.601,792,2.635,838,1.069,868,2.384,902,1.966,907,1.488,934,1.882,951,2.453,1303,1.139,1310,2.849,1337,2.924,1364,2.924,1421,2.269,1487,1.882,1600,3.396,1611,1.488,2037,2.064,2196,1.882,2209,2.924,2248,1.882,2265,2.924,2348,2.064,2389,2.809,2392,2.921,2462,2.269,2465,2.064,2466,3.247,2467,4.497,2468,3.881,2469,2.291,2470,2.291,2471,2.291,2472,2.291,2473,3.396,2474,2.291,2475,2.291,2476,2.064,2477,2.064,2478,3.247,2479,2.291,2480,2.291,2481,4.102,2482,2.291,2483,2.291,2484,3.247,2485,4.33,2486,2.291,2487,2.291,2488,2.291,2489,2.291,2490,3.247,2491,2.291,2492,3.247,2493,2.291,2494,3.247,2495,2.291,2496,2.291,2497,2.291,2498,2.291,2499,2.291,2500,2.291,2501,3.771,2502,2.291,2503,2.291,2504,2.291,2505,2.291,2506,2.291,2507,2.291,2508,2.291,2509,2.291,2510,2.291,2511,2.291,2512,2.291,2513,2.291,2514,4.102,2515,3.247,2516,2.291,2517,3.247,2518,3.247,2519,2.291,2520,2.291,2521,2.291,2522,2.291,2523,2.291,2524,2.064,2525,2.291,2526,2.291,2527,3.247,2528,2.291,2529,2.291,2530,2.291,2531,2.291,2532,2.291,2533,2.291,2534,2.291,2535,1.882,2536,2.924,2537,1.882,2538,3.247,2539,2.064,2540,2.291,2541,2.291,2542,2.064,2543,2.291,2544,2.291,2545,2.291,2546,2.291,2547,2.291,2548,2.291,2549,2.291,2550,2.291,2551,2.291,2552,2.291,2553,2.291,2554,3.771,2555,2.291,2556,2.291,2557,2.291,2558,2.291,2559,2.291,2560,2.291,2561,2.291]],["title/injectables/SubtaskManager.html",[177,0.446,2391,2.343]],["body/injectables/SubtaskManager.html",[3,0.168,4,0.147,8,0.147,13,0.68,25,0.125,26,0.462,33,0.898,38,0.951,47,0.888,48,0.025,49,0.632,50,0.372,51,0.632,52,0.6,60,0.844,61,1.078,71,0.912,74,0.168,75,0.147,85,0.248,86,0.168,87,0.555,88,1.091,91,2.23,103,0.725,104,0.677,139,0.424,143,0.013,144,0.013,155,0.544,172,0.554,173,1.286,176,1.423,177,0.502,179,0.723,182,0.76,184,1.053,194,1.615,214,1.455,221,2.67,222,1.588,225,0.941,254,0.888,277,0.526,286,0.769,342,3.961,344,1.203,348,2.121,349,2.046,350,1.552,351,1.657,365,2.572,367,1.059,375,1.902,382,2.615,391,1.683,392,1.773,393,3.153,398,1.986,402,2.25,406,2.25,407,2.25,408,1.789,409,1.986,410,1.789,413,2.589,420,2.23,433,2.431,447,1.552,451,3.204,462,1.902,507,1.552,520,2.682,565,2.658,573,1.455,634,2.928,640,2.212,693,2.046,712,1.398,743,1.203,745,0.987,827,3.838,835,2.928,960,2.405,1128,2.25,1141,2.25,1143,2.25,1146,2.25,1241,2.405,1266,2.212,1314,1.986,1511,2.637,1611,1.902,1874,3.132,1966,1.986,2205,2.928,2389,2.879,2390,5.243,2391,3.457,2392,3.013,2393,3.94,2394,3.94,2395,3.94,2396,3.94,2397,3.94,2398,3.838,2399,3.838,2400,3.317,2401,3.94,2402,2.25,2403,4.348,2404,5.148,2405,3.317,2406,5.148,2407,4.348,2408,5.016,2409,3.317,2410,4.348,2411,4.636,2412,4.348,2413,5.016,2414,3.317,2415,4.348,2416,3.317,2417,4.851,2418,3.317,2419,3.838,2420,3.94,2421,3.317,2422,3.317,2423,3.317,2424,1.789,2425,4.348,2426,4.348,2427,3.838,2428,2.25,2429,2.25,2430,3.317,2431,2.25,2432,1.986,2433,3.317,2434,4.348,2435,3.317,2436,3.317,2437,3.317,2438,2.25,2439,2.25,2440,3.317,2441,4.636,2442,3.317,2443,3.317,2444,2.25,2445,2.25,2446,2.25,2447,2.25,2448,2.25,2449,2.25,2450,3.317,2451,4.348,2452,3.317,2453,2.25,2454,3.317,2455,4.348,2456,3.317,2457,3.317,2458,3.94,2459,3.317,2460,2.25,2461,2.25,2462,2.046,2463,3.317,2464,3.317,2562,3.908,2563,3.317,2564,3.908,2565,3.908,2566,3.908,2567,3.908,2568,3.908,2569,3.908,2570,3.908,2571,3.908,2572,3.908,2573,2.651,2574,2.651,2575,2.651,2576,2.651,2577,2.651,2578,2.651,2579,2.25,2580,2.651,2581,2.651,2582,2.651,2583,2.25,2584,2.651,2585,2.651,2586,2.651,2587,2.651]],["title/components/SummaryComponent.html",[0,0.164,135,0.785]],["body/components/SummaryComponent.html",[0,0.253,1,0.701,2,1.008,3,0.185,4,0.161,5,0.795,6,0.795,7,0.795,8,0.161,10,0.795,11,1.667,12,1.775,15,1.096,16,1.073,18,0.701,19,0.701,20,1.713,21,1.073,23,1.215,25,0.138,26,0.495,29,0.582,32,2.416,33,0.883,38,0.777,44,1.085,47,0.681,48,0.025,49,0.561,50,0.367,51,0.485,52,0.414,60,0.916,61,1.063,63,1.525,67,2.191,69,0.658,71,0.846,72,1.899,74,0.375,75,0.161,77,0.701,80,0.957,85,0.185,86,0.185,87,0.439,88,1.052,92,1.417,97,0.795,98,1.142,99,1.073,100,0.795,101,1.461,102,0.795,103,0.541,104,0.505,105,1.142,106,0.795,107,0.617,108,0.795,109,0.701,110,0.972,111,0.795,112,0.701,113,0.795,114,0.701,115,0.795,116,0.701,117,0.795,118,0.701,119,0.795,120,1.142,121,0.701,122,0.795,123,0.701,124,0.795,125,0.795,126,0.701,127,0.795,128,0.701,129,0.701,130,0.795,131,0.795,132,0.795,133,0.701,134,0.795,135,1.21,136,0.795,137,0.701,138,0.701,139,0.688,140,0.658,141,0.747,142,0.795,143,0.014,144,0.014,153,0.701,155,0.582,158,1.999,161,1.775,164,2.114,172,0.54,176,1.29,180,2.191,182,0.745,194,0.747,222,1.56,225,0.701,238,1.559,249,1.235,254,0.849,255,1.018,277,0.578,282,2.319,286,0.851,288,0.747,367,0.628,420,2.266,440,1.94,441,1.525,444,2.773,446,1.928,595,2.565,604,3.306,611,2.077,624,3.135,649,1.648,667,1.525,669,1.375,692,2.036,694,1.525,695,2.565,696,1.321,697,1.525,698,1.321,708,2.036,710,1.321,712,0.795,731,2.182,743,1.899,868,2.729,902,2.429,941,1.525,960,2.576,975,1.965,990,3.135,1302,1.792,1303,2.2,1305,3.306,1344,1.525,1351,2.384,1353,2.773,1355,3.031,1379,4.201,1380,2.182,1381,2.472,1383,2.824,1384,3.552,1385,3.552,1386,2.472,1387,1.965,1388,2.182,1389,1.965,1390,4.012,1391,2.472,1392,2.182,1393,5.164,1394,4.158,1395,3.21,1396,4.158,1397,4.815,1398,4.815,1399,5.587,1400,4.815,1401,4.815,1402,4.815,1403,4.815,1404,3.552,1405,3.552,1406,3.552,1407,2.472,1408,3.552,1409,2.472,1410,4.815,1411,3.552,1412,2.472,1413,4.158,1414,2.472,1415,4.815,1416,3.552,1417,3.552,1418,3.552,1419,3.552,1420,3.552,1421,2.191,1422,3.552,1423,3.552,1424,4.545,1425,4.815,1426,2.472,1427,1.792,1428,2.472,1429,2.472,1430,2.472,1431,2.472,1432,2.472,1433,2.472,1434,2.472,1435,2.472,1436,2.472,1437,3.552,1438,2.472,1439,4.158,1440,3.552,1441,2.472,1442,2.182,1443,2.472,1444,2.182,1445,2.182,1446,4.158,1447,2.472,1448,3.135,1449,2.472,1450,3.552,1451,4.815,1452,2.472,1453,4.815,1454,2.472,1455,2.472,1456,2.472,1457,3.552,1458,3.552,1459,2.472,1460,2.472,1461,2.472,1462,2.472,1463,3.552,1464,2.472,1465,3.552,1466,3.552,1467,2.472,1468,2.472,1469,2.472,1470,2.472,1537,1.417,1540,2.472,1595,1.965,1895,1.792,2202,2.472,2476,2.824,2588,4.185,2589,4.898,2590,4.185,2591,4.185,2592,2.912,2593,2.912,2594,2.912,2595,2.912,2596,2.912,2597,2.472,2598,2.912,2599,2.912,2600,2.912,2601,2.912,2602,2.912,2603,2.912,2604,2.912,2605,2.912,2606,2.912,2607,2.912,2608,2.912,2609,2.912,2610,2.912,2611,4.185,2612,4.185,2613,4.185,2614,4.185,2615,4.185,2616,4.185,2617,4.185,2618,4.185,2619,3.552]],["title/interfaces/Task.html",[139,0.377,277,0.689]],["body/interfaces/Task.html",[3,0.185,4,0.161,8,0.161,13,0.746,25,0.138,26,0.495,28,4.341,38,0.776,48,0.025,50,0.351,51,0.674,52,0.616,54,0.54,67,2.19,71,0.918,74,0.311,75,0.161,85,0.311,86,0.185,87,0.616,88,0.47,92,2.035,104,0.504,139,0.782,143,0.014,144,0.014,153,1.366,164,2.045,172,0.511,173,0.617,177,0.538,179,0.794,182,0.963,191,1.759,198,2.064,209,3.117,214,1.558,215,1.038,216,1.773,218,1.872,222,1.596,225,1.007,247,2.035,254,0.848,256,1.773,258,2.221,270,1.524,274,1.416,275,1.524,276,1.017,277,0.83,278,1.524,282,2.6,285,2.19,286,1.004,288,1.514,296,2.19,340,3.259,341,1.416,346,1.524,358,3.013,360,3.013,365,1.234,382,1.661,391,0.956,413,2.606,418,1.897,421,2.367,422,1.791,423,1.791,424,1.791,425,1.791,440,1.939,446,1.214,447,1.155,462,2.605,464,2.035,497,2.382,500,1.791,502,3.091,503,3.294,507,1.661,512,3.03,513,2.574,516,2.574,517,2.574,519,2.574,520,2.19,522,1.416,523,2.803,525,3.49,528,2.574,529,2.574,530,1.791,534,2.759,537,2.574,539,1.647,544,1.234,545,1.661,555,1.234,573,1.558,669,1.374,693,1.524,792,2.564,838,1.017,868,2.344,902,1.897,907,1.416,934,1.791,951,2.367,1303,1.084,1310,2.771,1337,2.822,1364,2.822,1421,2.19,1487,1.791,1600,3.304,1611,1.416,2037,1.963,2196,2.574,2209,2.822,2248,1.791,2265,2.822,2348,3.304,2389,2.807,2392,2.96,2462,1.524,2465,1.963,2466,2.18,2467,3.668,2468,4.05,2469,3.133,2470,3.133,2471,3.133,2472,3.133,2473,4.105,2474,3.133,2475,3.668,2476,3.304,2477,2.822,2478,4.248,2479,3.133,2480,3.133,2481,4.248,2482,2.18,2483,2.18,2484,3.133,2485,4.248,2486,2.18,2487,2.18,2488,2.18,2489,2.18,2490,3.133,2491,2.18,2492,3.133,2493,2.18,2494,3.133,2495,2.18,2496,2.18,2497,2.18,2498,2.18,2499,2.18,2500,2.18,2501,3.668,2502,2.18,2503,2.18,2504,2.18,2505,2.18,2506,2.18,2507,2.18,2508,2.18,2509,2.18,2510,2.18,2511,2.18,2512,2.18,2513,2.18,2514,4.01,2515,3.133,2516,2.18,2517,3.133,2518,3.133,2519,2.18,2520,2.18,2521,2.18,2522,2.18,2523,2.18,2524,1.963,2525,2.18,2526,2.18,2527,3.133,2528,2.18,2529,2.18,2530,2.18,2531,2.18,2532,2.18,2533,2.18,2534,2.18,2535,1.791,2536,2.822,2537,1.791,2538,3.133,2539,1.963,2540,2.18,2541,2.18,2542,1.963,2543,2.18,2544,2.18,2545,2.18,2546,2.18,2547,2.18,2548,2.18,2549,2.18,2550,2.18,2551,2.18,2552,2.18,2553,2.18,2554,3.668,2555,2.18,2556,2.18,2557,2.18,2558,2.18,2559,2.18,2560,2.18,2561,2.18]],["title/components/TaskComponent.html",[0,0.164,137,0.836]],["body/components/TaskComponent.html",[0,0.272,1,0.586,2,0.884,3,0.155,4,0.135,5,0.664,6,0.664,7,0.664,8,0.135,10,0.664,11,1.631,12,1.736,16,0.941,18,0.586,19,0.586,20,1.543,21,0.941,23,1.065,25,0.209,26,0.655,29,0.51,33,0.883,38,0.681,47,0.858,48,0.025,49,0.628,50,0.375,51,0.641,52,0.61,54,1.028,59,1.921,60,0.614,61,0.713,64,0.941,65,2.258,66,2.258,69,0.55,71,0.805,74,0.376,75,0.203,80,0.8,85,0.155,86,0.155,87,0.562,91,2.234,97,0.664,98,1.001,99,0.941,100,0.664,101,1.341,102,0.664,103,0.452,104,0.422,105,1.001,106,0.664,107,0.516,108,0.664,109,0.586,110,1.387,111,0.664,112,0.586,113,0.664,114,0.586,115,0.664,116,0.586,117,0.664,118,0.586,119,0.664,120,1.001,121,0.586,122,0.664,123,0.586,124,0.664,125,0.664,126,0.586,127,0.664,128,0.586,129,0.586,130,0.664,131,0.664,132,0.664,133,0.586,134,0.664,135,0.55,136,0.664,137,1.183,138,0.586,139,0.78,140,0.998,141,0.624,142,0.664,143,0.012,144,0.012,153,0.884,155,0.51,164,1.989,172,0.532,173,0.516,182,0.733,186,2.148,195,2.349,198,1.543,215,1.174,222,1.26,225,1.384,238,1.83,254,0.996,286,0.551,288,0.624,350,1.457,362,2.2,367,0.888,375,1.785,378,2.564,392,1.664,413,2.063,418,2.229,419,3.315,420,2.026,433,2.203,440,1.205,446,1.669,452,2.333,498,2.254,502,2.311,507,1.457,534,1.785,545,1.753,555,2.794,579,1.664,611,2.083,614,2.748,618,2.258,621,2.748,622,2.748,624,2.748,629,3.855,631,1.824,632,1.824,636,2.978,638,4.503,639,4.055,640,2.498,649,3.135,661,2.748,669,2.164,671,2.748,672,1.824,673,2.748,675,2.476,699,3.409,700,1.824,701,1.785,717,2.067,718,2.067,719,2.067,725,1.643,745,1.644,764,2.311,800,1.643,801,3.023,896,2.076,897,2.076,907,1.785,912,2.748,932,2.748,1088,2.258,1118,3.114,1133,3.114,1135,4.17,1136,4.17,1137,4.17,1138,4.17,1139,3.114,1158,2.748,1161,2.067,1162,2.067,1178,1.824,1223,2.78,1224,2.78,1228,3.738,1241,3.537,1248,1.824,1259,3.114,1263,2.258,1298,3.746,1302,1.499,1303,2.297,1309,4.432,1310,1.378,1344,2.311,1351,1.785,1353,2.076,1355,2.076,1486,2.258,1488,5.235,1490,3.307,1491,3.746,1493,4.879,1508,3.681,1538,2.258,1563,3.114,1622,4.15,1630,2.748,1713,3.681,1895,3.023,1953,3.307,2000,2.067,2389,2.2,2392,3.155,2424,2.476,2462,1.921,2597,3.114,2619,3.114,2620,2.067,2621,3.668,2622,3.668,2623,3.746,2624,3.668,2625,3.668,2626,4.912,2627,3.668,2628,3.668,2629,3.668,2630,3.668,2631,3.114,2632,4.413,2633,5.915,2634,4.413,2635,4.413,2636,4.413,2637,4.413,2638,2.435,2639,3.746,2640,2.435,2641,3.668,2642,6.588,2643,2.435,2644,2.435,2645,2.435,2646,3.668,2647,2.435,2648,2.435,2649,4.912,2650,2.435,2651,3.668,2652,2.435,2653,3.668,2654,3.668,2655,2.435,2656,4.17,2657,4.912,2658,2.435,2659,4.912,2660,2.435,2661,2.435,2662,3.668,2663,3.668,2664,3.668,2665,4.912,2666,2.435,2667,3.668,2668,4.912,2669,3.668,2670,3.668,2671,2.435,2672,3.668,2673,3.668,2674,2.435,2675,3.668,2676,2.435,2677,3.668,2678,2.435,2679,4.912,2680,2.435,2681,2.435,2682,2.435,2683,2.435,2684,2.435,2685,2.435,2686,2.435,2687,3.668,2688,3.668,2689,4.413,2690,3.668,2691,2.435,2692,2.435,2693,2.067,2694,3.746,2695,2.435,2696,2.435,2697,2.435,2698,2.435,2699,4.912,2700,2.435,2701,2.435,2702,2.435,2703,2.435,2704,2.435,2705,2.067,2706,2.067,2707,2.067,2708,2.067,2709,2.435,2710,3.114,2711,3.114,2712,3.114,2713,3.668,2714,3.114,2715,3.668,2716,3.668]],["title/components/TaskDetailsComponent.html",[0,0.164,138,0.836]],["body/components/TaskDetailsComponent.html",[0,0.265,1,0.678,2,0.984,3,0.179,4,0.156,5,0.768,6,0.768,7,0.768,8,0.156,10,0.768,11,1.661,12,1.768,15,0.758,16,1.047,18,0.678,19,0.678,20,1.681,21,1.047,23,1.186,25,0.265,26,0.483,29,0.733,32,2.597,33,0.883,38,0.758,45,1.732,47,0.779,48,0.025,49,0.596,50,0.365,51,0.622,52,0.554,54,1.084,60,0.838,61,0.776,63,2.139,64,1.047,65,2.514,69,0.637,71,0.75,74,0.399,75,0.156,77,0.678,80,0.925,85,0.179,86,0.179,87,0.54,88,0.455,91,2.286,97,0.768,98,1.115,99,1.047,100,0.768,101,1.439,102,0.768,103,0.523,104,0.488,105,1.115,106,0.768,107,0.597,108,0.768,109,0.678,110,1.352,111,0.768,112,0.678,113,0.768,114,0.678,115,0.768,116,0.678,117,0.768,118,0.678,119,0.768,120,1.115,121,0.678,122,0.768,123,0.678,124,0.768,125,0.768,126,0.678,127,0.768,128,0.678,129,0.678,130,0.768,131,0.768,132,0.768,133,0.678,134,0.768,135,0.637,136,0.768,137,0.678,138,1.27,139,0.768,140,1.265,141,0.722,142,0.768,143,0.014,144,0.014,153,0.984,155,0.568,164,1.342,165,2.392,172,0.507,176,0.678,182,0.568,186,2.339,191,1.732,195,2.476,198,1.681,211,2.756,214,1.521,215,0.866,218,0.985,254,0.833,274,1.37,282,2.459,286,0.423,288,0.722,362,1.622,367,0.904,375,1.988,378,2.565,413,1.521,418,2.799,429,1.475,433,1.79,451,1.988,452,2.409,464,1.988,498,2.243,534,2.565,547,1.9,555,2.773,565,2.841,573,1.521,594,2.11,597,3.467,598,3.467,611,2.236,618,2.514,629,3.707,647,3.06,649,3.492,652,3.06,669,2.027,682,2.39,688,3.467,699,3.245,701,1.988,762,3.06,764,2.139,774,4.08,783,4.475,801,2.514,812,2.761,814,3.467,866,2.39,868,1.909,897,2.312,951,1.594,1019,2.756,1088,3.245,1177,3.467,1178,2.11,1223,2.312,1224,2.312,1228,4.163,1249,2.514,1266,2.312,1302,1.733,1303,2.379,1344,2.139,1486,2.514,1508,3.95,1511,2.756,1619,2.756,1713,3.95,1875,3.06,1895,2.514,1897,3.467,1951,4.475,2200,3.467,2210,3.467,2389,2.718,2392,3.355,2399,2.11,2419,3.06,2424,2.756,2432,3.06,2462,2.139,2468,3.797,2473,2.756,2477,2.756,2524,2.756,2535,2.514,2536,2.756,2537,2.514,2539,2.756,2623,5.112,2631,3.467,2639,4.08,2656,4.475,2693,2.39,2694,3.467,2705,2.39,2706,2.39,2707,2.39,2708,2.39,2710,3.467,2711,3.467,2712,3.467,2714,3.467,2717,5.127,2718,5.808,2719,4.806,2720,3.467,2721,3.467,2722,5.272,2723,4.475,2724,4.084,2725,4.084,2726,4.806,2727,4.806,2728,4.806,2729,2.816,2730,2.816,2731,4.084,2732,2.816,2733,2.816,2734,2.816,2735,4.084,2736,2.816,2737,4.084,2738,2.816,2739,2.816,2740,3.467,2741,2.816,2742,2.816,2743,4.084,2744,2.816,2745,4.084,2746,2.816,2747,4.084,2748,4.084,2749,2.816,2750,4.084,2751,2.816,2752,2.816,2753,2.816,2754,2.39,2755,2.816,2756,2.816,2757,2.816,2758,2.816,2759,2.816,2760,2.816,2761,2.816,2762,2.816,2763,2.816,2764,2.816,2765,2.816,2766,4.084,2767,4.084,2768,4.084]],["title/injectables/TaskListManager.html",[177,0.446,2769,2.601]],["body/injectables/TaskListManager.html",[3,0.166,4,0.144,8,0.144,13,0.669,15,0.944,25,0.257,26,0.457,29,0.363,33,0.89,47,0.818,48,0.025,49,0.582,50,0.369,51,0.582,52,0.582,54,0.717,59,2.023,60,0.873,61,0.949,64,0.991,71,0.862,74,0.292,75,0.144,83,3.431,85,0.166,86,0.166,87,0.553,88,1.13,92,1.27,107,0.819,139,0.788,143,0.013,144,0.013,155,0.537,164,2.189,172,0.563,173,0.975,177,0.496,179,0.712,182,0.947,184,1.036,191,1.269,209,1.752,215,1.078,221,2.41,225,0.93,226,2.377,246,2.894,254,0.452,256,1.638,258,1.752,276,0.912,282,2.523,286,0.882,288,1.457,312,1.955,313,4.257,319,2.023,323,2.023,344,1.184,348,1.351,350,1.534,351,1.638,362,2.019,367,0.925,391,1.269,401,2.215,405,2.215,408,1.761,410,1.761,413,2.337,415,2.607,418,1.752,420,1.783,433,1.439,440,1.269,441,2.976,444,2.186,447,1.534,507,2.608,512,2.186,545,2.398,579,1.752,606,3.104,663,2.894,669,2.309,838,0.912,868,2.702,902,2.306,909,3.279,911,2.215,922,2.894,936,3.279,960,1.606,975,1.761,988,3.809,1127,2.215,1134,2.215,1302,1.606,1303,2.116,1305,3.104,1310,3.072,1314,2.894,1339,4.7,1344,1.366,1351,2.765,1353,3.216,1355,3.49,1362,3.279,1363,3.279,1444,1.955,1445,3.809,1558,4.315,1596,3.279,1619,3.431,1630,2.894,1895,3.497,1953,2.894,1966,1.955,1973,2.215,1994,2.215,1995,2.215,2248,3.129,2389,2.335,2392,3.262,2468,3.497,2535,2.377,2537,2.377,2542,2.607,2579,2.215,2583,2.215,2717,5.199,2723,4.315,2754,2.215,2769,3.809,2770,3.863,2771,4.599,2772,4.599,2773,4.599,2774,4.599,2775,4.599,2776,5.084,2777,5.084,2778,5.084,2779,3.863,2780,5.084,2781,3.863,2782,5.084,2783,5.084,2784,3.863,2785,3.863,2786,5.084,2787,5.084,2788,5.084,2789,3.863,2790,3.863,2791,5.084,2792,2.609,2793,3.863,2794,3.863,2795,3.863,2796,3.863,2797,4.599,2798,2.609,2799,3.863,2800,5.084,2801,2.609,2802,3.863,2803,5.084,2804,3.863,2805,3.863,2806,2.609,2807,2.609,2808,3.863,2809,2.609,2810,3.863,2811,2.609,2812,3.863,2813,2.609,2814,3.863,2815,3.279,2816,2.609,2817,3.863,2818,5.084,2819,3.863,2820,5.88,2821,5.084,2822,3.863,2823,3.863,2824,2.609,2825,3.863,2826,3.863,2827,3.863,2828,3.863,2829,3.863,2830,2.609,2831,5.427,2832,5.427,2833,5.427,2834,5.427,2835,3.863,2836,2.609,2837,3.863,2838,2.609,2839,2.609,2840,2.609,2841,2.609,2842,2.609,2843,2.609,2844,2.609,2845,2.609,2846,4.599,2847,2.609,2848,4.599,2849,2.609,2850,2.609,2851,2.609,2852,2.609,2853,2.609,2854,3.863,2855,3.863,2856,2.609,2857,5.084,2858,2.609,2859,2.609,2860,2.609,2861,2.609,2862,2.609,2863,2.609,2864,2.609,2865,3.863,2866,3.863,2867,3.863,2868,3.863,2869,3.863,2870,2.609,2871,2.609,2872,2.609,2873,2.609,2874,2.609]],["title/injectables/TaskService.html",[177,0.446,1303,1.293]],["body/injectables/TaskService.html",[3,0.154,4,0.134,8,0.134,13,0.621,25,0.115,26,0.432,28,3.872,29,0.337,33,0.866,38,0.45,47,0.909,48,0.025,49,0.646,50,0.364,51,0.666,52,0.663,54,0.678,60,0.337,61,0.391,67,2.566,71,0.925,74,0.28,75,0.134,85,0.28,86,0.154,87,0.601,88,0.71,92,1.778,104,0.633,139,0.785,143,0.012,144,0.012,153,1.06,155,0.508,164,1.728,172,0.563,173,0.514,177,0.47,179,0.661,182,0.941,184,0.962,191,1.941,198,2.331,209,3.14,214,1.825,215,1.172,216,2.078,218,1.714,222,1.645,225,1.18,247,2.384,254,0.849,256,1.028,258,2.386,270,1.269,274,1.179,275,1.269,276,0.847,277,0.725,278,1.914,282,2.584,285,1.914,286,0.972,288,1.418,296,1.914,340,2.754,346,1.269,358,2.249,360,2.249,365,1.55,367,0.548,382,1.748,391,1.201,413,2.61,418,1.099,421,2.491,422,1.491,423,1.491,424,1.491,425,1.491,440,1.986,446,1.061,447,1.451,462,2.874,464,2.384,497,2.69,500,1.491,502,3.32,503,3.532,507,0.962,512,2.774,513,2.249,516,2.249,517,2.249,519,2.249,520,2.566,522,1.778,523,2.566,525,3.236,528,2.249,529,2.249,530,1.491,534,2.874,537,2.249,539,2.069,544,1.55,545,2.195,555,1.55,573,1.825,669,0.796,693,1.269,792,1.914,838,0.847,868,2.401,902,2.223,907,1.778,934,2.249,951,2.069,1164,3.102,1169,2.057,1303,1.361,1310,3.129,1337,3.307,1364,3.307,1421,2.566,1487,2.249,1600,2.466,1611,1.179,2037,2.466,2196,1.491,2209,3.307,2248,2.249,2265,3.307,2348,2.466,2389,2.814,2392,2.941,2398,2.738,2427,2.738,2462,1.269,2465,1.635,2466,1.815,2467,3.671,2468,3.902,2469,1.815,2470,1.815,2471,1.815,2472,1.815,2473,3.307,2474,1.815,2475,2.738,2476,2.466,2477,1.635,2478,3.297,2479,1.815,2480,1.815,2481,4.299,2482,3.297,2483,3.671,2484,3.297,2485,4.615,2486,2.738,2487,1.815,2488,2.738,2489,1.815,2490,3.671,2491,3.671,2492,2.738,2493,1.815,2494,2.738,2495,1.815,2496,1.815,2497,2.738,2498,1.815,2499,1.815,2500,1.815,2501,3.671,2502,2.738,2503,1.815,2504,1.815,2505,1.815,2506,2.738,2507,2.738,2508,1.815,2509,1.815,2510,1.815,2511,2.738,2512,1.815,2513,1.815,2514,4.425,2515,3.671,2516,2.738,2517,2.738,2518,2.738,2519,1.815,2520,2.738,2521,1.815,2522,2.738,2523,1.815,2524,2.466,2525,2.738,2526,2.738,2527,2.738,2528,1.815,2529,1.815,2530,1.815,2531,1.815,2532,1.815,2533,1.815,2534,1.815,2535,2.249,2536,3.307,2537,2.249,2538,3.671,2539,2.466,2540,1.815,2541,1.815,2542,2.466,2543,2.738,2544,2.738,2545,1.815,2546,1.815,2547,1.815,2548,1.815,2549,1.815,2550,1.815,2551,1.815,2552,1.815,2553,2.738,2554,3.297,2555,3.671,2556,3.671,2557,2.738,2558,3.671,2559,2.738,2560,1.815,2561,1.815,2563,3.102,2720,3.102,2721,3.102,2875,3.655,2876,3.655,2877,3.655,2878,3.655,2879,3.655,2880,3.655,2881,3.655,2882,3.655,2883,2.423,2884,2.423,2885,2.423,2886,2.423,2887,2.423,2888,2.423,2889,2.423,2890,2.423,2891,2.423,2892,2.423,2893,2.423,2894,2.423,2895,2.423,2896,2.423,2897,2.423,2898,2.423,2899,2.423,2900,2.423]],["title/interfaces/UserData.html",[277,0.689,279,2.343]],["body/interfaces/UserData.html",[3,0.212,4,0.185,8,0.185,13,0.857,15,1.146,25,0.158,26,0.546,29,0.465,32,2.371,35,1.75,38,1.056,44,1.245,45,1.417,46,2.255,48,0.025,49,0.456,50,0.315,51,0.563,52,0.331,54,0.62,59,1.75,60,0.465,64,0.857,69,1.193,71,0.891,74,0.379,75,0.185,77,0.805,85,0.293,86,0.212,87,0.587,88,0.964,143,0.016,144,0.016,150,2.255,153,1.713,154,3.38,158,1.515,161,1.417,162,3.581,163,2.414,164,1.87,165,1.516,170,2.504,171,1.75,172,0.52,173,0.708,174,1.75,175,1.245,176,1.487,177,0.593,179,0.912,182,0.982,183,2.255,185,2.504,186,1.626,187,2.255,188,2.504,189,4.029,190,2.836,191,1.098,192,3.562,193,2.504,194,1.182,195,1.417,196,3.955,197,2.836,198,2.159,199,2.836,200,2.504,201,2.836,203,2.255,205,2.836,206,2.836,208,5.37,209,3.005,211,4.166,212,2.61,214,1.245,215,1.206,216,2.618,217,4.613,218,2.39,219,4.027,221,1.417,222,1.583,224,2.836,225,1.438,226,3.249,227,2.836,229,2.836,230,2.836,231,2.836,232,2.836,233,2.836,234,3.914,235,2.057,236,2.504,238,1.245,239,3.914,240,2.836,241,4.613,243,4.481,244,2.754,246,2.504,247,1.626,249,1.417,250,2.836,251,5.677,253,2.836,254,0.986,255,1.612,256,1.417,257,2.764,258,2.395,259,2.836,260,2.836,261,2.255,263,2.836,264,2.836,265,2.836,266,2.836,267,2.836,268,2.836,269,2.836,270,1.75,271,2.836,272,2.255,273,2.836,274,1.626,275,1.75,276,1.169,277,1.048,278,2.414,279,4.416,280,5.24,281,5.24,282,2.224,283,2.836,284,2.836,285,3.313,286,1.004,287,3.914,288,1.715,289,3.914,290,3.914,291,3.914,292,4.831,293,3.914,294,3.914,295,2.988,296,3.127,297,4.481,298,3.914,299,3.914,300,3.914,301,3.914,302,3.914,303,2.836,304,2.836,305,2.836,306,4.831,307,2.836,308,2.836,309,2.836,310,2.836,311,2.836,312,2.504,313,4.83,314,3.914,315,2.836,316,2.836,317,2.836,318,3.111,319,2.414,320,2.836,321,2.836,322,2.836,323,1.75,324,3.111,325,2.836,326,3.914,327,2.504,328,2.836,329,2.764,330,3.914,331,2.836,332,2.836,333,2.057,334,1.891,335,2.836,336,2.504,337,2.504,338,2.255,339,2.836,341,1.626]],["title/coverage.html",[2901,4.017]],["body/coverage.html",[0,0.34,1,1.078,8,0.248,9,3.799,18,1.078,19,1.078,31,2.344,48,0.025,50,0.248,103,0.831,107,0.949,109,1.078,110,0.888,112,1.078,114,1.078,116,1.078,118,1.078,121,1.078,123,1.078,126,1.078,128,1.078,129,1.078,133,1.078,135,1.012,137,1.078,138,1.078,139,0.485,143,0.019,144,0.019,145,3.02,146,3.353,148,3.799,158,1.47,177,0.896,185,4.186,254,0.776,277,1.348,279,3.02,340,2.344,342,3.79,343,4.186,344,3.115,347,3.02,411,4.111,416,3.02,441,2.344,446,1.906,452,1.667,592,4.111,593,3.353,594,4.186,669,1.47,745,2.53,771,3.353,772,3.799,837,3.353,879,3.353,880,3.799,1071,2.754,1113,3.353,1114,3.799,1201,3.799,1293,3.353,1294,3.799,1295,3.799,1303,1.667,1379,3.02,1380,4.186,1471,3.926,1472,3.799,1479,3.799,1529,3.799,1655,3.799,1656,3.799,1657,3.799,1788,3.799,1841,3.353,1885,3.799,1886,3.799,1908,3.799,1909,3.799,1945,3.353,1946,3.799,2002,3.799,2003,3.799,2004,3.799,2230,3.799,2235,3.799,2389,2.219,2390,4.186,2391,3.02,2465,4.111,2620,3.799,2717,4.186,2718,3.799,2769,3.353,2815,3.799,2901,3.799,2902,4.475,2903,4.475,2904,4.475,2905,4.475,2906,4.475,2907,4.475,2908,5.587,2909,4.475,2910,5.587,2911,4.475,2912,4.475,2913,4.475,2914,4.475,2915,4.475,2916,4.475,2917,3.799,2918,4.475,2919,3.799,2920,5.587,2921,4.475,2922,4.475,2923,4.475,2924,4.475,2925,4.475,2926,6.379,2927,4.475,2928,6.091,2929,4.475,2930,4.475,2931,4.475,2932,4.475,2933,4.475,2934,4.475,2935,4.475,2936,4.475,2937,4.475,2938,4.475,2939,5.587,2940,6.091,2941,5.587,2942,4.475,2943,4.475,2944,5.587,2945,4.475,2946,4.475,2947,4.475,2948,4.475,2949,4.475,2950,4.475,2951,4.475,2952,4.475,2953,4.475,2954,4.475,2955,4.475,2956,6.091,2957,4.475,2958,4.475,2959,4.475,2960,4.475]],["title/dependencies.html",[2961,2.463,2962,3.543]],["body/dependencies.html",[48,0.025,75,0.302,77,1.314,80,1.793,143,0.021,144,0.021,276,1.908,429,2.858,698,2.476,2067,4.247,2212,4.632,2962,4.632,2963,6.294,2964,5.457,2965,7.111,2966,5.457,2967,5.457,2968,6.294,2969,5.457,2970,5.457,2971,5.457,2972,5.457,2973,5.457]],["title/miscellaneous/functions.html",[2207,3.127,2974,1.958]],["body/miscellaneous/functions.html",[25,0.259,47,0.762,48,0.023,49,0.542,50,0.303,51,0.542,52,0.542,143,0.021,144,0.021,161,2.323,172,0.442,175,2.04,218,1.915,222,1.617,323,2.868,411,3.697,427,4.256,428,3.697,430,3.697,431,3.697,432,2.675,433,2.04,434,3.697,435,3.371,436,4.104,437,3.57,438,4.104,439,3.371,440,1.8,442,4.104,837,4.726,2207,4.104,2974,3.697,2975,5.478]],["title/index.html",[25,0.137,2976,2.901,2977,2.901]],["body/index.html",[0,0.303,2,1.208,4,0.277,48,0.02,55,3.384,60,0.833,72,2.275,73,3.686,141,1.286,143,0.02,144,0.02,165,3.009,171,2.626,235,3.686,254,0.869,319,2.626,351,2.126,372,3.384,417,2.838,435,3.086,497,2.44,523,2.626,544,2.126,639,3.086,659,5.435,669,1.647,764,2.626,820,2.914,1185,3.384,1313,4.256,1395,2.838,1524,3.941,1534,3.757,1545,3.384,1553,4.487,1631,4.256,1683,3.757,1698,3.757,1763,4.256,1823,3.757,2029,4.256,2051,4.256,2067,3.384,2079,3.757,2196,3.086,2740,4.256,2978,6.779,2979,5.014,2980,6.404,2981,5.014,2982,6.779,2983,6.88,2984,6.88,2985,5.014,2986,5.989,2987,5.014,2988,5.014,2989,5.014,2990,5.989,2991,5.014,2992,5.014,2993,5.014,2994,5.014,2995,5.014,2996,5.014,2997,6.404,2998,5.014,2999,5.014,3000,5.014,3001,5.014,3002,5.014,3003,5.014,3004,5.014,3005,5.014,3006,5.989,3007,6.404,3008,5.014,3009,5.014,3010,5.014,3011,5.014,3012,6.404,3013,5.014,3014,6.88,3015,5.014,3016,5.989,3017,5.014,3018,5.014,3019,5.014,3020,5.014,3021,5.014,3022,5.014,3023,5.014]],["title/modules.html",[3024,4.017]],["body/modules.html",[48,0.022,143,0.022,144,0.022,3024,4.82]],["title/overview.html",[1545,3.194]],["body/overview.html",[2,1.357,48,0.022,143,0.022,144,0.022,145,3.803,184,2.238,341,2.742,712,1.538,748,4.222,1545,3.803,2183,4.783,3025,5.635]],["title/properties.html",[26,0.494,2961,2.463]],["body/properties.html",[26,0.67,48,0.023,143,0.022,144,0.022,2079,4.243,3026,5.663]],["title/miscellaneous/variables.html",[1970,3.127,2974,1.958]],["body/miscellaneous/variables.html",[15,0.988,25,0.252,48,0.025,50,0.294,60,0.741,61,0.86,72,2.979,143,0.021,144,0.021,745,1.983,1050,3.989,1099,4.519,1371,4.519,1427,3.818,1544,3.989,1970,3.989,2049,4.519,2917,4.519,2919,5.266,2974,3.593,3027,5.324,3028,5.324,3029,5.324,3030,5.324,3031,5.324,3032,5.324,3033,5.324,3034,5.324,3035,5.324,3036,5.324,3037,5.324,3038,5.324,3039,5.324,3040,5.324,3041,5.324,3042,5.324,3043,5.324,3044,5.324,3045,5.324,3046,5.324,3047,5.324,3048,5.324,3049,5.324,3050,5.324,3051,5.324,3052,5.324,3053,5.324,3054,5.324,3055,5.324,3056,5.324,3057,5.324,3058,5.324]]],"invertedIndex":[["",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":446,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":3026,"title":{},"body":{"properties.html":{}}}],["0.05",{"_index":2320,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.15.0",{"_index":2973,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":2369,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.2s",{"_index":1023,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["0.3",{"_index":1104,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.3s",{"_index":1105,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.4",{"_index":1108,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.5rem",{"_index":2333,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.5s",{"_index":1392,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["0.6",{"_index":2353,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.7s",{"_index":1905,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["0.8s",{"_index":2380,"title":{},"body":{"components/SignupComponent.html":{}}}],["0/1",{"_index":2920,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2959,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2910,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":1045,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0038ff",{"_index":361,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["007cee",{"_index":1081,"title":{},"body":{"components/ContactListComponent.html":{}}}],["00bcd4",{"_index":478,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0118acff",{"_index":490,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0288d1",{"_index":491,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["049484ff",{"_index":493,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["084c6bff",{"_index":495,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0px",{"_index":2319,"title":{},"body":{"components/SignupComponent.html":{}}}],["1",{"_index":712,"title":{"interfaces/Subtask-1.html":{}},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":2549,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["1.1",{"_index":2014,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.2",{"_index":2024,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.5vw",{"_index":1046,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1/1",{"_index":2950,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2946,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":748,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"overview.html":{}}}],["10/10",{"_index":2955,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":745,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":1099,"title":{},"body":{"components/ContactListComponent.html":{},"miscellaneous/variables.html":{}}}],["1000px",{"_index":1083,"title":{},"body":{"components/ContactListComponent.html":{}}}],["100px",{"_index":987,"title":{},"body":{"components/ContactListComponent.html":{}}}],["10px",{"_index":1061,"title":{},"body":{"components/ContactListComponent.html":{}}}],["12",{"_index":1428,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["12/13",{"_index":2941,"title":{},"body":{"coverage.html":{}}}],["12/15",{"_index":2909,"title":{},"body":{"coverage.html":{}}}],["120px",{"_index":2368,"title":{},"body":{"components/SignupComponent.html":{}}}],["12px",{"_index":1075,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["12vw",{"_index":1011,"title":{},"body":{"components/ContactListComponent.html":{}}}],["13/14",{"_index":2943,"title":{},"body":{"coverage.html":{}}}],["13/16",{"_index":2912,"title":{},"body":{"coverage.html":{}}}],["13/26",{"_index":2934,"title":{},"body":{"coverage.html":{}}}],["13px",{"_index":2373,"title":{},"body":{"components/SignupComponent.html":{}}}],["14/15",{"_index":2936,"title":{},"body":{"coverage.html":{}}}],["14/21",{"_index":2927,"title":{},"body":{"coverage.html":{}}}],["1440px",{"_index":2309,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":2354,"title":{},"body":{"components/SignupComponent.html":{}}}],["15/26",{"_index":2931,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":1055,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["16/17",{"_index":2939,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":1022,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["17",{"_index":1786,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["17/20",{"_index":2938,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":1047,"title":{},"body":{"components/ContactListComponent.html":{}}}],["18",{"_index":1429,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["18/19",{"_index":2929,"title":{},"body":{"coverage.html":{}}}],["18px",{"_index":2351,"title":{},"body":{"components/SignupComponent.html":{}}}],["19",{"_index":3025,"title":{},"body":{"overview.html":{}}}],["19.2.0",{"_index":2965,"title":{},"body":{"dependencies.html":{}}}],["19.2.12",{"_index":2979,"title":{},"body":{"index.html":{}}}],["19.2.14",{"_index":2963,"title":{},"body":{"dependencies.html":{}}}],["19/21",{"_index":2953,"title":{},"body":{"coverage.html":{}}}],["190px",{"_index":1084,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1976d2",{"_index":486,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["1:703986298510:web:8cb9707daf583f2153a3df",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1fd7c1",{"_index":359,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["1px",{"_index":1051,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["1rem",{"_index":2328,"title":{},"body":{"components/SignupComponent.html":{}}}],["1vw",{"_index":1054,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2",{"_index":1602,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["2.1",{"_index":2035,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.2",{"_index":2044,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.3.0",{"_index":2971,"title":{},"body":{"dependencies.html":{}}}],["2.5vh",{"_index":2327,"title":{},"body":{"components/SignupComponent.html":{}}}],["2.5vw",{"_index":1021,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2/3",{"_index":2956,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2945,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":1442,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["200ms",{"_index":715,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["2025",{"_index":1787,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["20px",{"_index":1044,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2196f3",{"_index":474,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["21px",{"_index":1096,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22.5px",{"_index":1013,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22391",{"_index":1668,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["23/24",{"_index":2948,"title":{},"body":{"coverage.html":{}}}],["23/29",{"_index":2914,"title":{},"body":{"coverage.html":{}}}],["24/25",{"_index":2933,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":1008,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["25/35",{"_index":2923,"title":{},"body":{"coverage.html":{}}}],["25/42",{"_index":2907,"title":{},"body":{"coverage.html":{}}}],["250ms",{"_index":709,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["26",{"_index":2957,"title":{},"body":{"coverage.html":{}}}],["26px",{"_index":2343,"title":{},"body":{"components/SignupComponent.html":{}}}],["28px",{"_index":2345,"title":{},"body":{"components/SignupComponent.html":{}}}],["29abe2",{"_index":1106,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2a3647",{"_index":1064,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2px",{"_index":1066,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2vw",{"_index":1035,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["3",{"_index":1254,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["3.1",{"_index":2070,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.1",{"_index":2072,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.2",{"_index":2078,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.3",{"_index":2089,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3/3",{"_index":2944,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2916,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1371,"title":{},"body":{"injectables/DragDropManager.html":{},"miscellaneous/variables.html":{}}}],["3000",{"_index":1288,"title":{},"body":{"components/ContactsComponent.html":{}}}],["30px",{"_index":1095,"title":{},"body":{"components/ContactListComponent.html":{}}}],["32px",{"_index":1073,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["33px",{"_index":2344,"title":{},"body":{"components/SignupComponent.html":{}}}],["352px",{"_index":1009,"title":{},"body":{"components/ContactListComponent.html":{}}}],["360",{"_index":2611,"title":{},"body":{"components/SummaryComponent.html":{}}}],["36px",{"_index":1048,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["388e3c",{"_index":485,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3f51b5",{"_index":482,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3px",{"_index":2339,"title":{},"body":{"components/SignupComponent.html":{}}}],["3vw",{"_index":1007,"title":{},"body":{"components/ContactListComponent.html":{}}}],["4",{"_index":1622,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["4.1",{"_index":2133,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.2",{"_index":2143,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.3",{"_index":2151,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4",{"_index":2159,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.1",{"_index":2160,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.2",{"_index":2166,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4/4",{"_index":2954,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":2942,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1042,"title":{},"body":{"components/ContactListComponent.html":{}}}],["406px",{"_index":2314,"title":{},"body":{"components/SignupComponent.html":{}}}],["440px",{"_index":2323,"title":{},"body":{"components/SignupComponent.html":{}}}],["44px",{"_index":2366,"title":{},"body":{"components/SignupComponent.html":{}}}],["456px",{"_index":984,"title":{},"body":{"components/ContactListComponent.html":{}}}],["45px",{"_index":1074,"title":{},"body":{"components/ContactListComponent.html":{}}}],["46px",{"_index":1100,"title":{},"body":{"components/ContactListComponent.html":{}}}],["48px",{"_index":2315,"title":{},"body":{"components/SignupComponent.html":{}}}],["4caf50",{"_index":476,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["4px",{"_index":1072,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["4vw",{"_index":1025,"title":{},"body":{"components/ContactListComponent.html":{}}}],["5",{"_index":1427,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"miscellaneous/variables.html":{}}}],["5/19",{"_index":2958,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":2949,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":2925,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1071,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["500",{"_index":1443,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["5191daff",{"_index":480,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["536px",{"_index":2332,"title":{},"body":{"components/SignupComponent.html":{}}}],["560px",{"_index":2324,"title":{},"body":{"components/SignupComponent.html":{}}}],["56px",{"_index":1012,"title":{},"body":{"components/ContactListComponent.html":{}}}],["57",{"_index":2930,"title":{},"body":{"coverage.html":{}}}],["59",{"_index":2906,"title":{},"body":{"coverage.html":{}}}],["5c0582ff",{"_index":487,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["5vw",{"_index":2322,"title":{},"body":{"components/SignupComponent.html":{}}}],["6",{"_index":1667,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["6/6",{"_index":2951,"title":{},"body":{"coverage.html":{}}}],["6125f",{"_index":3035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebaseapp.com",{"_index":3043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebasestorage.app",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["64px",{"_index":2313,"title":{},"body":{"components/SignupComponent.html":{}}}],["66",{"_index":2926,"title":{},"body":{"coverage.html":{}}}],["666",{"_index":2370,"title":{},"body":{"components/SignupComponent.html":{}}}],["6bb604ff",{"_index":496,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["6px",{"_index":1107,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["7",{"_index":2183,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"overview.html":{}}}],["7.8.0",{"_index":2969,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":2342,"title":{},"body":{"components/SignupComponent.html":{}}}],["703986298510",{"_index":3045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["71",{"_index":2922,"title":{},"body":{"coverage.html":{}}}],["72px",{"_index":2312,"title":{},"body":{"components/SignupComponent.html":{}}}],["75",{"_index":2915,"title":{},"body":{"coverage.html":{}}}],["768px",{"_index":2311,"title":{},"body":{"components/SignupComponent.html":{}}}],["780px",{"_index":1086,"title":{},"body":{"components/ContactListComponent.html":{}}}],["79",{"_index":2913,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1877,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["80",{"_index":2908,"title":{},"body":{"coverage.html":{}}}],["80px",{"_index":997,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["81",{"_index":2911,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":2924,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2937,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":1049,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["9",{"_index":2220,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["90",{"_index":2952,"title":{},"body":{"coverage.html":{}}}],["90vw",{"_index":2330,"title":{},"body":{"components/SignupComponent.html":{}}}],["92",{"_index":2940,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":2935,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":2928,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":2947,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":2932,"title":{},"body":{"coverage.html":{}}}],["96px",{"_index":2371,"title":{},"body":{"components/SignupComponent.html":{}}}],["9c27b0",{"_index":473,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["9e9e9e",{"_index":756,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["9px",{"_index":994,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.dateobj!.gettime",{"_index":1461,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["a.key.localecompare(b.key",{"_index":977,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.name.localecompare(b.name",{"_index":976,"title":{},"body":{"components/ContactListComponent.html":{}}}],["absolute",{"_index":1069,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["abstractcontrol",{"_index":427,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["abuses",{"_index":2229,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accent",{"_index":2340,"title":{},"body":{"components/SignupComponent.html":{}}}],["accept",{"_index":2304,"title":{},"body":{"components/SignupComponent.html":{}}}],["acceptable",{"_index":2174,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["acceptance",{"_index":1677,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["access",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["accessing",{"_index":1679,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accessors",{"_index":624,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["accidental",{"_index":1318,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["accordance",{"_index":1719,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accordingly",{"_index":647,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["account",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["accounts",{"_index":2197,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accuracy",{"_index":1590,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["acknowledge",{"_index":1681,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["acquisition",{"_index":2137,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["act",{"_index":2012,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["action",{"_index":1317,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["actions",{"_index":1335,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["activated",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{}}}],["active",{"_index":828,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["activities",{"_index":1723,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["activity",{"_index":2094,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["actual_component",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["add",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["add/edit",{"_index":1976,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["addcontact",{"_index":1163,"title":{},"body":{"injectables/ContactService.html":{}}}],["addcontact(newcontact",{"_index":524,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc",{"_index":423,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(contactsref",{"_index":526,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc(subtasksref",{"_index":2510,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(tasksref",{"_index":2505,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["added",{"_index":522,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addedcontact",{"_index":785,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["adding",{"_index":1611,"title":{},"body":{"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["additional",{"_index":1631,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["address",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["addresses",{"_index":2192,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adds",{"_index":520,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addsubtask",{"_index":2427,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskService.html":{}}}],["addsubtask(colid",{"_index":2507,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtask",{"_index":2875,"title":{},"body":{"injectables/TaskService.html":{}}}],["addtask(newtask",{"_index":2502,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtaskcomponent",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["adequate",{"_index":2149,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adjust",{"_index":1219,"title":{},"body":{"components/ContactsComponent.html":{}}}],["adjusts",{"_index":645,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["advertising",{"_index":2224,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["advised",{"_index":1760,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["affiliates",{"_index":1769,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["again",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["against",{"_index":1775,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["agents",{"_index":1773,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["agree",{"_index":1682,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["aizasyawyou260exmo3445mltsqcjzrheg6aq9a",{"_index":3041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["akademie",{"_index":1556,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["align",{"_index":1015,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["allcontacts.find((contact",{"_index":732,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["allowed",{"_index":541,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["allows",{"_index":1915,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["along",{"_index":2646,"title":{},"body":{"components/TaskComponent.html":{}}}],["alphabetical",{"_index":938,"title":{},"body":{"components/ContactListComponent.html":{}}}],["alphabetically",{"_index":906,"title":{},"body":{"components/ContactListComponent.html":{}}}],["already",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"interfaces/UserData.html":{}}}],["amendments",{"_index":1687,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["amp",{"_index":1697,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["analysis",{"_index":2135,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["analytics",{"_index":2130,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["and/or",{"_index":1783,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["angular",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["angular's",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{}}}],["angular/animations",{"_index":698,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SummaryComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":2964,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/drag",{"_index":1343,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["angular/common",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":2966,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":2967,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/auth",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["angular/fire/firestore",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["angular/forms",{"_index":429,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":2968,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["animate",{"_index":697,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["animate('1.5s",{"_index":1391,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["animate('250ms",{"_index":1273,"title":{},"body":{"components/ContactsComponent.html":{}}}],["animate('2s",{"_index":1844,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["animation",{"_index":1220,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["animationdirection",{"_index":1204,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animationevent",{"_index":1238,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animations",{"_index":667,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["animationstate",{"_index":599,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["anonymized",{"_index":2201,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["another",{"_index":1626,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["apikey",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["app.component.html",{"_index":22,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":2919,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appear",{"_index":1901,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["appearance",{"_index":2358,"title":{},"body":{"components/SignupComponent.html":{}}}],["appid",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applicable",{"_index":821,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["application",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"index.html":{}}}],["applicationconfig",{"_index":3028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":1617,"title":{},"body":{"components/HelpComponent.html":{}}}],["arguments",{"_index":631,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["arising",{"_index":1762,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["array",{"_index":507,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["array.isarray(subtasklist",{"_index":2696,"title":{},"body":{"components/TaskComponent.html":{}}}],["arrays",{"_index":911,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["artifacts",{"_index":3000,"title":{},"body":{"index.html":{}}}],["ascending",{"_index":2820,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["aside",{"_index":1710,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ask",{"_index":2073,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["aspect",{"_index":1699,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["aspects",{"_index":1591,"title":{},"body":{"components/HelpComponent.html":{}}}],["asset",{"_index":2163,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["assign",{"_index":1158,"title":{},"body":{"injectables/ContactManager.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["assigned",{"_index":418,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["assignedto",{"_index":2478,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["assignees",{"_index":1620,"title":{},"body":{"components/HelpComponent.html":{}}}],["associated",{"_index":1713,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["assume",{"_index":2180,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["async",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["attaches",{"_index":1225,"title":{},"body":{"components/ContactsComponent.html":{}}}],["attempts",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth.service",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["auth/email",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/invalid",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/network",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/too",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/user",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/weak",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/wrong",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["authdomain",{"_index":3042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":2107,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["authenticated",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["authentication",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["authguard",{"_index":146,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["authservice",{"_index":158,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["auto",{"_index":991,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["automatic",{"_index":1325,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["automatically",{"_index":417,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["availability",{"_index":1588,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["available",{"_index":372,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/NavigationHistoryService.html":{},"index.html":{}}}],["avatar",{"_index":468,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["avatarcolors",{"_index":472,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["avoid",{"_index":543,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["await",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["awaitfeedback",{"_index":2771,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["awaitfeedbacklist",{"_index":1352,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["awaiting",{"_index":2619,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["awaitingfeedbackcount",{"_index":1403,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b",{"_index":975,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["b.dateobj!.gettime",{"_index":1462,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b3c511ff",{"_index":483,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["back",{"_index":1227,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["backend",{"_index":2210,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["background",{"_index":998,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["backgroundvisible",{"_index":1205,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["backtolist",{"_index":619,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["based",{"_index":579,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["beacons",{"_index":2091,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["before",{"_index":1836,"title":{},"body":{"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["behalf",{"_index":2063,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["behavior",{"_index":1951,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskDetailsComponent.html":{}}}],["behaviorsubject",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["behaviorsubject(false",{"_index":459,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["behaviorsubject(null",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["behind",{"_index":1264,"title":{},"body":{"components/ContactsComponent.html":{}}}],["bei",{"_index":2863,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["being",{"_index":464,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["belonging",{"_index":2466,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["benefit",{"_index":1546,"title":{},"body":{"components/HelpComponent.html":{}}}],["best",{"_index":1584,"title":{},"body":{"components/HelpComponent.html":{}}}],["better",{"_index":759,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{}}}],["between",{"_index":1259,"title":{},"body":{"components/ContactsComponent.html":{},"components/TaskComponent.html":{}}}],["billboard",{"_index":1560,"title":{},"body":{"components/HelpComponent.html":{}}}],["block",{"_index":1092,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["board",{"_index":1595,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{}}}],["board'},{'name",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["boardcomponent",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["boolean",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["bootcamp",{"_index":1554,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["border",{"_index":1050,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":2060,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["bottom",{"_index":996,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["bound",{"_index":2667,"title":{},"body":{"components/TaskComponent.html":{}}}],["box",{"_index":1101,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["breach",{"_index":1784,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["break",{"_index":2857,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["brightness(0",{"_index":1111,"title":{},"body":{"components/ContactListComponent.html":{}}}],["browser",{"_index":2067,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"dependencies.html":{},"index.html":{}}}],["browsing",{"_index":2054,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["btn",{"_index":725,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["build",{"_index":2997,"title":{},"body":{"index.html":{}}}],["builder",{"_index":791,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["buildthis",{"_index":2998,"title":{},"body":{"index.html":{}}}],["built",{"_index":1548,"title":{},"body":{"components/HelpComponent.html":{}}}],["business",{"_index":1580,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["button",{"_index":1003,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["c.email",{"_index":949,"title":{},"body":{"components/ContactListComponent.html":{}}}],["c.id",{"_index":1154,"title":{},"body":{"injectables/ContactManager.html":{}}}],["c.value",{"_index":385,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["c2185b",{"_index":492,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c303aaff",{"_index":489,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c44314ff",{"_index":479,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c90d0dff",{"_index":488,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calc(1.8vw",{"_index":2318,"title":{},"body":{"components/SignupComponent.html":{}}}],["calc(100",{"_index":1005,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calc(100dvh",{"_index":986,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calculate",{"_index":582,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calculates",{"_index":2597,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["callback",{"_index":1312,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["called",{"_index":661,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/TaskComponent.html":{}}}],["calling",{"_index":1502,"title":{},"body":{"components/HeaderComponent.html":{}}}],["campaigns",{"_index":2132,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["canactivate",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cancel",{"_index":802,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["cancels",{"_index":2425,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["cancelsubtask",{"_index":2426,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["cancelsubtaskedit",{"_index":2455,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["capitalize",{"_index":2558,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalize(text",{"_index":2559,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalized",{"_index":2037,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalizes",{"_index":2557,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["card",{"_index":1618,"title":{},"body":{"components/HelpComponent.html":{}}}],["cards",{"_index":1612,"title":{},"body":{"components/HelpComponent.html":{}}}],["case",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["catch",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["catch(error",{"_index":2763,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["categories",{"_index":357,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category",{"_index":340,"title":{"interfaces/Category.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["category.color",{"_index":389,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.label",{"_index":386,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.value",{"_index":381,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["categorymanager",{"_index":347,"title":{"injectables/CategoryManager.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"coverage.html":{}}}],["caution",{"_index":1637,"title":{},"body":{"components/HelpComponent.html":{}}}],["ccc",{"_index":388,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["cdk",{"_index":1336,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdk_drag_config",{"_index":3051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cdkdragdrop",{"_index":1332,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdkdragmove",{"_index":1323,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cellphone",{"_index":2056,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["center",{"_index":1017,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["certain",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["change",{"_index":1309,"title":{},"body":{"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{}}}],["changed",{"_index":2668,"title":{},"body":{"components/TaskComponent.html":{}}}],["changes",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["changes['task",{"_index":2691,"title":{},"body":{"components/TaskComponent.html":{}}}],["changes['task'].firstchange",{"_index":2692,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus",{"_index":2624,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus(status",{"_index":2654,"title":{},"body":{"components/TaskComponent.html":{}}}],["changetaskstatus",{"_index":1298,"title":{},"body":{"injectables/DragDropManager.html":{},"components/TaskComponent.html":{}}}],["changetaskstatus(taskid",{"_index":1304,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["character",{"_index":908,"title":{},"body":{"components/ContactListComponent.html":{}}}],["characters",{"_index":1878,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["check",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["checkbox",{"_index":2355,"title":{},"body":{"components/SignupComponent.html":{}}}],["checked.png",{"_index":2363,"title":{},"body":{"components/SignupComponent.html":{}}}],["checkiftouchdevice",{"_index":1798,"title":{},"body":{"components/LoginComponent.html":{}}}],["checks",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"interfaces/UserData.html":{}}}],["choices",{"_index":2113,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["choose",{"_index":3020,"title":{},"body":{"index.html":{}}}],["city",{"_index":2075,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["claim",{"_index":1776,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["clamp(12px",{"_index":1006,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["clamp(14px",{"_index":1043,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(20px",{"_index":1024,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(24px",{"_index":2326,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(32px",{"_index":2317,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(440px",{"_index":2321,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(48px",{"_index":1010,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(4px",{"_index":1053,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(8px",{"_index":1034,"title":{},"body":{"components/ContactListComponent.html":{}}}],["class",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["clean",{"_index":2525,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["cleans",{"_index":809,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clear",{"_index":835,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["clearall",{"_index":393,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["cleareditingtask",{"_index":2556,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["clearinputs",{"_index":781,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clears",{"_index":391,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["clearselection",{"_index":560,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["cli",{"_index":2978,"title":{},"body":{"index.html":{}}}],["click",{"_index":640,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{}}}],["clicking",{"_index":635,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HelpComponent.html":{}}}],["clicks",{"_index":1491,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["close",{"_index":1249,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closecontactdetails",{"_index":607,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["closed",{"_index":801,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closedetailsoverlay",{"_index":1956,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedetailsoverlay(event",{"_index":1967,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedotsmenu",{"_index":2634,"title":{},"body":{"components/TaskComponent.html":{}}}],["closeoverlay",{"_index":786,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closes",{"_index":378,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closetaskdetails",{"_index":2726,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["closing",{"_index":806,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closure",{"_index":1990,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["cloud",{"_index":2206,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["code",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["codes",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["colid",{"_index":2506,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collaborate",{"_index":1603,"title":{},"body":{"components/HelpComponent.html":{}}}],["collect",{"_index":2084,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collected",{"_index":2065,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collecting",{"_index":2069,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collection",{"_index":421,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.firestore",{"_index":500,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.gettasksref",{"_index":2487,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["color",{"_index":345,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["colorerror",{"_index":2372,"title":{},"body":{"components/SignupComponent.html":{}}}],["colors",{"_index":469,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["column",{"_index":2325,"title":{},"body":{"components/SignupComponent.html":{}}}],["combinelatest",{"_index":702,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["come",{"_index":3018,"title":{},"body":{"index.html":{}}}],["comes",{"_index":2088,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["comma",{"_index":1135,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["command",{"_index":3012,"title":{},"body":{"index.html":{}}}],["commercially",{"_index":2173,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["commonmodule",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["company",{"_index":2048,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["compare",{"_index":916,"title":{},"body":{"components/ContactListComponent.html":{}}}],["compile",{"_index":2999,"title":{},"body":{"index.html":{}}}],["complete",{"_index":2029,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["completed",{"_index":1241,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{}}}],["completion",{"_index":2462,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["compliance",{"_index":2119,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{},"overview.html":{}}}],["computer",{"_index":2055,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["conditions",{"_index":1684,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["confirm",{"_index":2257,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmation",{"_index":2406,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["confirmpassword",{"_index":2275,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirms",{"_index":2422,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["confirmsubtask",{"_index":2562,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["confirmsubtask(event",{"_index":2423,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["connection",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"components/LegalNoticeComponent.html":{},"interfaces/UserData.html":{}}}],["consent",{"_index":2142,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["consequential",{"_index":1751,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["considered",{"_index":1515,"title":{},"body":{"components/HeaderComponent.html":{}}}],["consistent",{"_index":578,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["console.error('error",{"_index":951,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["console.error(err",{"_index":530,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["console.log(err",{"_index":576,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["console.warn",{"_index":2861,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["const",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["constructor",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["constructor(auth",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["constructor(contactservice",{"_index":626,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{}}}],["constructor(fb",{"_index":1804,"title":{},"body":{"components/LoginComponent.html":{}}}],["constructor(firestore",{"_index":1169,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["constructor(form",{"_index":787,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(navigationservice",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["constructor(private",{"_index":838,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["constructor(router",{"_index":1920,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{}}}],["constructor(taskservice",{"_index":1302,"title":{},"body":{"injectables/DragDropManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["constructs",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"components/SidebarComponent.html":{}}}],["contact",{"_index":110,"title":{"interfaces/Contact.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contact's",{"_index":653,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["contact.email",{"_index":765,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["contact.id",{"_index":733,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["contact.name",{"_index":762,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contact.name).join",{"_index":1162,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["contact.name.charat(0).touppercase",{"_index":971,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact.phone",{"_index":769,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["contact?.email",{"_index":981,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact?.name",{"_index":980,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactdetailscomponent",{"_index":109,"title":{"components/ContactDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactform",{"_index":777,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactformcomponent",{"_index":112,"title":{"components/ContactFormComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactid",{"_index":1178,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacting",{"_index":2157,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["contactlist",{"_index":2623,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactlist.length",{"_index":2716,"title":{},"body":{"components/TaskComponent.html":{}}}],["contactlist.slice(0",{"_index":2713,"title":{},"body":{"components/TaskComponent.html":{}}}],["contactlistcomponent",{"_index":114,"title":{"components/ContactListComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactmanager",{"_index":1113,"title":{"injectables/ContactManager.html":{}},"body":{"injectables/ContactManager.html":{},"coverage.html":{}}}],["contactname",{"_index":580,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactref",{"_index":586,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contacts",{"_index":498,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacts'},{'name",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacts.component.html",{"_index":1202,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.component.scss",{"_index":1203,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.filter(contact",{"_index":968,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.find(c",{"_index":948,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.push",{"_index":515,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactscomponent",{"_index":116,"title":{"components/ContactsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactselected",{"_index":894,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice",{"_index":452,"title":{"injectables/ContactService.html":{}},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactservice.getinitials(contact.name",{"_index":2714,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactservice.getinitials(contact?.name",{"_index":979,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice.getinitials(contacttoedit.name",{"_index":869,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactsref",{"_index":510,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactssubscription",{"_index":884,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacttoedit",{"_index":778,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactvisible",{"_index":600,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["contact’s",{"_index":581,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contain",{"_index":1030,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["container",{"_index":1091,"title":{},"body":{"components/ContactListComponent.html":{}}}],["containing",{"_index":549,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["contains",{"_index":434,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1019,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["context",{"_index":1340,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["contextual",{"_index":2641,"title":{},"body":{"components/TaskComponent.html":{}}}],["contracts",{"_index":2117,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["control",{"_index":437,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["control.errors",{"_index":1871,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['email",{"_index":1873,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['minlength",{"_index":1876,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['minlength'].requiredlength",{"_index":2300,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['pattern",{"_index":2301,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['required",{"_index":1872,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['requiredtrue",{"_index":2303,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.touched",{"_index":1870,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.value",{"_index":443,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["control?.dirty",{"_index":2297,"title":{},"body":{"components/SignupComponent.html":{}}}],["control?.touched",{"_index":2294,"title":{},"body":{"components/SignupComponent.html":{}}}],["controls",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["conversion",{"_index":2471,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["convert",{"_index":2537,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["convertdate",{"_index":2720,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(date",{"_index":2539,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(task.date",{"_index":2766,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["converts",{"_index":2535,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["cookie",{"_index":2109,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["cookies",{"_index":2050,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["copy",{"_index":1928,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["copyrighted",{"_index":1714,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["corresponding",{"_index":654,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["corresponds",{"_index":1496,"title":{},"body":{"components/HeaderComponent.html":{}}}],["cost",{"_index":1779,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["count",{"_index":1405,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counts",{"_index":1404,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counttasksbystatus",{"_index":2588,"title":{},"body":{"components/SummaryComponent.html":{}}}],["counttasksbystatus(tasks",{"_index":1406,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["coverage",{"_index":2901,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":876,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{}}}],["created",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["createdat",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createerror",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creates",{"_index":819,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["createuserwithemailandpassword",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createuserwithemailandpassword(this.auth",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creating",{"_index":792,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["creation",{"_index":2205,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["credentials",{"_index":1827,"title":{},"body":{"components/LoginComponent.html":{}}}],["crud",{"_index":794,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["current",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["currently",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["currenttext",{"_index":2441,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["currentuser",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["currentuser.uid",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["currentuseremail",{"_index":885,"title":{},"body":{"components/ContactListComponent.html":{}}}],["currentusersubject",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["cursor",{"_index":1058,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["custom",{"_index":430,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["d",{"_index":2615,"title":{},"body":{"components/SummaryComponent.html":{}}}],["damage",{"_index":1778,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["damages",{"_index":1753,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["dark",{"_index":1001,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["data",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["database",{"_index":2200,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["date",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["date().gethours",{"_index":1426,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date(date).gettime",{"_index":2853,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date(t.date",{"_index":1456,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date.getfullyear",{"_index":2551,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["date.gettime",{"_index":2852,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date.todate",{"_index":2850,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date.todate().gettime",{"_index":2851,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["datea",{"_index":2846,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["dateb",{"_index":2848,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["dateobj",{"_index":1453,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["day",{"_index":2545,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["day}/${month}/${year",{"_index":2552,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["dd/mm/yyyy",{"_index":2538,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["ddg",{"_index":2013,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["deadline",{"_index":2617,"title":{},"body":{"components/SummaryComponent.html":{}}}],["decoration",{"_index":2365,"title":{},"body":{"components/SignupComponent.html":{}}}],["decorators",{"_index":672,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["dedicated",{"_index":1549,"title":{},"body":{"components/HelpComponent.html":{}}}],["default",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":1766,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["defined",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["definitions",{"_index":2034,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["delay",{"_index":1315,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["delayed",{"_index":1816,"title":{},"body":{"components/LoginComponent.html":{}}}],["delays",{"_index":1242,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{}}}],["delete",{"_index":573,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deleteaccount",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deletecontact",{"_index":782,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["deletecontact(docid",{"_index":574,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deleted",{"_index":2099,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["deletedoc",{"_index":425,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(docref).catch(err",{"_index":2521,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(this.getsinglecontactsref(docid)).catch((err",{"_index":575,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deletedoc(this.getsingletaskref(docid)).catch(console.error",{"_index":2523,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletes",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["deletesubtask",{"_index":2563,"title":{},"body":{"injectables/SubtaskManager.html":{},"injectables/TaskService.html":{}}}],["deletesubtask(id",{"_index":2430,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["deletesubtask(taskid",{"_index":2520,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletetask",{"_index":2721,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deletetask(docid",{"_index":2522,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletetask(event",{"_index":2737,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["deleteuser",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleteuser(user",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleting",{"_index":693,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletion",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["demand",{"_index":1777,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["dependencies",{"_index":2962,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":1420,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["describes",{"_index":2016,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["describing",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["description",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["descriptive",{"_index":2247,"title":{},"body":{"components/SignupComponent.html":{}}}],["deselect",{"_index":1144,"title":{},"body":{"injectables/ContactManager.html":{}}}],["design",{"_index":1700,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["designed",{"_index":1547,"title":{},"body":{"components/HelpComponent.html":{}}}],["desktop",{"_index":1260,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["destroy",{"_index":2776,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["destroyed",{"_index":662,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/LoginComponent.html":{}}}],["destruction",{"_index":811,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["detail",{"_index":1228,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["detailed",{"_index":2740,"title":{},"body":{"components/TaskDetailsComponent.html":{},"index.html":{}}}],["details",{"_index":140,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details'},{'name",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component",{"_index":1270,"title":{},"body":{"components/ContactsComponent.html":{}}}],["details.component.html",{"_index":597,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.scss",{"_index":598,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.ts",{"_index":594,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["details.component.ts:107",{"_index":2736,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:114",{"_index":642,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:116",{"_index":2749,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:125",{"_index":678,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:130",{"_index":2738,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:136",{"_index":691,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:143",{"_index":666,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:147",{"_index":2746,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:162",{"_index":2741,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:174",{"_index":2739,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:197",{"_index":660,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:206",{"_index":674,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:217",{"_index":670,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:232",{"_index":657,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:242",{"_index":651,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:250",{"_index":648,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:257",{"_index":668,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:40",{"_index":2732,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:45",{"_index":2733,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:50",{"_index":2734,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:55",{"_index":2730,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:60",{"_index":2729,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:65",{"_index":682,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.ts:66",{"_index":681,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:67",{"_index":680,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:68",{"_index":684,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:69",{"_index":685,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:70",{"_index":688,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.ts:71",{"_index":687,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:72",{"_index":689,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:73",{"_index":683,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:75",{"_index":630,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:76",{"_index":628,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:80",{"_index":2752,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:81",{"_index":2751,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:88",{"_index":2742,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:90",{"_index":633,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:96",{"_index":2744,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details/contact",{"_index":593,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["details/task",{"_index":2718,"title":{},"body":{"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["detecting",{"_index":1519,"title":{},"body":{"components/HeaderComponent.html":{}}}],["detection",{"_index":1822,"title":{},"body":{"components/LoginComponent.html":{}}}],["detects",{"_index":1490,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/TaskComponent.html":{}}}],["determine",{"_index":37,"title":{},"body":{"components/AppComponent.html":{}}}],["determines",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["developed",{"_index":1693,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["developer",{"_index":1555,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["development",{"_index":1553,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["device",{"_index":679,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["devices",{"_index":1629,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["diagnostic",{"_index":2083,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["diagnostics",{"_index":2087,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["different",{"_index":2795,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["digital",{"_index":2011,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["direct",{"_index":1747,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["direction",{"_index":1221,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["directive",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["directives",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["directly",{"_index":900,"title":{},"body":{"components/ContactListComponent.html":{}}}],["directors",{"_index":1772,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["directory",{"_index":3002,"title":{},"body":{"index.html":{}}}],["dirty",{"_index":2296,"title":{},"body":{"components/SignupComponent.html":{}}}],["disabled",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["disclaimer",{"_index":1731,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["disclose",{"_index":2168,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["disclosure",{"_index":2018,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["display",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["displayed",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["displayname",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["displays",{"_index":1825,"title":{},"body":{"components/LoginComponent.html":{},"components/SidebarComponent.html":{}}}],["disputes",{"_index":2154,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["dist",{"_index":3001,"title":{},"body":{"index.html":{}}}],["distance",{"_index":3058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distributes",{"_index":2817,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distribution",{"_index":1705,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["doc",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["doc(collection(this.firestore",{"_index":2489,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.firestore",{"_index":2517,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.getcontactsref",{"_index":505,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["doc.data",{"_index":517,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc.id",{"_index":516,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docid",{"_index":503,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref",{"_index":525,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref.id",{"_index":528,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["document",{"_index":502,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{}}}],["document.queryselector('.subtask",{"_index":2444,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["document:click",{"_index":622,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["document:click(event",{"_index":632,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["documentation",{"_index":2902,"title":{},"body":{"coverage.html":{}}}],["documentdata",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["domsgen",{"_index":1676,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["done",{"_index":1355,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["donecount",{"_index":1401,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["donelist",{"_index":1354,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["don´t",{"_index":874,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["dots",{"_index":2642,"title":{},"body":{"components/TaskComponent.html":{}}}],["dr",{"_index":1663,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["drag",{"_index":1296,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dragdropmanager",{"_index":1293,"title":{"injectables/DragDropManager.html":{}},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["dragging",{"_index":1326,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["drags",{"_index":1319,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dragstartthreshold",{"_index":3053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drop",{"_index":1295,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["dropdown",{"_index":353,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{}}}],["dropping",{"_index":1628,"title":{},"body":{"components/HelpComponent.html":{}}}],["due",{"_index":1619,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["duration",{"_index":2204,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["during",{"_index":1891,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["dynamic",{"_index":2212,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1218,"title":{},"body":{"components/ContactsComponent.html":{}}}],["e",{"_index":767,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["e.g",{"_index":692,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["e2e",{"_index":3015,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":3017,"title":{},"body":{"index.html":{}}}],["e91e63",{"_index":481,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["each",{"_index":1630,"title":{},"body":{"components/HelpComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["ease",{"_index":710,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["edge",{"_index":1328,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["edit",{"_index":565,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["editcontact",{"_index":465,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["editcontactsubject",{"_index":463,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["editcontactsubscription",{"_index":779,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["edited",{"_index":462,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["editing",{"_index":451,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["editingsubtaskid",{"_index":2394,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editingsubtasktext",{"_index":2395,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editingtask",{"_index":2482,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["edits",{"_index":2433,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editsubtask",{"_index":2564,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["editsubtask(id",{"_index":2435,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editsubtaskprompt",{"_index":2565,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["editsubtaskprompt(id",{"_index":2442,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["edittask",{"_index":2727,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["educational",{"_index":1576,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["effect",{"_index":2184,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["effective",{"_index":1562,"title":{},"body":{"components/HelpComponent.html":{}}}],["effectively",{"_index":1640,"title":{},"body":{"components/HelpComponent.html":{}}}],["efficiency",{"_index":1568,"title":{},"body":{"components/HelpComponent.html":{}}}],["el.iscompleted).length",{"_index":2698,"title":{},"body":{"components/TaskComponent.html":{}}}],["electronic",{"_index":2175,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["element",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["elementref",{"_index":627,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{}}}],["ellipsis",{"_index":1080,"title":{},"body":{"components/ContactListComponent.html":{}}}],["elsewhere",{"_index":1492,"title":{},"body":{"components/HeaderComponent.html":{}}}],["email",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["email.trim",{"_index":859,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["emits",{"_index":555,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["emitted",{"_index":1247,"title":{},"body":{"components/ContactsComponent.html":{}}}],["emitting",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["employees",{"_index":1774,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["empties",{"_index":2793,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["empty",{"_index":2248,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["emptyarrays",{"_index":2777,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["enabled",{"_index":1809,"title":{},"body":{"components/LoginComponent.html":{}}}],["encrypted",{"_index":2193,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["end",{"_index":3014,"title":{},"body":{"index.html":{}}}],["enforcement",{"_index":2155,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["enhancements",{"_index":1900,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["enjoy",{"_index":1649,"title":{},"body":{"components/HelpComponent.html":{}}}],["ensure",{"_index":1583,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["enter",{"_index":1874,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["entered",{"_index":2263,"title":{},"body":{"components/SignupComponent.html":{}}}],["entity",{"_index":2068,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["entry",{"_index":815,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["err",{"_index":529,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["error",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["errorcode",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["errormessage",{"_index":1791,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["errors",{"_index":1829,"title":{},"body":{"components/LoginComponent.html":{}}}],["escape",{"_index":2461,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["essential",{"_index":2106,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["etc",{"_index":1621,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["evaluate",{"_index":2659,"title":{},"body":{"components/TaskComponent.html":{}}}],["even",{"_index":1759,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["event",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.container",{"_index":1357,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.container.data",{"_index":1358,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.container.id",{"_index":1348,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.currentindex",{"_index":1360,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.item.data",{"_index":1345,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.key",{"_index":2459,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["event.pointerposition.y",{"_index":1368,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.preventdefault",{"_index":2419,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["event.previouscontainer",{"_index":1356,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previouscontainer.data",{"_index":1361,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previousindex",{"_index":1359,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.stoppropagation",{"_index":2424,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.target",{"_index":718,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskComponent.html":{}}}],["event.tostate",{"_index":1290,"title":{},"body":{"components/ContactsComponent.html":{}}}],["event.urlafterredirects",{"_index":96,"title":{},"body":{"components/AppComponent.html":{}}}],["eventcoalescing",{"_index":3030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":629,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["events",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["example",{"_index":2983,"title":{},"body":{"index.html":{}}}],["examples",{"_index":2104,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["excluding",{"_index":2669,"title":{},"body":{"components/TaskComponent.html":{}}}],["execute",{"_index":3008,"title":{},"body":{"index.html":{}}}],["exemplary",{"_index":1752,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["exercise",{"_index":1577,"title":{},"body":{"components/HelpComponent.html":{}}}],["exist",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["existing",{"_index":531,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["expected",{"_index":1991,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["experience",{"_index":1586,"title":{},"body":{"components/HelpComponent.html":{}}}],["expiry",{"_index":2103,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["exploring",{"_index":1594,"title":{},"body":{"components/HelpComponent.html":{}}}],["export",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["express",{"_index":1738,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["extensive",{"_index":1579,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["extra",{"_index":546,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["extracts",{"_index":1184,"title":{},"body":{"injectables/ContactService.html":{}}}],["eye",{"_index":2386,"title":{},"body":{"components/SignupComponent.html":{}}}],["f44336",{"_index":477,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["f5f5f5",{"_index":1063,"title":{},"body":{"components/ContactListComponent.html":{}}}],["fab",{"_index":1090,"title":{},"body":{"components/ContactListComponent.html":{}}}],["facilitate",{"_index":2064,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["fade",{"_index":1888,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["failed",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["fails",{"_index":1830,"title":{},"body":{"components/LoginComponent.html":{}}}],["failure",{"_index":2265,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["fallback",{"_index":1498,"title":{},"body":{"components/HeaderComponent.html":{}}}],["false",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["family",{"_index":1037,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["fb",{"_index":1806,"title":{},"body":{"components/LoginComponent.html":{}}}],["features",{"_index":2213,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["feedback",{"_index":1353,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["feel",{"_index":1644,"title":{},"body":{"components/HelpComponent.html":{}}}],["fees",{"_index":1781,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fetches",{"_index":1177,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskDetailsComponent.html":{}}}],["fetching",{"_index":2639,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["ff5722",{"_index":484,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ff9800",{"_index":475,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ffa000",{"_index":494,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["fff",{"_index":2378,"title":{},"body":{"components/SignupComponent.html":{}}}],["ffffff",{"_index":1065,"title":{},"body":{"components/ContactListComponent.html":{}}}],["field",{"_index":1813,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["fields",{"_index":542,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["files",{"_index":2051,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["fill",{"_index":1605,"title":{},"body":{"components/HelpComponent.html":{}}}],["fills",{"_index":834,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["filter",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/TaskListManager.html":{}}}],["filter((t",{"_index":1450,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["filtered",{"_index":2805,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filtering",{"_index":2770,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filters",{"_index":2802,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["find",{"_index":1311,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["finished",{"_index":1838,"title":{},"body":{"components/LoginComponent.html":{},"injectables/OverlayManager.html":{}}}],["firebase",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["firebase’s",{"_index":2219,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["firestore",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["firestoretimestamp",{"_index":1379,"title":{"interfaces/FirestoreTimestamp.html":{}},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["first",{"_index":907,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{}}}],["firstload",{"_index":601,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["fitness",{"_index":1742,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fixed",{"_index":1097,"title":{},"body":{"components/ContactListComponent.html":{}}}],["flag",{"_index":1495,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["flex",{"_index":1014,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["flickering",{"_index":1244,"title":{},"body":{"components/ContactsComponent.html":{}}}],["flow",{"_index":1569,"title":{},"body":{"components/HelpComponent.html":{}}}],["following",{"_index":1683,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["font",{"_index":1036,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["footer",{"_index":1473,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer'},{'name",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["footer.component.html",{"_index":1475,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.component.scss",{"_index":1476,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer/footer.component",{"_index":1840,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["footercomponent",{"_index":118,"title":{"components/FooterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["forget",{"_index":875,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form",{"_index":432,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["form'},{'name",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["form.component",{"_index":1271,"title":{},"body":{"components/ContactsComponent.html":{}}}],["form.component.html",{"_index":775,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.scss",{"_index":776,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts",{"_index":772,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{}}}],["form.component.ts:102",{"_index":816,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:113",{"_index":817,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:139",{"_index":804,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:146",{"_index":807,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:32",{"_index":795,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:38",{"_index":799,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:43",{"_index":823,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:48",{"_index":826,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:53",{"_index":789,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:60",{"_index":825,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:66",{"_index":813,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:79",{"_index":831,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:93",{"_index":808,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form/contact",{"_index":771,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["format",{"_index":2543,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["formatdate",{"_index":2876,"title":{},"body":{"injectables/TaskService.html":{}}}],["formatdate(date",{"_index":2544,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["formats",{"_index":2542,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["formatted",{"_index":2536,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["formbuilder",{"_index":788,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formgroup",{"_index":822,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formsmodule",{"_index":774,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["found",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["four",{"_index":1601,"title":{},"body":{"components/HelpComponent.html":{}}}],["frame",{"_index":2316,"title":{},"body":{"components/SignupComponent.html":{}}}],["framework",{"_index":3019,"title":{},"body":{"index.html":{}}}],["fraud",{"_index":2108,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["free",{"_index":1645,"title":{},"body":{"components/HelpComponent.html":{}}}],["friendly",{"_index":1812,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["fs12",{"_index":1068,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["fs14",{"_index":2356,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs20",{"_index":2346,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs47",{"_index":2337,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":419,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{}}}],["fullcontact",{"_index":527,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["function",{"_index":441,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["functionality",{"_index":2110,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["functions",{"_index":2207,"title":{"miscellaneous/functions.html":{}},"body":{"components/PrivacyPolicyComponent.html":{},"miscellaneous/functions.html":{}}}],["future",{"_index":1899,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["futuretasks",{"_index":1449,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.filter",{"_index":1467,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.length",{"_index":1459,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.sort((a",{"_index":1460,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks[0].dateobj",{"_index":1464,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["gap",{"_index":1020,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["general",{"_index":2015,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["generate",{"_index":659,"title":{},"body":{"components/ContactDetailsComponent.html":{},"index.html":{}}}],["generated",{"_index":523,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["generates",{"_index":577,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["generator",{"_index":2023,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["german",{"_index":2010,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["getanimationdirection",{"_index":1957,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getauth",{"_index":3050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getawaitfeedbacktasks",{"_index":2778,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getbackgroundvisible",{"_index":1958,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getcategories",{"_index":373,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorycolor",{"_index":387,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorytext",{"_index":383,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcleanjson",{"_index":1164,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updated",{"_index":2526,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updatedcontact",{"_index":550,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcompletedsubtaskscount",{"_index":2625,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcompletedsubtaskscount(subtasklist",{"_index":2657,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontactbyid",{"_index":1165,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactbyid(contactid",{"_index":1175,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactcolor",{"_index":608,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["getcontactcolor(contact",{"_index":1129,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactcolor(contactname",{"_index":585,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactcolor(name",{"_index":650,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["getcontactinitials",{"_index":1117,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactinitials(contact",{"_index":1131,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactlist",{"_index":2626,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontacts",{"_index":508,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactsref",{"_index":499,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcurrentuser",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["getcurrentuserdata",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getcurrentusername",{"_index":1483,"title":{},"body":{"components/HeaderComponent.html":{}}}],["getcurrentusername().charat(0).touppercase",{"_index":1526,"title":{},"body":{"components/HeaderComponent.html":{}}}],["getdatatoedit",{"_index":780,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["getdatevalue",{"_index":2779,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdatevalue(date",{"_index":2794,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdoc",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["getdoc(contactref).then(snapshot",{"_index":588,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdoc(doc(this.firestore",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getdocs",{"_index":426,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdonetasks",{"_index":2780,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdragdelay",{"_index":1299,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["geteditingsubtaskid",{"_index":2410,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["geteditingsubtasktext",{"_index":2412,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["geteditingtask",{"_index":2555,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["geterrormessage",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["geterrormessage(errorcode",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getfilteredtasks",{"_index":2781,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfilteredtasks(status",{"_index":2799,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfirestore",{"_index":3047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getgreeting",{"_index":1424,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["gethistory",{"_index":1917,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getinitials",{"_index":609,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinitials(contact.name",{"_index":761,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["getinitials(name",{"_index":656,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinprogresstasks",{"_index":2782,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getisanimationdisabled",{"_index":690,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["getisdotsmenuopen",{"_index":2684,"title":{},"body":{"components/TaskComponent.html":{}}}],["getoverlayvisible",{"_index":1959,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getpreviousurl",{"_index":1918,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getremainingcontactnames",{"_index":1118,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["getremainingcontactnames(remainingcontacts",{"_index":1133,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["gets",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["getselectedcategory",{"_index":363,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getselectedcontacts",{"_index":1119,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedcontactstext",{"_index":1120,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedtask",{"_index":1960,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowaddoredittask",{"_index":1961,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowcategorydropdown",{"_index":369,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getshowcontactdropdown",{"_index":1121,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getshowsubtaskconfirmation",{"_index":2407,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["getshowtaskdetails",{"_index":1962,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getsinglecontactsref",{"_index":1166,"title":{},"body":{"injectables/ContactService.html":{}}}],["getsinglecontactsref(docid",{"_index":504,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getsingletaskref",{"_index":2877,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskref(docid",{"_index":2488,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtaskinput",{"_index":2403,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["getsubtasks",{"_index":2398,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskService.html":{}}}],["getsubtasks(taskid",{"_index":2497,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtasksbytaskid",{"_index":2783,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask",{"_index":2784,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask(selectedtask",{"_index":2808,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask",{"_index":2785,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask(taskid",{"_index":2810,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksref",{"_index":2878,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsubtasksref(subcolid",{"_index":2486,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasklist",{"_index":2786,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettasks",{"_index":2491,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasksref",{"_index":2483,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getting",{"_index":2976,"title":{"index.html":{}},"body":{}}],["gettodotasks",{"_index":2787,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettotaltaskcount",{"_index":2609,"title":{},"body":{"components/SummaryComponent.html":{}}}],["getvalidationmessage",{"_index":1799,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('confirmpassword",{"_index":2306,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('email",{"_index":1880,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('name",{"_index":2305,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('password",{"_index":1881,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'confirmpassword",{"_index":2388,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'email",{"_index":1883,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'name",{"_index":2387,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'password",{"_index":1884,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(field",{"_index":1810,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["given",{"_index":902,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["glance",{"_index":2613,"title":{},"body":{"components/SummaryComponent.html":{}}}],["gmbh",{"_index":1695,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["go",{"_index":1604,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["goback",{"_index":1532,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["good",{"_index":1422,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["goodwill",{"_index":1756,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["google",{"_index":2188,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google´s",{"_index":2218,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google’s",{"_index":2214,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["gotoboard",{"_index":2589,"title":{},"body":{"components/SummaryComponent.html":{}}}],["greeting",{"_index":1399,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingshown",{"_index":1437,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingstate",{"_index":1394,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["group",{"_index":824,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["group.get('confirmpassword')?.value",{"_index":2280,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.get('password')?.value",{"_index":2279,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.key",{"_index":978,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial",{"_index":889,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial(contacts",{"_index":903,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouped",{"_index":933,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupedcontacts",{"_index":886,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouping",{"_index":923,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups",{"_index":905,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial",{"_index":972,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].push(contact",{"_index":973,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].sort((a",{"_index":974,"title":{},"body":{"components/ContactListComponent.html":{}}}],["guarantee",{"_index":1587,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["guard",{"_index":145,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guest",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["guest123",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guest@join.com",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guestemail",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guestpassword",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guide",{"_index":1541,"title":{},"body":{"components/HelpComponent.html":{}}}],["guidelines",{"_index":1686,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["h2",{"_index":2335,"title":{},"body":{"components/SignupComponent.html":{}}}],["h4",{"_index":1033,"title":{},"body":{"components/ContactListComponent.html":{}}}],["hamburg",{"_index":1669,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["handle",{"_index":2008,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["handledragmove",{"_index":1300,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledragmove(event",{"_index":1322,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop",{"_index":1301,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop(event",{"_index":1331,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handler",{"_index":1510,"title":{},"body":{"components/HeaderComponent.html":{}}}],["handles",{"_index":348,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["handling",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["harass",{"_index":1724,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harm",{"_index":1725,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harmless",{"_index":1768,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["hash",{"_index":583,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hasn't",{"_index":1818,"title":{},"body":{"components/LoginComponent.html":{}}}],["hasn’t",{"_index":1889,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["hasselectedcategory",{"_index":390,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["header",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["header'},{'name",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["header.component",{"_index":1842,"title":{},"body":{"components/LoginComponent.html":{}}}],["header.component.html",{"_index":1480,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.scss",{"_index":1481,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.ts",{"_index":1886,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["header.component.ts:50",{"_index":1902,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:56",{"_index":1896,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:61",{"_index":1894,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:69",{"_index":1887,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header/header.component",{"_index":79,"title":{},"body":{"components/AppComponent.html":{}}}],["header/login",{"_index":1841,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["headercomponent",{"_index":19,"title":{"components/HeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["height",{"_index":985,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["help",{"_index":1527,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["help'},{'name",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["help.component.html",{"_index":1530,"title":{},"body":{"components/HelpComponent.html":{}}}],["help.component.scss",{"_index":1531,"title":{},"body":{"components/HelpComponent.html":{}}}],["helpbuilding",{"_index":2996,"title":{},"body":{"index.html":{}}}],["helpcomponent",{"_index":121,"title":{"components/HelpComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["helper",{"_index":937,"title":{},"body":{"components/ContactListComponent.html":{}}}],["here",{"_index":1542,"title":{},"body":{"components/HelpComponent.html":{}}}],["hex",{"_index":655,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["hexadecimal",{"_index":584,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hidden",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hideform",{"_index":570,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hides",{"_index":569,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["hiding",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/ContactsComponent.html":{}}}],["highlight",{"_index":2364,"title":{},"body":{"components/SignupComponent.html":{}}}],["highly",{"_index":1561,"title":{},"body":{"components/HelpComponent.html":{}}}],["history",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["history.service",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["history.service.ts",{"_index":1909,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["history.service.ts:16",{"_index":1921,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:42",{"_index":1927,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:51",{"_index":1930,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:63",{"_index":1931,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["hold",{"_index":1767,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["holding",{"_index":1934,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["holds",{"_index":932,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hook",{"_index":1224,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["hostlistener",{"_index":700,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('document:click",{"_index":673,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('window:resize",{"_index":677,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["hostlisteners",{"_index":621,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hour",{"_index":1425,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["hover",{"_index":1062,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["html",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["htmlelement",{"_index":719,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskComponent.html":{}}}],["htmlinputelement",{"_index":2445,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["http://localhost:4200",{"_index":2987,"title":{},"body":{"index.html":{}}}],["human",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["icon",{"_index":2350,"title":{},"body":{"components/SignupComponent.html":{}}}],["icon.toggle",{"_index":2385,"title":{},"body":{"components/SignupComponent.html":{}}}],["id",{"_index":413,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["identifiable",{"_index":2059,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identification",{"_index":471,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["identified",{"_index":2058,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifier",{"_index":416,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"coverage.html":{}}}],["identifiers",{"_index":2082,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifying",{"_index":899,"title":{},"body":{"components/ContactListComponent.html":{}}}],["ids",{"_index":2477,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["illegal",{"_index":1722,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["image",{"_index":1026,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["img",{"_index":1094,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["implements",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["implied",{"_index":1739,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["important",{"_index":1093,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{}}}],["imports",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["imprint",{"_index":1662,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["improve",{"_index":2022,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["inboard",{"_index":2618,"title":{},"body":{"components/SummaryComponent.html":{}}}],["incidental",{"_index":1749,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["include",{"_index":1004,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["includes",{"_index":351,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["including",{"_index":544,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["indemnify",{"_index":1765,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["indemnity",{"_index":1764,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1513,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["indicating",{"_index":1248,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["indicator",{"_index":1828,"title":{},"body":{"components/LoginComponent.html":{}}}],["indirect",{"_index":1748,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["individual",{"_index":1615,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["infinite",{"_index":2382,"title":{},"body":{"components/SignupComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["info&#64;michelle",{"_index":1646,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["info@michelle",{"_index":1653,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["information",{"_index":764,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["infrastructure",{"_index":2215,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["infringement",{"_index":1745,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["init",{"_index":2672,"title":{},"body":{"components/TaskComponent.html":{}}}],["initial",{"_index":970,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["initialization",{"_index":2743,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["initializeanimation",{"_index":1800,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["initializeapp",{"_index":3033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializeform",{"_index":1801,"title":{},"body":{"components/LoginComponent.html":{}}}],["initializes",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["initials",{"_index":658,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["initiates",{"_index":2440,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["injectable",{"_index":177,"title":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["injectables",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"overview.html":{}}}],["injecting",{"_index":790,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["injects",{"_index":1486,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["inline",{"_index":1984,"title":{},"body":{"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["inprogress",{"_index":2772,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["inprogresscount",{"_index":1402,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["inprogresslist",{"_index":1350,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["input",{"_index":433,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"miscellaneous/functions.html":{}}}],["input.invalid",{"_index":2349,"title":{},"body":{"components/SignupComponent.html":{}}}],["input::placeholder",{"_index":2347,"title":{},"body":{"components/SignupComponent.html":{}}}],["input:focus",{"_index":2376,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox",{"_index":2357,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox\"]:checked",{"_index":2361,"title":{},"body":{"components/SignupComponent.html":{}}}],["inputelement",{"_index":2443,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.focus",{"_index":2447,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.setselectionrange(inputelement.value.length",{"_index":2448,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.value",{"_index":2446,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.value.length",{"_index":2449,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputs",{"_index":2631,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["insensitive",{"_index":2804,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["instance",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["instanceof",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["intangible",{"_index":1757,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intended",{"_index":1578,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["inter",{"_index":1038,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["inter400",{"_index":1067,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["inter700",{"_index":2336,"title":{},"body":{"components/SignupComponent.html":{}}}],["interact",{"_index":1607,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["interaction",{"_index":454,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["interactions",{"_index":1730,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["interface",{"_index":277,"title":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["interfaces",{"_index":341,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{},"overview.html":{}}}],["internal",{"_index":1933,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["internet",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["interpretation",{"_index":2033,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["intimidate",{"_index":1727,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intuitive",{"_index":1574,"title":{},"body":{"components/HelpComponent.html":{}}}],["invalid",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["invert(1",{"_index":1112,"title":{},"body":{"components/ContactListComponent.html":{}}}],["investigate",{"_index":2170,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["ip",{"_index":2066,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["irreversible",{"_index":1638,"title":{},"body":{"components/HelpComponent.html":{}}}],["isanimationdisabled",{"_index":625,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["iscompleted",{"_index":2467,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["iscontactchange",{"_index":739,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["iscontactselected",{"_index":1122,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscontactselected(contact",{"_index":1142,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscurrentuser",{"_index":890,"title":{},"body":{"components/ContactListComponent.html":{}}}],["iscurrentuser(contact",{"_index":913,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isdeleting",{"_index":602,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["isdotsmenuopen",{"_index":2637,"title":{},"body":{"components/TaskComponent.html":{}}}],["isediting",{"_index":603,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["isfirestoretimestamp",{"_index":2590,"title":{},"body":{"components/SummaryComponent.html":{}}}],["isfirestoretimestamp(obj",{"_index":1411,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["isloading",{"_index":1792,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["isloggedin",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["ismobile",{"_index":604,"title":{},"body":{"components/ContactDetailsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["isselected",{"_index":891,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isselected(contact",{"_index":917,"title":{},"body":{"components/ContactListComponent.html":{}}}],["issmallscreen",{"_index":2001,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["issue",{"_index":1814,"title":{},"body":{"components/LoginComponent.html":{}}}],["istouchdevice",{"_index":1793,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["item",{"_index":2829,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["items",{"_index":1016,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["japanese",{"_index":1557,"title":{},"body":{"components/HelpComponent.html":{}}}],["jenny",{"_index":1675,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["join",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["joins",{"_index":2662,"title":{},"body":{"components/TaskComponent.html":{}}}],["json",{"_index":540,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["july",{"_index":1785,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["jurisdiction",{"_index":2146,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["justify",{"_index":1018,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["kanban",{"_index":1523,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["karma",{"_index":3009,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1910,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["keeps",{"_index":1922,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["keine",{"_index":766,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["key",{"_index":960,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["keyasc",{"_index":887,"title":{},"body":{"components/ContactListComponent.html":{}}}],["keyboard",{"_index":2417,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["keyboardevent",{"_index":2458,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["keyframes",{"_index":2383,"title":{},"body":{"components/SignupComponent.html":{}}}],["keys",{"_index":910,"title":{},"body":{"components/ContactListComponent.html":{}}}],["kind",{"_index":1737,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["label",{"_index":346,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["language",{"_index":2111,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["last",{"_index":1912,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["later",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["law",{"_index":2020,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["lawful",{"_index":1717,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["laws",{"_index":1720,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["layout",{"_index":646,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["leaks",{"_index":665,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["left",{"_index":2334,"title":{},"body":{"components/SignupComponent.html":{}}}],["legal",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["legally",{"_index":2158,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["legalnoticecomponent",{"_index":123,"title":{"components/LegalNoticeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["legend",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["length",{"_index":1470,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["letter",{"_index":934,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["level",{"_index":2474,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["leverages",{"_index":1570,"title":{},"body":{"components/HelpComponent.html":{}}}],["liability",{"_index":1734,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["liable",{"_index":1746,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["lifecycle",{"_index":1223,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["light",{"_index":999,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["limit",{"_index":1566,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["limitation",{"_index":1733,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["limited",{"_index":1740,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["linear",{"_index":2381,"title":{},"body":{"components/SignupComponent.html":{}}}],["link",{"_index":2374,"title":{},"body":{"components/SignupComponent.html":{}}}],["links",{"_index":2176,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["list",{"_index":669,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{},"index.html":{}}}],["list'},{'name",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["list.component",{"_index":1269,"title":{},"body":{"components/ContactsComponent.html":{}}}],["list.component.html",{"_index":883,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.scss",{"_index":882,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts",{"_index":880,"title":{},"body":{"components/ContactListComponent.html":{},"coverage.html":{}}}],["list.component.ts:109",{"_index":914,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:117",{"_index":926,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:127",{"_index":918,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:134",{"_index":924,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:143",{"_index":904,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:157",{"_index":935,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:164",{"_index":901,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:27",{"_index":921,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:48",{"_index":898,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:61",{"_index":931,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:66",{"_index":939,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:71",{"_index":930,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:76",{"_index":929,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:78",{"_index":928,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:79",{"_index":940,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:84",{"_index":895,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:92",{"_index":927,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:99",{"_index":919,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list/contact",{"_index":879,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["listed",{"_index":1690,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["listen",{"_index":1926,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["listener",{"_index":1217,"title":{},"body":{"components/ContactsComponent.html":{}}}],["lists",{"_index":1339,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["literal",{"_index":909,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["llc",{"_index":2189,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["load",{"_index":814,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["loadassignedcontacts",{"_index":2722,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["loading",{"_index":922,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"injectables/TaskListManager.html":{}}}],["loads",{"_index":1895,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadsubtasks",{"_index":2723,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadtasks",{"_index":2788,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["local",{"_index":2981,"title":{},"body":{"index.html":{}}}],["log",{"_index":1528,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{}}}],["logged",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["login",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["login'},{'name",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["login.component.html",{"_index":1789,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":1790,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":126,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["loginform",{"_index":1794,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginheadercomponent",{"_index":128,"title":{"components/LoginHeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["logins",{"_index":2198,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["logo",{"_index":1817,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["logostate",{"_index":1795,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["logout",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"interfaces/UserData.html":{}}}],["logs",{"_index":1501,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["long",{"_index":1879,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["lookup",{"_index":2814,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["loss",{"_index":1754,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["losses",{"_index":1758,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["low",{"_index":2475,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["mail",{"_index":768,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["main",{"_index":2338,"title":{},"body":{"components/SignupComponent.html":{}}}],["maintain",{"_index":2114,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["making",{"_index":1979,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manage",{"_index":1572,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["management",{"_index":354,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["manager.ts",{"_index":344,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["manager.ts:101",{"_index":2582,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:102",{"_index":1307,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:104",{"_index":403,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:105",{"_index":1134,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:111",{"_index":397,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{}}}],["manager.ts:112",{"_index":1128,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:12",{"_index":1150,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{}}}],["manager.ts:123",{"_index":2824,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:124",{"_index":2574,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:129",{"_index":1987,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:13",{"_index":1127,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:132",{"_index":2573,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:133",{"_index":2816,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:14",{"_index":1994,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:142",{"_index":1968,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:149",{"_index":2577,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:15",{"_index":1995,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:156",{"_index":1992,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:158",{"_index":2578,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:16",{"_index":1996,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:17",{"_index":409,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:170",{"_index":2579,"title":{},"body":{"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:18",{"_index":410,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:180",{"_index":2813,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:186",{"_index":2584,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:19",{"_index":1966,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:196",{"_index":2811,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:198",{"_index":2575,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:20",{"_index":408,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:207",{"_index":2581,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:209",{"_index":2809,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:21",{"_index":1314,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:219",{"_index":2830,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:22",{"_index":2587,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:221",{"_index":2586,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:229",{"_index":2792,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:231",{"_index":2576,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:27",{"_index":1146,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:28",{"_index":401,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:29",{"_index":1971,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:32",{"_index":1334,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:34",{"_index":1141,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:35",{"_index":405,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:36",{"_index":1972,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:39",{"_index":2806,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:41",{"_index":1148,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:42",{"_index":402,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:43",{"_index":1973,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:47",{"_index":2798,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:48",{"_index":1149,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:49",{"_index":406,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:50",{"_index":1977,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:54",{"_index":2807,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:56",{"_index":398,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:57",{"_index":1975,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:63",{"_index":407,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:64",{"_index":1974,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:65",{"_index":2801,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:70",{"_index":1143,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:71",{"_index":404,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:74",{"_index":1993,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:77",{"_index":2580,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:78",{"_index":1140,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{}}}],["manager.ts:80",{"_index":400,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:83",{"_index":1988,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:84",{"_index":2585,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:87",{"_index":1132,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:91",{"_index":2583,"title":{},"body":{"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:92",{"_index":399,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:96",{"_index":1130,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{}}}],["manages",{"_index":793,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["managing",{"_index":447,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["many",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["map",{"_index":703,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["map((t",{"_index":1452,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["maps",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["marco",{"_index":1671,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["margin",{"_index":992,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["match",{"_index":2258,"title":{},"body":{"components/SignupComponent.html":{}}}],["matchedcontact",{"_index":947,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matches",{"_index":915,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matching",{"_index":144,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1715,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["math.round((completed",{"_index":2701,"title":{},"body":{"components/TaskComponent.html":{}}}],["max",{"_index":983,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["maximize",{"_index":1567,"title":{},"body":{"components/HelpComponent.html":{}}}],["maximum",{"_index":1929,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["meaning",{"_index":1559,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["meanings",{"_index":2038,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["media",{"_index":1085,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["media(max",{"_index":1082,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["medium",{"_index":2348,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["memory",{"_index":664,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["menu",{"_index":638,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["menuopen",{"_index":605,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["menuref",{"_index":1482,"title":{},"body":{"components/HeaderComponent.html":{}}}],["merchantability",{"_index":1741,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["merger",{"_index":2127,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["message",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["messages",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["messagingsenderid",{"_index":3044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["method",{"_index":1563,"title":{},"body":{"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["methods",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["metrics",{"_index":2612,"title":{},"body":{"components/SummaryComponent.html":{}}}],["michelle",{"_index":1664,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["milliseconds",{"_index":1321,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["min",{"_index":1076,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["minimum",{"_index":2299,"title":{},"body":{"components/SignupComponent.html":{}}}],["miscellaneous",{"_index":2974,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mismatched",{"_index":2246,"title":{},"body":{"components/SignupComponent.html":{}}}],["missing",{"_index":872,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["mmmm",{"_index":2614,"title":{},"body":{"components/SummaryComponent.html":{}}}],["mobile",{"_index":637,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["mobilemenu",{"_index":720,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mobilemenu?.contains(target",{"_index":727,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mobileoptions",{"_index":722,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mobileoptions?.contains(target",{"_index":728,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mode",{"_index":827,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["modification",{"_index":1704,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["modify",{"_index":2989,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3024,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monitor",{"_index":2115,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["month",{"_index":2547,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["more",{"_index":435,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["morning",{"_index":1423,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["mouse",{"_index":1493,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mouseevent",{"_index":1488,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mousey",{"_index":1367,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["move",{"_index":1634,"title":{},"body":{"components/HelpComponent.html":{}}}],["moved",{"_index":1390,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["moveiteminarray",{"_index":1341,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["moves",{"_index":1624,"title":{},"body":{"components/HelpComponent.html":{}}}],["moving",{"_index":1623,"title":{},"body":{"components/HelpComponent.html":{}}}],["name",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["name.trim",{"_index":858,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["namefor",{"_index":2993,"title":{},"body":{"index.html":{}}}],["names",{"_index":1138,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["native",{"_index":2470,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["naumann",{"_index":1674,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["navigate",{"_index":1534,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["navigateback",{"_index":1919,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["navigates",{"_index":1537,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["navigation",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["navigationend",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["navigationhistoryservice",{"_index":31,"title":{"injectables/NavigationHistoryService.html":{}},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["navigationservice",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["navigator.maxtouchpoints",{"_index":1850,"title":{},"body":{"components/LoginComponent.html":{}}}],["near",{"_index":1327,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["necessary",{"_index":2105,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["need",{"_index":1597,"title":{},"body":{"components/HelpComponent.html":{}}}],["needs",{"_index":2196,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["network",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["new",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"index.html":{}}}],["newcontact",{"_index":521,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["newemail",{"_index":2260,"title":{},"body":{"components/SignupComponent.html":{}}}],["newly",{"_index":796,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{}}}],["newname",{"_index":2262,"title":{},"body":{"components/SignupComponent.html":{}}}],["news",{"_index":2123,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["newstatus",{"_index":1346,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["newsubtask",{"_index":2428,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["newtask",{"_index":2501,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["newtext",{"_index":2434,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["newtext.trim",{"_index":2439,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["next",{"_index":736,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["nextdate",{"_index":1463,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdate.gettime",{"_index":1469,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdeadlinecount",{"_index":1398,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdeadlinedate",{"_index":1397,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextsubtaskid",{"_index":2393,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["ng",{"_index":2984,"title":{},"body":{"index.html":{}}}],["ngfor",{"_index":2826,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["ngonchanges",{"_index":2627,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngonchanges(changes",{"_index":2664,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngondestroy",{"_index":610,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{}}}],["ngoninit",{"_index":611,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["nice",{"_index":1433,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nocontactvisible",{"_index":620,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["non",{"_index":1744,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["none",{"_index":988,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"injectables/TaskListManager.html":{}}}],["note",{"_index":1575,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["notice",{"_index":1478,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["notice'},{'name",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["notice.component.html",{"_index":1658,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.scss",{"_index":1659,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts",{"_index":1657,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notice.component.ts:19",{"_index":1660,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts:31",{"_index":1661,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice/legal",{"_index":1656,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notifications",{"_index":2122,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notify",{"_index":2165,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notonlywhitespace",{"_index":837,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["notonlywhitespace(control",{"_index":442,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["now",{"_index":1448,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{}}}],["nowrap",{"_index":1079,"title":{},"body":{"components/ContactListComponent.html":{}}}],["null",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":420,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["number.max_safe_integer",{"_index":2797,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["numbers",{"_index":2302,"title":{},"body":{"components/SignupComponent.html":{}}}],["numeric",{"_index":2796,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["obj",{"_index":1410,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["obj.todate",{"_index":1412,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["object",{"_index":440,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["objects",{"_index":2663,"title":{},"body":{"components/TaskComponent.html":{}}}],["obligations",{"_index":2153,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["observable",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["observable((observer",{"_index":509,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observable(observer",{"_index":2492,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.error(error",{"_index":519,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(contacts",{"_index":518,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observer.next(subtasks",{"_index":2500,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(tasks",{"_index":2496,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observes",{"_index":2490,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["occurred",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["offers",{"_index":2124,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["officers",{"_index":1771,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["oh",{"_index":873,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["oldest",{"_index":1924,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["onaddnewcontact",{"_index":892,"title":{},"body":{"components/ContactListComponent.html":{}}}],["onauthstatechanged",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onauthstatechanged(this.auth",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onbacktolist",{"_index":612,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{}}}],["onbacktologin",{"_index":2241,"title":{},"body":{"components/SignupComponent.html":{}}}],["once",{"_index":1606,"title":{},"body":{"components/HelpComponent.html":{}}}],["onchanges",{"_index":2686,"title":{},"body":{"components/TaskComponent.html":{}}}],["onclose",{"_index":783,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["oncontactadded",{"_index":1209,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactadded(newcontact",{"_index":1229,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactselect",{"_index":893,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselect(contact",{"_index":925,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselected",{"_index":1210,"title":{},"body":{"components/ContactsComponent.html":{}}}],["ondeletecontact",{"_index":613,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["ondestroy",{"_index":596,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["ondocumentclick",{"_index":614,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["ondocumentclick(event",{"_index":671,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["one",{"_index":1185,"title":{},"body":{"injectables/ContactService.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"index.html":{}}}],["oneditcontact",{"_index":615,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["onguestlogin",{"_index":1802,"title":{},"body":{"components/LoginComponent.html":{}}}],["oninit",{"_index":595,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["onlogin",{"_index":1803,"title":{},"body":{"components/LoginComponent.html":{}}}],["onnocontactvisible",{"_index":1211,"title":{},"body":{"components/ContactsComponent.html":{}}}],["onoverlayanimationdone",{"_index":1212,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onoverlayanimationdone(event",{"_index":1237,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onresize",{"_index":616,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["onresize(event",{"_index":676,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["onsnapshot",{"_index":422,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.getsubtasksref(taskid",{"_index":2498,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.gettasksref",{"_index":2493,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsubmit",{"_index":784,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["onsubtaskeditkeydown",{"_index":2566,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["onsubtaskeditkeydown(event",{"_index":2457,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["onsubtaskenter",{"_index":2567,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["onsubtaskenter(event",{"_index":2418,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["onsubtaskinputclick",{"_index":2415,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["onsubtasktoggle",{"_index":2724,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["onsubtasktoggle(subtask",{"_index":2745,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["ontouchstart",{"_index":1849,"title":{},"body":{"components/LoginComponent.html":{}}}],["oops",{"_index":870,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["opacity",{"_index":708,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["open",{"_index":639,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"index.html":{}}}],["openaddoreditoverlay",{"_index":1963,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["openaddoreditoverlay(event",{"_index":1982,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opendotsmenu",{"_index":2635,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler",{"_index":2628,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler(event",{"_index":2673,"title":{},"body":{"components/TaskComponent.html":{}}}],["opened",{"_index":2651,"title":{},"body":{"components/TaskComponent.html":{}}}],["openedittask",{"_index":2725,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedittask(event",{"_index":2748,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedmenutaskid",{"_index":2632,"title":{},"body":{"components/TaskComponent.html":{}}}],["opening/closing",{"_index":1947,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opens",{"_index":675,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["opentaskdetail",{"_index":1964,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetail(selectedtask",{"_index":1986,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetails",{"_index":2629,"title":{},"body":{"components/TaskComponent.html":{}}}],["opentaskdetails(task",{"_index":2675,"title":{},"body":{"components/TaskComponent.html":{}}}],["operational",{"_index":2216,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["operations",{"_index":350,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["operator",{"_index":2226,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["optimize",{"_index":2827,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["optimizes",{"_index":3004,"title":{},"body":{"index.html":{}}}],["option",{"_index":1632,"title":{},"body":{"components/HelpComponent.html":{}}}],["optional",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":724,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["order",{"_index":1596,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["orders",{"_index":2118,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["os",{"_index":2085,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["otherwise",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["output",{"_index":699,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outputs",{"_index":618,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outside",{"_index":636,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["over",{"_index":2026,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["overflow",{"_index":989,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["overlay",{"_index":800,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["overlaymanager",{"_index":1945,"title":{"injectables/OverlayManager.html":{}},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["overlays",{"_index":1948,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overlayvisible",{"_index":1952,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overview",{"_index":1545,"title":{"overview.html":{}},"body":{"components/HelpComponent.html":{},"index.html":{},"overview.html":{}}}],["owned",{"_index":1701,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ownership",{"_index":1692,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["package",{"_index":2961,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":995,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["page",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["pageloaded",{"_index":1796,"title":{},"body":{"components/LoginComponent.html":{}}}],["pages",{"_index":2080,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["palummieri",{"_index":1672,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["param",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":2485,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["part",{"_index":1551,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["partial",{"_index":551,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["particular",{"_index":1743,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["partners",{"_index":1770,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["party",{"_index":2032,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["password",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["passwordmismatch",{"_index":2291,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwords",{"_index":2194,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["passwordsdontmatch",{"_index":2281,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator",{"_index":2242,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator(group",{"_index":2255,"title":{},"body":{"components/SignupComponent.html":{}}}],["path",{"_index":1932,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["percentage",{"_index":2679,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted",{"_index":2630,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted(subtasklist",{"_index":2677,"title":{},"body":{"components/TaskComponent.html":{}}}],["perform",{"_index":2116,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["performance",{"_index":1763,"title":{},"body":{"components/LegalNoticeComponent.html":{},"index.html":{}}}],["periodically",{"_index":2186,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["permanently",{"_index":1635,"title":{},"body":{"components/HelpComponent.html":{}}}],["permitted",{"_index":2225,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persistent",{"_index":2100,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persists",{"_index":1308,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["person",{"_index":1728,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["person.svg",{"_index":1028,"title":{},"body":{"components/ContactListComponent.html":{}}}],["personal",{"_index":1608,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["personally",{"_index":2074,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["phone",{"_index":414,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["phone.trim",{"_index":860,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["pipe(filter((event",{"_index":90,"title":{},"body":{"components/AppComponent.html":{}}}],["pipe(filter(event",{"_index":1935,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["pipes",{"_index":2995,"title":{},"body":{"index.html":{}}}],["pixel",{"_index":2097,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["place",{"_index":2150,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["placed",{"_index":2052,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["plain",{"_index":539,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["played",{"_index":1890,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["please",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["plural",{"_index":2043,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["pointer",{"_index":1059,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["pointerdirectionchangethreshold",{"_index":3054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["policies",{"_index":1685,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["policy",{"_index":1477,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["policy'},{'name",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["policy.component.html",{"_index":2005,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.scss",{"_index":2006,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts",{"_index":2004,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["policy.component.ts:19",{"_index":2007,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts:31",{"_index":2009,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy/privacy",{"_index":2003,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["popularity",{"_index":2098,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["position",{"_index":1032,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["position:relative",{"_index":2308,"title":{},"body":{"components/SignupComponent.html":{}}}],["possibility",{"_index":1761,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["possible",{"_index":1585,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["posted",{"_index":2185,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["powerful",{"_index":2991,"title":{},"body":{"index.html":{}}}],["pre",{"_index":833,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["preferences",{"_index":2112,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["prefill",{"_index":1985,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["prefilled",{"_index":566,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["prepares",{"_index":2750,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["presented",{"_index":1689,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["preset",{"_index":467,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["press",{"_index":2416,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["prevent",{"_index":812,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["prevents",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/DragDropManager.html":{}}}],["previous",{"_index":1538,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["previousurl",{"_index":1941,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["primary",{"_index":2341,"title":{},"body":{"components/SignupComponent.html":{}}}],["principles",{"_index":1571,"title":{},"body":{"components/HelpComponent.html":{}}}],["priority",{"_index":2473,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["privacy",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["privacypolicy",{"_index":2276,"title":{},"body":{"components/SignupComponent.html":{}}}],["privacypolicycomponent",{"_index":129,"title":{"components/PrivacyPolicyComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["private",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["procedures",{"_index":2017,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["process",{"_index":2208,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["processed",{"_index":2145,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["processing",{"_index":2062,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["product",{"_index":1680,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["production",{"_index":3003,"title":{},"body":{"index.html":{}}}],["products",{"_index":2138,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["profile",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["profits",{"_index":1755,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["program",{"_index":2047,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["progress",{"_index":1351,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["prohibited",{"_index":1708,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["prohibition",{"_index":2221,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["project",{"_index":1524,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["projectid",{"_index":3034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects",{"_index":1573,"title":{},"body":{"components/HelpComponent.html":{}}}],["promise",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["promotions",{"_index":2139,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["propagation",{"_index":1508,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["properties",{"_index":26,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"properties.html":{}}}],["proprietary",{"_index":1709,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["protect",{"_index":2169,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protection",{"_index":2030,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protects",{"_index":2021,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["provide",{"_index":1544,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":3048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":3049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":1735,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["providedin",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["providefirebaseapp",{"_index":3032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":3046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":2061,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["providerouter(routes",{"_index":3031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":2049,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":448,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["providezonechangedetection",{"_index":3029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["publicly",{"_index":2141,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["purpose",{"_index":1696,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["purposes",{"_index":1718,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["puschkarow",{"_index":1665,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["puschkarow.de",{"_index":1647,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["push",{"_index":2121,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["quality",{"_index":1592,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["questions",{"_index":1643,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["radius",{"_index":1060,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["reached",{"_index":1925,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["reactive",{"_index":449,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["reactiveformsmodule",{"_index":773,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["readable",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["reading",{"_index":2472,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["readonly",{"_index":1414,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["real",{"_index":2209,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["reasonable",{"_index":1780,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["receive",{"_index":829,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["receives",{"_index":832,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["recent",{"_index":1911,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["rect",{"_index":1373,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["redirect",{"_index":2252,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirected",{"_index":2288,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirects",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["refer",{"_index":2217,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reference",{"_index":497,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["references",{"_index":3023,"title":{},"body":{"index.html":{}}}],["refers",{"_index":2045,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reflect",{"_index":1627,"title":{},"body":{"components/HelpComponent.html":{}}}],["reflects",{"_index":1641,"title":{},"body":{"components/HelpComponent.html":{}}}],["regarding",{"_index":1593,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["regardless",{"_index":2041,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["register",{"_index":1598,"title":{},"body":{"components/HelpComponent.html":{}}}],["registers",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["registration",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["regulations",{"_index":1721,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["reject",{"_index":2095,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["related",{"_index":349,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["relating",{"_index":1782,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["relative",{"_index":1057,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["relevant",{"_index":1969,"title":{},"body":{"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["reliability",{"_index":1589,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["reload",{"_index":1313,"title":{},"body":{"injectables/DragDropManager.html":{},"index.html":{}}}],["reloadcallback",{"_index":1306,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["reloads",{"_index":2670,"title":{},"body":{"components/TaskComponent.html":{}}}],["remain",{"_index":2101,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["remaining",{"_index":1137,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remainingcontacts",{"_index":1139,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remainingcontacts.map((contact",{"_index":1161,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remember",{"_index":1639,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["removal",{"_index":1989,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["remove",{"_index":1636,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["removebackground",{"_index":1213,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["removebackground(event",{"_index":1245,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["rendering",{"_index":2828,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["reorders",{"_index":1338,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["repeat",{"_index":1031,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["repeating",{"_index":1893,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["replication",{"_index":1706,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["represent",{"_index":1614,"title":{},"body":{"components/HelpComponent.html":{}}}],["representation",{"_index":2524,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["represented",{"_index":1670,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["representing",{"_index":412,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["represents",{"_index":1600,"title":{},"body":{"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["reproduction",{"_index":1703,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["request",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["requests",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["required",{"_index":896,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["requirements",{"_index":2167,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["requires",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{}}}],["reserved",{"_index":1898,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["reserves",{"_index":2227,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["resetoverlaystates",{"_index":1965,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["resets",{"_index":392,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{}}}],["resize",{"_index":644,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["resolved",{"_index":2649,"title":{},"body":{"components/TaskComponent.html":{}}}],["resolving",{"_index":1179,"title":{},"body":{"injectables/ContactService.html":{}}}],["resources",{"_index":3022,"title":{},"body":{"index.html":{}}}],["responsibility",{"_index":2181,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["responsible",{"_index":1487,"title":{},"body":{"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["responsive",{"_index":1950,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["restructuring",{"_index":2129,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["result",{"_index":1863,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.message",{"_index":1867,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.success",{"_index":1865,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["results",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1711,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["retained",{"_index":2156,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retention",{"_index":2152,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retrieve",{"_index":2812,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["retrieved",{"_index":2479,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["retrieves",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["return",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["returns",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":2182,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["rgba(0",{"_index":1103,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["right",{"_index":1070,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["rights",{"_index":1712,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["root",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["root'},{'name",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["rotate(360deg",{"_index":2384,"title":{},"body":{"components/SignupComponent.html":{}}}],["route",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["router",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["routermodule",{"_index":1474,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["routeroutlet",{"_index":17,"title":{},"body":{"components/AppComponent.html":{}}}],["routes",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{}}}],["routing",{"_index":1535,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["run",{"_index":2982,"title":{},"body":{"index.html":{}}}],["runner",{"_index":3011,"title":{},"body":{"index.html":{}}}],["running",{"_index":2986,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["s.id",{"_index":2437,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["safety",{"_index":2172,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sale",{"_index":2128,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["same",{"_index":2040,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sanitize",{"_index":548,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["sans",{"_index":1039,"title":{},"body":{"components/ContactListComponent.html":{}}}],["save",{"_index":877,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["savenewcontact",{"_index":2243,"title":{},"body":{"components/SignupComponent.html":{}}}],["savenewcontact(newname",{"_index":2259,"title":{},"body":{"components/SignupComponent.html":{}}}],["saves",{"_index":2450,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["savesubtaskedit",{"_index":2451,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["saving",{"_index":2254,"title":{},"body":{"components/SignupComponent.html":{}}}],["scaffolding",{"_index":2990,"title":{},"body":{"index.html":{}}}],["scale(0.95",{"_index":1110,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scale(1.1",{"_index":1109,"title":{},"body":{"components/ContactListComponent.html":{}}}],["schematics",{"_index":2994,"title":{},"body":{"index.html":{}}}],["scope",{"_index":1691,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["screen",{"_index":1235,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["screens",{"_index":1320,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["scripts",{"_index":2093,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["scrollable",{"_index":1329,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollbar",{"_index":1000,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scrolling",{"_index":1297,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollproximity",{"_index":3057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollsection",{"_index":1324,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollsection?.nativeelement",{"_index":1372,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollspeed",{"_index":3056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollstep",{"_index":1370,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["search",{"_index":2803,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchlower",{"_index":2840,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm",{"_index":2800,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm.tolowercase",{"_index":2841,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm.trim",{"_index":2839,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["seconds",{"_index":1255,"title":{},"body":{"components/ContactsComponent.html":{}}}],["section",{"_index":1330,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["section.getboundingclientrect",{"_index":1374,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["securely",{"_index":2199,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["security",{"_index":2027,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["see",{"_index":1434,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["seems",{"_index":871,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["select",{"_index":379,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcategory",{"_index":394,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["selectcategory(category",{"_index":380,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectcontact",{"_index":1123,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcontact(contact",{"_index":558,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selected",{"_index":362,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedcategory",{"_index":355,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectedcontact",{"_index":456,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["selectedcontact.id",{"_index":734,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["selectedcontacts",{"_index":1115,"title":{},"body":{"injectables/ContactManager.html":{}}}],["selectedcontactsubject",{"_index":455,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["selectedtask",{"_index":1953,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedtask?.id",{"_index":2873,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["selection",{"_index":352,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["selectionsubscription",{"_index":888,"title":{},"body":{"components/ContactListComponent.html":{}}}],["selector",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["selects",{"_index":377,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactsComponent.html":{}}}],["sending",{"_index":2223,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["separate",{"_index":1983,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["separated",{"_index":1136,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["separately",{"_index":2480,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["serif",{"_index":1040,"title":{},"body":{"components/ContactListComponent.html":{}}}],["serveonce",{"_index":2985,"title":{},"body":{"index.html":{}}}],["server",{"_index":2980,"title":{},"body":{"index.html":{}}}],["service",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["services",{"_index":897,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["services/auth.service",{"_index":941,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["services/contact.service",{"_index":701,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["services/navigation",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["services/task.service",{"_index":1344,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["session",{"_index":1503,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["sessionstorage",{"_index":1892,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.getitem('greetingshown",{"_index":1438,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.getitem('logoappeared",{"_index":1906,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.getitem('logomoved",{"_index":1854,"title":{},"body":{"components/LoginComponent.html":{}}}],["sessionstorage.removeitem('greetingshown",{"_index":1522,"title":{},"body":{"components/HeaderComponent.html":{}}}],["sessionstorage.setitem('greetingshown",{"_index":1441,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.setitem('logoappeared",{"_index":1907,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.setitem('logomoved",{"_index":1857,"title":{},"body":{"components/LoginComponent.html":{}}}],["setanimationdirection",{"_index":1214,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setanimationdirection(width",{"_index":1250,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setdoc",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["setdoc(doc(this.firestore",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["seteditingsubtasktext",{"_index":2568,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["seteditingsubtasktext(value",{"_index":2414,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["seteditingtask",{"_index":2879,"title":{},"body":{"injectables/TaskService.html":{}}}],["seteditingtask(task",{"_index":2553,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["sets",{"_index":365,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["setselectedcategory",{"_index":395,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setselectedcategory(category",{"_index":366,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setselectedcontacts",{"_index":1124,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setselectedcontacts(contacts",{"_index":1145,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcategorydropdown",{"_index":396,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setshowcategorydropdown(value",{"_index":371,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setshowcontactdropdown",{"_index":1125,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcontactdropdown(value",{"_index":1147,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowsubtaskconfirmation",{"_index":2569,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["setshowsubtaskconfirmation(value",{"_index":2409,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["setsubtaskinput",{"_index":2570,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["setsubtaskinput(value",{"_index":2405,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["setsubtasks",{"_index":2571,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["setsubtasks(subtasks",{"_index":2400,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["settimeout",{"_index":743,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{}}}],["settings",{"_index":2096,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shadow",{"_index":1102,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["shall",{"_index":2039,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["share",{"_index":2140,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sharing",{"_index":2134,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shortcuts",{"_index":2456,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["show",{"_index":556,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddform",{"_index":563,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddoredittask",{"_index":1954,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["showcategorydropdown",{"_index":356,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["showconfirmpassword",{"_index":2238,"title":{},"body":{"components/SignupComponent.html":{}}}],["showcontactdetails",{"_index":1206,"title":{},"body":{"components/ContactsComponent.html":{}}}],["showcontactdropdown",{"_index":1116,"title":{},"body":{"injectables/ContactManager.html":{}}}],["showcontent",{"_index":2719,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["showeditform",{"_index":1167,"title":{},"body":{"injectables/ContactService.html":{}}}],["showeditform(contact",{"_index":567,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showform",{"_index":460,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["showformsubject",{"_index":458,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showgreeting",{"_index":1396,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["showheaderandsidebar",{"_index":27,"title":{},"body":{"components/AppComponent.html":{}}}],["showing",{"_index":1243,"title":{},"body":{"components/ContactsComponent.html":{}}}],["shown",{"_index":1266,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["showpassword",{"_index":1797,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["shows",{"_index":1231,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{}}}],["showsubtaskconfirmation",{"_index":2397,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["showtaskdetails",{"_index":1955,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["shrink",{"_index":2360,"title":{},"body":{"components/SignupComponent.html":{}}}],["sidebar",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/SidebarComponent.html":{}}}],["sidebar'},{'name",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["sidebar.component.html",{"_index":2231,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar.component.scss",{"_index":2232,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar/sidebar.component",{"_index":78,"title":{},"body":{"components/AppComponent.html":{}}}],["sidebarcomponent",{"_index":18,"title":{"components/SidebarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["sign",{"_index":1882,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["signed",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signin",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(email",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinasguest",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signing",{"_index":2307,"title":{},"body":{"components/SignupComponent.html":{}}}],["signinwithemailandpassword",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinwithemailandpassword(this.auth",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout(this.auth",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signoutuser",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signs",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{}}}],["signup'].includes",{"_index":95,"title":{},"body":{"components/AppComponent.html":{}}}],["signup'},{'name",{"_index":134,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["signup(email",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup.component.html",{"_index":2237,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.scss",{"_index":2236,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/footer/footer.component.ts",{"_index":1472,"title":{},"body":{"components/FooterComponent.html":{},"coverage.html":{}}}],["signup/login",{"_index":1885,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts",{"_index":1788,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts:113",{"_index":1821,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:122",{"_index":1807,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:129",{"_index":1819,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:140",{"_index":1815,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:156",{"_index":1826,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:177",{"_index":1824,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:195",{"_index":1811,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:207",{"_index":1820,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:64",{"_index":1835,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:69",{"_index":1837,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:74",{"_index":1834,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:79",{"_index":1831,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:84",{"_index":1832,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:89",{"_index":1839,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:94",{"_index":1805,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/signup/signup.component.ts",{"_index":2235,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["signup/signup/signup.component.ts:109",{"_index":2256,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:119",{"_index":2253,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:147",{"_index":2261,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:160",{"_index":2250,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:174",{"_index":2245,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:44",{"_index":2268,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:49",{"_index":2264,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:54",{"_index":2269,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:59",{"_index":2266,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:64",{"_index":2267,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:69",{"_index":2244,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:89",{"_index":2249,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":133,"title":{"components/SignupComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["signupform",{"_index":2239,"title":{},"body":{"components/SignupComponent.html":{}}}],["similar",{"_index":2086,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["simplechanges",{"_index":2665,"title":{},"body":{"components/TaskComponent.html":{}}}],["single",{"_index":501,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["singular",{"_index":2042,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sites",{"_index":2179,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["size",{"_index":1029,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sizing",{"_index":2331,"title":{},"body":{"components/SignupComponent.html":{}}}],["skiplocationchange",{"_index":2251,"title":{},"body":{"components/SignupComponent.html":{}}}],["slide",{"_index":1240,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["slight",{"_index":1978,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["small",{"_index":1236,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["smooth",{"_index":1980,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["sms",{"_index":2120,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["snapshot",{"_index":513,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.data",{"_index":591,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.exists",{"_index":589,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach((doc",{"_index":514,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach(doc",{"_index":2494,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.id",{"_index":590,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["software",{"_index":2046,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["solely",{"_index":1729,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["solid",{"_index":1052,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sort",{"_index":2822,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorted",{"_index":2821,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorting",{"_index":936,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["sorts",{"_index":2818,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate",{"_index":2789,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate(tasks",{"_index":2819,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["space",{"_index":1078,"title":{},"body":{"components/ContactListComponent.html":{}}}],["spam",{"_index":2228,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["special",{"_index":1750,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/SignupComponent.html":{}}}],["specific",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["speed",{"_index":3005,"title":{},"body":{"index.html":{}}}],["spent",{"_index":2081,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["spin",{"_index":2379,"title":{},"body":{"components/SignupComponent.html":{}}}],["spinner",{"_index":2377,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/.../app.config.ts",{"_index":3027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contact.service.ts",{"_index":2975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/add",{"_index":342,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"coverage.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:30",{"_index":62,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:35",{"_index":34,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":2917,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/board/board.component.ts",{"_index":2921,"title":{},"body":{"coverage.html":{}}}],["src/app/board/drag",{"_index":1294,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["src/app/board/overlay",{"_index":1946,"title":{},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["src/app/board/task",{"_index":2717,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts",{"_index":2620,"title":{},"body":{"components/TaskComponent.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts:103",{"_index":2683,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:104",{"_index":2681,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:113",{"_index":2653,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:128",{"_index":2671,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:139",{"_index":2666,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:152",{"_index":2655,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:168",{"_index":2658,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:180",{"_index":2678,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:191",{"_index":2676,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:201",{"_index":2685,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:210",{"_index":2674,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:223",{"_index":2660,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:239",{"_index":2661,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:44",{"_index":2680,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:51",{"_index":2644,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:56",{"_index":2643,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:61",{"_index":2652,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:66",{"_index":2648,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:71",{"_index":2682,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:76",{"_index":2640,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:81",{"_index":2650,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:86",{"_index":2647,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:91",{"_index":2645,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:94",{"_index":2638,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/contacts/contact",{"_index":592,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts",{"_index":1201,"title":{},"body":{"components/ContactsComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts:106",{"_index":1230,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:116",{"_index":1251,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:123",{"_index":1252,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:137",{"_index":1246,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:149",{"_index":1239,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:160",{"_index":1226,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:167",{"_index":1233,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:174",{"_index":1234,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:53",{"_index":1256,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:58",{"_index":1268,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:63",{"_index":1267,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:68",{"_index":1262,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:73",{"_index":1265,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:78",{"_index":1216,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:93",{"_index":1222,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/header/header.component.ts",{"_index":1479,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/header/header.component.ts:108",{"_index":1506,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:117",{"_index":1500,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:129",{"_index":1497,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:138",{"_index":1499,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:52",{"_index":1516,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:57",{"_index":1512,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:62",{"_index":1485,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:77",{"_index":1494,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:92",{"_index":1489,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/login",{"_index":1471,"title":{},"body":{"components/FooterComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts:12",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.guard.ts:30",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.service.ts",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts:108",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:138",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:147",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:159",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:167",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:176",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:203",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:40",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:45",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:71",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:95",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/contact.service.ts",{"_index":411,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/services/contact.service.ts:103",{"_index":1181,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:129",{"_index":1171,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:147",{"_index":1193,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:161",{"_index":1174,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:175",{"_index":1190,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:182",{"_index":1172,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:189",{"_index":1191,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:198",{"_index":1192,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:206",{"_index":1189,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:216",{"_index":1173,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:228",{"_index":1180,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:242",{"_index":1183,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:255",{"_index":1176,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:54",{"_index":1198,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:56",{"_index":1197,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:59",{"_index":1200,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:61",{"_index":1199,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:64",{"_index":1196,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:66",{"_index":1195,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:69",{"_index":1194,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:75",{"_index":1170,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:85",{"_index":1182,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:94",{"_index":1188,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/navigation",{"_index":1908,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts",{"_index":2465,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts:103",{"_index":2896,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:124",{"_index":2894,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:144",{"_index":2884,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:162",{"_index":2883,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:179",{"_index":2900,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:191",{"_index":2899,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:202",{"_index":2888,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:212",{"_index":2889,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:221",{"_index":2891,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:247",{"_index":2887,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:261",{"_index":2890,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:273",{"_index":2898,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:280",{"_index":2892,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:287",{"_index":2886,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:297",{"_index":2885,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:71",{"_index":2882,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:78",{"_index":2897,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:87",{"_index":2895,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:96",{"_index":2893,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/shared/help/help.component.ts",{"_index":1529,"title":{},"body":{"components/HelpComponent.html":{},"coverage.html":{}}}],["src/app/shared/help/help.component.ts:19",{"_index":1533,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/help/help.component.ts:31",{"_index":1536,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/legal",{"_index":1655,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["src/app/shared/privacy",{"_index":2002,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts",{"_index":2230,"title":{},"body":{"components/SidebarComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts:19",{"_index":2233,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/sidebar/sidebar.component.ts:30",{"_index":2234,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/summary/summary.component.ts",{"_index":1380,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["src/app/summary/summary.component.ts:113",{"_index":2594,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:121",{"_index":2596,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:15",{"_index":1382,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{}}}],["src/app/summary/summary.component.ts:32",{"_index":2606,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:33",{"_index":2608,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:35",{"_index":2600,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:36",{"_index":2605,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:37",{"_index":2602,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:39",{"_index":2604,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:40",{"_index":2603,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:41",{"_index":2599,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:43",{"_index":2607,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:44",{"_index":2598,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:45",{"_index":2601,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:46",{"_index":2591,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:62",{"_index":2592,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:73",{"_index":2595,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:83",{"_index":2610,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:97",{"_index":2593,"title":{},"body":{"components/SummaryComponent.html":{}}}],["stage",{"_index":1625,"title":{},"body":{"components/HelpComponent.html":{}}}],["stages",{"_index":1633,"title":{},"body":{"components/HelpComponent.html":{}}}],["standalone",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["start",{"_index":1395,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["started",{"_index":2977,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1316,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["startmessageanimation",{"_index":1215,"title":{},"body":{"components/ContactsComponent.html":{}}}],["starts",{"_index":1253,"title":{},"body":{"components/ContactsComponent.html":{}}}],["state",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["state('appear",{"_index":1904,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["state('moved",{"_index":1388,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["state('start",{"_index":1387,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["state/province",{"_index":2076,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["statements",{"_index":2903,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1949,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["statistics",{"_index":2202,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["status",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["status).length",{"_index":1409,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["statusarraymap",{"_index":2836,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["statusarraymap[status",{"_index":2838,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["steps",{"_index":2148,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["still",{"_index":1642,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["stop",{"_index":2656,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["stops",{"_index":1507,"title":{},"body":{"components/HeaderComponent.html":{}}}],["storage",{"_index":1504,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["storagebucket",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"index.html":{}}}],["stored",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["stores",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["storing",{"_index":2190,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["story",{"_index":360,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["stream",{"_index":506,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["streams",{"_index":450,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["strictly",{"_index":1707,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["string",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["string(date.getdate()).padstart(2",{"_index":2546,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["string(date.getmonth",{"_index":2548,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["strive",{"_index":1582,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["student",{"_index":1694,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["students",{"_index":1550,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["style",{"_index":695,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["styles",{"_index":878,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styles.scss",{"_index":982,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styleurl",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["styleurls",{"_index":881,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["subcolid",{"_index":2484,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subcollection",{"_index":2481,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["submission",{"_index":798,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["submit",{"_index":803,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["subscribe",{"_index":735,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["subscribe((event",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["subscribes",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/UserData.html":{}}}],["subscribing",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{}}}],["subscription",{"_index":606,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["subscriptions",{"_index":920,"title":{},"body":{"components/ContactListComponent.html":{}}}],["subtask",{"_index":2389,"title":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{}},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["subtask's",{"_index":2747,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtask.completed",{"_index":2464,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtask.id",{"_index":2432,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["subtask.text",{"_index":2438,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtask.title",{"_index":2768,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtaskchanged",{"_index":2728,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtaskid",{"_index":2514,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtaskinput",{"_index":2396,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtasklist",{"_index":2633,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.filter((el",{"_index":2697,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.length",{"_index":2699,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtaskmanager",{"_index":2391,"title":{"injectables/SubtaskManager.html":{}},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"coverage.html":{}}}],["subtasks",{"_index":2392,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["subtasks.length",{"_index":2402,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtasks.push",{"_index":2499,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtasksbytaskid",{"_index":2773,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["subtasksref",{"_index":2508,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["success",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["successful",{"_index":797,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["successfully",{"_index":1292,"title":{},"body":{"components/ContactsComponent.html":{}}}],["successmessage",{"_index":2240,"title":{},"body":{"components/SignupComponent.html":{}}}],["such",{"_index":1698,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["suits",{"_index":3021,"title":{},"body":{"index.html":{}}}],["summary",{"_index":1383,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{}}}],["summary'},{'name",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["summary.component.html",{"_index":1384,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summary.component.scss",{"_index":1385,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summarycomponent",{"_index":135,"title":{"components/SummaryComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["support",{"_index":2136,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["supports",{"_index":1833,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["switch",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["switches",{"_index":1258,"title":{},"body":{"components/ContactsComponent.html":{}}}],["system",{"_index":2469,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["t",{"_index":1457,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.date",{"_index":1451,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.date.todate",{"_index":1455,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.dateobj",{"_index":1458,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.dateobj!.gettime",{"_index":1468,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.id",{"_index":1376,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["t.status",{"_index":1408,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["table",{"_index":2815,"title":{},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2960,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":2057,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tags",{"_index":2092,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["take",{"_index":2147,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["target",{"_index":717,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskComponent.html":{}}}],["target.closest('.dots",{"_index":2687,"title":{},"body":{"components/TaskComponent.html":{}}}],["task",{"_index":139,"title":{"interfaces/Task.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["task's",{"_index":1337,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["task'},{'name",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["task.component.html",{"_index":2621,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.scss",{"_index":2622,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.ts",{"_index":2905,"title":{},"body":{"coverage.html":{}}}],["task.description?.tolowercase().includes(searchlower",{"_index":2844,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task.id",{"_index":1362,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["task.priority",{"_index":2767,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["task.status",{"_index":1363,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["task.title",{"_index":2864,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task.title.tolowercase().includes(searchlower",{"_index":2843,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task/add",{"_index":2904,"title":{},"body":{"coverage.html":{}}}],["task/category",{"_index":343,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"coverage.html":{}}}],["task/contact",{"_index":1114,"title":{},"body":{"injectables/ContactManager.html":{},"coverage.html":{}}}],["task/subtask",{"_index":2390,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"coverage.html":{}}}],["task['status",{"_index":1347,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["taskcomponent",{"_index":137,"title":{"components/TaskComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskdetailscomponent",{"_index":138,"title":{"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskid",{"_index":1310,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["tasklist",{"_index":1305,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["tasklist.find((t",{"_index":1375,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["tasklistmanager",{"_index":2769,"title":{"injectables/TaskListManager.html":{}},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tasks",{"_index":868,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["tasks.filter((t",{"_index":1407,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["tasks.push",{"_index":2495,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks/${taskid}/subtasks/${subtaskid",{"_index":2518,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks].sort((a",{"_index":2845,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["taskselected",{"_index":2636,"title":{},"body":{"components/TaskComponent.html":{}}}],["taskservice",{"_index":1303,"title":{"injectables/TaskService.html":{}},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskservice.capitalize(task.category",{"_index":2710,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.description",{"_index":2712,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.title",{"_index":2711,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["tasksforstatus",{"_index":2837,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasksforstatus.filter",{"_index":2842,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasksref",{"_index":2503,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["team",{"_index":760,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/HelpComponent.html":{}}}],["technical",{"_index":358,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["technologies",{"_index":2090,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["telefonnummer",{"_index":770,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["tells",{"_index":2019,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["term",{"_index":1558,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["terms",{"_index":1678,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["test",{"_index":3010,"title":{},"body":{"index.html":{}}}],["testing",{"_index":3016,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":3013,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3007,"title":{},"body":{"index.html":{}}}],["text",{"_index":382,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.charat(0).touppercase",{"_index":2560,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.slice(1",{"_index":2561,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["thereto",{"_index":1688,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["therfore",{"_index":2211,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third",{"_index":2031,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third‑party",{"_index":2178,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["this.addedcontact.emit(newcontact",{"_index":864,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.addsubtask",{"_index":2421,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.animationdirection",{"_index":1285,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.animationstate",{"_index":747,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.auth.currentuser",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authservice.getcurrentuser",{"_index":953,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["this.authservice.isloggedin",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["this.authservice.signin(email",{"_index":1864,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signinasguest",{"_index":1868,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signoutuser",{"_index":1521,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.authservice.signup(email",{"_index":2286,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.awaitfeedback",{"_index":2833,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitfeedback.push(task",{"_index":2859,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitingfeedbackcount",{"_index":1418,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.backgroundvisible",{"_index":1289,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.backtolist.emit",{"_index":758,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.cancelsubtaskedit",{"_index":2454,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.categories",{"_index":374,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.categories.find(c",{"_index":384,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.changetaskstatus.emit",{"_index":2695,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.checkiftouchdevice",{"_index":1846,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.clearinputs",{"_index":865,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closedotsmenu.emit",{"_index":2689,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.closeoverlay.emit('closed",{"_index":855,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closetaskdetails.emit('close",{"_index":2756,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.contact",{"_index":738,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contact?.id",{"_index":752,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactform",{"_index":839,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.patchvalue",{"_index":848,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.reset",{"_index":854,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.valid",{"_index":856,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.value",{"_index":857,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactlist",{"_index":2693,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactlist.push(contact",{"_index":2708,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contacts.emit(this.contactlist",{"_index":2709,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.contactselected.emit",{"_index":964,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.addcontact(contact",{"_index":863,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.addcontact(newcontact",{"_index":2289,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.contactservice.clearselection",{"_index":754,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.deletecontact(this.contact.id",{"_index":753,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.deletecontact(this.contacttoedit.id",{"_index":867,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.editcontact$.subscribe(this.getdatatoedit",{"_index":846,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.getcontactbyid(contactid",{"_index":2707,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactservice.getcontactcolor(contact.name",{"_index":1160,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getcontactcolor(name",{"_index":757,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.getcontacts().subscribe",{"_index":943,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.getinitials(contact.name",{"_index":1159,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getinitials(name",{"_index":755,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["this.contactservice.hideform",{"_index":853,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.selectcontact(contact",{"_index":963,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.selectcontact(newcontact",{"_index":1282,"title":{},"body":{"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["this.contactservice.selectedcontact$.subscribe",{"_index":958,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showaddform",{"_index":966,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showeditform(this.contact",{"_index":751,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.showform",{"_index":1279,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.contactservice.updatecontact(this.contacttoedit.id",{"_index":862,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactssubscription",{"_index":942,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactssubscription.unsubscribe",{"_index":961,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contacttoedit",{"_index":847,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.email",{"_index":850,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.name",{"_index":849,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.phone",{"_index":851,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit?.id",{"_index":861,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactvisible",{"_index":742,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.counttasksbystatus",{"_index":1447,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.counttasksbystatus(tasks",{"_index":1446,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.currentuser",{"_index":954,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentuseremail",{"_index":946,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentusersubject.asobservable",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.currentusersubject.next(user",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.done",{"_index":2834,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.done.push(task",{"_index":2860,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.donecount",{"_index":1419,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.editcontactsubject.asobservable",{"_index":466,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(contact",{"_index":568,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(null",{"_index":572,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubscription",{"_index":845,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editcontactsubscription.unsubscribe",{"_index":852,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editingsubtaskid",{"_index":2411,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.editingsubtasktext",{"_index":2413,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.editingsubtasktext.trim",{"_index":2452,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.editingtask",{"_index":2554,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.editsubtask(this.editingsubtaskid",{"_index":2453,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.edittask.emit(\"edit",{"_index":2759,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.elementref.nativeelement.queryselector",{"_index":723,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.elementref.nativeelement.queryselector('.mobile",{"_index":721,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.emptyarrays",{"_index":2855,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.errormessage",{"_index":1861,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.fb.group",{"_index":1852,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.firstload",{"_index":746,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.form.group",{"_index":840,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["this.formatdate(date",{"_index":2541,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.formatdate(date.todate",{"_index":2540,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcleanjson(updatedcontact)).catch((err",{"_index":538,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcleanjson(updatedsubtask)).catch(console.error",{"_index":2519,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcleanjson(updatedtask)).catch(console.error",{"_index":2513,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcompletedsubtaskscount(subtasklist",{"_index":2700,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactlist",{"_index":2690,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactsref",{"_index":511,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcurrentuser",{"_index":952,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.getdatevalue(a.date",{"_index":2847,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.getdatevalue(b.date",{"_index":2849,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.geterrormessage(createerror.code",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.geterrormessage(error.code",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.getgreeting",{"_index":1436,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.getpreviousurl",{"_index":1942,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.getsinglecontactsref(contactid",{"_index":587,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsinglecontactsref(docid",{"_index":536,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsingletaskref(docid",{"_index":2512,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getsubtasksref(colid",{"_index":2509,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.gettasksref",{"_index":2504,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.greeting",{"_index":1435,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.greetingstate",{"_index":1440,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.groupbyinitial(contacts",{"_index":945,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.groupedcontacts",{"_index":944,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.history",{"_index":1939,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.length",{"_index":1936,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.push(event.urlafterredirects",{"_index":1938,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.shift",{"_index":1937,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history[this.history.length",{"_index":1940,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.initializeanimation",{"_index":1847,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.initializeform",{"_index":1845,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.inprogress",{"_index":2832,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogress.push(task",{"_index":2858,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogresscount",{"_index":1417,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isdeleting",{"_index":740,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.isdotsmenuopen",{"_index":2688,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.isediting",{"_index":741,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.isfirestoretimestamp(t.date",{"_index":1454,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isloading",{"_index":1860,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.ismobile",{"_index":731,"title":{},"body":{"components/ContactDetailsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.istouchdevice",{"_index":1848,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loadassignedcontacts",{"_index":2753,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.loadsubtasks",{"_index":2754,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.loginform",{"_index":1851,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.get(field",{"_index":1869,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.invalid",{"_index":1858,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.markallastouched",{"_index":1859,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.value",{"_index":1862,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.logostate",{"_index":1856,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.menuopen",{"_index":726,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["this.navigationservice.navigateback",{"_index":1539,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["this.nextdeadlinecount",{"_index":1466,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextdeadlinedate",{"_index":1465,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextsubtaskid",{"_index":2401,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.nocontactvisible.emit",{"_index":744,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.onclose",{"_index":866,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.oncontactselect(matchedcontact",{"_index":950,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.oncontactselected",{"_index":1283,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.opendotsmenu.emit(this.task.id",{"_index":2704,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.openedmenutaskid",{"_index":2703,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.overlayvisible",{"_index":1997,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.pageloaded",{"_index":1855,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.passwordsmatchvalidator",{"_index":2278,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.events",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["this.router.navigate(['/login",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["this.router.navigate(['/summary",{"_index":1866,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl",{"_index":1944,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl(previousurl",{"_index":1943,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.savenewcontact(name",{"_index":2287,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.savesubtaskedit",{"_index":2460,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.selectedcategory",{"_index":364,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.selectedcontact",{"_index":959,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontact?.id",{"_index":965,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontacts",{"_index":1151,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.findindex(c",{"_index":1153,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.push(contact",{"_index":1155,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.some(c",{"_index":1157,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.splice(index",{"_index":1156,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontactsubject.asobservable",{"_index":457,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(contact",{"_index":559,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(null",{"_index":561,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedtask",{"_index":2000,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["this.selectionsubscription",{"_index":957,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectionsubscription.unsubscribe",{"_index":962,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.setanimationdirection(window.innerwidth",{"_index":1280,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showaddoredittask",{"_index":1999,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.showcategorydropdown",{"_index":370,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.showcontactdetails",{"_index":1291,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showcontactdropdown",{"_index":1152,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.showcontent",{"_index":2755,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.showform",{"_index":1278,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showformsubject.asobservable",{"_index":461,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(false",{"_index":571,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(true",{"_index":564,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showgreeting",{"_index":1439,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.showheaderandsidebar",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["this.showsubtaskconfirmation",{"_index":2408,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.showtaskdetails",{"_index":1998,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.signupform",{"_index":2270,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.errors?.['passwordsdontmatch",{"_index":2292,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('password')?.dirty",{"_index":2298,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('password')?.touched",{"_index":2295,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get(field",{"_index":2290,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.invalid",{"_index":2282,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.markallastouched",{"_index":2283,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.value",{"_index":2285,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.sorttasksbyduedate(this.awaitfeedback",{"_index":2867,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.done",{"_index":2868,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.inprogress",{"_index":2866,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.todo",{"_index":2865,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.startmessageanimation",{"_index":1284,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.subscription",{"_index":749,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.subscription.unsubscribe",{"_index":750,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.subtaskchanged.emit(this.subtasks",{"_index":2762,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.subtaskinput",{"_index":2404,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtaskinput.trim",{"_index":2420,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasks",{"_index":2399,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["this.subtasks.filter(subtask",{"_index":2431,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasks.find(s",{"_index":2436,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasks.push(newsubtask",{"_index":2429,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasksbytaskid",{"_index":2835,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[selectedtask.id",{"_index":2874,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[task.id",{"_index":2871,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[taskid",{"_index":2872,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.successmessage",{"_index":2284,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.task.assignedto",{"_index":2706,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task.id",{"_index":2694,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.assignedto?.length",{"_index":2705,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.id",{"_index":2764,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.tasklist",{"_index":1445,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskselected.emit(this.selectedtask",{"_index":2702,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.taskservice.convertdate(date",{"_index":2757,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.deletetask(this.task.id",{"_index":2760,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.getsubtasks(task.id).subscribe((subtasks",{"_index":2870,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.taskservice.getsubtasks(this.task.id).subscribe((subtasks",{"_index":2765,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.gettasks().subscribe((tasks",{"_index":1444,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskservice.seteditingtask(this.task",{"_index":2758,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatesubtask(this.task.id",{"_index":2761,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatetask(task.id",{"_index":1365,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.taskservice.updatetask(taskid",{"_index":1377,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.toastanimationstate",{"_index":1287,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.toastmessagevisible",{"_index":1286,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.todo",{"_index":2831,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todo.push(task",{"_index":2856,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todocount",{"_index":1416,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.unsubtask",{"_index":2854,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.unsubtask.unsubscribe",{"_index":2869,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.username",{"_index":1430,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["threaten",{"_index":1726,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["threshold",{"_index":1369,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["through",{"_index":2191,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["thumb",{"_index":1089,"title":{},"body":{"components/ContactListComponent.html":{}}}],["time",{"_index":1421,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["timestamp",{"_index":2468,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["title",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["title]=\"getremainingcontactnames(contactlist.slice(4",{"_index":2715,"title":{},"body":{"components/TaskComponent.html":{}}}],["toast",{"_index":1232,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastanimationstate",{"_index":1207,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastmessagevisible",{"_index":1208,"title":{},"body":{"components/ContactsComponent.html":{}}}],["todate",{"_index":1381,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["todo",{"_index":2774,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["todocount",{"_index":1400,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["todolist",{"_index":1349,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["toggle",{"_index":1511,"title":{},"body":{"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["togglecategorydropdown",{"_index":376,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["togglecontactdropdown",{"_index":1126,"title":{},"body":{"injectables/ContactManager.html":{}}}],["toggled",{"_index":2735,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["togglemenu",{"_index":1484,"title":{},"body":{"components/HeaderComponent.html":{}}}],["togglemenu(event",{"_index":1505,"title":{},"body":{"components/HeaderComponent.html":{}}}],["togglemobilemenu",{"_index":617,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["toggles",{"_index":375,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["togglesubtaskcompletion",{"_index":2572,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["togglesubtaskcompletion(id",{"_index":2463,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["tokens",{"_index":2195,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tool",{"_index":1525,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["tools",{"_index":2992,"title":{},"body":{"index.html":{}}}],["top",{"_index":993,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["total",{"_index":1413,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["totaltaskcount",{"_index":1415,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["touch",{"_index":1808,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["touched",{"_index":2293,"title":{},"body":{"components/SignupComponent.html":{}}}],["track",{"_index":1088,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["trackby",{"_index":2825,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid",{"_index":2790,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid(index",{"_index":2823,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tracking",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["tracks",{"_index":1517,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["trademarks",{"_index":1716,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["transactions",{"_index":2161,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfer",{"_index":2144,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transferarrayitem",{"_index":1342,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["transferred",{"_index":2164,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfers",{"_index":2126,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transform",{"_index":706,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{}}}],["transition",{"_index":696,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["transition(':enter",{"_index":705,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["transition(':increment",{"_index":713,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["transition(':leave",{"_index":716,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["transition('bottom",{"_index":1277,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('right",{"_index":1274,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('start",{"_index":1389,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["transition('void",{"_index":1272,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transitions",{"_index":1257,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatex(0",{"_index":711,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatex(100",{"_index":707,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatey",{"_index":2352,"title":{},"body":{"components/SignupComponent.html":{}}}],["translatey(0",{"_index":1276,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatey(100",{"_index":1275,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transmission",{"_index":2025,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transparent",{"_index":1002,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["trends",{"_index":2131,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["trigger",{"_index":694,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeout",{"_index":1903,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["trigger('fadeoutgreeting",{"_index":1386,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeoutwrapper",{"_index":1843,"title":{},"body":{"components/LoginComponent.html":{}}}],["trigger('slideinfromright",{"_index":704,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["trigger('slideinout",{"_index":714,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["triggered",{"_index":634,"title":{},"body":{"components/ContactDetailsComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["triggering",{"_index":1509,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["triggers",{"_index":562,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["trimming",{"_index":1923,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["true",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["tslib",{"_index":2970,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1186,"title":{},"body":{"injectables/ContactService.html":{}}}],["type",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":444,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["types",{"_index":2071,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["ui",{"_index":557,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["uid",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["unauthorized",{"_index":1702,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["unbekannt",{"_index":763,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["unbekannter",{"_index":2862,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["undefined",{"_index":545,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["under",{"_index":1616,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["undergoes",{"_index":2162,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["underline",{"_index":2375,"title":{},"body":{"components/SignupComponent.html":{}}}],["understand",{"_index":2203,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unique",{"_index":415,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{}}}],["unit",{"_index":3006,"title":{},"body":{"index.html":{}}}],["unless",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["unset",{"_index":2367,"title":{},"body":{"components/SignupComponent.html":{}}}],["unsolicited",{"_index":2222,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribe",{"_index":512,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["unsubscribed",{"_index":2125,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribes",{"_index":663,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["unsubtask",{"_index":2775,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["until",{"_index":2102,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unused",{"_index":1897,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["up",{"_index":810,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["upcoming",{"_index":2616,"title":{},"body":{"components/SummaryComponent.html":{}}}],["update",{"_index":532,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["updatecallback",{"_index":1333,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatecontact",{"_index":1168,"title":{},"body":{"injectables/ContactService.html":{}}}],["updatecontact(docid",{"_index":535,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updated",{"_index":534,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["updated.assignedto",{"_index":2532,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.category",{"_index":2533,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.date",{"_index":2529,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.description",{"_index":2528,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.iscompleted",{"_index":2534,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.priority",{"_index":2530,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.status",{"_index":2531,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.title",{"_index":2527,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedcontact",{"_index":533,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.email",{"_index":553,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.name",{"_index":552,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.phone",{"_index":554,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedoc",{"_index":424,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedoc(docref",{"_index":537,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedsubtask",{"_index":2515,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask",{"_index":1364,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask).catch((error",{"_index":1366,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatedtask).then",{"_index":1378,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updateprofile",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updateprofile(user",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updates",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["updatesubtask",{"_index":2880,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatesubtask(taskid",{"_index":2516,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetask",{"_index":2881,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(docid",{"_index":2511,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetasklists",{"_index":2791,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["updating",{"_index":547,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["uppercase",{"_index":1187,"title":{},"body":{"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["urgent",{"_index":2476,"title":{},"body":{"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["url",{"_index":1916,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["url(\"../../../../public/assets/img/svg/add",{"_index":1027,"title":{},"body":{"components/ContactListComponent.html":{}}}],["url(\"/assets/img/icons/checkbox",{"_index":2362,"title":{},"body":{"components/SignupComponent.html":{}}}],["url(\"/assets/img/icons/checkbox.png",{"_index":2359,"title":{},"body":{"components/SignupComponent.html":{}}}],["urls",{"_index":1914,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["usage",{"_index":1581,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["use",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["used",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["user",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["user's",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["user.email",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user.uid",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user?.displayname",{"_index":955,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["user?.email",{"_index":956,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["usercredential",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["usercredential.user",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdata",{"_index":279,"title":{"interfaces/UserData.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["userdata.displayname",{"_index":1432,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdata?.displayname?.trim",{"_index":1431,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdoc",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.data",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.exists",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["username",{"_index":1393,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["users",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["uses",{"_index":2187,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["usevalue",{"_index":3052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":820,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["ux",{"_index":1981,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["valid",{"_index":1875,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["validate",{"_index":438,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["validates",{"_index":818,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validation",{"_index":439,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validationerrors",{"_index":428,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":431,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validators",{"_index":836,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.email",{"_index":842,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.min(10",{"_index":843,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.minlength(2",{"_index":2271,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.minlength(6",{"_index":1853,"title":{},"body":{"components/LoginComponent.html":{}}}],["validators.minlength(8",{"_index":2272,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^(?=.*[a",{"_index":2273,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^\\d",{"_index":844,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.required",{"_index":841,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.requiredtrue",{"_index":2277,"title":{},"body":{"components/SignupComponent.html":{}}}],["validcontacts",{"_index":967,"title":{},"body":{"components/ContactListComponent.html":{}}}],["validcontacts.reduce((groups",{"_index":969,"title":{},"body":{"components/ContactListComponent.html":{}}}],["value",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/variables.html":{}}}],["value.trim().length",{"_index":445,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["values",{"_index":912,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["var",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["variable",{"_index":2918,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1970,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OverlayManager.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":2079,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{},"properties.html":{}}}],["via",{"_index":830,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["view",{"_index":649,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["viewchild",{"_index":1520,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild('menu",{"_index":1518,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewing",{"_index":453,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{}}}],["viewport",{"_index":1514,"title":{},"body":{"components/HeaderComponent.html":{}}}],["views",{"_index":1261,"title":{},"body":{"components/ContactsComponent.html":{}}}],["viktor",{"_index":1673,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["visibility",{"_index":368,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["visible",{"_index":1263,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["visit",{"_index":1823,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["visited",{"_index":1913,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["visual",{"_index":470,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{}}}],["visualize",{"_index":1564,"title":{},"body":{"components/HelpComponent.html":{}}}],["void",{"_index":367,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["vulnerabilities",{"_index":2028,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["waldingstraße",{"_index":1666,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranties",{"_index":1732,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranty",{"_index":1736,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["wasempty",{"_index":737,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["we'll",{"_index":1543,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we're",{"_index":1648,"title":{},"body":{"components/HelpComponent.html":{}}}],["we\\'ll",{"_index":1650,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we\\'re",{"_index":1654,"title":{},"body":{"components/HelpComponent.html":{}}}],["weak",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["web",{"_index":1552,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["webkit",{"_index":1087,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["website",{"_index":2053,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["websites",{"_index":2177,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["weight",{"_index":1041,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["welcome",{"_index":1540,"title":{},"body":{"components/HelpComponent.html":{},"components/SummaryComponent.html":{}}}],["whenever",{"_index":2988,"title":{},"body":{"index.html":{}}}],["whether",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["white",{"_index":1077,"title":{},"body":{"components/ContactListComponent.html":{}}}],["whitespace",{"_index":436,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["whose",{"_index":2731,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["width",{"_index":729,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["window",{"_index":643,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["window).innerwidth",{"_index":730,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["window.addeventlistener('resize",{"_index":1281,"title":{},"body":{"components/ContactsComponent.html":{}}}],["window.innerwidth",{"_index":686,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{}}}],["window:resize",{"_index":623,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["window:resize(event",{"_index":641,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["within",{"_index":1610,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["without",{"_index":805,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["words",{"_index":2036,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["work",{"_index":1565,"title":{},"body":{"components/HelpComponent.html":{}}}],["wrap",{"_index":1056,"title":{},"body":{"components/ContactListComponent.html":{}}}],["wrapper",{"_index":2310,"title":{},"body":{"components/SignupComponent.html":{}}}],["wrong",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["wrongdoing",{"_index":2171,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["x",{"_index":2329,"title":{},"body":{"components/SignupComponent.html":{}}}],["y",{"_index":990,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["year",{"_index":2550,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["yes",{"_index":652,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/ContactService.html":{},"components/TaskDetailsComponent.html":{}}}],["you'll",{"_index":1599,"title":{},"body":{"components/HelpComponent.html":{}}}],["you've",{"_index":1613,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ll",{"_index":1651,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ve",{"_index":1652,"title":{},"body":{"components/HelpComponent.html":{}}}],["yourself",{"_index":1609,"title":{},"body":{"components/HelpComponent.html":{}}}],["z",{"_index":1098,"title":{},"body":{"components/ContactListComponent.html":{}}}],["z])(?=.*\\d)(?=.*[!@#$%^&*()_",{"_index":2274,"title":{},"body":{"components/SignupComponent.html":{}}}],["zindex",{"_index":3055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zip/postal",{"_index":2077,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["zone.js",{"_index":2972,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                SidebarComponent\n                                HeaderComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                showHeaderAndSidebar\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:35\n                            \n                        \n\n                \n                    \n                            Subscribes to router events to determine if the current route\nrequires hiding the header and sidebar. Also initializes navigation tracking.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to store navigation history.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's router for subscribing to route changes.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        showHeaderAndSidebar\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:30\n                        \n                    \n\n            \n                \n                    Controls whether the header and sidebar should be displayed.\nHidden on specific routes like login or signup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'join'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:35\n                        \n                    \n\n            \n                \n                    The title of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet, Router, NavigationEnd } from '@angular/router';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { HeaderComponent } from './header/header.component';\nimport { CommonModule } from '@angular/common';\nimport { NavigationHistoryService } from './services/navigation-history.service';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, SidebarComponent, HeaderComponent, CommonModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n\n  /**\n   * Controls whether the header and sidebar should be displayed.\n   * Hidden on specific routes like login or signup.\n   */\n  showHeaderAndSidebar = true;\n\n  /**\n   * The title of the application.\n   */\n  title = 'join';\n\n  /**\n   * Subscribes to router events to determine if the current route\n   * requires hiding the header and sidebar. Also initializes navigation tracking.\n   *\n   * @param navigationService - Service to store navigation history.\n   * @param router - Angular's router for subscribing to route changes.\n   */\n  constructor(\n    private navigationService: NavigationHistoryService,\n    private router: Router\n  ) {\n    this.router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        this.showHeaderAndSidebar = !['/login', '/', '/signup'].includes(\n          event.urlAfterRedirects\n        );\n      });\n  }\n}\n\n\n    \n\n    \n        \n  \n  \n    \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/services/auth.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Route guard that prevents access to certain routes\nunless the user is authenticated.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Constructs the AuthGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to check the user's authentication status\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.guard.ts:30\n                        \n                    \n\n\n            \n                \n                        Determines whether a route can be activated.\nIf the user is not authenticated, redirects to the login page.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is logged in, otherwise false\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n/**\n * Route guard that prevents access to certain routes\n * unless the user is authenticated.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  /**\n   * Constructs the AuthGuard.\n   * @param authService - Service to check the user's authentication status\n   * @param router - Angular Router used for navigation\n   */\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  /**\n   * Determines whether a route can be activated.\n   * If the user is not authenticated, redirects to the login page.\n   *\n   * @returns True if the user is logged in, otherwise false\n   */\n  canActivate(): boolean {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication service for handling user registration, login, logout,\nguest access, profile updates, account deletion, and state tracking.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentUser$\n                            \n                            \n                                    Private\n                                currentUserSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                getCurrentUser\n                            \n                            \n                                    Async\n                                getCurrentUserData\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInAsGuest\n                            \n                            \n                                    Async\n                                signOutUser\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: Auth, firestore: Firestore, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.service.ts:45\n                            \n                        \n\n                \n                    \n                            Initializes the AuthService and subscribes to authentication state changes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Auth instance\n\n\n                                                        \n                                                \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Firestore instance\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAccount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Deletes the currently authenticated user account.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Gets the current authenticated Firebase user.\n\n\n                        \n                            Returns :     User | null\n\n                        \n                            \n                                The current user or null if not logged in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCurrentUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Retrieves the current user's data from Firestore.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The user's Firestore data or null if not found\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(errorCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Maps Firebase Auth error codes to human-readable error messages.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                errorCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFirebase Auth error code\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string describing the error\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Checks whether a user is currently authenticated.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a user is signed in, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Signs in a user with email and password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInAsGuest()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Signs in as a guest user. If guest user does not exist, it will be created.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Signs out the currently authenticated user and redirects to the login page.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(email: string, password: string, displayName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Registers a new user with email, password, and display name.\nStores user data in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email address\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                        \n                                                displayName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's display name\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentUser$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentUserSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:45\n                        \n                    \n\n            \n                \n                    Observable emitting the current authenticated Firebase user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category.html":{"url":"interfaces/Category.html","title":"interface - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryManager {\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  \n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryManager.html":{"url":"injectables/CategoryManager.html","title":"injectable - CategoryManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                CategoryManager handles all category-related operations for the AddTaskComponent.\nThis includes category selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                categories\n                            \n                            \n                                    Private\n                                selectedCategory\n                            \n                            \n                                    Private\n                                showCategoryDropdown\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getCategories\n                            \n                            \n                                getCategoryColor\n                            \n                            \n                                getCategoryText\n                            \n                            \n                                getSelectedCategory\n                            \n                            \n                                getShowCategoryDropdown\n                            \n                            \n                                hasSelectedCategory\n                            \n                            \n                                selectCategory\n                            \n                            \n                                setSelectedCategory\n                            \n                            \n                                setShowCategoryDropdown\n                            \n                            \n                                toggleCategoryDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:111\n                        \n                    \n\n\n            \n                \n                        Clears the selected category and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategories\n                        \n                    \n                \n            \n            \n                \ngetCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Gets all available categories\n\n\n                        \n                            Returns :         Category[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryColor\n                        \n                    \n                \n            \n            \n                \ngetCategoryColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:92\n                        \n                    \n\n\n            \n                \n                        Returns the color for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category color or default color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryText\n                        \n                    \n                \n            \n            \n                \ngetCategoryText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:80\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category label or default text.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedCategory\n                        \n                    \n                \n            \n            \n                \ngetSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:28\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected category\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:42\n                        \n                    \n\n\n            \n                \n                        Gets the category dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSelectedCategory\n                        \n                    \n                \n            \n            \n                \nhasSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:104\n                        \n                    \n\n\n            \n                \n                        Checks if a category is currently selected.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a category is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectCategory\n                        \n                    \n                \n            \n            \n                \nselectCategory(category: Category)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:71\n                        \n                    \n\n\n            \n                \n                        Selects a category and closes the dropdown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            Category\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe category to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedCategory\n                        \n                    \n                \n            \n            \n                \nsetSelectedCategory(category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:35\n                        \n                    \n\n\n            \n                \n                        Sets the selected category\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowCategoryDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:49\n                        \n                    \n\n\n            \n                \n                        Sets the category dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:63\n                        \n                    \n\n\n            \n                \n                        Toggles the category dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showCategoryDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryManager {\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  \n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact.html":{"url":"interfaces/Contact.html","title":"interface - Contact","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a contact.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email address of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Unique identifier (automatically assigned by Firestore)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Full name of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional phone number of the contact\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n * Updates an existing contact in Firestore.\n *\n * @param docId - The Firestore document ID of the contact to update.\n * @param updatedContact - The updated contact data.\n */\nasync updateContact(docId: string, updatedContact: Contact): Promise {\n  let docRef = this.getSingleContactsRef(docId);\n  await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n    console.error(err);\n  });\n}\n\n/**\n * Returns a plain JSON object with only the allowed contact fields.\n * This is used to avoid including undefined or extra properties when updating Firestore.\n *\n * @param updatedContact - The contact object to sanitize.\n * @returns A JSON object containing name, email, and phone.\n */\ngetCleanJson(updatedContact: Contact): Partial {\n  return {\n    name: updatedContact.name,\n    email: updatedContact.email,\n    phone: updatedContact.phone,\n  };\n}\n\n/**\n * Emits a contact to the selected contact observable.\n * Used to show the contact details in the UI.\n *\n * @param contact - The contact to select.\n */\nselectContact(contact: Contact): void {\n  this.selectedContactSubject.next(contact);\n}\n\n/**\n * Clears the currently selected contact.\n */\nclearSelection(): void {\n  this.selectedContactSubject.next(null);\n}\n\n/**\n * Triggers the display of the add contact form.\n */\nshowAddForm(): void {\n  this.showFormSubject.next(true);\n}\n\n/**\n * Triggers the display of the edit contact form with a prefilled contact.\n *\n * @param contact - The contact to edit.\n */\nshowEditForm(contact: Contact): void {\n  this.editContactSubject.next(contact);\n  this.showFormSubject.next(true);\n}\n\n/**\n * Hides the contact form and clears the edit state.\n */\nhideForm(): void {\n  this.showFormSubject.next(false);\n  this.editContactSubject.next(null);\n}\n\n/**\n * Deletes a contact from Firestore.\n *\n * @param docId - The Firestore document ID of the contact to delete.\n */\nasync deleteContact(docId: string): Promise {\n  await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n    console.log(err);\n  });\n}\n\n/**\n * Generates a consistent avatar color for a contact based on their name.\n *\n * @param contactName - The contact’s name used to calculate a hash.\n * @returns A hexadecimal color string from the avatarColors array.\n */\ngetContactColor(contactName: string): string {\n  let hash = 0;\n  for (let i = 0; i  {\n  const contactRef = this.getSingleContactsRef(contactId);\n  return getDoc(contactRef).then(snapshot => {\n    if (snapshot.exists()) {\n      return { id: snapshot.id, ...snapshot.data() } as Contact;\n    }\n    return null;\n  });\n}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactDetailsComponent.html":{"url":"components/ContactDetailsComponent.html","title":"component - ContactDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-details/contact-details.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-details\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contact-details.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contact-details.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                animationState\n                            \n                            \n                                    Optional\n                                contact\n                            \n                            \n                                contactVisible\n                            \n                            \n                                    Private\n                                firstLoad\n                            \n                            \n                                isDeleting\n                            \n                            \n                                isEditing\n                            \n                            \n                                isMobile\n                            \n                            \n                                menuOpen\n                            \n                            \n                                    Private\n                                    Optional\n                                subscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeContactDetails\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getInitials\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToList\n                            \n                            \n                                onDeleteContact\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                onEditContact\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMobileMenu\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                backToList\n                            \n                            \n                                noContactVisible\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isAnimationDisabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, elementRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:76\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        backToList\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-details/contact-details.component.ts:75\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        noContactVisible\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-details/contact-details.component.ts:76\n                            \n                        \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Triggered when clicking outside the mobile menu.\nCloses the menu if it is open and the click occurred outside.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe click event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Triggered on window resize.\nAdjusts the mobile layout and menu accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe resize event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeContactDetails\n                        \n                    \n                \n            \n            \n                \ncloseContactDetails()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:250\n                        \n                    \n\n\n            \n                \n                        Closes the contact details view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:242\n                        \n                    \n\n\n            \n                \n                        Returns the color for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe contact's name.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The corresponding color as a hex code.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns the initials of a name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe name from which to generate initials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The initials.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:197\n                        \n                    \n\n\n            \n                \n                        Called when the component is destroyed.\nUnsubscribes from the subscription to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Initializes the component, subscribes to contact changes, and controls animations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToList\n                        \n                    \n                \n            \n            \n                \nonBackToList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:257\n                        \n                    \n\n\n            \n                \n                        Emits the event to return to the contact list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDeleteContact\n                        \n                    \n                \n            \n            \n                \nonDeleteContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:217\n                        \n                    \n\n\n            \n                \n                        Deletes the current contact and clears the selection.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Triggered when clicking outside the mobile menu.\nCloses the menu if it is open and the click occurred outside.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe click event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEditContact\n                        \n                    \n                \n            \n            \n                \nonEditContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:206\n                        \n                    \n\n\n            \n                \n                        Opens the edit form for the current contact.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Triggered on window resize.\nAdjusts the mobile layout and menu accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe resize event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMobileMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMobileMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:125\n                        \n                    \n\n\n            \n                \n                        Opens or closes the mobile menu when on a mobile device.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        animationState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contact\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contactVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        firstLoad\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleting\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEditing\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : window.innerWidth \n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        subscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:72\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isAnimationDisabled\n                    \n                \n\n                \n                    \n                        getisAnimationDisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/app/contacts/contact-details/contact-details.component.ts:136\n                                \n                            \n                    \n                        \n                                Returns whether animations are disabled (e.g., when deleting or editing).\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {\n  Component,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy,\n  HostListener,\n  ElementRef,\n} from '@angular/core';\nimport { ContactService, Contact } from '../../services/contact.service';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-contact-details',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './contact-details.component.html',\n  styleUrl: './contact-details.component.scss',\n\n  animations: [\n    trigger('slideInFromRight', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '250ms ease-in-out',\n          style({ transform: 'translateX(0%)', opacity: 1 })\n        ),\n      ]),\n      transition(':increment', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '250ms ease-in-out',\n          style({ transform: 'translateX(0%)', opacity: 1 })\n        ),\n      ]),\n    ],),\n\n    trigger('slideInOut', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '200ms ease-out',\n          style({ transform: 'translateX(0)', opacity: 1 })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '200ms ease-in',\n          style({ transform: 'translateX(100%)', opacity: 0 })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class ContactDetailsComponent implements OnInit, OnDestroy {\n  contactVisible = false;\n  contact?: Contact;\n  animationState = 0;\n  isDeleting = false;\n  isEditing = false;\n  menuOpen = false;\n  isMobile = window.innerWidth ();\n  @Output() noContactVisible = new EventEmitter();\n\n  constructor(\n    private contactService: ContactService,\n    private elementRef: ElementRef\n  ) {}\n\n  /**\n   * Triggered when clicking outside the mobile menu.\n   * Closes the menu if it is open and the click occurred outside.\n   *\n   * @param {Event} event - The click event.\n   */\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: Event) {\n    const target = event.target as HTMLElement;\n    const mobileMenu =\n      this.elementRef.nativeElement.querySelector('.mobile-menu');\n    const mobileOptions = this.elementRef.nativeElement.querySelector(\n      '.mobile-options-btn'\n    );\n\n    if (\n      this.menuOpen &&\n      !mobileMenu?.contains(target) &&\n      !mobileOptions?.contains(target)\n    ) {\n      this.menuOpen = false;\n    }\n  }\n\n  /**\n   * Triggered on window resize.\n   * Adjusts the mobile layout and menu accordingly.\n   *\n   * @param {Event} event - The resize event.\n   */\n  @HostListener('window:resize', ['$event'])\n  onResize(event: Event) {\n    const width = (event.target as Window).innerWidth;\n    this.isMobile = width  {\n          if (!selectedContact) return null;\n          return (\n            allContacts.find((contact) => contact.id === selectedContact.id) ||\n            selectedContact\n          );\n        })\n      )\n\n      .subscribe({\n        next: (contact) => {\n          const wasEmpty = !this.contact;\n          const isContactChange = contact && contact !== this.contact;\n\n          this.contact = contact || undefined;\n\n          if (!contact) {\n            this.isDeleting = false;\n            this.isEditing = false;\n            this.contactVisible = false;\n\n            setTimeout(() => {\n              this.noContactVisible.emit();\n            }, 100);\n          } else if (isContactChange) {\n            this.isEditing = false;\n\n            if (\n              !this.isDeleting &&\n              (this.firstLoad || wasEmpty || isContactChange)\n            ) {\n              this.contactVisible = false;\n\n              setTimeout(() => {\n                this.contactVisible = true;\n                this.animationState++;\n                this.firstLoad = false;\n              }, 10);\n            }\n          }\n        },\n      });\n  }\n\n  /**\n   * Called when the component is destroyed.\n   * Unsubscribes from the subscription to avoid memory leaks.\n   */\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Opens the edit form for the current contact.\n   */\n  onEditContact(): void {\n    if (this.contact) {\n      this.isEditing = true;\n      this.contactService.showEditForm(this.contact);\n      this.menuOpen = false;\n    }\n  }\n\n  /**\n   * Deletes the current contact and clears the selection.\n   */\n  onDeleteContact(): void {\n    if (this.contact?.id) {\n      this.isDeleting = true;\n      this.menuOpen = false;\n      this.contactService.deleteContact(this.contact.id);\n      this.contactService.clearSelection();\n    }\n  }\n\n  /**\n   * Returns the initials of a name.\n   *\n   * @param {string} [name] - The name from which to generate initials.\n   * @returns {string} The initials.\n   */\n  getInitials(name?: string): string {\n    return this.contactService.getInitials(name);\n  }\n\n  /**\n   * Returns the color for a contact.\n   *\n   * @param {string} [name] - The contact's name.\n   * @returns {string} The corresponding color as a hex code.\n   */\n  getContactColor(name?: string): string {\n    if (!name) return '#9E9E9E';\n    return this.contactService.getContactColor(name);\n  }\n\n  /**\n   * Closes the contact details view.\n   */\n  closeContactDetails(): void {\n    this.contactVisible = false;\n  }\n\n  /**\n   * Emits the event to return to the contact list.\n   */\n  onBackToList() {\n    this.backToList.emit();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Contacts\n      \n      Better with a team\n      \n        \n      \n    \n\n    \n      \n        \n          {{ getInitials(contact.name) }}\n        \n        \n          {{ contact.name || \"Unbekannt\" }}\n\n          \n            \n              \n              \n              Edit\n            \n\n            \n              \n              \n              Delete\n            \n          \n        \n      \n\n      \n        Contact Information\n\n        \n          Email\n          {{ contact.email || \"Keine E-Mail\" }}\n        \n\n        \n          Phone\n          \n            {{ contact.phone || \"Keine Telefonnummer\" }}\n          \n        \n      \n    \n\n    \n      \n      \n    \n\n    \n      \n        \n        \n        Edit\n      \n\n      \n        \n        \n        Delete\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Contacts            Better with a team                                                    {{ getInitials(contact.name) }}                          {{ contact.name || \"Unbekannt\" }}                                                                Edit                                                                  Delete                                                  Contact Information                  Email          {{ contact.email || \"Keine E-Mail\" }}                          Phone                      {{ contact.phone || \"Keine Telefonnummer\" }}                                                                                  Edit                                    Delete            '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactFormComponent.html":{"url":"components/ContactFormComponent.html","title":"component - ContactFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-form/contact-form.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-form\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contact-form.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contact-form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactForm\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                contactToEdit\n                            \n                            \n                                    Private\n                                    Optional\n                                editContactSubscription\n                            \n                            \n                                getDataToEdit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearInputs\n                            \n                            \n                                deleteContact\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                addedContact\n                            \n                            \n                                closeOverlay\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:53\n                            \n                        \n\n                \n                    \n                            Constructor injecting the form builder and contact service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's FormBuilder for creating the form.\n\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService that manages contact CRUD operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        addedContact\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:32\n                            \n                        \n                \n                    \n                        Emits a newly created contact after successful form submission.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeOverlay\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:38\n                            \n                        \n                \n                    \n                        Emits when the form overlay is closed (e.g., after cancel or submit).\nEmits the string 'closed' as an identifier.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearInputs\n                        \n                    \n                \n            \n            \n                \nclearInputs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:139\n                        \n                    \n\n\n            \n                \n                        Resets the form without closing the overlay.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteContact\n                        \n                    \n                \n            \n            \n                \ndeleteContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Deletes the contact being edited (if any) and closes the form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:93\n                        \n                    \n\n\n            \n                \n                        Cleans up the subscription on component destruction to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:66\n                        \n                    \n\n\n            \n                \n                        Initializes the form and subscribes to editContact$ to load contact data\nwhen editing an existing entry.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:102\n                        \n                    \n\n\n            \n                \n                        Closes the contact form, resets its state, and emits a closing event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Handles form submission. Validates input, creates or updates the contact\nusing the ContactService, emits the new contact (if applicable),\nand closes the form.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:43\n                        \n                    \n\n            \n                \n                    The reactive form group for the contact form.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:60\n                        \n                    \n\n            \n                \n                    - Service that manages contact CRUD operations.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:48\n                        \n                    \n\n            \n                \n                    The contact to edit, if editing mode is active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        editContactSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:53\n                        \n                    \n\n            \n                \n                    Subscription to receive the contact data to be edited via the ContactService.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDataToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:79\n                        \n                    \n\n            \n                \n                    Receives a contact to be edited and pre-fills the form fields.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    contact\n                                                    \n                                                            \nThe contact object or null to clear the form.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact, notOnlyWhitespace } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-contact-form',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  templateUrl: './contact-form.component.html',\n  styleUrl: './contact-form.component.scss',\n})\nexport class ContactFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * Emits a newly created contact after successful form submission.\n   */\n  @Output() addedContact = new EventEmitter();\n\n  /**\n   * Emits when the form overlay is closed (e.g., after cancel or submit).\n   * Emits the string 'closed' as an identifier.\n   */\n  @Output() closeOverlay = new EventEmitter();\n\n  /**\n   * The reactive form group for the contact form.\n   */\n  contactForm!: FormGroup;\n\n  /**\n   * The contact to edit, if editing mode is active.\n   */\n  contactToEdit?: Contact;\n\n  /**\n   * Subscription to receive the contact data to be edited via the ContactService.\n   */\n  private editContactSubscription?: Subscription;\n\n  /**\n   * Constructor injecting the form builder and contact service.\n   * @param form - Angular's FormBuilder for creating the form.\n   * @param contactService - Service that manages contact CRUD operations.\n   */\n  constructor(private form: FormBuilder, public contactService: ContactService) { }\n\n  /**\n   * Initializes the form and subscribes to editContact$ to load contact data\n   * when editing an existing entry.\n   */\n  ngOnInit(): void {\n    this.contactForm = this.form.group({\n      name: ['', [Validators.required, notOnlyWhitespace]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.required, Validators.min(10), Validators.pattern(/^\\d+$/)]]\n    });\n    this.editContactSubscription = this.contactService.editContact$.subscribe(this.getDataToEdit);\n  }\n\n  /**\n   * Receives a contact to be edited and pre-fills the form fields.\n   * @param contact - The contact object or null to clear the form.\n   */\n  getDataToEdit = (contact: Contact | null) => {\n    this.contactToEdit = contact || undefined;\n    if (this.contactToEdit) {\n      this.contactForm.patchValue({\n        name: this.contactToEdit.name,\n        email: this.contactToEdit.email,\n        phone: this.contactToEdit.phone\n      });\n    }\n  }\n\n  /**\n   * Cleans up the subscription on component destruction to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    if (this.editContactSubscription) {\n      this.editContactSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Closes the contact form, resets its state, and emits a closing event.\n   */\n  onClose(): void {\n    this.contactService.hideForm();\n    this.contactForm.reset();\n    this.closeOverlay.emit('closed');\n  }\n\n  /**\n   * Handles form submission. Validates input, creates or updates the contact\n   * using the ContactService, emits the new contact (if applicable),\n   * and closes the form.\n   */\n  async onSubmit() {\n    if (this.contactForm.valid) {\n      const { name, email, phone } = this.contactForm.value;\n      const contact: Contact = {\n        name: name.trim(),\n        email: email.trim(),\n        phone: phone.trim()\n      };\n\n      if (this.contactToEdit?.id) {\n        this.contactService.updateContact(this.contactToEdit.id, contact);\n      } else {\n        const newContact = await this.contactService.addContact(contact);\n        if (newContact) {\n          this.addedContact.emit(newContact);\n        }\n      }\n\n      this.clearInputs();\n      this.onClose();\n    }\n  }\n\n  /**\n   * Resets the form without closing the overlay.\n   */\n  clearInputs() {\n    this.contactForm.reset();\n  }\n\n  /**\n   * Deletes the contact being edited (if any) and closes the form.\n   */\n  deleteContact() {\n    if (this.contactToEdit?.id) {\n      this.contactService.deleteContact(this.contactToEdit.id);\n      this.onClose();\n    }\n  }\n}\n\n\n    \n\n    \n        \n    \n        \n          \n              \n              \n              \n              \n              \n               \n            \n        \n     \n    \n        \n        Add contact\n        Edit contact\n        Tasks are better with a team!\n        \n    \n    \n        \n            \n                \n                {{ contactService.getInitials(contactToEdit.name) }}\n            \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! Please add a name.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! This email seems invalid or missing.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oh! Don´t forget the phone number.\n                                \n                 \n                    \n                        Cancel\n                         \n                            \n                            \n                            \n                            \n                            \n                            \n                        \n                    \n                     \n                        Delete\n                    \n                    \n                        Create contact\n                        \n                    \n                    \n                        Save\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                        Add contact        Edit contact        Tasks are better with a team!                                                                    {{ contactService.getInitials(contactToEdit.name) }}                                                                                                                                                                            Oops! Please add a name.                                                                                                                                                                    Oops! This email seems invalid or missing.                                                                                                                                                                    Oh! Don´t forget the phone number.                                                                                             Cancel                                                                                                                                                                                                                                                                                          Delete                                                                Create contact                                                                                        Save                                                                                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactListComponent.html":{"url":"components/ContactListComponent.html","title":"component - ContactListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-list/contact-list.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-list\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./contact-list.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./contact-list.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Private\n                                contactsSubscription\n                            \n                            \n                                currentUser\n                            \n                            \n                                currentUserEmail\n                            \n                            \n                                groupedContacts\n                            \n                            \n                                keyAsc\n                            \n                            \n                                selectedContact\n                            \n                            \n                                    Private\n                                selectionSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUser\n                            \n                            \n                                getInitials\n                            \n                            \n                                groupByInitial\n                            \n                            \n                                isCurrentUser\n                            \n                            \n                                isSelected\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAddNewContact\n                            \n                            \n                                onContactSelect\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactSelected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:84\n                            \n                        \n\n                \n                    \n                            Constructor injecting required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nManages contact data and selection.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nProvides the currently logged-in user's info.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        contactSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-list/contact-list.component.ts:84\n                            \n                        \n                \n                    \n                        Emits an event when a contact is selected.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:48\n                        \n                    \n\n\n            \n                \n                        Identifying the current user to directly select this user in the contact list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:164\n                        \n                    \n\n\n            \n                \n                        Returns the initials of the given name using ContactService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Initials string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupByInitial\n                        \n                    \n                \n            \n            \n                \ngroupByInitial(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Groups contacts alphabetically by the first character of their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of contacts to group.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object with initials as keys and arrays of contacts as values.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCurrentUser\n                        \n                    \n                \n            \n            \n                \nisCurrentUser(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Checks if the given contact matches the current logged-in user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to compare with the current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact's email matches the user's email.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSelected\n                        \n                    \n                \n            \n            \n                \nisSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Determines if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:99\n                        \n                    \n\n\n            \n                \n                        Unsubscribes from all subscriptions to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:27\n                        \n                    \n\n\n            \n                \n                        Initializes the component by loading and grouping contacts,\nidentifying the current user, and subscribing to contact selection.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAddNewContact\n                        \n                    \n                \n            \n            \n                \nonAddNewContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:134\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the \"add contact\" form via the ContactService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelect\n                        \n                    \n                \n            \n            \n                \nonContactSelect(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Handles selection of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:92\n                        \n                    \n\n            \n                \n                    - Manages contact data and selection.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        contactsSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:76\n                        \n                    \n\n            \n                \n                    The display name of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUserEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:71\n                        \n                    \n\n            \n                \n                    The email of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:61\n                        \n                    \n\n            \n                \n                    Holds the contacts grouped by the first letter of their name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyAsc\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:157\n                        \n                    \n\n            \n                \n                    Sorting helper for alphabetical keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedContact\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:66\n                        \n                    \n\n            \n                \n                    The currently selected contact (if any).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectionSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:79\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-contact-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './contact-list.component.html',\n  styleUrls: ['./contact-list.component.scss']\n})\nexport class ContactListComponent implements OnInit, OnDestroy {\n\n    /**\n   * Initializes the component by loading and grouping contacts,\n   * identifying the current user, and subscribing to contact selection.\n   */\n  ngOnInit(): void {\n    this.contactsSubscription = this.contactService.getContacts().subscribe({\n      next: (contacts) => {\n        this.groupedContacts = this.groupByInitial(contacts);\n        if (this.currentUserEmail) {\n          const matchedContact = contacts.find(c => c.email === this.currentUserEmail);\n          if (matchedContact) {\n            this.onContactSelect(matchedContact);\n          }\n        }\n      },\n      error: (error) => {\n        console.error('Error loading contacts:', error);\n      }\n    });\n    this.getCurrentUser();\n  }\n\n  /**\n   * Identifying the current user to directly select this user in the contact list.\n   */\n  getCurrentUser(){\n    const user = this.authService.getCurrentUser();\n    this.currentUser = user?.displayName || null;\n    this.currentUserEmail = user?.email || null;\n\n    this.selectionSubscription = this.contactService.selectedContact$.subscribe(\n      contact => this.selectedContact = contact\n    );\n  }\n\n  /**\n   * Holds the contacts grouped by the first letter of their name.\n   */\n  groupedContacts: { [key: string]: Contact[] } = {};\n\n  /**\n   * The currently selected contact (if any).\n   */\n  selectedContact: Contact | null = null;\n\n  /**\n   * The email of the currently authenticated user.\n   */\n  currentUserEmail: string | null = null;\n\n  /**\n   * The display name of the currently authenticated user.\n   */\n  currentUser: string | null = null;\n\n  private contactsSubscription: Subscription = new Subscription();\n  private selectionSubscription: Subscription = new Subscription();\n\n  /**\n   * Emits an event when a contact is selected.\n   */\n  @Output() contactSelected = new EventEmitter();\n\n  /**\n   * Constructor injecting required services.\n   * @param contactService - Manages contact data and selection.\n   * @param authService - Provides the currently logged-in user's info.\n   */\n  constructor(\n    public contactService: ContactService,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Unsubscribes from all subscriptions to avoid memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.contactsSubscription.unsubscribe();\n    this.selectionSubscription.unsubscribe();\n  }\n\n  /**\n   * Checks if the given contact matches the current logged-in user.\n   * @param contact - The contact to compare with the current user.\n   * @returns True if the contact's email matches the user's email.\n   */\n  isCurrentUser(contact: Contact): boolean {\n    return typeof contact.email === 'string' && contact.email === this.currentUserEmail;\n  }\n\n  /**\n   * Handles selection of a contact.\n   * @param contact - The contact to select.\n   */\n  onContactSelect(contact: Contact): void {\n    this.contactService.selectContact(contact);\n    this.contactSelected.emit();\n  }\n\n  /**\n   * Determines if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected.\n   */\n  isSelected(contact: Contact): boolean {\n    return this.selectedContact?.id === contact.id;\n  }\n\n  /**\n   * Triggers the display of the \"add contact\" form via the ContactService.\n   */\n  onAddNewContact(): void {\n    this.contactService.showAddForm();\n  }\n\n  /**\n   * Groups contacts alphabetically by the first character of their name.\n   * @param contacts - The list of contacts to group.\n   * @returns An object with initials as keys and arrays of contacts as values.\n   */\n  groupByInitial(contacts: Contact[]): { [key: string]: Contact[] } {\n    const validContacts = contacts.filter(contact => contact && contact.name);\n    return validContacts.reduce((groups, contact) => {\n      const initial = contact.name.charAt(0).toUpperCase();\n      groups[initial] = groups[initial] || [];\n      groups[initial].push(contact);\n      groups[initial].sort((a, b) => a.name.localeCompare(b.name));\n      return groups;\n    }, {} as { [key: string]: Contact[] });\n  }\n\n  /**\n   * Sorting helper for alphabetical keys.\n   */\n  keyAsc = (a: any, b: any) => a.key.localeCompare(b.key);\n\n  /**\n   * Returns the initials of the given name using ContactService.\n   * @param name - The full name of the contact.\n   * @returns Initials string.\n   */\n  getInitials(name: string | undefined): string {\n    return this.contactService.getInitials(name);\n  }\n}\n\n    \n\n    \n        \n  \n    Add new contact\n  \n\n  \n    {{ group.key }}\n    \n      \n        {{ contactService.getInitials(contact?.name) }}\n      \n      Me\n      \n        \n          {{ contact?.name || \"Unbekannt\" }}\n        \n        {{ contact?.email || \"Keine E-Mail\" }}\n      \n    \n  \n\n\n\n  \n    \n  \n\n\n    \n\n    \n                \n                    ./contact-list.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.contact-list {\n  width: 100%;\n  max-width: 456px;\n  height: calc(100dvh - 100px);\n  max-height: none;\n  overflow-y: auto;\n  margin-top: -9px;\n  padding-bottom: 80px;\n  background-color: var(--background-light);\n  scrollbar-color: var(--background-default-dark) transparent;\n\n  .add-button {\n    @include btn;\n    @include btn-dark;\n    width: calc(100% - clamp(12px, 3vw, 24px));\n    max-width: 352px;\n    height: clamp(48px, 12vw, 56px);\n    margin-top: 22.5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: clamp(12px, 2.5vw, 16px);\n    transition: background-color 0.2s ease;\n\n    &::after {\n      content: \"\";\n      width: clamp(20px, 4vw, 24px);\n      height: clamp(20px, 4vw, 24px);\n      background-image: url(\"../../../../public/assets/img/svg/add-person.svg\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n  }\n\n  h4 {\n    margin-top: clamp(8px, 2vw, 16px);\n    font-family: \"Inter\", sans-serif;\n    font-weight: 400;\n    font-size: clamp(14px, 3vw, 20px);\n    color: #000000;\n    padding: clamp(8px, 1.5vw, 17px) clamp(12px, 3vw, 36px);\n    gap: 8px;\n    border-bottom: 1px solid var(--background-default-dark);\n    margin-bottom: clamp(4px, 1vw, 8px);\n    max-width: 352px;\n  }\n\n  .contact-entry {\n    display: flex;\n    align-items: center;\n    margin: clamp(4px, 1vw, 8px) 0;\n    padding: clamp(8px, 1.5vw, 15px) clamp(8px, 2vw, 24px);\n    gap: clamp(12px, 2vw, 24px);\n    flex-wrap: wrap;\n    position: relative;\n    cursor: pointer;\n    transition: background-color 0.2s;\n    border-radius: 10px;\n\n    &:hover {\n      background-color: #f5f5f5;\n    }\n\n    &.selected {\n      background-color: #2a3647;\n\n      .info .name {\n        color: #ffffff;\n      }\n\n      .avatar {\n        border: 2px solid #ffffff;\n      }\n    }\n\n    .active-user {\n      @include inter400-fs12;\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      color: var(--text-color-dark);\n      border-radius: 50%;\n      background-color: var(--background-light);\n      border: 2px solid var(--text-color-error);\n      padding: 4px;\n    }\n\n    .avatar {\n      width: 32px;\n      height: 32px;\n      border-radius: 45px;\n      background-color: #ccc;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-right: 10px;\n      font-family: \"Inter\", sans-serif;\n      font-weight: 400;\n      font-size: 12px;\n      color: #ffffff;\n      border: 2px solid transparent;\n      transition: border 0.2s ease;\n    }\n\n    .info {\n      flex: 1;\n      min-width: 0;\n      \n      .name {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(14px, 3vw, 20px);\n        color: #000000;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        margin-bottom: 2px;\n      }\n\n      .email {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(12px, 2.5vw, 16px);\n        color: #007cee;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n  }\n}\n\n@media(max-width: 1000px) {\n  .contact-list {\n    height: calc(100dvh - 190px);\n  }\n}\n\n@media (max-width: 780px) {\n  .contact-list {\n    width: 100%;\n    max-width: none;\n    margin: 0;\n    &::-webkit-scrollbar {\n      width: 4px;\n    }\n    &::-webkit-scrollbar-track {\n      background: transparent;\n    }\n    &::-webkit-scrollbar-thumb {\n      background-color: --background-default-dark;\n      border-radius: 4px;\n    }\n    \n    .add-button {\n      display: none;\n    }\n    \n    h4 {\n      max-width: none;\n      width: 100%;\n    }\n    \n    .contact-entry {\n      width: 100%;\n      max-width: none;\n    }\n  }\n  \n  .fab-container {\n    display: block !important;\n    bottom: 100px !important;\n    right: 20px !important;\n  }\n  \n  .fab {\n    width: 56px;\n    height: 56px;\n    \n    img {\n      width: 30px;\n      height: 21px;\n    }\n  }\n}\n\n.fab-container {\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n  z-index: 1000;\n  display: none;\n}\n\n.fab {\n  width: 56px;\n  height: 56px;\n  border-radius: 46px;\n  background-color: #2a3647;\n  border: none;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: #29ABE2;\n    border: none;\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);\n    transform: scale(1.1);\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  img {\n    width: 30px;\n    height: 21px;\n    filter: brightness(0) invert(1);\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Add new contact        {{ group.key }}                  {{ contactService.getInitials(contact?.name) }}            Me                        {{ contact?.name || \"Unbekannt\" }}                {{ contact?.email || \"Keine E-Mail\" }}                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactManager.html":{"url":"injectables/ContactManager.html","title":"injectable - ContactManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/contact-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                ContactManager handles all contact-related operations for the AddTaskComponent.\nThis includes contact selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                selectedContacts\n                            \n                            \n                                    Private\n                                showContactDropdown\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContactInitials\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                getSelectedContacts\n                            \n                            \n                                getSelectedContactsText\n                            \n                            \n                                getShowContactDropdown\n                            \n                            \n                                isContactSelected\n                            \n                            \n                                selectContact\n                            \n                            \n                                setSelectedContacts\n                            \n                            \n                                setShowContactDropdown\n                            \n                            \n                                toggleContactDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/add-task/contact-manager.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Clears all selected contacts and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns the color for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get color for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactInitials\n                        \n                    \n                \n            \n            \n                \ngetContactInitials(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the initials for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get initials for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's initials.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames(remainingContacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Returns a comma-separated string of remaining contact names.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                remainingContacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe remaining contacts to display.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContacts\n                        \n                    \n                \n            \n            \n                \ngetSelectedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:20\n                        \n                    \n\n\n            \n                \n                        Gets all selected contacts\n\n\n                        \n                            Returns :         Contact[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContactsText\n                        \n                    \n                \n            \n            \n                \ngetSelectedContactsText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for selected contacts.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The text to display in the contact selector.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowContactDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowContactDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Gets the contact dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isContactSelected\n                        \n                    \n                \n            \n            \n                \nisContactSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:70\n                        \n                    \n\n\n            \n                \n                        Checks if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Toggles the selection state of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select or deselect.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedContacts\n                        \n                    \n                \n            \n            \n                \nsetSelectedContacts(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Sets the selected contacts array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowContactDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowContactDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:41\n                        \n                    \n\n\n            \n                \n                        Sets the contact dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleContactDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleContactDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:48\n                        \n                    \n\n\n            \n                \n                        Toggles the contact dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showContactDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Contact, ContactService } from '../services/contact.service';\n\n/**\n * ContactManager handles all contact-related operations for the AddTaskComponent.\n * This includes contact selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactManager {\n  private selectedContacts: Contact[] = [];\n  private showContactDropdown: boolean = false;\n\n  constructor(private contactService: ContactService) {}\n\n  /**\n   * Gets all selected contacts\n   */\n  getSelectedContacts(): Contact[] {\n    return this.selectedContacts;\n  }\n\n  /**\n   * Sets the selected contacts array\n   */\n  setSelectedContacts(contacts: Contact[]): void {\n    this.selectedContacts = contacts;\n  }\n\n  /**\n   * Gets the contact dropdown visibility state\n   */\n  getShowContactDropdown(): boolean {\n    return this.showContactDropdown;\n  }\n\n  /**\n   * Sets the contact dropdown visibility state\n   */\n  setShowContactDropdown(value: boolean): void {\n    this.showContactDropdown = value;\n  }\n\n  /**\n   * Toggles the contact dropdown visibility.\n   */\n  toggleContactDropdown(): void {\n    this.showContactDropdown = !this.showContactDropdown;\n  }\n\n  /**\n   * Toggles the selection state of a contact.\n   * @param contact - The contact to select or deselect.\n   */\n  selectContact(contact: Contact): void {\n    const index = this.selectedContacts.findIndex(c => c.id === contact.id);\n    if (index === -1) {\n      this.selectedContacts.push(contact);\n    } else {\n      this.selectedContacts.splice(index, 1);\n    }\n  }\n\n  /**\n   * Checks if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected, false otherwise.\n   */\n  isContactSelected(contact: Contact): boolean {\n    return this.selectedContacts.some(c => c.id === contact.id);\n  }\n\n  /**\n   * Returns the text to display for selected contacts.\n   * @returns The text to display in the contact selector.\n   */\n  getSelectedContactsText(): string {\n    return 'Select contacts to assign';\n  }\n\n  /**\n   * Returns the initials for a contact.\n   * @param contact - The contact to get initials for.\n   * @returns The contact's initials.\n   */\n  getContactInitials(contact: Contact): string {\n    return this.contactService.getInitials(contact.name);\n  }\n\n  /**\n   * Returns the color for a contact.\n   * @param contact - The contact to get color for.\n   * @returns The contact's color.\n   */\n  getContactColor(contact: Contact): string {\n    return this.contactService.getContactColor(contact.name);\n  }\n\n  /**\n   * Returns a comma-separated string of remaining contact names.\n   * @param remainingContacts - The remaining contacts to display.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(remainingContacts: Contact[]): string {\n    return remainingContacts.map((contact) => contact.name).join(', ');\n  }\n\n  /**\n   * Clears all selected contacts and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedContacts = [];\n    this.showContactDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactService.html":{"url":"injectables/ContactService.html","title":"injectable - ContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable service for managing contact data in Firestore.\nProvides reactive streams for selected contact, form visibility, and editing state.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                avatarColors\n                            \n                            \n                                    Public\n                                editContact$\n                            \n                            \n                                    Private\n                                editContactSubject\n                            \n                            \n                                    Public\n                                selectedContact$\n                            \n                            \n                                    Private\n                                selectedContactSubject\n                            \n                            \n                                    Public\n                                showForm$\n                            \n                            \n                                    Private\n                                showFormSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addContact\n                            \n                            \n                                clearSelection\n                            \n                            \n                                    Async\n                                deleteContact\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                    Async\n                                getContactById\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContacts\n                            \n                            \n                                getContactsRef\n                            \n                            \n                                getInitials\n                            \n                            \n                                getSingleContactsRef\n                            \n                            \n                                hideForm\n                            \n                            \n                                selectContact\n                            \n                            \n                                showAddForm\n                            \n                            \n                                showEditForm\n                            \n                            \n                                    Async\n                                updateContact\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/contact.service.ts:75\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    addContact(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Adds a new contact to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The added contact with its generated ID or null if failed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearSelection\n                        \n                    \n                \n            \n            \n                \nclearSelection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:182\n                        \n                    \n\n\n            \n                \n                        Clears the currently selected contact.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteContact(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:216\n                        \n                    \n\n\n            \n                \n                        Deletes a contact from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Returns a plain JSON object with only the allowed contact fields.\nThis is used to avoid including undefined or extra properties when updating Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact object to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Partial\n\n                        \n                            \n                                A JSON object containing name, email, and phone.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactById(contactId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:255\n                        \n                    \n\n\n            \n                \n                        Fetches a single contact by its Firestore document ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise resolving to the contact object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contactName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:228\n                        \n                    \n\n\n            \n                \n                        Generates a consistent avatar color for a contact based on their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact’s name used to calculate a hash.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A hexadecimal color string from the avatarColors array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContacts\n                        \n                    \n                \n            \n            \n                \ngetContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Returns an observable stream of all contacts from Firestore.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable of Contact array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactsRef\n                        \n                    \n                \n            \n            \n                \ngetContactsRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to the contacts collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:242\n                        \n                    \n\n\n            \n                \n                        Extracts the initials from a contact name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string with one or two uppercase initials, or '?' if the name is invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleContactsRef\n                        \n                    \n                \n            \n            \n                \ngetSingleContactsRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to a single contact document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the contact document.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideForm\n                        \n                    \n                \n            \n            \n                \nhideForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:206\n                        \n                    \n\n\n            \n                \n                        Hides the contact form and clears the edit state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Emits a contact to the selected contact observable.\nUsed to show the contact details in the UI.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showAddForm\n                        \n                    \n                \n            \n            \n                \nshowAddForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the add contact form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEditForm\n                        \n                    \n                \n            \n            \n                \nshowEditForm(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the edit contact form with a prefilled contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to edit.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateContact(docId: string, updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Updates an existing contact in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to update.\n\n\n                                            \n                                        \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated contact data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        avatarColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:69\n                        \n                    \n\n            \n                \n                    Preset avatar colors for visual identification\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        editContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.editContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:66\n                        \n                    \n\n            \n                \n                    Observable for the contact being edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:64\n                        \n                    \n\n            \n                \n                    Currently selected contact to be edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectedContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.selectedContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:56\n                        \n                    \n\n            \n                \n                    Observable for the selected contact\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:54\n                        \n                    \n\n            \n                \n                    Currently selected contact (for viewing or interaction)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.showFormSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:61\n                        \n                    \n\n            \n                \n                    Observable for contact form visibility\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showFormSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:59\n                        \n                    \n\n            \n                \n                    Whether the contact form should be displayed\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n * Updates an existing contact in Firestore.\n *\n * @param docId - The Firestore document ID of the contact to update.\n * @param updatedContact - The updated contact data.\n */\nasync updateContact(docId: string, updatedContact: Contact): Promise {\n  let docRef = this.getSingleContactsRef(docId);\n  await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n    console.error(err);\n  });\n}\n\n/**\n * Returns a plain JSON object with only the allowed contact fields.\n * This is used to avoid including undefined or extra properties when updating Firestore.\n *\n * @param updatedContact - The contact object to sanitize.\n * @returns A JSON object containing name, email, and phone.\n */\ngetCleanJson(updatedContact: Contact): Partial {\n  return {\n    name: updatedContact.name,\n    email: updatedContact.email,\n    phone: updatedContact.phone,\n  };\n}\n\n/**\n * Emits a contact to the selected contact observable.\n * Used to show the contact details in the UI.\n *\n * @param contact - The contact to select.\n */\nselectContact(contact: Contact): void {\n  this.selectedContactSubject.next(contact);\n}\n\n/**\n * Clears the currently selected contact.\n */\nclearSelection(): void {\n  this.selectedContactSubject.next(null);\n}\n\n/**\n * Triggers the display of the add contact form.\n */\nshowAddForm(): void {\n  this.showFormSubject.next(true);\n}\n\n/**\n * Triggers the display of the edit contact form with a prefilled contact.\n *\n * @param contact - The contact to edit.\n */\nshowEditForm(contact: Contact): void {\n  this.editContactSubject.next(contact);\n  this.showFormSubject.next(true);\n}\n\n/**\n * Hides the contact form and clears the edit state.\n */\nhideForm(): void {\n  this.showFormSubject.next(false);\n  this.editContactSubject.next(null);\n}\n\n/**\n * Deletes a contact from Firestore.\n *\n * @param docId - The Firestore document ID of the contact to delete.\n */\nasync deleteContact(docId: string): Promise {\n  await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n    console.log(err);\n  });\n}\n\n/**\n * Generates a consistent avatar color for a contact based on their name.\n *\n * @param contactName - The contact’s name used to calculate a hash.\n * @returns A hexadecimal color string from the avatarColors array.\n */\ngetContactColor(contactName: string): string {\n  let hash = 0;\n  for (let i = 0; i  {\n  const contactRef = this.getSingleContactsRef(contactId);\n  return getDoc(contactRef).then(snapshot => {\n    if (snapshot.exists()) {\n      return { id: snapshot.id, ...snapshot.data() } as Contact;\n    }\n    return null;\n  });\n}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactsComponent.html":{"url":"components/ContactsComponent.html","title":"component - ContactsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contacts.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contacts\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                ContactListComponent\n                                ContactDetailsComponent\n                                ContactFormComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contacts.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contacts.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                animationDirection\n                            \n                            \n                                backgroundVisible\n                            \n                            \n                                showContactDetails\n                            \n                            \n                                showForm$\n                            \n                            \n                                toastAnimationState\n                            \n                            \n                                toastMessageVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToList\n                            \n                            \n                                onContactAdded\n                            \n                            \n                                onContactSelected\n                            \n                            \n                                onNoContactVisible\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                removeBackground\n                            \n                            \n                                setAnimationDirection\n                            \n                            \n                                startMessageAnimation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contacts.component.ts:78\n                            \n                        \n\n                \n                    \n                            Initializes the component and subscribes to the form visibility observable.\nAlso sets up the resize event listener to dynamically adjust the animation direction.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service that manages contact data and UI state.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:93\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: Sets initial animation direction and attaches resize listener.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToList\n                        \n                    \n                \n            \n            \n                \nonBackToList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Handles the back button in mobile view, hiding the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactAdded\n                        \n                    \n                \n            \n            \n                \nonContactAdded(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:106\n                        \n                    \n\n\n            \n                \n                        Called when a new contact is added from the form.\nIt selects the new contact, shows the contact detail view, and triggers a toast.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly added contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelected\n                        \n                    \n                \n            \n            \n                \nonContactSelected()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNoContactVisible\n                        \n                    \n                \n            \n            \n                \nonNoContactVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Hides the contact detail view if no contact is selected and the screen is small.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Called when the slide-in animation of an overlay is completed.\nDelays showing the background overlay to prevent flickering.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe animation transition event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Handles the event emitted by the contact form when it is closed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating the close state (e.g., 'closed').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Determines the animation direction based on screen width.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current window width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startMessageAnimation\n                        \n                    \n                \n            \n            \n                \nstartMessageAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:123\n                        \n                    \n\n\n            \n                \n                        Starts the toast message animation and automatically hides it after 3 seconds.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:53\n                        \n                    \n\n            \n                \n                    Current direction of the animation for overlay transitions.\nIt switches between 'right' for desktop and 'bottom' for mobile views.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:68\n                        \n                    \n\n            \n                \n                    Whether the background overlay is visible behind the form or detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContactDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:78\n                        \n                    \n\n            \n                \n                    Controls whether the contact detail view is visible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:73\n                        \n                    \n\n            \n                \n                    Observable that determines whether the contact form should be shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastAnimationState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\" | \"void\"\n\n                    \n                \n                \n                    \n                        Default value : 'void'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:63\n                        \n                    \n\n            \n                \n                    Controls the current animation state of the toast.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastMessageVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:58\n                        \n                    \n\n            \n                \n                    Whether the toast message is currently visible.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ContactListComponent } from './contact-list/contact-list.component';\nimport { ContactDetailsComponent } from './contact-details/contact-details.component';\nimport { ContactFormComponent } from './contact-form/contact-form.component';\nimport { ContactService, Contact } from './../services/contact.service';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { trigger, style, transition, animate, AnimationEvent } from '@angular/animations';\n\n@Component({\n  selector: 'app-contacts',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ContactListComponent,\n    ContactDetailsComponent,\n    ContactFormComponent,\n  ],\n  templateUrl: './contacts.component.html',\n  styleUrl: './contacts.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition('void => right', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateX(0)', opacity: 1 })),\n      ]),\n      transition('right => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateX(100%)', opacity: 0 })),\n      ]),\n      transition('void => bottom', [\n        style({ transform: 'translateY(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateY(0)', opacity: 1 })),\n      ]),\n      transition('bottom => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateY(100%)', opacity: 0 })),\n      ]),\n    ]),\n  ],\n})\nexport class ContactsComponent {\n\n  /**\n   * Current direction of the animation for overlay transitions.\n   * It switches between 'right' for desktop and 'bottom' for mobile views.\n   */\n  animationDirection: 'right' | 'bottom' = 'right';\n\n  /**\n   * Whether the toast message is currently visible.\n   */\n  toastMessageVisible = false;\n\n  /**\n   * Controls the current animation state of the toast.\n   */\n  toastAnimationState: 'right' | 'bottom' | 'void' = 'void';\n\n  /**\n   * Whether the background overlay is visible behind the form or detail view.\n   */\n  backgroundVisible = false;\n\n  /**\n   * Observable that determines whether the contact form should be shown.\n   */\n  showForm$: Observable;\n\n  /**\n   * Controls whether the contact detail view is visible.\n   */\n  showContactDetails = false;\n\n  /**\n   * Initializes the component and subscribes to the form visibility observable.\n   * Also sets up the resize event listener to dynamically adjust the animation direction.\n   * \n   * @param contactService - The service that manages contact data and UI state.\n   */\n  constructor(private contactService: ContactService) {\n    this.showForm$ = this.contactService.showForm$;\n  }\n\n  /**\n   * Lifecycle hook: Sets initial animation direction and attaches resize listener.\n   */\n  ngOnInit() {\n    this.setAnimationDirection(window.innerWidth);\n    window.addEventListener('resize', () => {\n      this.setAnimationDirection(window.innerWidth);\n    });\n  }\n\n  /**\n   * Called when a new contact is added from the form.\n   * It selects the new contact, shows the contact detail view, and triggers a toast.\n   * \n   * @param newContact - The newly added contact.\n   */\n  onContactAdded(newContact: Contact) {\n    this.contactService.selectContact(newContact);\n    this.onContactSelected();\n    this.startMessageAnimation();\n  }\n\n  /**\n   * Determines the animation direction based on screen width.\n   * @param width - The current window width.\n   */\n  setAnimationDirection(width: number) {\n    this.animationDirection = width  {\n      this.toastMessageVisible = false;\n      this.toastAnimationState = 'void';\n    }, 3000);\n  }\n\n  /**\n   * Handles the event emitted by the contact form when it is closed.\n   * @param event - A string indicating the close state (e.g., 'closed').\n   */\n  removeBackground(event: string) {\n    if (event === 'closed') {\n      this.backgroundVisible = false;\n    }\n  }\n\n  /**\n   * Called when the slide-in animation of an overlay is completed.\n   * Delays showing the background overlay to prevent flickering.\n   * \n   * @param event - The animation transition event.\n   */\n  onOverlayAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'right' || event.toState === 'bottom') {\n      setTimeout(() => {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Handles the back button in mobile view, hiding the contact detail component.\n   */\n  onBackToList() {\n    this.showContactDetails = false;\n  }\n\n  /**\n   * Triggers the display of the contact detail component.\n   */\n  onContactSelected() {\n    this.showContactDetails = true;\n  }\n\n  /**\n   * Hides the contact detail view if no contact is selected and the screen is small.\n   */\n  onNoContactVisible() {\n    if (window.innerWidth \n    \n\n    \n        \n    \n     \n    \n     \n      \n    \n\n\n\n  \n    \n  \n\n\n\n  Contact successfully created\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                      Contact successfully created'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DragDropManager.html":{"url":"injectables/DragDropManager.html","title":"injectable - DragDropManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DragDropManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/drag-drop-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                DragDropManager handles all drag-and-drop operations for the BoardComponent.\nThis includes drag delays, drop handling, auto-scrolling, and task status updates.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                getDragDelay\n                            \n                            \n                                handleDragMove\n                            \n                            \n                                handleDrop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/drag-drop-manager.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeTaskStatus\n                        \n                    \n                \n            \n            \n                \nchangeTaskStatus(taskId: string, status: string, taskList: Task[], reloadCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:102\n                        \n                    \n\n\n            \n                \n                        Updates the status of a task and persists the change via the task service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new status for the task.\n\n\n                                            \n                                        \n                                        \n                                                taskList\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current task list to find the task in.\n\n\n                                            \n                                        \n                                        \n                                                reloadCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to reload tasks after update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDragDelay\n                        \n                    \n                \n            \n            \n                \ngetDragDelay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:21\n                        \n                    \n\n\n            \n                \n                        Returns the delay for starting a drag action based on screen width.\nPrevents accidental drags on small screens.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                Drag delay in milliseconds.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDragMove\n                        \n                    \n                \n            \n            \n                \nhandleDragMove(event: CdkDragMove, scrollSection: ElementRef)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Handles automatic scrolling while dragging near the top or bottom edge\nof the scrollable task section.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        CdkDragMove\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragMove event containing the pointer position.\n\n\n                                            \n                                        \n                                        \n                                                scrollSection\n                                            \n                                                        ElementRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe scrollable section element reference.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDrop\n                        \n                    \n                \n            \n            \n                \nhandleDrop(event: CdkDragDrop, updateCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:32\n                        \n                    \n\n\n            \n                \n                        Handles drag-and-drop actions for tasks using the Angular CDK.\nUpdates the task's status and reorders task lists accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CdkDragDrop\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragDrop event containing task data and drop context.\n\n\n                                            \n                                        \n                                        \n                                                updateCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to update task lists after drop.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ElementRef } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem, CdkDragMove } from '@angular/cdk/drag-drop';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * DragDropManager handles all drag-and-drop operations for the BoardComponent.\n * This includes drag delays, drop handling, auto-scrolling, and task status updates.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DragDropManager {\n  constructor(private taskService: TaskService) {}\n\n  /**\n   * Returns the delay for starting a drag action based on screen width.\n   * Prevents accidental drags on small screens.\n   *\n   * @returns Drag delay in milliseconds.\n   */\n  getDragDelay(): number {\n    return window.innerWidth , updateCallback: () => void): void {\n    const task = event.item.data as Task;\n    let newStatus: Task['status'];\n    \n    if (event.container.id === 'todoList') {\n      newStatus = 'to-do';\n    } else if (event.container.id === 'inprogressList') {\n      newStatus = 'in-progress';\n    } else if (event.container.id === 'awaitfeedbackList') {\n      newStatus = 'await-feedback';\n    } else if (event.container.id === 'doneList') {\n      newStatus = 'done';\n    } else {\n      return;\n    }\n\n    if (event.previousContainer === event.container) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n      if (task.id && task.status !== newStatus) {\n        const updatedTask: Task = { ...task, status: newStatus };\n        this.taskService.updateTask(task.id, updatedTask).catch((error) => {\n          console.error('Error updating task status:', error);\n        });\n      }\n    }\n    updateCallback();\n  }\n\n  /**\n   * Handles automatic scrolling while dragging near the top or bottom edge\n   * of the scrollable task section.\n   *\n   * @param event - The CdkDragMove event containing the pointer position.\n   * @param scrollSection - The scrollable section element reference.\n   */\n  handleDragMove(event: CdkDragMove, scrollSection: ElementRef): void {\n    const mouseY = event.pointerPosition.y;\n    const threshold = 100;\n    const scrollStep = 30;\n    const section = scrollSection?.nativeElement;\n    \n    if (!section) return;\n    \n    const rect = section.getBoundingClientRect();\n    if (mouseY  void\n  ): void {\n    const task = taskList.find((t) => t.id === taskId);\n    if (task && task.status !== status) {\n      const updatedTask = { ...task, status };\n      this.taskService.updateTask(taskId, updatedTask).then(() => {\n        reloadCallback();\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirestoreTimestamp.html":{"url":"interfaces/FirestoreTimestamp.html","title":"interface - FirestoreTimestamp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FirestoreTimestamp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/summary/summary.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toDate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toDate\n                        \n                    \n                \n            \n            \n                \ntoDate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showGreeting = true;\n        this.greetingState = 'start';\n        setTimeout(() => {\n          this.greetingState = 'moved';\n          setTimeout(() => {\n            this.showGreeting = false;\n            sessionStorage.setItem('greetingShown', 'true');\n          }, 2000);\n        }, 500);\n      } else {\n        this.showGreeting = false;\n      }\n    });\n\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n\n      this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n      this.doneCount = this.countTasksByStatus(tasks, 'done');\n      this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n      this.awaitingFeedbackCount = this.countTasksByStatus(\n        tasks,\n        'await-feedback'\n      );\n\n      const now = new Date();\n      const futureTasks = tasks\n        .filter((t) => t.date && t.status !== 'done')\n        .map((t) => {\n          let dateObj: Date | null = null;\n          if (t.date instanceof Date) {\n            dateObj = t.date;\n          } else if (this.isFirestoreTimestamp(t.date)) {\n            dateObj = t.date.toDate();\n          } else if (typeof t.date === 'string' || typeof t.date === 'number') {\n            dateObj = new Date(t.date);\n          }\n          return { ...t, dateObj };\n        })\n        .filter((t) => t.dateObj && t.dateObj > now);\n\n      if (futureTasks.length > 0) {\n        futureTasks.sort((a, b) => a.dateObj!.getTime() - b.dateObj!.getTime());\n        const nextDate = futureTasks[0].dateObj!;\n        this.nextDeadlineDate = nextDate;\n        this.nextDeadlineCount = futureTasks.filter(\n          (t) => t.dateObj!.getTime() === nextDate.getTime()\n        ).length;\n      } else {\n        this.nextDeadlineDate = null;\n        this.nextDeadlineCount = 0;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/footer/footer.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n\n            \n                styleUrl\n                ./footer.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-footer',\n  imports: [\n    RouterModule,\n  ],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss'\n})\nexport class FooterComponent {}\n\n    \n\n    \n        \n    \n        \n            Privacy Policy\n        \n        \n            Legal notice\n        \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Privacy Policy                            Legal notice                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/header/header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isMobile\n                            \n                            \n                                menuOpen\n                            \n                            \n                                    \n                                menuRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUserName\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/header/header.component.ts:62\n                            \n                        \n\n                \n                    \n                            Initializes the header component and injects the authentication service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service responsible for user authentication.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUserName\n                        \n                    \n                \n            \n            \n                \ngetCurrentUserName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:129\n                        \n                    \n\n\n            \n                \n                        Returns the display name or email of the currently authenticated user.\nIf no user is found, returns a default label.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The display name, email, or a fallback string ('User').\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Logs the user out by calling the authentication service,\nclears session storage, and closes the menu.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the mobile menu.\nStops propagation to prevent triggering the outside click handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The click event on the toggle button.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : window.innerWidth \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:57\n                        \n                    \n\n            \n                \n                    Indicates if the current viewport is considered mobile (width \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:52\n                        \n                    \n\n            \n                \n                    Tracks whether the mobile menu is currently open.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        menuRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('menu')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:62\n                        \n                    \n\n            \n                \n                    Reference to the menu DOM element, used for detecting outside clicks.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, ViewChild, ElementRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '200ms ease-out',\n          style({ transform: 'translateX(0)', opacity: 1 })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '200ms ease-in',\n          style({ transform: 'translateX(100%)', opacity: 0 })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class HeaderComponent {\n  /**\n   * Tracks whether the mobile menu is currently open.\n   */\n  menuOpen = false;\n\n  /**\n   * Indicates if the current viewport is considered mobile (width  {\n    await this.authService.signOutUser();\n    sessionStorage.removeItem('greetingShown');\n    this.menuOpen = false;\n  }\n\n  /**\n   * Returns the display name or email of the currently authenticated user.\n   * If no user is found, returns a default label.\n   * \n   * @returns The display name, email, or a fallback string ('User').\n   */\n  getCurrentUserName(): string {\n    const user = this.authService.getCurrentUser();\n    return user?.displayName || user?.email || 'User';\n  }\n\n   /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n\n    \n      Kanban Project Management Tool\n    \n\n    \n      \n        \n      \n\n      \n        {{ getCurrentUserName().charAt(0).toUpperCase() }}\n        \n          Help\n          Privacy Policy\n          Legal notice\n          Log out\n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          Kanban Project Management Tool                                          {{ getCurrentUserName().charAt(0).toUpperCase() }}                  Help          Privacy Policy          Legal notice          Log out                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HelpComponent.html":{"url":"components/HelpComponent.html","title":"component - HelpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HelpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/help/help.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-help\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./help.component.html\n            \n\n\n\n            \n                styleUrl\n                ./help.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/help/help.component.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of HelpComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/help/help.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-help',\n  imports: [RouterModule],\n  templateUrl: './help.component.html',\n  styleUrl: './help.component.scss'\n})\nexport class HelpComponent {\n\n  /**\n   * Creates an instance of HelpComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n \n     Help\n     \n        \n            \n        \n     \n \n\n  \n    Welcome to the help page for Join, your guide to using our kanban project management tool.\n    Here, we'll provide an overview of what Join is, how it can benefit you, and how to use it.\n  \n\n  \n    What is Join?\n    \n      Join is a kanban-based project management tool designed and built by a group of dedicated\n      students as part of their web development bootcamp at the Developer Akademie.\n    \n    \n      Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit\n      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users\n      manage their tasks and projects in an intuitive, visual interface.\n    \n    \n      It is important to note that Join is designed as an educational exercise and is not intended for extensive\n      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent\n      availability, reliability, accuracy, or other aspects of quality regarding Join.\n    \n  \n\n  \n    How to use it\n    \n      \n        1. Exploring the Board\n        \n          In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you'll find a default board. \n          This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.\n        \n      \n      \n        2. Creating Contacts\n        \n          In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,\n          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board. \n          If you are logged in with your personal account, you will find yourself as a contact within the contact list.\n        \n      \n      \n        3. Adding Cards\n        \n          Now that you've added your contacts, you can start adding new cards. Cards represent individual tasks. Click the\n          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task\n          name, description, due date, assignees, etc.\n        \n      \n      \n        4. Moving Cards\n        \n          As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the\n          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages \n          in the board by clicking the \"...\" button.\n        \n      \n      \n        5. Deleting Cards\n        \n          Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will\n          permanently remove it from the board. Please exercise caution when deleting cards, as this action is\n          irreversible.\n        \n      \n    \n    \n      Remember that using Join effectively requires consistent updates from you and your team to ensure the board\n      reflects the current state of your project.\n    \n  \n\n  \n    Still have questions?\n    \n      Feel free to contact us at info&#64;michelle-puschkarow.de. We're here to help!\n    \n    Enjoy using Join!\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Help                                             Welcome to the help page for Join, your guide to using our kanban project management tool.    Here, we\\'ll provide an overview of what Join is, how it can benefit you, and how to use it.        What is Join?          Join is a kanban-based project management tool designed and built by a group of dedicated      students as part of their web development bootcamp at the Developer Akademie.              Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users      manage their tasks and projects in an intuitive, visual interface.              It is important to note that Join is designed as an educational exercise and is not intended for extensive      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent      availability, reliability, accuracy, or other aspects of quality regarding Join.            How to use it                  1. Exploring the Board                  In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you\\'ll find a default board.           This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.                            2. Creating Contacts                  In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board.           If you are logged in with your personal account, you will find yourself as a contact within the contact list.                            3. Adding Cards                  Now that you\\'ve added your contacts, you can start adding new cards. Cards represent individual tasks. Click the          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task          name, description, due date, assignees, etc.                            4. Moving Cards                  As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages           in the board by clicking the \"...\" button.                            5. Deleting Cards                  Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will          permanently remove it from the board. Please exercise caution when deleting cards, as this action is          irreversible.                            Remember that using Join effectively requires consistent updates from you and your team to ensure the board      reflects the current state of your project.            Still have questions?          Feel free to contact us at info@michelle-puschkarow.de. We\\'re here to help!        Enjoy using Join!  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HelpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegalNoticeComponent.html":{"url":"components/LegalNoticeComponent.html","title":"component - LegalNoticeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LegalNoticeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/legal-notice/legal-notice.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-legal-notice\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./legal-notice.component.html\n            \n\n\n\n            \n                styleUrl\n                ./legal-notice.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/legal-notice/legal-notice.component.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of LegalNoticeComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/legal-notice/legal-notice.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-legal-notice',\n  imports: [RouterModule],\n  templateUrl: './legal-notice.component.html',\n  styleUrl: './legal-notice.component.scss'\n})\nexport class LegalNoticeComponent {\n\n  /**\n   * Creates an instance of LegalNoticeComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n    \n\n    \n        \n  \n     Legal Notice\n     \n        \n            \n        \n     \n  \n\n  \n    Imprint\n    Dr. Michelle Puschkarow\n    Waldingstraße 6\n    22391 Hamburg\n    info&#64;michelle-puschkarow.de\n    Represented by:\n    Marco Palummieri\n    Viktor Naumann\n    Jenny Domsgen\n  \n\n  \n    Acceptance of Terms\n    \n      By accessing and using Join (Product), you acknowledge and agree to the following terms and\n      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.\n      We, the listed students, may update or change the terms and conditions from time to time without notice.\n    \n  \n\n  \n    Scope and Ownership of the Product\n    \n      Join has been developed as part of a student group project in a web development bootcamp at the Developer\n      Akademie GmbH. It has an educational purpose and is not intended for extensive personal &amp; business usage. As\n      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality\n      regarding this Product.\n    \n    \n      The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,\n      distribution, or replication of the design is strictly prohibited.\n    \n  \n\n  \n    Proprietary Right\n    \n      Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in\n      Join, including any associated copyrighted material, trademarks,\n      and other proprietary information.\n    \n  \n\n  \n    Use of the Product\n    \n      Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.\n      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly\n      prohibited. You are solely responsible for your interactions with other users of Join.\n    \n  \n\n  \n    Disclaimer of Warranties and Limitation of Liability\n    \n      Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to\n      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.\n    \n    \n      In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,\n      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of\n      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such\n      damages, arising out of or in connection with the use or performance of Join.\n    \n  \n\n  \n    Indemnity\n    \n      You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our\n      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,\n      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join\n      and/or your breach of this Legal Notice.\n    \n  \n\n  Date: July 17, 2025\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '       Legal Notice                                              Imprint    Dr. Michelle Puschkarow    Waldingstraße 6    22391 Hamburg    info@michelle-puschkarow.de    Represented by:    Marco Palummieri    Viktor Naumann    Jenny Domsgen        Acceptance of Terms          By accessing and using Join (Product), you acknowledge and agree to the following terms and      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.      We, the listed students, may update or change the terms and conditions from time to time without notice.            Scope and Ownership of the Product          Join has been developed as part of a student group project in a web development bootcamp at the Developer      Akademie GmbH. It has an educational purpose and is not intended for extensive personal & business usage. As      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality      regarding this Product.              The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,      distribution, or replication of the design is strictly prohibited.            Proprietary Right          Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in      Join, including any associated copyrighted material, trademarks,      and other proprietary information.            Use of the Product          Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly      prohibited. You are solely responsible for your interactions with other users of Join.            Disclaimer of Warranties and Limitation of Liability          Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.              In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such      damages, arising out of or in connection with the use or performance of Join.            Indemnity          You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join      and/or your breach of this Legal Notice.        Date: July 17, 2025'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LegalNoticeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login/login.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                LoginHeaderComponent\n                                FooterComponent\n                            CommonModule\n                            ReactiveFormsModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                isTouchDevice\n                            \n                            \n                                loginForm\n                            \n                            \n                                logoState\n                            \n                            \n                                pageLoaded\n                            \n                            \n                                showPassword\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkIfTouchDevice\n                            \n                            \n                                getValidationMessage\n                            \n                            \n                                    Private\n                                initializeAnimation\n                            \n                            \n                                    Private\n                                initializeForm\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Async\n                                onGuestLogin\n                            \n                            \n                                    Async\n                                onLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/login/login.component.ts:94\n                            \n                        \n\n                \n                    \n                            Initializes the LoginComponent and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder instance for creating the login form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling authentication\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router for navigation after login\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkIfTouchDevice\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfTouchDevice()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:122\n                        \n                    \n\n\n            \n                \n                        Checks whether the user's device is a touch-enabled device.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:195\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for a given form field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the form control (e.g. 'email' or 'password')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string message describing the validation issue.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:140\n                        \n                    \n\n\n            \n                \n                        Triggers a delayed logo animation if it hasn't already occurred.\nStores a flag in session storage to prevent repeat animation.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:129\n                        \n                    \n\n\n            \n                \n                        Initializes the reactive login form with validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:207\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: resets the loading state when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: initializes the login form, touch detection,\nand triggers logo animation on first visit.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onGuestLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onGuestLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:177\n                        \n                    \n\n\n            \n                \n                        Logs in as a guest user using the AuthService.\nNavigates to the summary page on success or displays an error.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:156\n                        \n                    \n\n\n            \n                \n                        Handles user login using credentials from the form.\nShows loading indicator and displays errors if authentication fails.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:79\n                        \n                    \n\n            \n                \n                    Displays the current error message if login fails.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:84\n                        \n                    \n\n            \n                \n                    Shows whether a login request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:94\n                        \n                    \n\n            \n                \n                    Detects if the device supports touch input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:74\n                        \n                    \n\n            \n                \n                    Reactive form group for email and password login fields.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:64\n                        \n                    \n\n            \n                \n                    State of the logo animation. 'start' before animation, 'moved' after.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageLoaded\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:69\n                        \n                    \n\n            \n                \n                    Indicates whether the page has finished loading (used for triggering animation).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:89\n                        \n                    \n\n            \n                \n                    Indicates whether the password should be shown in plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FooterComponent } from '../footer/footer.component';\nimport { LoginHeaderComponent } from '../login-header/login-header.component';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  group\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router, RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    LoginHeaderComponent,\n    FooterComponent,\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n  animations: [\n    trigger('fadeOutWrapper', [\n      state('start', style({\n        opacity: 1\n      })),\n      state('moved', style({\n        opacity: 0\n      })),\n      transition('start => moved', [\n        animate('2s 0.5s ease-in-out')\n      ])\n    ])\n  ]\n})\nexport class LoginComponent {\n  /**\n   * State of the logo animation. `'start'` before animation, `'moved'` after.\n   */\n  logoState: 'start' | 'moved' = 'start';\n\n  /**\n   * Indicates whether the page has finished loading (used for triggering animation).\n   */\n  pageLoaded = false;\n\n  /**\n   * Reactive form group for email and password login fields.\n   */\n  loginForm!: FormGroup;\n\n  /**\n   * Displays the current error message if login fails.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Shows whether a login request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Indicates whether the password should be shown in plain text.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Detects if the device supports touch input.\n   */\n  isTouchDevice = false;\n\n  /**\n   * Initializes the LoginComponent and injects required services.\n   * \n   * @param fb FormBuilder instance for creating the login form\n   * @param authService Service for handling authentication\n   * @param router Router for navigation after login\n   */\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n  ) {}\n\n  /**\n   * Lifecycle hook: initializes the login form, touch detection,\n   * and triggers logo animation on first visit.\n   */\n  ngOnInit(): void {\n    this.initializeForm();\n    this.checkIfTouchDevice();\n    this.initializeAnimation();    \n  }\n\n  /**\n   * Checks whether the user's device is a touch-enabled device.\n   */\n  private checkIfTouchDevice(): void {\n    this.isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n  }\n\n  /**\n   * Initializes the reactive login form with validators.\n   */\n  private initializeForm(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  /**\n   * Triggers a delayed logo animation if it hasn't already occurred.\n   * Stores a flag in session storage to prevent repeat animation.\n   */\n  private initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoMoved')) {\n      setTimeout(() => {\n        this.pageLoaded = true;\n        this.logoState = 'moved';\n        sessionStorage.setItem('logoMoved', 'true');\n      }, 100);\n    } else {\n      this.logoState = 'moved';\n    }\n  }\n\n  /**\n   * Handles user login using credentials from the form.\n   * Shows loading indicator and displays errors if authentication fails.\n   */\n  async onLogin(): Promise {\n    if (this.loginForm.invalid) {\n      this.loginForm.markAllAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = '';\n    const { email, password } = this.loginForm.value;\n    const result = await this.authService.signIn(email, password);\n    if (result.success) {\n      this.router.navigate(['/summary']);\n    } else {\n      this.errorMessage = result.message || 'Login failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Logs in as a guest user using the AuthService.\n   * Navigates to the summary page on success or displays an error.\n   */\n  async onGuestLogin(): Promise {\n    this.isLoading = true;\n    this.errorMessage = '';\n    const result = await this.authService.signInAsGuest();\n    if (result.success) {\n      this.router.navigate(['/summary']);\n    } else {\n      this.errorMessage = result.message || 'Guest login failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for a given form field.\n   * \n   * @param field The name of the form control (e.g. 'email' or 'password')\n   * @returns A string message describing the validation issue.\n   */\n  getValidationMessage(field: string): string {\n    const control = this.loginForm.get(field);\n    if (!control || !control.touched || !control.errors) return '';\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['email']) return 'Please enter a valid email address';\n    if (control.errors['minlength']) return 'Password must be at least 8 characters long';\n    return '';\n  }\n\n  /**\n   * Lifecycle hook: resets the loading state when the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    this.isLoading = false;\n  }\n}\n\n    \n\n    \n        \n    \n    \n        \n    \n\n    \n        Log in\n        \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('email') }}\n                    \n                \n                \n                    \n                        \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('password') }}\n                    \n                \n                {{ errorMessage }}\n            \n            \n                \n                    {{ isLoading ? 'Loading...' : 'Log in' }}\n                \n                \n                    {{ isLoading ? 'Loading...' : 'Guest Log in' }}\n                \n            \n        \n    \n\n    \n        Not a Join user?\n        \n            Sign up\n        \n    \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                Log in                                                                                                                                                                                                {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                        {{ getValidationMessage(\\'password\\') }}                                                    {{ errorMessage }}                                                            {{ isLoading ? \\'Loading...\\' : \\'Log in\\' }}                                                    {{ isLoading ? \\'Loading...\\' : \\'Guest Log in\\' }}                                                    Not a Join user?                    Sign up                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginHeaderComponent.html":{"url":"components/LoginHeaderComponent.html","title":"component - LoginHeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginHeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login-header/login-header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login-header\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login-header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login-header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTouchDevice\n                            \n                            \n                                logoState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initializeAnimation\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \ninitializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:69\n                        \n                    \n\n\n            \n                \n                        Triggers the logo fade-in animation if it hasn’t already played during the session.\nStores a flag in sessionStorage to prevent the animation from repeating.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:61\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that initializes the animation state when the component loads.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:56\n                        \n                    \n\n            \n                \n                    Indicates whether the current device supports touch input.\nCurrently unused, but reserved for future enhancements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"appear\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:50\n                        \n                    \n\n            \n                \n                    The current state of the logo animation.\n\n'start': hidden state with opacity 0\n'appear': visible state with opacity 1\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/animations';\n\n\n@Component({\n  selector: 'app-login-header',\n  imports: [\n    RouterModule,\n  ],\n  templateUrl: './login-header.component.html',\n  styleUrl: './login-header.component.scss',\n  animations: [\n    trigger('fadeOut', [\n      state('start', style({\n        opacity: 0\n      })),\n      state('appear', style({\n        opacity: 1\n      })),\n      transition('start => appear', [\n        animate('2s 0.7s ease-in-out')\n      ])\n    ])\n  ]\n})\nexport class LoginHeaderComponent {\n  /**\n   * The current state of the logo animation.\n   * - `'start'`: hidden state with opacity 0\n   * - `'appear'`: visible state with opacity 1\n   */\n  logoState: 'start' | 'appear' = 'start';\n\n  /**\n   * Indicates whether the current device supports touch input.\n   * Currently unused, but reserved for future enhancements.\n   */\n  isTouchDevice: boolean = false;\n\n  /**\n   * Lifecycle hook that initializes the animation state when the component loads.\n   */\n  ngOnInit(): void {\n    this.initializeAnimation();\n  }\n\n  /**\n   * Triggers the logo fade-in animation if it hasn’t already played during the session.\n   * Stores a flag in sessionStorage to prevent the animation from repeating.\n   */\n  initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoAppeared')) {\n      setTimeout(() => {\n        this.logoState = 'appear';\n        sessionStorage.setItem('logoAppeared', 'true');\n      }, 100);\n    } else {\n      this.logoState = 'appear';\n    }\n  }\n}\n    \n\n    \n        \n    \n        \n    \n    \n        Not a Join user?\n        \n            Sign up\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Not a Join user?                    Sign up            '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginHeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NavigationHistoryService.html":{"url":"injectables/NavigationHistoryService.html","title":"injectable - NavigationHistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NavigationHistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/navigation-history.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service to keep track of recent navigation history within the Angular application.\nStores the last 3 visited URLs (including the current one) and allows navigation\nback to the previous URL.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                history\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getHistory\n                            \n                            \n                                    Public\n                                getPreviousUrl\n                            \n                            \n                                    Public\n                                navigateBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/navigation-history.service.ts:16\n                            \n                        \n\n                \n                    \n                            Subscribes to Angular Router events and tracks navigation history.\nKeeps the last 3 visited URLs (including the current one), trimming\nthe oldest entry when the limit is reached.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used to listen to navigation events.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Returns a copy of the navigation history.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of the last visited URLs (maximum of 3).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getPreviousUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPreviousUrl()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Gets the URL visited before the current one.\n\n\n                        \n                            Returns :     string | null\n\n                        \n                            \n                                The previous URL, or null if not available.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        navigateBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous URL if available.\nIf no previous URL is stored, navigates to the root path ('/').\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/services/navigation-history.service.ts:16\n                        \n                    \n\n            \n                \n                    Internal array holding the last 3 visited URLs\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n/**\n * A service to keep track of recent navigation history within the Angular application.\n * \n * Stores the last 3 visited URLs (including the current one) and allows navigation\n * back to the previous URL.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationHistoryService {\n  /** Internal array holding the last 3 visited URLs */\n  private history: string[] = [];\n\n  /**\n   * Subscribes to Angular Router events and tracks navigation history.\n   * \n   * Keeps the last 3 visited URLs (including the current one), trimming\n   * the oldest entry when the limit is reached.\n   * \n   * @param router - Angular Router used to listen to navigation events.\n   */\n  constructor(private router: Router) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        if (this.history.length === 3) {\n          this.history.shift(); // Remove the oldest URL\n        }\n        this.history.push(event.urlAfterRedirects);\n      });\n  }\n\n  /**\n   * Returns a copy of the navigation history.\n   * \n   * @returns An array of the last visited URLs (maximum of 3).\n   */\n  public getHistory(): string[] {\n    return [...this.history];\n  }\n\n  /**\n   * Gets the URL visited before the current one.\n   * \n   * @returns The previous URL, or null if not available.\n   */\n  public getPreviousUrl(): string | null {\n    if (this.history.length > 1) {\n      return this.history[this.history.length - 2];\n    }\n    return null;\n  }\n\n  /**\n   * Navigates back to the previous URL if available.\n   * \n   * If no previous URL is stored, navigates to the root path (`'/'`).\n   */\n  public navigateBack(): void {\n    const previousUrl = this.getPreviousUrl();\n    if (previousUrl) {\n      this.router.navigateByUrl(previousUrl);\n    } else {\n      this.router.navigateByUrl('/');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverlayManager.html":{"url":"injectables/OverlayManager.html","title":"injectable - OverlayManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OverlayManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/overlay-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                OverlayManager handles all overlay-related operations for the BoardComponent.\nThis includes opening/closing overlays, managing animation states, and handling responsive behavior.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                animationDirection\n                            \n                            \n                                    Private\n                                backgroundVisible\n                            \n                            \n                                    Private\n                                overlayVisible\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Private\n                                showAddOrEditTask\n                            \n                            \n                                    Private\n                                showTaskDetails\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDetailsOverlay\n                            \n                            \n                                getAnimationDirection\n                            \n                            \n                                getBackgroundVisible\n                            \n                            \n                                getOverlayVisible\n                            \n                            \n                                getSelectedTask\n                            \n                            \n                                getShowAddOrEditTask\n                            \n                            \n                                getShowTaskDetails\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                openAddOrEditOverlay\n                            \n                            \n                                openTaskDetail\n                            \n                            \n                                removeBackground\n                            \n                            \n                                resetOverlayStates\n                            \n                            \n                                setAnimationDirection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/overlay-manager.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDetailsOverlay\n                        \n                    \n                \n            \n            \n                \ncloseDetailsOverlay(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:142\n                        \n                    \n\n\n            \n                \n                        Closes the overlay for task details or task form.\nAlso resets relevant state variables and clears editing data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating why the overlay is being closed (e.g., 'close', 'added').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAnimationDirection\n                        \n                    \n                \n            \n            \n                \ngetAnimationDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:29\n                        \n                    \n\n\n            \n                \n                        Gets the current animation direction\n\n\n                        \n                            Returns :     \"right\" | \"bottom\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBackgroundVisible\n                        \n                    \n                \n            \n            \n                \ngetBackgroundVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:36\n                        \n                    \n\n\n            \n                \n                        Gets the background visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayVisible\n                        \n                    \n                \n            \n            \n                \ngetOverlayVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:43\n                        \n                    \n\n\n            \n                \n                        Gets the overlay visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSelectedTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected task\n\n\n                        \n                            Returns :         Task | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowAddOrEditTask\n                        \n                    \n                \n            \n            \n                \ngetShowAddOrEditTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:57\n                        \n                    \n\n\n            \n                \n                        Gets the add/edit task visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowTaskDetails\n                        \n                    \n                \n            \n            \n                \ngetShowTaskDetails()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:50\n                        \n                    \n\n\n            \n                \n                        Gets the task details visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:96\n                        \n                    \n\n\n            \n                \n                        Callback for when the overlay slide-in animation is finished.\nSlight delay before making the background visible for smooth UX.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAnimationEvent from Angular.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openAddOrEditOverlay\n                        \n                    \n                \n            \n            \n                \nopenAddOrEditOverlay(event: string, status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:111\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for adding or editing a task.\nOn small screens, navigates to a separate route; otherwise opens the overlay inline.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nEither 'open' or 'edit', indicating the action type.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to prefill in the add/edit task form.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetail\n                        \n                    \n                \n            \n            \n                \nopenTaskDetail(selectedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:129\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for viewing the details of a selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object to display in detail.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:83\n                        \n                    \n\n\n            \n                \n                        Handles removal of background and overlay if the event indicates closure.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string (expected: 'closed') that triggers background removal.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetOverlayStates\n                        \n                    \n                \n            \n            \n                \nresetOverlayStates()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:156\n                        \n                    \n\n\n            \n                \n                        Resets all overlay states to default values\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:74\n                        \n                    \n\n\n            \n                \n                        Sets the animation direction based on screen width.\nUsed for responsive slide-in overlays.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrent screen width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showAddOrEditTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTaskDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AnimationEvent } from '@angular/animations';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * OverlayManager handles all overlay-related operations for the BoardComponent.\n * This includes opening/closing overlays, managing animation states, and handling responsive behavior.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayManager {\n  private animationDirection: 'right' | 'bottom' = 'right';\n  private backgroundVisible = false;\n  private overlayVisible = false;\n  private showTaskDetails = false;\n  private showAddOrEditTask: boolean = false;\n  private selectedTask?: Task;\n\n  constructor(\n    private router: Router,\n    private taskService: TaskService\n  ) {}\n\n  /**\n   * Gets the current animation direction\n   */\n  getAnimationDirection(): 'right' | 'bottom' {\n    return this.animationDirection;\n  }\n\n  /**\n   * Gets the background visibility state\n   */\n  getBackgroundVisible(): boolean {\n    return this.backgroundVisible;\n  }\n\n  /**\n   * Gets the overlay visibility state\n   */\n  getOverlayVisible(): boolean {\n    return this.overlayVisible;\n  }\n\n  /**\n   * Gets the task details visibility state\n   */\n  getShowTaskDetails(): boolean {\n    return this.showTaskDetails;\n  }\n\n  /**\n   * Gets the add/edit task visibility state\n   */\n  getShowAddOrEditTask(): boolean {\n    return this.showAddOrEditTask;\n  }\n\n  /**\n   * Gets the currently selected task\n   */\n  getSelectedTask(): Task | undefined {\n    return this.selectedTask;\n  }\n\n  /**\n   * Sets the animation direction based on screen width.\n   * Used for responsive slide-in overlays.\n   *\n   * @param width - Current screen width.\n   */\n  setAnimationDirection(width: number): void {\n    this.animationDirection = width  {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Opens the overlay for adding or editing a task.\n   * On small screens, navigates to a separate route; otherwise opens the overlay inline.\n   *\n   * @param event - Either 'open' or 'edit', indicating the action type.\n   * @param status - The status to prefill in the add/edit task form.\n   */\n  openAddOrEditOverlay(event: string, status: string): void {\n    const isSmallScreen = window.innerWidth \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PrivacyPolicyComponent.html":{"url":"components/PrivacyPolicyComponent.html","title":"component - PrivacyPolicyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PrivacyPolicyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/privacy-policy/privacy-policy.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-privacy-policy\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./privacy-policy.component.html\n            \n\n\n\n            \n                styleUrl\n                ./privacy-policy.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrivacyPolicyComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nA service used to handle navigation history and go back to the previous route.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-privacy-policy',\n  imports: [RouterModule],\n  templateUrl: './privacy-policy.component.html',\n  styleUrl: './privacy-policy.component.scss'\n})\nexport class PrivacyPolicyComponent {\n\n  /**\n   * Creates an instance of PrivacyPolicyComponent.\n   *\n   * @param navigationService - A service used to handle navigation history and go back to the previous route.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n    \n     Privacy Policy\n     \n        \n            \n        \n     \n    \n  Information in accordance with Section 5 of the German Digital Services Act (DDG)\n  Last updated: July 17, 2025\n\n  \n    1. Disclaimer\n    1.1 General Information\n    \n      This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your\n      information when You use Join, and tells You about Your privacy rights and how the law protects You.\n    \n    \n      We use Your Personal data to provide and improve the Service. By using the Service, You agree to the\n      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been\n      created with the help of the Privacy Policy Generator.\n    \n  \n\n  \n    1.2 Note on Data Transmission\n    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.\n  \n\n  \n    2. Interpretation and Definitions\n    2.1 Interpretation\n    \n      The words of which the initial letter is capitalized have meanings defined under the following conditions.\n      The following definitions shall have the same meaning regardless of whether they appear in singular or in\n      plural.\n    \n\n    2.2 Definitions\n    \n      Account\n      A unique account created for You to access the kanban board Join.\n\n      Application\n      Refers to Join, the software program provided by the Company.\n\n      Company\n      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.\n\n      Cookies\n      Small files placed on Your device by a website, containing browsing history details.\n\n      Device\n      Any device that can access the Service (e.g. computer, cellphone, tablet).\n\n      Personal Data\n      Any information relating to an identified or identifiable individual.\n\n      Service\n      The Application or the Website or both - meaning Join.\n\n      Service Provider\n       Any person or company processing data on behalf of the Company to facilitate or provide the Service.\n\n      Usage Data\n       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).\n\n      You\n      \n        The individual or legal entity accessing or using the Service, as applicable.\n      \n    \n  \n\n  \n    3. Collecting and Using Your Personal Data\n\n    3.1 Types of Data Collected\n    3.1.1 Personal Data\n    \n      We may ask You for personally identifiable information, such as email address, first and last name,\n      phone number, address, city, state/province, ZIP/postal code.\n    \n\n    3.1.2 Usage Data\n    \n      Collected automatically, including IP address, browser type and version, pages visited, visit time and date,\n      time spent, unique device identifiers and other diagnostic data.\n      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.\n      This data comes from your browser or mobile device when accessing the Service.\n    \n\n    3.1.3 Tracking Technologies and Cookies\n    \n      We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the\n      Service.\n    \n    \n      Cookies: small files you can reject via browser settings.\n      Web Beacons: pixel files for tracking email opens, page popularity, etc.\n    \n    Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).\n\n    Examples of Cookies Used\n    \n      Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.\n      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.\n      Functionality Cookies (Persistent) – remember login or language preferences.\n    \n    \n      For more details and cookie choices, please visit our Cookies Policy section.\n    \n  \n\n  \n    4. Use of Your Personal Data\n    \n      Provide and maintain our Service, monitor usage.\n      Manage Your Account and registration.\n      Perform contracts (orders, service compliance).\n      Contact You (email, phone, SMS, push notifications).\n      Provide news, offers, events (unless unsubscribed).\n      Manage your requests to Us.\n      Business transfers (merger, sale, restructuring).\n      Other: analytics, usage trends, improve campaigns & Service.\n    \n\n    4.1 Sharing of Personal Information\n    \n      With Service Providers: for analysis and support.\n      For Business Transfers: in events like sale or acquisition.\n      With Affiliates: under this same Privacy Policy.\n      With Business Partners: for related products, services, promotions.\n      With Other Users: any info you share publicly is visible.\n      With Your Consent: for any other purposes.\n    \n  \n\n  \n    4.2 Transfer of Your Personal Data\n    \n      Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We\n      take steps to ensure adequate controls and security are in place.\n    \n  \n\n  \n    4.3 Data Retention and Deletion\n    \n      We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.\n      Usage Data retained for analytics or security.\n      You can delete or request deletion of your data via account settings or by contacting us. We may retain\n      information if legally required.\n    \n  \n\n  \n    4.4 Disclosure of Your Personal Data\n\n    4.4.1 Business Transactions\n    \n      If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify\n      before such changes.\n    \n\n    4.4.2 Law Enforcement & Other Legal Requirements\n    \n      We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.\n    \n  \n\n  \n    5. Security of Your Personal Data\n    \n      We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to\n      internet and electronic storage methods.\n    \n  \n\n  \n    6. Links to Other Websites\n    \n      Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for\n      their policies or content. Please review their Privacy Policies.\n    \n  \n\n  \n    7. Changes to this Privacy Policy\n    \n      We may update this policy from time to time. We'll notify via email or Service notice and update the \"Last\n      updated\" date. Changes take effect when posted. Please review periodically.\n    \n  \n\n  \n    8. Data Storage and Third-Party Services\n    \n      Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.\n      Through the use of Firebase services the following data might be processed:\n    \n    \n      Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.\n      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.\n      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.\n      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.\n    \n    \n      The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to\n      Google´s Privacy Policy and \n      Firebase’s Data Processing and Security Terms\n    \n  \n\n  \n    9. Prohibition of unsolicited contact\n    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted. \n       As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.\n  \n\n  \n    10. Contact Us\n    \n      If there are still questions, please contact us at\n      info&#64;michelle-puschkarow.de.\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '         Privacy Policy                                            Information in accordance with Section 5 of the German Digital Services Act (DDG)  Last updated: July 17, 2025      1. Disclaimer    1.1 General Information          This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your      information when You use Join, and tells You about Your privacy rights and how the law protects You.              We use Your Personal data to provide and improve the Service. By using the Service, You agree to the      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been      created with the help of the Privacy Policy Generator.            1.2 Note on Data Transmission    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.        2. Interpretation and Definitions    2.1 Interpretation          The words of which the initial letter is capitalized have meanings defined under the following conditions.      The following definitions shall have the same meaning regardless of whether they appear in singular or in      plural.        2.2 Definitions          Account      A unique account created for You to access the kanban board Join.      Application      Refers to Join, the software program provided by the Company.      Company      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.      Cookies      Small files placed on Your device by a website, containing browsing history details.      Device      Any device that can access the Service (e.g. computer, cellphone, tablet).      Personal Data      Any information relating to an identified or identifiable individual.      Service      The Application or the Website or both - meaning Join.      Service Provider       Any person or company processing data on behalf of the Company to facilitate or provide the Service.      Usage Data       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).      You              The individual or legal entity accessing or using the Service, as applicable.                  3. Collecting and Using Your Personal Data    3.1 Types of Data Collected    3.1.1 Personal Data          We may ask You for personally identifiable information, such as email address, first and last name,      phone number, address, city, state/province, ZIP/postal code.        3.1.2 Usage Data          Collected automatically, including IP address, browser type and version, pages visited, visit time and date,      time spent, unique device identifiers and other diagnostic data.      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.      This data comes from your browser or mobile device when accessing the Service.        3.1.3 Tracking Technologies and Cookies          We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the      Service.              Cookies: small files you can reject via browser settings.      Web Beacons: pixel files for tracking email opens, page popularity, etc.        Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).    Examples of Cookies Used          Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.      Functionality Cookies (Persistent) – remember login or language preferences.              For more details and cookie choices, please visit our Cookies Policy section.            4. Use of Your Personal Data          Provide and maintain our Service, monitor usage.      Manage Your Account and registration.      Perform contracts (orders, service compliance).      Contact You (email, phone, SMS, push notifications).      Provide news, offers, events (unless unsubscribed).      Manage your requests to Us.      Business transfers (merger, sale, restructuring).      Other: analytics, usage trends, improve campaigns & Service.        4.1 Sharing of Personal Information          With Service Providers: for analysis and support.      For Business Transfers: in events like sale or acquisition.      With Affiliates: under this same Privacy Policy.      With Business Partners: for related products, services, promotions.      With Other Users: any info you share publicly is visible.      With Your Consent: for any other purposes.            4.2 Transfer of Your Personal Data          Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We      take steps to ensure adequate controls and security are in place.            4.3 Data Retention and Deletion          We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.      Usage Data retained for analytics or security.      You can delete or request deletion of your data via account settings or by contacting us. We may retain      information if legally required.            4.4 Disclosure of Your Personal Data    4.4.1 Business Transactions          If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify      before such changes.        4.4.2 Law Enforcement & Other Legal Requirements          We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.            5. Security of Your Personal Data          We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to      internet and electronic storage methods.            6. Links to Other Websites          Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for      their policies or content. Please review their Privacy Policies.            7. Changes to this Privacy Policy          We may update this policy from time to time. We\\'ll notify via email or Service notice and update the \"Last      updated\" date. Changes take effect when posted. Please review periodically.            8. Data Storage and Third-Party Services          Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.      Through the use of Firebase services the following data might be processed:              Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.              The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to      Google´s Privacy Policy and       Firebase’s Data Processing and Security Terms            9. Prohibition of unsolicited contact    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted.        As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.        10. Contact Us          If there are still questions, please contact us at      info@michelle-puschkarow.de.      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PrivacyPolicyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SidebarComponent.html":{"url":"components/SidebarComponent.html","title":"component - SidebarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SidebarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/sidebar/sidebar.component.ts\n\n\n\n    \n        Description\n    \n    \n        Sidebar component for application navigation.\nDisplays navigation links and checks the user's authentication status.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sidebar\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sidebar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sidebar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLoggedIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/sidebar/sidebar.component.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs the SidebarComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing user authentication\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/sidebar/sidebar.component.ts:30\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Sidebar component for application navigation.\n * Displays navigation links and checks the user's authentication status.\n */\n@Component({\n  selector: 'app-sidebar',\n  imports: [\n    RouterModule,\n    CommonModule\n  ],\n  templateUrl: './sidebar.component.html',\n  styleUrl: './sidebar.component.scss'\n})\nexport class SidebarComponent {\n  /**\n   * Constructs the SidebarComponent.\n   * @param authService - Service for managing user authentication\n   */\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n  \n  \n    \n      \n        \n          \n          Summary\n        \n      \n      \n        \n          \n          Add Task\n        \n      \n      \n        \n          \n          Board\n        \n      \n      \n        \n          \n          Contacts\n        \n      \n    \n  \n  \n    \n      \n        \n          \n          Log In\n        \n      \n    \n  \n  \n    Privacy Policy\n    Legal notice\n  \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                Summary                                                Add Task                                                Board                                                Contacts                                                            Log In                          Privacy Policy    Legal notice  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SidebarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/signup/signup.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                                FooterComponent\n                            ReactiveFormsModule\n                \n            \n\n            \n                styleUrls\n                ./signup.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                showConfirmPassword\n                            \n                            \n                                showPassword\n                            \n                            \n                                signupform\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getValidationMessage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToLogin\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                passwordsMatchValidator\n                            \n                            \n                                saveNewContact\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, authService: AuthService, router: Router, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                            \n                        \n\n                \n                    \n                            Initializes the signup form and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder for creating the reactive form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for user registration\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to store new users as contacts\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for the given form field.\nIncludes special handling for mismatched passwords.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the form control.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A descriptive validation message or empty string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: creates the signup form with all necessary validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToLogin\n                        \n                    \n                \n            \n            \n                \nonBackToLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Navigates the user back to the login screen.\nUses skipLocationChange to avoid adding the redirect to browser history.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:119\n                        \n                    \n\n\n            \n                \n                        Handles the form submission process, including validation,\nuser registration, contact saving, and navigation on success.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordsMatchValidator\n                        \n                    \n                \n            \n            \n                \npasswordsMatchValidator(group: AbstractControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Custom validator to ensure password and confirm password fields match.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                group\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form group containing password fields.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                A validation error object or null if passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveNewContact\n                        \n                    \n                \n            \n            \n                \nsaveNewContact(newName: string, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Creates and stores a new contact based on registration input.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name entered during registration.\n\n                                            \n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email address entered during registration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:49\n                        \n                    \n\n            \n                \n                    Holds the current error message for display on form failure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:59\n                        \n                    \n\n            \n                \n                    Indicates whether a registration request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showConfirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                        \n                    \n\n            \n                \n                    Controls visibility of the confirm password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:64\n                        \n                    \n\n            \n                \n                    Controls visibility of the password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signupform\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:44\n                        \n                    \n\n            \n                \n                    The reactive signup form with fields for name, email, password, etc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:54\n                        \n                    \n\n            \n                \n                    Holds the success message shown after successful registration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ReactiveFormsModule } from '@angular/forms';\nimport { FooterComponent } from '../footer/footer.component';\nimport { RouterModule, Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../services/auth.service';\nimport { Contact, ContactService } from '../../services/contact.service';\n\n@Component({\n  selector: 'app-signup',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    FooterComponent,\n    ReactiveFormsModule\n  ],\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\n\nexport class SignupComponent implements OnInit {\n  /**\n   * The reactive signup form with fields for name, email, password, etc.\n   */\n  signupform!: FormGroup;\n\n  /**\n   * Holds the current error message for display on form failure.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Holds the success message shown after successful registration.\n   */\n  successMessage: string = '';\n\n  /**\n   * Indicates whether a registration request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Controls visibility of the password input field.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Controls visibility of the confirm password input field.\n   */\n  showConfirmPassword: boolean = false;\n\n  /**\n   * Initializes the signup form and injects required services.\n   * \n   * @param form FormBuilder for creating the reactive form\n   * @param authService Service for user registration\n   * @param router Angular Router for navigation\n   * @param contactService Service to store new users as contacts\n   */\n  constructor(\n    private form: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private contactService: ContactService,\n  ) {}\n\n  /**\n   * Lifecycle hook: creates the signup form with all necessary validators.\n   */\n  ngOnInit(): void {\n    this.signupform = this.form.group({\n      name : ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.pattern(/^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_\\-+=\\[\\]{};:'\"\\\\|,.<>\\/?]).+$/)\n      ]],\n      confirmPassword: ['', Validators.required],\n      privacyPolicy: [false, [Validators.requiredTrue]],\n    }, { validators: this.passwordsMatchValidator });\n  }\n\n  /**\n   * Custom validator to ensure password and confirm password fields match.\n   * \n   * @param group The form group containing password fields.\n   * @returns A validation error object or null if passwords match.\n   */\n  passwordsMatchValidator(group: AbstractControl): ValidationErrors | null {\n    const password = group.get('password')?.value;\n    const confirm = group.get('confirmPassword')?.value;\n    return password === confirm ? null : { passwordsDontMatch: true };\n  }\n\n  /**\n   * Handles the form submission process, including validation,\n   * user registration, contact saving, and navigation on success.\n   */\n  async onSubmit(): Promise {\n    if (this.signupform.invalid) {\n      this.signupform.markAllAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = '';\n    this.successMessage = '';\n    const { name, email, password } = this.signupform.value;\n    const result = await this.authService.signUp(email, password, name);\n    this.saveNewContact(name, email);\n    if (result.success) {\n      this.successMessage = 'Registration successful! You will be redirected...';\n      setTimeout(() => {\n        this.router.navigate(['/summary']);\n      }, 2000);\n    } else {\n      this.errorMessage = result.message || 'Registration failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Creates and stores a new contact based on registration input.\n   * \n   * @param newName Name entered during registration.\n   * @param newEmail Email address entered during registration.\n   */\n  saveNewContact(newName: string, newEmail: string): void {\n    const newContact: Contact = {\n      name: newName,\n      email: newEmail,\n    };\n    this.contactService.addContact(newContact);\n    this.contactService.selectContact(newContact);\n  }\n\n  /**\n   * Navigates the user back to the login screen.\n   * Uses `skipLocationChange` to avoid adding the redirect to browser history.\n   */\n  onBackToLogin(): void {\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\n      this.router.navigate(['/login']);\n    });\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for the given form field.\n   * Includes special handling for mismatched passwords.\n   * \n   * @param field The name of the form control.\n   * @returns A descriptive validation message or empty string.\n   */\n  getValidationMessage(field: string): string {\n    const control = this.signupform.get(field);\n\n    if (field === 'confirmPassword') {\n      const passwordMismatch = this.signupform.errors?.['passwordsDontMatch'];\n      const touched = control?.touched || this.signupform.get('password')?.touched;\n      const dirty = control?.dirty || this.signupform.get('password')?.dirty;\n      if (passwordMismatch && (touched || dirty)) {\n        return 'Passwords do not match';\n      }\n    }\n    if (!control || !control.touched || !control.errors) return '';\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['email']) return 'Please enter a valid email address';\n    if (control.errors['minlength']) {\n      return `Minimum ${control.errors['minlength'].requiredLength} characters required`;\n    }\n    if (control.errors['pattern']) {\n      return 'Password must contain uppercase, numbers and special characters';\n    }\n    if (control.errors['requiredTrue']) return 'You must accept the privacy policy';\n\n    return '';\n  }\n}\n    \n\n    \n            \n    \n        \n    \n\n    \n        \n            \n                \n            \n            Sign up\n        \n            \n                \n                    \n                        \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('name') }}\n                        \n                    \n                   \n                \n                    \n                        \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('email') }}\n                        \n                    \n                    \n                \n                    \n                        \n                            \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('password') }}\n                        \n                    \n                    \n                 \n\n\n\n                    \n                        \n                            \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('confirmPassword') }}\n                        \n                    \n\n\n\n                \n                    \n                    \n                        \n                        I accept the Privacy policy\n                    \n                    \n                \n                    \n                        Sign Up\n                        \n                            \n                            Signing up...\n                        \n                    \n                \n                {{ successMessage }}\n                {{ errorMessage }}\n                \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./signup.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.signup-content {\n    position:relative;\n    max-width: 1440px;\n    margin: 0 auto;\n}\n\n.dark-logo-wrapper {\n    padding: 32px;\n\n    img {\n        @media (max-width: 768px) {\n            height: 72px;\n            width: 64px;\n        }\n\n        @media (max-width: 406px){\n            height: 48px;\n            width: auto;\n            margin: 0 4px;\n        }\n    }\n\n    @media (max-width: 406px){\n        padding: 12px;\n    }\n}\n\n.signup-frame {\n  background-color: var(--background-light);\n  border-radius: 20px;\n  padding: clamp(32px, calc(1.8vw + 20px), 64px);\n  box-shadow: 0px 4px 24px rgba(0, 0, 0, 0.05);\n  width: clamp(440px, 5vw + 440px, 560px);\n  margin: 0 auto;\n  @include flex-center;\n  flex-direction: column;\n  align-items: center;\n  gap: clamp(24px, 2.5vh, 36px);\n  margin-top: 1rem;\n  overflow-x: hidden;\n\n\n  @media (max-width: 768px){\n    width: 90vw;\n    padding: 24px 12px;\n    gap: 20px;\n    box-sizing: border-box;\n    overflow-x: hidden;\n    max-height: 536px;\n  }\n\n\n  @media (max-width: 406px){\n    margin-top: 0.5rem;\n    overflow-y: auto;\n  }\n\n}  \n\n.signup-header {\n  width: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .btn-back {\n    @include btn();\n    position: absolute;\n    left: 0;\n\n    img {\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n    h2 {\n        @include inter700-fs47;\n        color: var(--text-color-main);\n        position: relative;\n        margin-bottom: 0;\n\n        &::after {\n        content: \"\";\n        display: block;\n        width: 80px;\n        height: 3px;\n        background-color: var(--accent-primary-color);\n        margin: 12px auto 0;\n        border-radius: 3px;\n        }\n\n       @media (max-width: 768px){\n            font-family: \"Inter\";\n            font-weight: 700;\n            font-size: 36px;\n        }\n\n        @media (max-width: 406px){\n            font-family: \"Inter\";\n            font-weight: 700;\n            font-size: 26px;\n        }\n    }\n}    \n\nform {\n    padding: 8px 33px;\n\n}\n\n\n.form-group-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 20px;\n\n    /*\n    @media(max-width: 768px) {\n        gap: 16px;\n    }\n    */\n}\n\n.form-group {\n    @include form-group();\n    background-color: var(--background-light);\n    position: relative;\n    \n\n    input {\n        width: 100%;\n        background-color: transparent;\n        color: var(--text-color-main);\n        padding-right: 28px;\n        @include inter400-fs20();\n        height: 16px;\n        font-size: 16px;\n    }\n\n    input::placeholder {\n        color: var(--text-color-medium);\n        opacity: 1; \n    }\n\n    input.invalid {\n        border: 2px solid var(--text-color-error);\n    }\n\n    .input-icon {\n        position: absolute;\n        right: clamp(12px, 2vw, 18px);\n        top: 50%;\n        transform: translateY(-50%);\n        height: 20px;\n        width: 20px;\n        opacity: 0.6;\n    }\n\n    @media(max-width: 768px) {\n        width: 100%;\n\n        input {\n            //width: 100%;\n            font-size: 15px;\n            height: 14px;\n        }\n\n        .input-icon {\n            width: 18px;\n            height: 18px;\n            right: 12px;\n        }\n    }\n\n}\n\n.checkbox-label {\n    @include flex-center;\n    gap: 8px;\n    margin: 8px;\n    margin-top: 16px;\n    width: 100%;\n    @include inter400-fs14();\n    color: var(--text-color-medium);\n    cursor: pointer;\n    position: relative;\n\n    input[type=\"checkbox\"] {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        cursor: pointer;\n        background-image: url(\"/assets/img/icons/checkbox.png\");\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        border: none;\n        margin: 0;\n        padding: 0;\n        flex-shrink: 0;\n    }\n\n    input[type=\"checkbox\"]:checked {\n        background-image: url(\"/assets/img/icons/checkbox-checked.png\");\n    }\n\n    .highlight {\n        color: var(--accent-primary-color);\n        text-decoration: none;\n        cursor: pointer;\n    }\n\n    @media (max-width: 406px){\n        font-size: 12px;\n        gap: 4px;\n        margin: 4px;\n    }\n}\n\n.btn-wrapper {\n    width: 100%;\n    @include flex-center;\n}\n\n.btn-signup {\n    cursor: pointer;\n    height: 44px;\n    border-radius: 8px;\n    border: unset;\n    min-width: 120px;\n    transition: background-color 0.2s ease;\n    justify-content: center;\n    @include btn-dark();\n\n    &:hover {\n        background-color: #29abe2;\n        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);\n    }\n\n    &:disabled {\n        background-color: #ccc;\n        color: #666;\n        cursor: not-allowed;\n        opacity: 0.6;\n    }\n\n    @media (max-width: 406px){\n        font-size: 16px;\n        height: 32px;\n        min-width: 96px;\n    }\n}\n\n.colorError {\n    border: 1px solid var(--text-color-error);\n}\n\n.error-message {\n    @include inter400-fs12;\n    color: var(--text-color-error);\n    display: hidden;\n\n    @media(max-width: 768px) {\n        font-size: 13px;\n    }\n}\n\n.success-message {\n    @include inter400-fs12;\n    color: var(--text-color-success);\n    display: block;\n    margin-top: 16px;\n    text-align: center;\n}\n\n.login-link {\n    @include inter400-fs12;\n    color: var(--text-color-light);\n    text-align: center;\n    margin-top: 16px;\n    \n    a {\n        color: var(--accent-color);\n        text-decoration: none;\n        \n        &:hover {\n            text-decoration: underline;\n        }\n    }\n}\n\ninput:focus {\n    border: unset;\n}\n\n.spinner {\n  border: 2px solid #fff;\n  border-top: 2px solid transparent;\n  border-radius: 50%;\n  width: 14px;\n  height: 14px;\n  display: inline-block;\n  animation: spin 0.8s linear infinite;\n  margin-right: 6px;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.input-icon.toggle-eye {\n    cursor: pointer;\n    right: 16px;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                    Sign up                                                                                                                                                                                                                                                {{ getValidationMessage(\\'name\\') }}                                                                                                                                                                                                                                                                                           {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                                                                                                        {{ getValidationMessage(\\'password\\') }}                                                                                                                                                                                                                                                                                                                         {{ getValidationMessage(\\'confirmPassword\\') }}                                                                                                                                                    I accept the Privacy policy                                                                                                    Sign Up                                                                                Signing up...                                                                            {{ successMessage }}                {{ errorMessage }}                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask.html":{"url":"interfaces/Subtask.html","title":"interface - Subtask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/subtask-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            completed\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        completed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        completed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Subtask {\n  id: string | number;\n  text: string;\n  completed: boolean;\n}\n\n/**\n * SubtaskManager handles all subtask-related operations for the AddTaskComponent.\n * This includes adding, editing, deleting, and managing subtask state.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubtaskManager {\n  private subtasks: Subtask[] = [];\n  private nextSubtaskId: number = 1;\n  private editingSubtaskId: string | number | null = null;\n  private editingSubtaskText: string = '';\n  private subtaskInput: string = '';\n  private showSubtaskConfirmation: boolean = false;\n\n  /**\n   * Gets all subtasks\n   */\n  getSubtasks(): Subtask[] {\n    return this.subtasks;\n  }\n\n  /**\n   * Sets the subtasks array\n   */\n  setSubtasks(subtasks: Subtask[]): void {\n    this.subtasks = subtasks;\n    this.nextSubtaskId = subtasks.length + 1;\n  }\n\n  /**\n   * Gets the current subtask input value\n   */\n  getSubtaskInput(): string {\n    return this.subtaskInput;\n  }\n\n  /**\n   * Sets the subtask input value\n   */\n  setSubtaskInput(value: string): void {\n    this.subtaskInput = value;\n  }\n\n  /**\n   * Gets the subtask confirmation state\n   */\n  getShowSubtaskConfirmation(): boolean {\n    return this.showSubtaskConfirmation;\n  }\n\n  /**\n   * Sets the subtask confirmation state\n   */\n  setShowSubtaskConfirmation(value: boolean): void {\n    this.showSubtaskConfirmation = value;\n  }\n\n  /**\n   * Gets the editing subtask ID\n   */\n  getEditingSubtaskId(): string | number | null {\n    return this.editingSubtaskId;\n  }\n\n  /**\n   * Gets the editing subtask text\n   */\n  getEditingSubtaskText(): string {\n    return this.editingSubtaskText;\n  }\n\n  /**\n   * Sets the editing subtask text\n   */\n  setEditingSubtaskText(value: string): void {\n    this.editingSubtaskText = value;\n  }\n\n  /**\n   * Handles subtask input click to clear the input if confirmation is not shown.\n   */\n  onSubtaskInputClick(): void {\n    if (!this.showSubtaskConfirmation) {\n      this.subtaskInput = '';\n    }\n  }\n\n  /**\n   * Handles Enter key press on subtask input to add the subtask.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEnter(event: Event): void {\n    event.preventDefault();\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      this.addSubtask();\n    }\n  }\n\n  /**\n   * Confirms and adds the subtask.\n   * @param event - The event that triggered the confirmation.\n   */\n  confirmSubtask(event: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.addSubtask();\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Cancels subtask creation and clears the input.\n   */\n  cancelSubtask(): void {\n    this.subtaskInput = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Adds a new subtask to the task.\n   */\n  addSubtask(): void {\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      const newSubtask: Subtask = {\n        id: this.nextSubtaskId++,\n        text: this.subtaskInput.trim(),\n        completed: false\n      };\n      this.subtasks.push(newSubtask);\n      this.subtaskInput = '';\n      this.showSubtaskConfirmation = false;\n    }\n  }\n\n  /**\n   * Deletes a subtask by its ID.\n   * @param id - The ID of the subtask to delete.\n   */\n  deleteSubtask(id: string | number): void {\n    this.subtasks = this.subtasks.filter(subtask => subtask.id !== id);\n  }\n\n  /**\n   * Edits the text of a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param newText - The new text for the subtask.\n   */\n  editSubtask(id: string | number, newText: string): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.text = newText.trim();\n    }\n  }\n\n  /**\n   * Initiates editing mode for a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param currentText - The current text of the subtask.\n   */\n  editSubtaskPrompt(id: string | number, currentText: string): void {\n    this.editingSubtaskId = id;\n    this.editingSubtaskText = currentText;\n    setTimeout(() => {\n      const inputElement = document.querySelector('.subtask-edit-input') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = this.editingSubtaskText;\n        inputElement.focus();\n        inputElement.setSelectionRange(inputElement.value.length, inputElement.value.length);\n      }\n    }, 100);\n  }\n\n  /**\n   * Saves the edited subtask text.\n   */\n  saveSubtaskEdit(): void {\n    if (this.editingSubtaskId !== null) {\n      if (this.editingSubtaskText && this.editingSubtaskText.trim()) {\n        this.editSubtask(this.editingSubtaskId, this.editingSubtaskText.trim());\n      }\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Cancels subtask editing mode.\n   */\n  cancelSubtaskEdit(): void {\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n  }\n\n  /**\n   * Handles keyboard shortcuts for subtask editing.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEditKeydown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.saveSubtaskEdit();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Toggles the completion state of a subtask.\n   * @param id - The ID of the subtask to toggle.\n   */\n  toggleSubtaskCompletion(id: string | number): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.completed = !subtask.completed;\n    }\n  }\n\n  /**\n   * Clears all subtask data and resets to default state.\n   */\n  clearAll(): void {\n    this.subtasks = [];\n    this.subtaskInput = '';\n    this.nextSubtaskId = 1;\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n    this.showSubtaskConfirmation = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask-1.html":{"url":"interfaces/Subtask-1.html","title":"interface - Subtask-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a subtask belonging to a task.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Completion status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title or label of the subtask\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubtaskManager.html":{"url":"injectables/SubtaskManager.html","title":"injectable - SubtaskManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubtaskManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/subtask-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                SubtaskManager handles all subtask-related operations for the AddTaskComponent.\nThis includes adding, editing, deleting, and managing subtask state.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editingSubtaskId\n                            \n                            \n                                    Private\n                                editingSubtaskText\n                            \n                            \n                                    Private\n                                nextSubtaskId\n                            \n                            \n                                    Private\n                                showSubtaskConfirmation\n                            \n                            \n                                    Private\n                                subtaskInput\n                            \n                            \n                                    Private\n                                subtasks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addSubtask\n                            \n                            \n                                cancelSubtask\n                            \n                            \n                                cancelSubtaskEdit\n                            \n                            \n                                clearAll\n                            \n                            \n                                confirmSubtask\n                            \n                            \n                                deleteSubtask\n                            \n                            \n                                editSubtask\n                            \n                            \n                                editSubtaskPrompt\n                            \n                            \n                                getEditingSubtaskId\n                            \n                            \n                                getEditingSubtaskText\n                            \n                            \n                                getShowSubtaskConfirmation\n                            \n                            \n                                getSubtaskInput\n                            \n                            \n                                getSubtasks\n                            \n                            \n                                onSubtaskEditKeydown\n                            \n                            \n                                onSubtaskEnter\n                            \n                            \n                                onSubtaskInputClick\n                            \n                            \n                                saveSubtaskEdit\n                            \n                            \n                                setEditingSubtaskText\n                            \n                            \n                                setShowSubtaskConfirmation\n                            \n                            \n                                setSubtaskInput\n                            \n                            \n                                setSubtasks\n                            \n                            \n                                toggleSubtaskCompletion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addSubtask\n                        \n                    \n                \n            \n            \n                \naddSubtask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:132\n                        \n                    \n\n\n            \n                \n                        Adds a new subtask to the task.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cancelSubtask\n                        \n                    \n                \n            \n            \n                \ncancelSubtask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:124\n                        \n                    \n\n\n            \n                \n                        Cancels subtask creation and clears the input.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cancelSubtaskEdit\n                        \n                    \n                \n            \n            \n                \ncancelSubtaskEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:198\n                        \n                    \n\n\n            \n                \n                        Cancels subtask editing mode.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:231\n                        \n                    \n\n\n            \n                \n                        Clears all subtask data and resets to default state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmSubtask\n                        \n                    \n                \n            \n            \n                \nconfirmSubtask(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Confirms and adds the subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event that triggered the confirmation.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteSubtask\n                        \n                    \n                \n            \n            \n                \ndeleteSubtask(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:149\n                        \n                    \n\n\n            \n                \n                        Deletes a subtask by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editSubtask\n                        \n                    \n                \n            \n            \n                \neditSubtask(id: string | number, newText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:158\n                        \n                    \n\n\n            \n                \n                        Edits the text of a subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to edit.\n\n\n                                            \n                                        \n                                        \n                                                newText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new text for the subtask.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editSubtaskPrompt\n                        \n                    \n                \n            \n            \n                \neditSubtaskPrompt(id: string | number, currentText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:170\n                        \n                    \n\n\n            \n                \n                        Initiates editing mode for a subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to edit.\n\n\n                                            \n                                        \n                                        \n                                                currentText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current text of the subtask.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingSubtaskId\n                        \n                    \n                \n            \n            \n                \ngetEditingSubtaskId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:70\n                        \n                    \n\n\n            \n                \n                        Gets the editing subtask ID\n\n\n                        \n                            Returns :     string | number | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingSubtaskText\n                        \n                    \n                \n            \n            \n                \ngetEditingSubtaskText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:77\n                        \n                    \n\n\n            \n                \n                        Gets the editing subtask text\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowSubtaskConfirmation\n                        \n                    \n                \n            \n            \n                \ngetShowSubtaskConfirmation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Gets the subtask confirmation state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtaskInput\n                        \n                    \n                \n            \n            \n                \ngetSubtaskInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:42\n                        \n                    \n\n\n            \n                \n                        Gets the current subtask input value\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasks\n                        \n                    \n                \n            \n            \n                \ngetSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Gets all subtasks\n\n\n                        \n                            Returns :     Subtask[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskEditKeydown\n                        \n                    \n                \n            \n            \n                \nonSubtaskEditKeydown(event: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:207\n                        \n                    \n\n\n            \n                \n                        Handles keyboard shortcuts for subtask editing.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe keyboard event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskEnter\n                        \n                    \n                \n            \n            \n                \nonSubtaskEnter(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:101\n                        \n                    \n\n\n            \n                \n                        Handles Enter key press on subtask input to add the subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe keyboard event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskInputClick\n                        \n                    \n                \n            \n            \n                \nonSubtaskInputClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:91\n                        \n                    \n\n\n            \n                \n                        Handles subtask input click to clear the input if confirmation is not shown.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveSubtaskEdit\n                        \n                    \n                \n            \n            \n                \nsaveSubtaskEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:186\n                        \n                    \n\n\n            \n                \n                        Saves the edited subtask text.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditingSubtaskText\n                        \n                    \n                \n            \n            \n                \nsetEditingSubtaskText(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:84\n                        \n                    \n\n\n            \n                \n                        Sets the editing subtask text\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowSubtaskConfirmation\n                        \n                    \n                \n            \n            \n                \nsetShowSubtaskConfirmation(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:63\n                        \n                    \n\n\n            \n                \n                        Sets the subtask confirmation state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSubtaskInput\n                        \n                    \n                \n            \n            \n                \nsetSubtaskInput(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:49\n                        \n                    \n\n\n            \n                \n                        Sets the subtask input value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSubtasks\n                        \n                    \n                \n            \n            \n                \nsetSubtasks(subtasks: Subtask[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Sets the subtasks array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                subtasks\n                                            \n                                                        Subtask[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSubtaskCompletion\n                        \n                    \n                \n            \n            \n                \ntoggleSubtaskCompletion(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:221\n                        \n                    \n\n\n            \n                \n                        Toggles the completion state of a subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to toggle.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingSubtaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingSubtaskText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nextSubtaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showSubtaskConfirmation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtaskInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Subtask {\n  id: string | number;\n  text: string;\n  completed: boolean;\n}\n\n/**\n * SubtaskManager handles all subtask-related operations for the AddTaskComponent.\n * This includes adding, editing, deleting, and managing subtask state.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubtaskManager {\n  private subtasks: Subtask[] = [];\n  private nextSubtaskId: number = 1;\n  private editingSubtaskId: string | number | null = null;\n  private editingSubtaskText: string = '';\n  private subtaskInput: string = '';\n  private showSubtaskConfirmation: boolean = false;\n\n  /**\n   * Gets all subtasks\n   */\n  getSubtasks(): Subtask[] {\n    return this.subtasks;\n  }\n\n  /**\n   * Sets the subtasks array\n   */\n  setSubtasks(subtasks: Subtask[]): void {\n    this.subtasks = subtasks;\n    this.nextSubtaskId = subtasks.length + 1;\n  }\n\n  /**\n   * Gets the current subtask input value\n   */\n  getSubtaskInput(): string {\n    return this.subtaskInput;\n  }\n\n  /**\n   * Sets the subtask input value\n   */\n  setSubtaskInput(value: string): void {\n    this.subtaskInput = value;\n  }\n\n  /**\n   * Gets the subtask confirmation state\n   */\n  getShowSubtaskConfirmation(): boolean {\n    return this.showSubtaskConfirmation;\n  }\n\n  /**\n   * Sets the subtask confirmation state\n   */\n  setShowSubtaskConfirmation(value: boolean): void {\n    this.showSubtaskConfirmation = value;\n  }\n\n  /**\n   * Gets the editing subtask ID\n   */\n  getEditingSubtaskId(): string | number | null {\n    return this.editingSubtaskId;\n  }\n\n  /**\n   * Gets the editing subtask text\n   */\n  getEditingSubtaskText(): string {\n    return this.editingSubtaskText;\n  }\n\n  /**\n   * Sets the editing subtask text\n   */\n  setEditingSubtaskText(value: string): void {\n    this.editingSubtaskText = value;\n  }\n\n  /**\n   * Handles subtask input click to clear the input if confirmation is not shown.\n   */\n  onSubtaskInputClick(): void {\n    if (!this.showSubtaskConfirmation) {\n      this.subtaskInput = '';\n    }\n  }\n\n  /**\n   * Handles Enter key press on subtask input to add the subtask.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEnter(event: Event): void {\n    event.preventDefault();\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      this.addSubtask();\n    }\n  }\n\n  /**\n   * Confirms and adds the subtask.\n   * @param event - The event that triggered the confirmation.\n   */\n  confirmSubtask(event: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.addSubtask();\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Cancels subtask creation and clears the input.\n   */\n  cancelSubtask(): void {\n    this.subtaskInput = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Adds a new subtask to the task.\n   */\n  addSubtask(): void {\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      const newSubtask: Subtask = {\n        id: this.nextSubtaskId++,\n        text: this.subtaskInput.trim(),\n        completed: false\n      };\n      this.subtasks.push(newSubtask);\n      this.subtaskInput = '';\n      this.showSubtaskConfirmation = false;\n    }\n  }\n\n  /**\n   * Deletes a subtask by its ID.\n   * @param id - The ID of the subtask to delete.\n   */\n  deleteSubtask(id: string | number): void {\n    this.subtasks = this.subtasks.filter(subtask => subtask.id !== id);\n  }\n\n  /**\n   * Edits the text of a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param newText - The new text for the subtask.\n   */\n  editSubtask(id: string | number, newText: string): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.text = newText.trim();\n    }\n  }\n\n  /**\n   * Initiates editing mode for a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param currentText - The current text of the subtask.\n   */\n  editSubtaskPrompt(id: string | number, currentText: string): void {\n    this.editingSubtaskId = id;\n    this.editingSubtaskText = currentText;\n    setTimeout(() => {\n      const inputElement = document.querySelector('.subtask-edit-input') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = this.editingSubtaskText;\n        inputElement.focus();\n        inputElement.setSelectionRange(inputElement.value.length, inputElement.value.length);\n      }\n    }, 100);\n  }\n\n  /**\n   * Saves the edited subtask text.\n   */\n  saveSubtaskEdit(): void {\n    if (this.editingSubtaskId !== null) {\n      if (this.editingSubtaskText && this.editingSubtaskText.trim()) {\n        this.editSubtask(this.editingSubtaskId, this.editingSubtaskText.trim());\n      }\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Cancels subtask editing mode.\n   */\n  cancelSubtaskEdit(): void {\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n  }\n\n  /**\n   * Handles keyboard shortcuts for subtask editing.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEditKeydown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.saveSubtaskEdit();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Toggles the completion state of a subtask.\n   * @param id - The ID of the subtask to toggle.\n   */\n  toggleSubtaskCompletion(id: string | number): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.completed = !subtask.completed;\n    }\n  }\n\n  /**\n   * Clears all subtask data and resets to default state.\n   */\n  clearAll(): void {\n    this.subtasks = [];\n    this.subtaskInput = '';\n    this.nextSubtaskId = 1;\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n    this.showSubtaskConfirmation = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SummaryComponent.html":{"url":"components/SummaryComponent.html","title":"component - SummaryComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SummaryComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/summary/summary.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-summary\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./summary.component.html\n            \n\n\n\n            \n                styleUrl\n                ./summary.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                awaitingFeedbackCount\n                            \n                            \n                                doneCount\n                            \n                            \n                                greeting\n                            \n                            \n                                greetingState\n                            \n                            \n                                inProgressCount\n                            \n                            \n                                isMobile\n                            \n                            \n                                nextDeadlineCount\n                            \n                            \n                                nextDeadlineDate\n                            \n                            \n                                showGreeting\n                            \n                            \n                                taskList\n                            \n                            \n                                todoCount\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                countTasksByStatus\n                            \n                            \n                                getGreeting\n                            \n                            \n                                goToBoard\n                            \n                            \n                                    Private\n                                isFirestoreTimestamp\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    totalTaskCount\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/summary/summary.component.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        countTasksByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    countTasksByStatus(tasks: Task[], status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:62\n                        \n                    \n\n\n            \n                \n                        Counts the number of tasks with a specific status.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of tasks.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to count.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of tasks with the given status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGreeting\n                        \n                    \n                \n            \n            \n                \ngetGreeting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Returns a greeting depending on the current time.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The greeting (e.g., \"Good morning,\").\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToBoard\n                        \n                    \n                \n            \n            \n                \ngoToBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Navigates to the board view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isFirestoreTimestamp\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFirestoreTimestamp(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Checks if the given object is a FirestoreTimestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         FirestoreTimestamp\n\n                        \n                            \n                                True if the object is a FirestoreTimestamp.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Initializes the component, loads user data and tasks,\ncalculates statistics, and controls the welcome greeting display.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        awaitingFeedbackCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doneCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greeting\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greetingState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inProgressCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showGreeting\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todoCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        totalTaskCount\n                    \n                \n\n                \n                    \n                        gettotalTaskCount()\n                    \n                \n                            \n                                \n                                    Defined in src/app/summary/summary.component.ts:83\n                                \n                            \n                    \n                        \n                                Returns the total number of all tasks.\n\n\n                                \n                                \n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showGreeting = true;\n        this.greetingState = 'start';\n        setTimeout(() => {\n          this.greetingState = 'moved';\n          setTimeout(() => {\n            this.showGreeting = false;\n            sessionStorage.setItem('greetingShown', 'true');\n          }, 2000);\n        }, 500);\n      } else {\n        this.showGreeting = false;\n      }\n    });\n\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n\n      this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n      this.doneCount = this.countTasksByStatus(tasks, 'done');\n      this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n      this.awaitingFeedbackCount = this.countTasksByStatus(\n        tasks,\n        'await-feedback'\n      );\n\n      const now = new Date();\n      const futureTasks = tasks\n        .filter((t) => t.date && t.status !== 'done')\n        .map((t) => {\n          let dateObj: Date | null = null;\n          if (t.date instanceof Date) {\n            dateObj = t.date;\n          } else if (this.isFirestoreTimestamp(t.date)) {\n            dateObj = t.date.toDate();\n          } else if (typeof t.date === 'string' || typeof t.date === 'number') {\n            dateObj = new Date(t.date);\n          }\n          return { ...t, dateObj };\n        })\n        .filter((t) => t.dateObj && t.dateObj > now);\n\n      if (futureTasks.length > 0) {\n        futureTasks.sort((a, b) => a.dateObj!.getTime() - b.dateObj!.getTime());\n        const nextDate = futureTasks[0].dateObj!;\n        this.nextDeadlineDate = nextDate;\n        this.nextDeadlineCount = futureTasks.filter(\n          (t) => t.dateObj!.getTime() === nextDate.getTime()\n        ).length;\n      } else {\n        this.nextDeadlineDate = null;\n        this.nextDeadlineCount = 0;\n      }\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    Join 360\n    \n    Key Metrics at a Glance\n    \n  \n\n  \n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n  \n    \n      \n        \n          \n            \n            \n              \n            \n            \n              \n            \n          \n\n          \n            {{ todoCount }}\n            To-do\n          \n        \n\n        \n          \n            \n            \n          \n          \n            {{ doneCount }}\n            Done\n          \n        \n      \n\n      \n        \n          \n            \n            \n          \n        \n\n        \n          {{ nextDeadlineCount }}\n          Urgent\n        \n        \n        \n          {{ nextDeadlineDate | date : \"MMMM d, y\" }}\n          Upcoming Deadline\n        \n      \n\n      \n        \n          \n            {{ totalTaskCount }}\n            Tasks inBoard\n          \n        \n        \n          \n            {{ inProgressCount }}\n            Tasks in Progress\n          \n        \n        \n          \n            {{ awaitingFeedbackCount }}\n            Awaiting Feedback\n          \n        \n      \n    \n\n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Join 360        Key Metrics at a Glance                  {{ greeting }}      {{ userName }}                                                                                                                                                            {{ todoCount }}            To-do                                                                                            {{ doneCount }}            Done                                                                                                            {{ nextDeadlineCount }}          Urgent                                  {{ nextDeadlineDate | date : \"MMMM d, y\" }}          Upcoming Deadline                                                  {{ totalTaskCount }}            Tasks inBoard                                                {{ inProgressCount }}            Tasks in Progress                                                {{ awaitingFeedbackCount }}            Awaiting Feedback                                      {{ greeting }}      {{ userName }}      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SummaryComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Task.html":{"url":"interfaces/Task.html","title":"interface - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a task in the system.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            assignedTo\n                                        \n                                \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            priority\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subtask\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        assignedTo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assignedTo:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional list of user IDs assigned to the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:     \"technical\" | \"user story\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"technical\" | \"user story\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Task category\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:     Date | Timestamp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | Timestamp\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Date of the task; may be a native Date object or Firestore Timestamp.\nFirestore stores it as a Timestamp and it needs conversion after reading.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating a task)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:     \"low\" | \"medium\" | \"urgent\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"low\" | \"medium\" | \"urgent\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Priority level of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current status of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtask\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtask:     Subtask[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Subtask[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional array of subtasks (retrieved separately as subcollection)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title of the task\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskComponent.html":{"url":"components/TaskComponent.html","title":"component - TaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task/task.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeStatus\n                            \n                            \n                                getCompletedSubtasksCount\n                            \n                            \n                                    Async\n                                getContactList\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                openDotsMenuHandler\n                            \n                            \n                                openTaskDetails\n                            \n                            \n                                percentageCompleted\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                openedMenuTaskId\n                            \n                            \n                                subtaskList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                closeDotsMenu\n                            \n                            \n                                contacts\n                            \n                            \n                                openDotsMenu\n                            \n                            \n                                taskSelected\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isDotsMenuOpen\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task/task.component.ts:94\n                            \n                        \n\n                \n                    \n                            Injects services required for task and contact operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for task data handling.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contact information.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        openedMenuTaskId\n                    \n                \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:76\n                            \n                        \n                \n                    \n                        The ID of the task for which the contextual \"dots\" menu is currently open.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskList\n                    \n                \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:56\n                            \n                        \n                \n                    \n                        The list of subtasks associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:51\n                            \n                        \n                \n                    \n                        /**\nThe task to be displayed in this component.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changeTaskStatus\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:91\n                            \n                        \n                \n                    \n                        Emits a status change for the task, along with its ID.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:86\n                            \n                        \n                \n                    \n                        Emits an event when the \"dots\" menu should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        contacts\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:66\n                            \n                        \n                \n                    \n                        Emits the list of resolved contacts associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        openDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:81\n                            \n                        \n                \n                    \n                        Emits the ID of the task when the \"dots\" menu is opened.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        taskSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:61\n                            \n                        \n                \n                    \n                        Emits the selected task when the user opens the task detail view.\n\n                    \n                \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeStatus\n                        \n                    \n                \n            \n            \n                \nchangeStatus(status: string, event: MouseEvent | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:152\n                        \n                    \n\n\n            \n                \n                        Emits a task status change and closes the dots menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new status to assign to the task.\n\n                                            \n                                        \n                                        \n                                                event\n                                            \n                                                        MouseEvent | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Optional mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCompletedSubtasksCount\n                        \n                    \n                \n            \n            \n                \ngetCompletedSubtasksCount(subtaskList: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:168\n                        \n                    \n\n\n            \n                \n                        Returns the number of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of completed subtasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:223\n                        \n                    \n\n\n            \n                \n                        Loads the full contact details for each assigned contact in the task\nand emits the resolved contact list.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames(remainingContacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:239\n                        \n                    \n\n\n            \n                \n                        Joins the names of remaining contacts into a comma-separated string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                remainingContacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of remaining Contact objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:139\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when any data-bound @Input properties change.\nThis method checks whether the task input has changed (excluding the first change),\nand if so, resets and reloads the contact list based on the updated task data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An object of changed properties with current and previous values.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that loads the contact list for the task on component init.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDotsMenuHandler\n                        \n                    \n                \n            \n            \n                \nopenDotsMenuHandler(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:210\n                        \n                    \n\n\n            \n                \n                        Toggles the dots menu open or closed for this task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetails\n                        \n                    \n                \n            \n            \n                \nopenTaskDetails(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:191\n                        \n                    \n\n\n            \n                \n                        Emits the selected task to open its detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The task to open.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        percentageCompleted\n                        \n                    \n                \n            \n            \n                \npercentageCompleted(subtaskList: Subtask[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:180\n                        \n                    \n\n\n            \n                \n                        Calculates the percentage of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        Subtask[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The completion percentage as a number between 0 and 100.\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:44\n                        \n                    \n\n            \n                \n                    The full list of contacts assigned to the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:104\n                        \n                    \n\n            \n                \n                    Service for fetching contact information.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:71\n                        \n                    \n\n            \n                \n                    Holds the task currently selected to open its detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:103\n                        \n                    \n\n            \n                \n                    Service for task data handling.\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isDotsMenuOpen\n                    \n                \n\n                \n                    \n                        getisDotsMenuOpen()\n                    \n                \n                            \n                                \n                                    Defined in src/app/board/task/task.component.ts:201\n                                \n                            \n                    \n                        \n                                Checks if the dots menu is currently open for this task.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n} from '@angular/core';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { TaskService } from '../../services/task.service';\nimport { Task } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { SimpleChanges, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-task',\n  imports: [CommonModule],\n  templateUrl: './task.component.html',\n  styleUrl: './task.component.scss',\n})\nexport class TaskComponent {\n\n  /**\n   * The full list of contacts assigned to the task.\n   */\n  contactList: Contact[] = [];\n\n  /**\n\n  /**\n   * The task to be displayed in this component.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  @Input() subtaskList: Subtask[] = [];\n\n  /**\n   * Emits the selected task when the user opens the task detail view.\n   */\n  @Output() taskSelected = new EventEmitter();\n\n  /**\n   * Emits the list of resolved contacts associated with the task.\n   */\n  @Output() contacts = new EventEmitter();\n\n  /**\n   * Holds the task currently selected to open its detail view.\n   */\n  selectedTask?: Task;\n\n  /**\n   * The ID of the task for which the contextual \"dots\" menu is currently open.\n   */\n  @Input() openedMenuTaskId: string | null = null;\n\n  /**\n   * Emits the ID of the task when the \"dots\" menu is opened.\n   */\n  @Output() openDotsMenu = new EventEmitter();\n\n  /**\n   * Emits an event when the \"dots\" menu should be closed.\n   */\n  @Output() closeDotsMenu = new EventEmitter();\n\n  /**\n   * Emits a status change for the task, along with its ID.\n   */\n  @Output() changeTaskStatus = new EventEmitter();\n\n  /**\n   * Injects services required for task and contact operations.\n   * \n   * @param taskService Service for task data handling.\n   * @param contactService Service for fetching contact information.\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService\n  ) {}\n\n  /**\n   * Detects clicks outside the \"dots\" menu and closes it if open.\n   * \n   * @param event Mouse click event on the document.\n   */\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (\n      !target.closest('.dots-menu-btn') &&\n      !target.closest('.dots-menu-overlay')\n    ) {\n      if (this.isDotsMenuOpen) {\n        this.closeDotsMenu.emit();\n      }\n    }\n  }\n\n  /**\n   * Lifecycle hook that loads the contact list for the task on component init.\n   */\n  ngOnInit(): void {\n    this.getContactList();\n  }\n\n  /**\n   * Lifecycle hook that is called when any data-bound @Input properties change.\n   * This method checks whether the `task` input has changed (excluding the first change),\n   * and if so, resets and reloads the contact list based on the updated task data.\n   *\n   * @param changes An object of changed properties with current and previous values.\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['task'] && !changes['task'].firstChange) {\n      this.contactList = [];\n      this.getContactList();\n    }\n  }\n\n  /**\n   * Emits a task status change and closes the dots menu.\n   * \n   * @param status The new status to assign to the task.\n   * @param event Optional mouse event to stop propagation.\n   */\n  changeStatus(status: string, event: MouseEvent | undefined) {\n    if (event) {\n      event.stopPropagation();\n    }\n    if (this.task.id) {\n      this.changeTaskStatus.emit({ taskId: this.task.id, status });\n      this.closeDotsMenu.emit();\n    }\n  }\n\n  /**\n   * Returns the number of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The number of completed subtasks.\n   */\n  getCompletedSubtasksCount(subtaskList: any[]): number {\n    return Array.isArray(subtaskList)\n      ? subtaskList.filter((el) => el.isCompleted).length\n      : 0;\n  }\n\n  /**\n   * Calculates the percentage of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The completion percentage as a number between 0 and 100.\n   */\n  percentageCompleted(subtaskList: Subtask[]): number {\n    if (!subtaskList || subtaskList.length === 0) return 0;\n    let completed = this.getCompletedSubtasksCount(subtaskList);\n    return Math.round((completed / subtaskList.length) * 100);\n  }\n\n  /**\n   * Emits the selected task to open its detail view.\n   * \n   * @param task The task to open.\n   */\n  openTaskDetails(task: Task) {\n    this.selectedTask = task;\n    this.taskSelected.emit(this.selectedTask);\n  }\n\n  /**\n   * Checks if the dots menu is currently open for this task.\n   * \n   * @returns A boolean indicating if the dots menu is open.\n   */\n  get isDotsMenuOpen() {\n    return this.openedMenuTaskId === this.task.id;\n  }\n\n  /**\n   * Toggles the dots menu open or closed for this task.\n   * \n   * @param event Mouse event to stop propagation.\n   */\n  openDotsMenuHandler(event: MouseEvent) {\n    event.stopPropagation();\n    if (this.isDotsMenuOpen) {\n      this.closeDotsMenu.emit();\n    } else {\n      this.openDotsMenu.emit(this.task.id);\n    }\n  }\n\n  /**\n   * Loads the full contact details for each assigned contact in the task\n   * and emits the resolved contact list.\n   */\n  async getContactList() {\n    if (this.task?.assignedTo?.length) {\n      for (let contactId of this.task.assignedTo) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) this.contactList.push(contact);\n      }\n      this.contacts.emit(this.contactList);\n    }\n  }\n\n  /**\n   * Joins the names of remaining contacts into a comma-separated string.\n   * \n   * @param remainingContacts Array of remaining Contact objects.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(remainingContacts: Contact[]): string {\n    return remainingContacts.map((contact) => contact.name).join(', ');\n  }\n}\n    \n\n    \n        \n  \n    \n      {{ taskService.capitalize(task.category) }}\n    \n\n    \n      \n      \n      \n    \n\n    \n      To Do\n      In Progress\n      Awaiting Feedback\n      Done\n    \n  \n  \n    {{ taskService.capitalize(task.title) }}\n    \n      {{ taskService.capitalize(task.description) }}\n      …\n    \n     0 ? 'visible' : 'hidden'\n      \"\n    >\n      \n        \n      \n      \n        {{ getCompletedSubtasksCount(subtaskList) }} /\n        {{ subtaskList.length }} Subtasks\n      \n    \n    \n      \n        \n          @for (contact of contactList.slice(0, 4); track $index) {\n          \n            \n              {{ contactService.getInitials(contact.name) }}\n            \n          \n          }\n           4\"\n            [title]=\"getRemainingContactNames(contactList.slice(4))\"\n          >\n            +{{ contactList.length - 4 }}\n          \n        \n      \n      \n      \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ taskService.capitalize(task.category) }}                                        To Do      In Progress      Awaiting Feedback      Done            {{ taskService.capitalize(task.title) }}          {{ taskService.capitalize(task.description) }}      …         0 ? \\'visible\\' : \\'hidden\\'      \"    >                                  {{ getCompletedSubtasksCount(subtaskList) }} /        {{ subtaskList.length }} Subtasks                                      @for (contact of contactList.slice(0, 4); track $index) {                                    {{ contactService.getInitials(contact.name) }}                                }           4\"            [title]=\"getRemainingContactNames(contactList.slice(4))\"          >            +{{ contactList.length - 4 }}                                                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskDetailsComponent.html":{"url":"components/TaskDetailsComponent.html","title":"component - TaskDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task-details/task-details.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task-details\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-details.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-details.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                showContent\n                            \n                            \n                                subtasks\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertDate\n                            \n                            \n                                deleteTask\n                            \n                            \n                                    Async\n                                loadAssignedContacts\n                            \n                            \n                                loadSubtasks\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                onSubtaskToggle\n                            \n                            \n                                openEditTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                closeTaskDetails\n                            \n                            \n                                editTask\n                            \n                            \n                                subtaskChanged\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-details/task-details.component.ts:70\n                            \n                        \n\n                \n                    \n                            Constructor injects task and contact services, and the Angular Router.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tasks and subtasks.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contacts.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation (currently unused).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        contactList\n                    \n                \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:60\n                            \n                        \n                \n                    \n                        The list of contacts assigned to this task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:55\n                            \n                        \n                \n                    \n                        The task whose details are being displayed.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        closeTaskDetails\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:40\n                            \n                        \n                \n                    \n                        Emits an event when the task detail view should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editTask\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:45\n                            \n                        \n                \n                    \n                        Emits an event when the user wants to edit the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:50\n                            \n                        \n                \n                    \n                        Emits the updated subtask list when a subtask is toggled.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Converts a Firebase Timestamp or Date to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The date or timestamp to convert.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the date.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n            \n                \ndeleteTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Deletes the task (if it has a valid ID), and closes the detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loadAssignedContacts\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadAssignedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Fetches detailed contact information for all assigned contact IDs\nand updates the contactList accordingly.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \nloadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:162\n                        \n                    \n\n\n            \n                \n                        Loads subtasks associated with the current task from the database.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:88\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook to load assigned contacts and subtasks on component initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:96\n                        \n                    \n\n\n            \n                \n                        Closes the task detail view and emits the close event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskToggle\n                        \n                    \n                \n            \n            \n                \nonSubtaskToggle(subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Toggles a subtask's completion status and updates it in the backend.\nEmits the updated list of subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The subtask to toggle.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openEditTask\n                        \n                    \n                \n            \n            \n                \nopenEditTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Prepares the task for editing and emits the edit event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:81\n                        \n                    \n\n            \n                \n                    Service for fetching contacts.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:65\n                        \n                    \n\n            \n                \n                    Controls whether the detail view content is shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:70\n                        \n                    \n\n            \n                \n                    The list of subtasks associated with the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:80\n                        \n                    \n\n            \n                \n                    Service for handling tasks and subtasks.\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { Task, TaskService } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-task-details',\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  templateUrl: './task-details.component.html',\n  styleUrl: './task-details.component.scss'\n})\nexport class TaskDetailsComponent {\n  /**\n   * Emits an event when the task detail view should be closed.\n   */\n  @Output() closeTaskDetails = new EventEmitter();\n\n  /**\n   * Emits an event when the user wants to edit the task.\n   */\n  @Output() editTask = new EventEmitter();\n\n  /**\n   * Emits the updated subtask list when a subtask is toggled.\n   */\n  @Output() subtaskChanged = new EventEmitter();\n\n  /**\n   * The task whose details are being displayed.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of contacts assigned to this task.\n   */\n  @Input() contactList: Contact[] = [];\n\n  /**\n   * Controls whether the detail view content is shown.\n   */\n  showContent = true;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  subtasks: Subtask[] = [];\n\n  /**\n   * Constructor injects task and contact services, and the Angular Router.\n   * \n   * @param taskService Service for handling tasks and subtasks.\n   * @param contactService Service for fetching contacts.\n   * @param router Angular Router for navigation (currently unused).\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService,\n    private router: Router\n  ) {}\n\n  /**\n   * Lifecycle hook to load assigned contacts and subtasks on component initialization.\n   */\n  ngOnInit(): void {\n    this.loadAssignedContacts();\n    this.loadSubtasks();\n  }\n\n  /**\n   * Closes the task detail view and emits the close event.\n   */\n  onClose() {\n    this.showContent = false;\n    this.closeTaskDetails.emit('close');\n  }\n\n  /**\n   * Converts a Firebase Timestamp or Date to a formatted string.\n   * \n   * @param date The date or timestamp to convert.\n   * @returns A string representation of the date.\n   */\n  convertDate(date: Timestamp | Date): string {\n    return this.taskService.convertDate(date);\n  }\n\n  /**\n   * Prepares the task for editing and emits the edit event.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  openEditTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    this.taskService.setEditingTask(this.task);\n    this.editTask.emit(\"edit\");\n  }\n\n  /**\n   * Deletes the task (if it has a valid ID), and closes the detail view.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  deleteTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    if (this.task.id) {\n      this.taskService.deleteTask(this.task.id);\n      this.onClose();\n    }\n  }\n\n  /**\n   * Toggles a subtask's completion status and updates it in the backend.\n   * Emits the updated list of subtasks.\n   * \n   * @param subtask The subtask to toggle.\n   */\n  onSubtaskToggle(subtask: Subtask) {\n    if (!this.task.id || !subtask.id) return;\n\n    this.taskService.updateSubtask(this.task.id, subtask.id, subtask)\n      .then(() => {\n        this.subtaskChanged.emit(this.subtasks);\n      })\n      .catch(error => {\n        console.error('Error updating subtask:', error);\n      });\n  }\n\n  /**\n   * Loads subtasks associated with the current task from the database.\n   */\n  loadSubtasks() {\n    if (this.task?.id) {\n      this.taskService.getSubtasks(this.task.id).subscribe((subtasks: Subtask[]) => {\n        this.subtasks = subtasks;\n      });\n    }\n  }\n\n  /**\n   * Fetches detailed contact information for all assigned contact IDs\n   * and updates the contactList accordingly.\n   */\n  async loadAssignedContacts() {\n    this.contactList = [];\n    if (this.task?.assignedTo?.length) {\n      for (let contactId of this.task.assignedTo) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) {\n          this.contactList.push(contact);\n        }\n      }\n    }\n  }\n}\n    \n\n    \n        \n    \n        {{taskService.capitalize(task.category)}}\n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n    \n        {{ taskService.capitalize(task.title) }}\n        {{ taskService.capitalize(task.description) }}\n        \n            Due date:\n            {{ convertDate(task.date) }}\n        \n        \n            Priority:\n            {{ task.priority }}\n            \n                \n                \n                \n            \n        \n        \n            Assigned To:\n            No contact selected\n            \n                @for (contact of contactList; track $index) {\n                    \n                        \n                            \n                                {{ contactService.getInitials(contact.name) }}\n                            \n                            {{ contact.name }}\n                        \n                    \n                }\n            \n        \n       \n            Subtasks:\n            No subtasks defined\n            \n                @for (subtask of subtasks; track $index) {\n                    \n                        \n                        \n                        {{ subtask.title }}\n                    \n                }\n            \n        \n        \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Delete\n            \n            \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Edit\n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{taskService.capitalize(task.category)}}                                                                                                                                                                {{ taskService.capitalize(task.title) }}        {{ taskService.capitalize(task.description) }}                    Due date:            {{ convertDate(task.date) }}                            Priority:            {{ task.priority }}                                                                                                    Assigned To:            No contact selected                            @for (contact of contactList; track $index) {                                                                                                        {{ contactService.getInitials(contact.name) }}                                                        {{ contact.name }}                                                            }                                       Subtasks:            No subtasks defined                            @for (subtask of subtasks; track $index) {                                                                                            {{ subtask.title }}                                    }                                                                                                                                                                                                                Delete                                                                                                                                                                                                            Edit                        '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskListManager.html":{"url":"injectables/TaskListManager.html","title":"injectable - TaskListManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskListManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/task-list-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                TaskListManager handles all task list operations for the BoardComponent.\nThis includes loading, filtering, sorting, and managing task lists by status.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                awaitfeedback\n                            \n                            \n                                    Private\n                                done\n                            \n                            \n                                    Private\n                                inprogress\n                            \n                            \n                                    Private\n                                subtasksByTaskId\n                            \n                            \n                                    Private\n                                taskList\n                            \n                            \n                                    Private\n                                todo\n                            \n                            \n                                    Private\n                                unsubTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                destroy\n                            \n                            \n                                    Private\n                                emptyArrays\n                            \n                            \n                                getAwaitFeedbackTasks\n                            \n                            \n                                    Private\n                                getDateValue\n                            \n                            \n                                getDoneTasks\n                            \n                            \n                                getFilteredTasks\n                            \n                            \n                                getInProgressTasks\n                            \n                            \n                                getSubtasksByTaskId\n                            \n                            \n                                getSubtasksForSelectedTask\n                            \n                            \n                                getSubtasksForTask\n                            \n                            \n                                getTaskList\n                            \n                            \n                                getTodoTasks\n                            \n                            \n                                    Private\n                                loadSubtasks\n                            \n                            \n                                loadTasks\n                            \n                            \n                                sortTasksByDueDate\n                            \n                            \n                                trackByTaskId\n                            \n                            \n                                updateTaskLists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-list-manager.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        destroy\n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:229\n                        \n                    \n\n\n            \n                \n                        Clears all data and unsubscribes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emptyArrays\n                        \n                    \n                \n            \n            \n                \n                        \n                    emptyArrays()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:170\n                        \n                    \n\n\n            \n                \n                        Empties all task lists (to-do, in-progress, await-feedback, done).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAwaitFeedbackTasks\n                        \n                    \n                \n            \n            \n                \ngetAwaitFeedbackTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getDateValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDateValue(date: Date | any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Date | any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDate input to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDoneTasks\n                        \n                    \n                \n            \n            \n                \ngetDoneTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFilteredTasks\n                        \n                    \n                \n            \n            \n                \ngetFilteredTasks(status: string, searchTerm: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:65\n                        \n                    \n\n\n            \n                \n                        Filters tasks by given status and search term (case-insensitive).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTask status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n\n\n                                            \n                                        \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nSearch term to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Filtered list of tasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInProgressTasks\n                        \n                    \n                \n            \n            \n                \ngetInProgressTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksByTaskId\n                        \n                    \n                \n            \n            \n                \ngetSubtasksByTaskId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:54\n                        \n                    \n\n\n            \n                \n                        Gets subtasks by task ID\n\n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForSelectedTask(selectedTask: Task | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:209\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks assigned to the currently selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently selected task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none are found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForTask(taskId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:196\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks for a given task ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to retrieve subtasks for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none exist.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTaskList\n                        \n                    \n                \n            \n            \n                \ngetTaskList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:28\n                        \n                    \n\n\n            \n                \n                        Gets all tasks\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTodoTasks\n                        \n                    \n                \n            \n            \n                \ngetTodoTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:35\n                        \n                    \n\n\n            \n                \n                        Gets task lists by status\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:180\n                        \n                    \n\n\n            \n                \n                        Loads subtasks for each task and stores them in a lookup table by task ID.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadTasks\n                        \n                    \n                \n            \n            \n                \nloadTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:133\n                        \n                    \n\n\n            \n                \n                        Loads tasks from the task service and distributes them into status-based lists.\nAlso sorts tasks by due date and loads their subtasks.\n\n\n                        \n                            Returns :         function\n\n                        \n                            \n                                A function to unsubscribe from the task observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortTasksByDueDate\n                        \n                    \n                \n            \n            \n                \nsortTasksByDueDate(tasks: Task[], ascending: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:91\n                        \n                    \n\n\n            \n                \n                        Sorts a list of tasks by their due date.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nArray of tasks to be sorted.\n\n\n                                            \n                                        \n                                        \n                                                ascending\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether to sort in ascending order (default: true).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Sorted task array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trackByTaskId\n                        \n                    \n                \n            \n            \n                \ntrackByTaskId(index: number, task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:123\n                        \n                    \n\n\n            \n                \n                        TrackBy function for use with ngFor to optimize rendering of tasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the item in the array.\n\n\n                                            \n                                        \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                The unique task ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTaskLists\n                        \n                    \n                \n            \n            \n                \nupdateTaskLists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:219\n                        \n                    \n\n\n            \n                \n                        Updates task lists after status changes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        awaitfeedback\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inprogress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtasksByTaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        unsubTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Task, TaskService, Subtask } from '../services/task.service';\nimport { Subscription } from 'rxjs';\n\n/**\n * TaskListManager handles all task list operations for the BoardComponent.\n * This includes loading, filtering, sorting, and managing task lists by status.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskListManager {\n  private taskList: Task[] = [];\n  private subtasksByTaskId: { [taskId: string]: Subtask[] } = {};\n  private unsubTask!: Subscription;\n  \n  // Task status arrays\n  private todo: Task[] = [];\n  private inprogress: Task[] = [];\n  private awaitfeedback: Task[] = [];\n  private done: Task[] = [];\n\n  constructor(private taskService: TaskService) {}\n\n  /**\n   * Gets all tasks\n   */\n  getTaskList(): Task[] {\n    return this.taskList;\n  }\n\n  /**\n   * Gets task lists by status\n   */\n  getTodoTasks(): Task[] {\n    return this.todo;\n  }\n\n  getInProgressTasks(): Task[] {\n    return this.inprogress;\n  }\n\n  getAwaitFeedbackTasks(): Task[] {\n    return this.awaitfeedback;\n  }\n\n  getDoneTasks(): Task[] {\n    return this.done;\n  }\n\n  /**\n   * Gets subtasks by task ID\n   */\n  getSubtasksByTaskId(): { [taskId: string]: Subtask[] } {\n    return this.subtasksByTaskId;\n  }\n\n  /**\n   * Filters tasks by given status and search term (case-insensitive).\n   *\n   * @param status - Task status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n   * @param searchTerm - Search term to filter by.\n   * @returns Filtered list of tasks.\n   */\n  getFilteredTasks(status: string, searchTerm: string): Task[] {\n    const statusArrayMap: { [key: string]: Task[] } = {\n      'to-do': this.todo,\n      'in-progress': this.inprogress,\n      'await-feedback': this.awaitfeedback,\n      done: this.done,\n    };\n    const tasksForStatus = statusArrayMap[status] || [];\n    if (!searchTerm.trim()) {\n      return tasksForStatus;\n    }\n    const searchLower = searchTerm.toLowerCase();\n    return tasksForStatus.filter(\n      (task) =>\n        task.title.toLowerCase().includes(searchLower) ||\n        task.description?.toLowerCase().includes(searchLower)\n    );\n  }\n\n  /**\n   * Sorts a list of tasks by their due date.\n   *\n   * @param tasks - Array of tasks to be sorted.\n   * @param ascending - Whether to sort in ascending order (default: true).\n   * @returns Sorted task array.\n   */\n  sortTasksByDueDate(tasks: Task[], ascending: boolean = true): Task[] {\n    return [...tasks].sort((a, b) => {\n      const dateA = this.getDateValue(a.date);\n      const dateB = this.getDateValue(b.date);\n      return ascending ? dateA - dateB : dateB - dateA;\n    });\n  }\n\n  /**\n   * Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n   *\n   * @param date - Date input to convert.\n   * @returns Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n   */\n  private getDateValue(date: Date | any): number {\n    if (date && typeof date.toDate === 'function') {\n      return date.toDate().getTime();\n    } else if (date instanceof Date) {\n      return date.getTime();\n    } else if (typeof date === 'string') {\n      return new Date(date).getTime();\n    }\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * TrackBy function for use with ngFor to optimize rendering of tasks.\n   *\n   * @param index - The index of the item in the array.\n   * @param task - The task object.\n   * @returns The unique task ID.\n   */\n  trackByTaskId(index: number, task: Task): string | undefined {\n    return task.id;\n  }\n\n  /**\n   * Loads tasks from the task service and distributes them into status-based lists.\n   * Also sorts tasks by due date and loads their subtasks.\n   *\n   * @returns A function to unsubscribe from the task observable.\n   */\n  loadTasks(): (() => void) {\n    this.unsubTask = this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n      this.emptyArrays();\n      for (const task of tasks) {\n        switch (task.status) {\n          case 'to-do':\n            this.todo.push(task);\n            break;\n          case 'in-progress':\n            this.inprogress.push(task);\n            break;\n          case 'await-feedback':\n            this.awaitfeedback.push(task);\n            break;\n          case 'done':\n            this.done.push(task);\n            break;\n          default:\n            console.warn(\n              `Unbekannter Status bei Task ${task.title}:`,\n              task.status\n            );\n        }\n      }\n      this.todo = this.sortTasksByDueDate(this.todo);\n      this.inprogress = this.sortTasksByDueDate(this.inprogress);\n      this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n      this.done = this.sortTasksByDueDate(this.done);\n      this.loadSubtasks();\n    });\n    return () => this.unsubTask.unsubscribe();\n  }\n\n  /**\n   * Empties all task lists (to-do, in-progress, await-feedback, done).\n   */\n  private emptyArrays(): void {\n    this.todo = [];\n    this.inprogress = [];\n    this.awaitfeedback = [];\n    this.done = [];\n  }\n\n  /**\n   * Loads subtasks for each task and stores them in a lookup table by task ID.\n   */\n  private loadSubtasks(): void {\n    for (const task of this.taskList) {\n      if (task.id) {\n        this.taskService.getSubtasks(task.id).subscribe((subtasks) => {\n          this.subtasksByTaskId[task.id!] = subtasks;\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns the subtasks for a given task ID.\n   *\n   * @param taskId - The ID of the task to retrieve subtasks for.\n   * @returns Array of subtasks, or an empty array if none exist.\n   */\n  getSubtasksForTask(taskId: string | undefined): Subtask[] {\n    if (!taskId) {\n      return [];\n    }\n    return this.subtasksByTaskId[taskId] || [];\n  }\n\n  /**\n   * Returns the subtasks assigned to the currently selected task.\n   *\n   * @param selectedTask - The currently selected task.\n   * @returns Array of subtasks, or an empty array if none are found.\n   */\n  getSubtasksForSelectedTask(selectedTask: Task | undefined): Subtask[] {\n    if (selectedTask?.id) {\n      return this.subtasksByTaskId[selectedTask.id] || [];\n    }\n    return [];\n  }\n\n  /**\n   * Updates task lists after status changes\n   */\n  updateTaskLists(): void {\n    this.todo = this.sortTasksByDueDate(this.todo);\n    this.inprogress = this.sortTasksByDueDate(this.inprogress);\n    this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n    this.done = this.sortTasksByDueDate(this.done);\n  }\n\n  /**\n   * Clears all data and unsubscribes\n   */\n  destroy(): void {\n    if (this.unsubTask) {\n      this.unsubTask.unsubscribe();\n    }\n    this.emptyArrays();\n    this.taskList = [];\n    this.subtasksByTaskId = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing tasks and subtasks\nstored in Firestore.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editingTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSubtask\n                            \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                capitalize\n                            \n                            \n                                clearEditingTask\n                            \n                            \n                                convertDate\n                            \n                            \n                                    Async\n                                deleteSubtask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                formatDate\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                getEditingTask\n                            \n                            \n                                getSingleTaskRef\n                            \n                            \n                                getSubtasks\n                            \n                            \n                                getSubtasksRef\n                            \n                            \n                                getTasks\n                            \n                            \n                                getTasksRef\n                            \n                            \n                                setEditingTask\n                            \n                            \n                                    Async\n                                updateSubtask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/task.service.ts:71\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addSubtask(ColId: string, subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Adds a subtask to a specific task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created subtask with ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addTask(newTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Adds a new task to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task to be added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created task including its generated ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(text: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:297\n                        \n                    \n\n\n            \n                \n                        Capitalizes the first letter of a string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe string to capitalize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Capitalized string or empty string if undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearEditingTask\n                        \n                    \n                \n            \n            \n                \nclearEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:287\n                        \n                    \n\n\n            \n                \n                        Clears the currently edited task.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:247\n                        \n                    \n\n\n            \n                \n                        Converts a Firestore Timestamp or Date object to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Timestamp or Date to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted date string (dd/mm/yyyy).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSubtask(taskId: string, subtaskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Deletes a subtask from a task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask ID to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:212\n                        \n                    \n\n\n            \n                \n                        Deletes a task from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatDate\n                        \n                    \n                \n            \n            \n                \nformatDate(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:261\n                        \n                    \n\n\n            \n                \n                        Formats a Date object into a dd/mm/yyyy string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Date to format.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updated: Task | Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Returns a plain object representation of a Task or Subtask for Firestore updates.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updated\n                                            \n                                                        Task | Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to clean.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { title: string; description: string; date: any; priority: \"low\" | \"medium\" | \"urgent\"; status: string; assignedTo: {}; category: \"technical\" | \"user story\"; isCompleted?: undefined; } | { ...; } | { ...; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingTask\n                        \n                    \n                \n            \n            \n                \ngetEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:280\n                        \n                    \n\n\n            \n                \n                        Returns the task currently being edited.\n\n\n                        \n                            Returns :         Task | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleTaskRef\n                        \n                    \n                \n            \n            \n                \ngetSingleTaskRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns a document reference for a specific task by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasks\n                        \n                    \n                \n            \n            \n                \ngetSubtasks(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Observes the subtasks of a given task in real-time.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksRef\n                        \n                    \n                \n            \n            \n                \ngetSubtasksRef(subColId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'subtasks' subcollection for a given task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasks\n                        \n                    \n                \n            \n            \n                \ngetTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Observes all tasks in Firestore and emits updates in real-time.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasksRef\n                        \n                    \n                \n            \n            \n                \ngetTasksRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'tasks' Firestore collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditingTask\n                        \n                    \n                \n            \n            \n                \nsetEditingTask(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:273\n                        \n                    \n\n\n            \n                \n                        Sets the currently edited task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task being edited.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:191\n                        \n                    \n\n\n            \n                \n                        Updates a subtask document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask document ID.\n\n\n                                            \n                                        \n                                        \n                                                updatedSubtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated subtask data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(docId: string, updatedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Updates a task document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task.\n\n\n                                            \n                                        \n                                        \n                                                updatedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated task data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/services/task.service.ts:71\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserData.html":{"url":"interfaces/UserData.html","title":"interface - UserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for user data stored in Firestore.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            uid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/add-task/add-task.component.ts\n            \n            component\n            AddTaskComponent\n            \n                59 %\n                (25/42)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            injectable\n            CategoryManager\n            \n                80 %\n                (12/15)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/add-task/contact-manager.ts\n            \n            injectable\n            ContactManager\n            \n                81 %\n                (13/16)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            injectable\n            SubtaskManager\n            \n                79 %\n                (23/29)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            interface\n            Subtask\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/board.component.ts\n            \n            component\n            BoardComponent\n            \n                71 %\n                (25/35)\n            \n        \n        \n            \n                \n                src/app/board/drag-drop-manager.ts\n            \n            injectable\n            DragDropManager\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/board/overlay-manager.ts\n            \n            injectable\n            OverlayManager\n            \n                66 %\n                (14/21)\n            \n        \n        \n            \n                \n                src/app/board/task-details/task-details.component.ts\n            \n            component\n            TaskDetailsComponent\n            \n                94 %\n                (18/19)\n            \n        \n        \n            \n                \n                src/app/board/task-list-manager.ts\n            \n            injectable\n            TaskListManager\n            \n                57 %\n                (15/26)\n            \n        \n        \n            \n                \n                src/app/board/task/task.component.ts\n            \n            component\n            TaskComponent\n            \n                96 %\n                (24/25)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-details/contact-details.component.ts\n            \n            component\n            ContactDetailsComponent\n            \n                50 %\n                (13/26)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-form/contact-form.component.ts\n            \n            component\n            ContactFormComponent\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-list/contact-list.component.ts\n            \n            component\n            ContactListComponent\n            \n                85 %\n                (17/20)\n            \n        \n        \n            \n                \n                src/app/contacts/contacts.component.ts\n            \n            component\n            ContactsComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/app/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/app/login-signup/footer/footer.component.ts\n            \n            component\n            FooterComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/login-signup/login-header/login-header.component.ts\n            \n            component\n            LoginHeaderComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/login-signup/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/app/login-signup/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                92 %\n                (13/14)\n            \n        \n        \n            \n                \n                src/app/services/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            interface\n            UserData\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            injectable\n            ContactService\n            \n                95 %\n                (23/24)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            interface\n            Contact\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/app/services/contact.service.ts\n            \n            function\n            notOnlyWhitespace\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/navigation-history.service.ts\n            \n            injectable\n            NavigationHistoryService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            injectable\n            TaskService\n            \n                90 %\n                (19/21)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Subtask\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Task\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/shared/help/help.component.ts\n            \n            component\n            HelpComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/legal-notice/legal-notice.component.ts\n            \n            component\n            LegalNoticeComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/privacy-policy/privacy-policy.component.ts\n            \n            component\n            PrivacyPolicyComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/sidebar/sidebar.component.ts\n            \n            component\n            SidebarComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            component\n            SummaryComponent\n            \n                26 %\n                (5/19)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            interface\n            FirestoreTimestamp\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.14\n        \n            @angular/cdk : ^19.2.14\n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/fire : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            notOnlyWhitespace   (src/.../contact.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/services/contact.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        notOnlyWhitespace\n                        \n                    \n                \n            \n            \n                \nnotOnlyWhitespace(control: AbstractControl)\n                \n            \n\n\n\n\n            \n                \n                        Custom validator to check that a form input contains more than just whitespace.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form control to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                A validation error object if invalid, otherwise null.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nJoin\nThis project was generated using Angular CLI version 19.2.12.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideFirebaseApp(() =>\n      initializeApp({\n        projectId: 'join-6125f',\n        appId: '1:703986298510:web:8cb9707daf583f2153a3df',\n        storageBucket: 'join-6125f.firebasestorage.app',\n        apiKey: 'AIzaSyAWyoU260eXmo3445mLTsqCjzRhEG6aq9A',\n        authDomain: 'join-6125f.firebaseapp.com',\n        messagingSenderId: '703986298510',\n      })\n    ),\n    provideFirestore(() => getFirestore()),\n    provideAnimations(),\n    provideAuth(() => getAuth()),\n    {\n      provide: CDK_DRAG_CONFIG,\n      useValue: {\n        dragStartThreshold: 5,\n        pointerDirectionChangeThreshold: 5,\n        zIndex: 1000,\n        scrollSpeed: 30,          \n        scrollProximity: 100,     // Distance to border\n      },\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
