var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.164,1,0.836]],["body/components/AppComponent.html",[0,0.281,1,1.506,2,1.3,3,0.269,4,0.234,5,1.157,6,1.157,7,1.157,8,0.234,9,3.598,10,1.157,11,1.728,12,1.84,13,1.384,14,2.827,15,1.161,16,1.384,17,5.941,18,1.506,19,1.506,20,2.077,21,1.384,22,5.399,23,1.567,24,5.399,25,0.201,26,0.639,27,5.941,28,4.359,29,0.751,30,2.86,31,3.275,32,2.778,33,0.764,34,5.399,35,2.827,36,4.045,37,5.399,38,1.002,39,3.54,40,4.583,41,4.583,42,4.221,43,5.309,44,2.011,45,2.652,46,3.643,47,0.59,48,0.025,49,0.588,50,0.299,51,0.419,52,0.419,53,4.009,54,1.002,55,3.643,56,3.056,57,4.583,58,4.583,59,2.827,60,0.751,61,0.872,62,4.239,63,2.827,64,1.384,65,3.323,66,3.323,67,2.827,68,4.583,69,1.414,70,4.045,71,0.545,72,2.449,73,3.323,74,0.426,75,0.234,76,5.043,77,1.021,78,4.239,79,4.239,80,1.393,81,2.86,82,2.86,83,2.86,84,3.176,85,0.269,86,0.269,87,0.484,88,0.872,89,3.598,90,4.239,91,1.393,92,2.063,93,3.598,94,4.239,95,4.239,96,4.239,97,1.157,98,1.473,99,1.384,100,1.157,101,1.707,102,1.157,103,0.787,104,0.735,105,1.473,106,1.157,107,0.898,108,1.157,109,1.021,110,1.179,111,1.157,112,1.021,113,1.157,114,1.021,115,1.157,116,1.021,117,1.157,118,1.021,119,1.157,120,1.473,121,1.021,122,1.157,123,1.021,124,1.157,125,1.157,126,1.021,127,1.157,128,1.021,129,1.021,130,1.157,131,1.157,132,1.157,133,1.021,134,1.157,135,0.958,136,1.157,137,1.021,138,1.021,139,0.46,140,0.958,141,1.087,142,1.157,143,0.018,144,0.018]],["title/guards/AuthGuard.html",[145,2.343,146,2.601]],["body/guards/AuthGuard.html",[3,0.309,4,0.269,8,0.269,13,1.248,15,1.173,25,0.23,29,0.818,32,2.804,33,0.756,39,3.717,45,2.494,47,0.677,48,0.025,49,0.481,50,0.269,51,0.481,52,0.582,54,1.092,64,1.508,68,4.993,69,1.33,74,0.402,75,0.269,77,1.172,85,0.309,86,0.309,87,0.527,88,0.95,143,0.02,144,0.02,145,3.969,146,4.92,147,4.866,148,4.131,149,4.993,150,3.969,151,4.993,152,4.993,153,1.646,154,3.717,155,0.818,156,6.833,157,3.646,158,2.271,159,4.866,160,4.993,161,2.494,162,3.329,163,3.08,164,1.932,165,2.669,166,2.494,167,4.866,168,4.407,169,5.882,170,4.407,171,3.08,172,0.475,173,1.247,174,3.08,175,2.191,176,1.523,177,0.756,178,3.646,179,1.328,180,2.548,181,3.646,182,0.818,183,3.284]],["title/injectables/AuthService.html",[158,1.14,177,0.446]],["body/injectables/AuthService.html",[3,0.182,4,0.158,8,0.158,13,0.735,15,1.124,25,0.136,26,0.489,29,0.575,32,2.546,33,0.843,35,2.166,38,1.15,44,1.54,45,1.754,46,2.791,47,0.739,48,0.025,49,0.613,50,0.312,51,0.649,52,0.557,54,0.768,59,2.166,60,0.675,61,0.668,64,1.06,69,1.274,70,3.098,71,0.898,74,0.358,75,0.158,77,0.69,85,0.263,86,0.182,87,0.566,88,1.019,143,0.014,144,0.014,150,2.791,153,1.722,154,3.629,155,0.575,158,1.746,161,1.215,162,3.777,163,2.783,164,2.036,165,1.876,170,3.098,171,2.166,172,0.548,173,0.877,174,2.166,175,1.54,176,1.458,177,0.532,179,0.782,182,0.967,183,1.933,184,1.138,185,2.146,186,2.012,187,2.791,188,3.098,189,4.182,190,3.51,191,1.359,192,3.803,193,3.098,194,1.363,195,2.058,196,4.222,197,4.119,198,2.388,199,4.511,200,3.982,201,4.511,202,4.135,203,3.586,204,4.135,205,4.511,206,4.511,207,2.865,208,5.62,209,3.083,210,4.135,211,4.428,212,3.008,213,2.865,214,1.54,215,1.283,216,2.782,217,4.608,218,2.424,219,4.075,220,2.865,221,1.754,222,1.619,223,2.865,224,3.51,225,1.458,226,3.271,227,3.51,228,2.865,229,3.51,230,3.51,231,3.51,232,3.51,233,3.51,234,4.119,235,2.545,236,3.098,237,2.865,238,1.54,239,4.119,240,3.51,241,4.677,242,2.865,243,4.984,244,2.734,245,2.865,246,3.098,247,2.012,248,2.865,249,1.754,250,3.51,251,5.442,252,2.865,253,3.51,254,1.018,255,1.858,256,1.754,257,2.783,258,2.557,259,3.51,260,3.51,261,2.791,262,2.865,263,2.431,264,2.431,265,2.431,266,2.431,267,2.431,268,2.431,269,2.431,270,1.5,271,2.431,272,1.933,273,2.431,274,1.394,275,1.5,276,1.002,277,0.821,278,1.5,279,4.182,280,4.119,281,4.119,282,1.808,283,2.431,284,2.431,285,3.17,286,0.974,287,3.51,288,1.665,289,3.51,290,3.51,291,3.51,292,4.511,293,3.51,294,3.51,295,2.747,296,2.951,297,4.119,298,3.51,299,3.51,300,3.51,301,3.51,302,3.51,303,2.431,304,2.431,305,2.431,306,4.511,307,2.431,308,2.431,309,2.431,310,2.431,311,2.431,312,2.146,313,4.643,314,3.51,315,2.431,316,2.431,317,2.431,318,2.791,319,2.166,320,2.431,321,2.431,322,2.431,323,1.5,324,2.791,325,2.431,326,3.51,327,2.146,328,2.431,329,2.541,330,3.51,331,2.431,332,2.431,333,1.763,334,1.621,335,2.431,336,2.146,337,2.146,338,1.933,339,2.431]],["title/interfaces/Category.html",[277,0.689,340,1.818]],["body/interfaces/Category.html",[3,0.273,4,0.238,8,0.238,13,1.104,15,0.799,25,0.204,26,0.645,48,0.025,50,0.331,60,0.758,61,1.087,71,0.908,74,0.273,75,0.238,85,0.346,86,0.273,87,0.386,88,0.966,103,0.799,139,0.649,143,0.018,144,0.018,153,1.313,172,0.524,173,1.333,175,1.603,176,1.515,177,0.701,179,1.175,182,0.948,194,1.534,215,1.155,221,2.537,238,1.603,255,1.906,277,0.854,286,0.818,340,3.797,341,2.094,342,2.436,343,3.225,344,1.953,345,3.347,346,3.526,347,3.679,348,1.505,349,2.254,350,1.709,351,1.825,352,2.649,353,4.967,354,2.649,355,3.653,356,3.653,357,4.627,358,3.355,359,3.653,360,3.355,361,3.653,362,2.674,363,3.653,364,5.838,365,2.312,366,3.653,367,0.974,368,2.715,369,3.653,370,5.628,371,3.653,372,2.905,373,3.653,374,3.653,375,2.094,376,3.653,377,3.225,378,2.094,379,3.387,380,3.653,381,3.653,382,2.165,383,3.653,384,4.627,385,4.627,386,3.653,387,3.653,388,3.679,389,3.653,390,3.653,391,1.414,392,1.953,393,2.649]],["title/injectables/CategoryManager.html",[177,0.446,347,2.343]],["body/injectables/CategoryManager.html",[3,0.23,4,0.2,8,0.2,13,0.929,15,0.904,25,0.171,26,0.576,33,0.889,47,0.765,48,0.025,49,0.544,50,0.35,51,0.544,52,0.482,60,0.899,61,1.086,71,0.889,74,0.23,75,0.2,85,0.309,86,0.23,87,0.325,88,1.074,103,0.904,139,0.638,143,0.016,144,0.016,153,1.417,155,0.678,172,0.567,173,1.411,175,1.814,176,1.523,177,0.626,179,0.988,182,0.914,184,1.438,194,1.622,215,1.247,221,2.682,238,1.814,255,2.058,277,0.719,286,0.731,340,3.812,342,3.931,343,5.204,344,1.643,345,3.301,346,3.384,347,3.971,348,1.703,349,2.55,350,1.934,351,2.065,352,2.998,353,5.12,354,2.998,355,4.671,356,4.671,357,5.212,358,3.622,359,4.134,360,3.622,361,4.134,362,2.746,363,4.995,364,5.649,365,2.496,366,4.134,367,1.009,368,2.869,369,4.995,370,5.368,371,4.134,372,3.287,373,4.995,374,3.074,375,2.37,376,4.995,377,3.649,378,2.37,379,3.331,380,4.134,381,3.074,382,2.337,383,4.995,384,4.134,385,4.134,386,3.074,387,4.995,388,3.287,389,3.074,390,4.995,391,1.6,392,2.21,393,3.622,394,4.871,395,4.871,396,4.871,397,3.074,398,2.714,399,3.622,400,3.622,401,3.074,402,3.074,403,3.622,404,3.622,405,3.074,406,3.074,407,3.074,408,2.444,409,2.714,410,2.444]],["title/interfaces/Contact.html",[110,0.689,277,0.689]],["body/interfaces/Contact.html",[3,0.209,4,0.182,8,0.182,13,0.844,15,0.611,25,0.156,26,0.619,29,0.458,48,0.025,49,0.653,50,0.313,51,0.608,52,0.325,54,0.611,61,0.736,64,0.844,65,2.025,71,0.896,74,0.377,75,0.182,85,0.333,86,0.209,87,0.592,88,0.992,104,0.79,110,1.441,140,0.744,143,0.015,144,0.015,158,1.72,161,1.395,166,2.22,172,0.526,175,1.225,177,0.673,178,2.465,179,0.898,182,0.936,191,1.081,194,1.17,195,2.22,198,1.831,209,3.111,214,1.225,215,1.11,216,2.22,218,1.595,222,1.575,225,1.099,244,2.551,254,1.029,255,1.595,257,2.388,258,2.914,261,3.078,270,1.723,272,2.22,274,1.601,275,1.723,276,1.15,277,1.039,285,1.723,286,0.964,288,1.343,296,1.723,323,1.723,334,1.862,341,1.601,345,2.219,362,2.44,367,0.891,368,2.069,379,1.862,391,1.498,411,2.22,412,3.871,413,2.484,414,3.953,415,3.078,416,3.078,417,2.582,418,2.069,419,3.078,420,1.498,421,2.582,422,2.807,423,2.025,424,2.025,425,2.025,426,2.792,427,3.078,428,3.078,429,1.723,430,2.22,431,2.22,432,2.723,433,1.225,434,2.22,435,2.025,436,3.417,437,2.582,438,2.465,439,2.025,440,1.857,441,1.723,442,2.465,443,2.792,444,1.862,445,2.792,446,1.52,447,1.307,448,2.465,449,2.025,450,2.792,451,1.601,452,1.225,453,2.465,454,2.792,455,2.792,456,2.22,457,2.792,458,2.792,459,2.792,460,2.465,461,2.792,462,2.219,463,2.792,464,1.601,465,2.465,466,2.792,467,2.792,468,3.417,469,2.792,470,2.465,471,2.792,472,3.871,473,2.792,474,2.792,475,2.792,476,2.792,477,2.792,478,2.792,479,2.792,480,2.792,481,2.792,482,2.792,483,2.792,484,2.792,485,2.792,486,2.792,487,2.792,488,2.792,489,2.792,490,2.792,491,2.792,492,2.792,493,2.792,494,2.792,495,2.792,496,2.792,497,2.219,498,2.106,499,2.792,500,2.025,501,2.792,502,2.96,503,3.479,504,2.792,505,2.792,506,2.792,507,1.811,508,2.792,509,2.792,510,4.444,511,3.871,512,2.582,513,2.025,514,2.792,515,2.792,516,2.025,517,2.025,518,2.792,519,2.025,520,1.723,521,3.222,522,1.601,523,1.723,524,2.792,525,2.807,526,2.792,527,3.871,528,2.025,529,2.025,530,2.807,531,2.465,532,2.025,533,4.444,534,1.601,535,2.792,536,2.792,537,2.025,538,2.792,539,1.862,540,3.871,541,2.465,542,2.025,543,2.025,544,1.395,545,1.307,546,2.792,547,2.22,548,2.792,549,2.025,550,2.792,551,2.792,552,2.792,553,2.792,554,2.792,555,1.395,556,2.792,557,2.465,558,2.465,559,2.792,560,2.792,561,2.792,562,2.219,563,2.792,564,3.871,565,2.548,566,2.792,567,2.792,568,2.792,569,2.465,570,2.792,571,2.792,572,2.792,573,1.225,574,2.792,575,2.792,576,2.792,577,2.792,578,2.22,579,1.493,580,2.792,581,2.792,582,2.792,583,3.871,584,2.792,585,2.792,586,2.792,587,2.792,588,2.792,589,2.792,590,2.792,591,2.792]],["title/components/ContactDetailsComponent.html",[0,0.164,109,0.836]],["body/components/ContactDetailsComponent.html",[0,0.271,1,0.642,2,0.945,3,0.169,4,0.147,5,0.727,6,0.727,7,0.727,8,0.147,10,0.727,11,1.65,12,1.756,14,2.054,15,1.063,16,1.006,18,0.642,19,0.642,20,1.628,21,1.006,23,1.139,25,0.126,26,0.464,29,0.546,33,0.894,35,1.395,38,0.953,44,0.992,47,0.823,48,0.025,49,0.675,50,0.349,51,0.632,52,0.566,59,1.395,60,0.823,61,0.956,63,1.395,64,0.683,69,0.602,71,0.847,74,0.364,75,0.147,80,0.875,84,1.996,85,0.169,86,0.169,87,0.46,88,0.924,91,2.305,97,0.727,98,1.07,99,1.006,100,0.727,101,1.401,102,0.727,103,0.494,104,0.462,105,1.07,106,0.727,107,0.565,108,0.727,109,1.237,110,1.4,111,0.727,112,0.642,113,0.727,114,0.642,115,0.727,116,0.642,117,0.727,118,0.642,119,0.727,120,1.07,121,0.642,122,0.727,123,0.642,124,0.727,125,0.727,126,0.642,127,0.727,128,0.642,129,0.642,130,0.727,131,0.727,132,0.727,133,0.642,134,0.727,135,0.602,136,0.727,137,0.642,138,0.642,139,0.289,140,1.237,141,0.683,142,0.727,143,0.013,144,0.013,155,0.546,172,0.548,173,0.565,176,1.628,180,2.054,182,0.823,194,0.683,214,1.461,222,0.683,235,2.414,244,1.558,249,1.974,254,0.462,276,0.931,286,0.859,324,1.798,338,3.141,345,2.499,352,2.414,367,0.98,378,2.786,391,1.288,414,2.414,420,0.875,432,1.663,446,1.662,451,1.296,452,2.132,456,2.647,498,1.461,543,2.414,545,1.058,555,1.663,565,2.786,573,1.912,592,4.704,593,5.223,594,1.996,595,2.438,596,3.488,597,3.329,598,3.329,599,4.655,600,4.655,601,3.922,602,4.655,603,4.655,604,3.141,605,3.951,606,3.863,607,5.135,608,2.938,609,2.938,610,3.465,611,1.974,612,4.358,613,5.135,614,2.938,615,5.135,616,3.329,617,4.655,618,2.414,619,3.922,620,4.655,621,2.938,622,2.938,623,3.329,624,2.938,625,3.922,626,1.798,627,4.435,628,3.922,629,3.16,630,2.664,631,2.938,632,1.996,633,3.922,634,4.289,635,3.951,636,3.863,637,3.816,638,4.314,639,2.865,640,3.24,641,2.261,642,3.922,643,3.141,644,4.289,645,4.655,646,4.655,647,3.488,648,2.664,649,2.22,650,3.922,651,2.664,652,2.938,653,2.938,654,3.922,655,3.922,656,2.938,657,2.664,658,3.863,659,3.329,660,2.664,661,2.938,662,3.329,663,2.938,664,2.938,665,2.938,666,2.664,667,2.438,668,2.664,669,1.288,670,2.664,671,2.938,672,2.938,673,2.938,674,2.664,675,3.141,676,3.329,677,3.329,678,2.664,679,1.798,680,2.664,681,2.664,682,2.261,683,2.664,684,2.664,685,2.664,686,2.414,687,2.664,688,2.261,689,2.664,690,2.664,691,2.664,692,1.296,693,1.395,694,1.395,695,3.181,696,1.208,697,2.866,698,1.208,699,2.414,700,1.996,701,1.296,702,2.664,703,2.664,704,2.664,705,3.329,706,3.643,707,3.847,708,2.88,709,3.922,710,2.33,711,3.488,712,1.27,713,2.664,714,1.996,715,3.329,716,2.261,717,2.261,718,3.329,719,2.261,720,2.664,721,2.664,722,2.664,723,2.664,724,2.664,725,1.798,726,4.358,727,2.664,728,2.664,729,2.054,730,2.664,731,1.996,732,2.664,733,1.996,734,2.664,735,2.664,736,2.261,737,3.922,738,5.135,739,4.655,740,4.655,741,4.655,742,5.135,743,1.779,744,2.664,745,0.992,746,3.922,747,2.664,748,1.996,749,2.664,750,2.664,751,2.664,752,2.664,753,2.664,754,2.664,755,2.261,756,2.664,757,2.664,758,2.664,759,3.329,760,2.938,761,3.922,762,2.938,763,3.329,764,2.054,765,3.329,766,4.358,767,3.329,768,3.329,769,3.922,770,3.922]],["title/components/ContactFormComponent.html",[0,0.164,112,0.836]],["body/components/ContactFormComponent.html",[0,0.275,1,0.747,2,1.055,3,0.197,4,0.172,5,0.847,6,0.847,7,0.847,8,0.172,10,0.847,11,1.679,12,1.787,16,1.123,18,0.747,19,0.747,20,1.774,21,1.123,23,1.271,25,0.147,26,0.518,29,0.706,33,0.869,35,2.293,44,1.631,47,0.609,48,0.025,49,0.645,50,0.343,51,0.575,52,0.433,54,1.079,57,3.716,60,0.432,61,0.501,69,0.701,71,0.563,74,0.369,75,0.172,80,1.019,85,0.197,86,0.197,87,0.455,88,0.819,91,1.438,97,0.847,98,1.195,99,1.123,100,0.847,101,1.504,102,0.847,103,0.576,104,1.007,105,1.195,106,0.847,107,0.658,108,0.847,109,0.747,110,1.438,111,0.847,112,1.327,113,0.847,114,0.747,115,0.847,116,0.747,117,0.847,118,0.747,119,0.847,120,1.195,121,0.747,122,0.847,123,0.747,124,0.847,125,0.847,126,0.747,127,0.847,128,0.747,129,0.747,130,0.847,131,0.847,132,0.847,133,0.747,134,0.847,135,0.701,136,0.847,137,0.747,138,0.747,139,0.337,140,0.701,141,0.796,142,0.847,143,0.015,144,0.015,155,0.609,172,0.487,180,2.293,191,1.438,194,1.123,195,2.151,198,1.774,214,1.631,222,1.301,225,1.327,244,2.395,247,2.131,254,0.955,276,1.085,286,0.761,288,0.796,323,2.293,329,2.293,348,1.531,350,2.015,367,0.95,378,2.935,392,2.5,414,3.712,416,2.955,420,1.438,429,1.625,432,3.024,433,1.631,440,1.438,449,2.695,451,2.682,452,2.533,462,2.935,464,2.131,465,3.28,521,2.695,531,3.28,542,2.695,545,1.232,555,2.766,565,2.682,573,1.631,592,4.589,595,2.657,596,3.801,606,4.182,610,3.719,611,2.337,618,2.695,629,3.577,664,3.28,665,3.28,692,2.131,699,3.122,701,1.51,759,3.716,760,3.28,771,5.095,772,2.634,773,3.801,774,4.306,775,4.378,776,4.378,777,5.073,778,5.073,779,5.073,780,5.073,781,5.511,782,4.678,783,4.678,784,4.678,785,5.073,786,5.073,787,2.634,788,4.518,789,4.378,790,3.716,791,4.378,792,2.293,793,3.801,794,5.073,795,3.103,796,3.716,797,3.716,798,4.678,799,3.103,800,3.719,801,3.392,802,5.511,803,4.378,804,3.103,805,3.716,806,5.511,807,3.103,808,3.103,809,4.378,810,2.695,811,4.378,812,2.293,813,3.103,814,3.716,815,3.28,816,3.103,817,3.103,818,4.378,819,2.695,820,2.131,821,3.28,822,3.801,823,3.103,824,2.478,825,3.103,826,3.103,827,3.28,828,3.716,829,4.378,830,2.955,831,3.103,832,4.378,833,4.378,834,4.378,835,3.28,836,2.325,837,3.28,838,1.085,839,3.103,840,2.634,841,3.801,842,2.325,843,3.103,844,3.103,845,4.378,846,3.103,847,4.378,848,3.103,849,3.103,850,3.103,851,3.103,852,3.103,853,3.103,854,4.378,855,3.103,856,3.103,857,3.103,858,3.103,859,3.103,860,3.103,861,4.378,862,3.103,863,3.103,864,3.103,865,3.103,866,3.716,867,3.103,868,1.739,869,4.378,870,5.511,871,4.378,872,4.378,873,4.378,874,4.378,875,4.378,876,3.716,877,4.378]],["title/components/ContactListComponent.html",[0,0.164,114,0.836]],["body/components/ContactListComponent.html",[0,0.238,1,0.529,2,0.817,3,0.32,4,0.122,5,0.6,6,0.6,7,0.6,8,0.122,10,0.6,11,1.608,12,1.712,14,1.776,15,0.988,16,0.87,18,0.529,19,0.529,20,1.449,21,0.87,25,0.16,26,0.401,29,0.648,33,0.849,38,1.063,44,1.263,47,0.74,48,0.025,49,0.663,50,0.358,51,0.526,52,0.526,58,2.879,60,0.835,61,0.895,66,2.088,69,0.497,71,0.824,74,0.338,75,0.122,80,0.722,83,1.483,85,0.14,86,0.14,87,0.497,88,0.895,91,1.114,97,0.6,98,0.926,99,0.87,100,0.6,101,1.638,102,0.6,103,0.408,104,0.961,105,0.926,106,0.6,107,0.466,108,0.6,109,0.529,110,1.429,111,0.6,112,0.529,113,0.6,114,1.122,115,0.6,116,0.529,117,0.6,118,0.529,119,0.6,120,0.926,121,0.529,122,0.6,123,0.529,124,0.6,125,0.6,126,0.529,127,0.6,128,0.529,129,0.529,130,0.6,131,0.6,132,0.6,133,0.529,134,0.6,135,0.497,136,0.6,137,0.529,138,0.529,139,0.238,140,0.497,141,0.563,142,0.6,143,0.011,144,0.011,153,1.558,154,2.637,155,0.472,158,1.882,161,1.438,162,2.637,168,2.541,172,0.518,173,0.987,174,2.439,180,1.776,182,0.7,195,1.757,196,3.104,200,3.49,215,1.272,218,1.629,222,1.629,225,0.998,238,1.263,244,2.202,254,0.961,255,2.136,276,0.768,286,0.699,345,3.214,348,1.186,352,3.413,362,2.334,367,0.882,379,2.637,382,1.85,388,1.483,419,2.289,432,1.438,440,1.114,444,1.244,446,1.706,448,2.541,452,2.366,456,2.796,468,2.541,498,2.366,543,2.088,545,1.645,555,1.438,562,1.651,592,4.482,595,2.169,596,3.104,606,3.966,609,2.541,610,3.144,611,1.975,618,2.088,626,1.483,629,2.55,653,2.541,656,2.541,658,3.59,663,2.541,664,2.541,665,2.541,669,1.931,696,2.113,699,2.088,701,1.069,706,2.088,710,1.88,712,0.6,725,2.289,729,3.496,733,1.646,736,1.865,745,1.735,755,1.865,762,1.646,763,2.879,765,2.879,766,2.879,767,2.879,768,2.879,790,2.879,793,3.104,815,2.541,820,1.651,824,1.92,828,2.879,830,2.289,878,1.865,879,4.976,880,1.865,881,2.879,882,4.143,883,3.392,884,4.143,885,4.143,886,4.143,887,4.143,888,4.143,889,3.392,890,3.392,891,3.392,892,4.658,893,3.392,894,4.143,895,3.392,896,1.92,897,1.92,898,2.197,899,4.658,900,3.392,901,2.197,902,2.113,903,3.392,904,2.197,905,4.143,906,3.392,907,2.267,908,3.392,909,2.879,910,4.658,911,2.879,912,2.541,913,3.392,914,2.197,915,4.658,916,3.392,917,3.392,918,2.197,919,2.197,920,3.392,921,2.197,922,3.104,923,3.392,924,2.197,925,3.392,926,2.197,927,2.197,928,2.197,929,2.197,930,2.197,931,2.197,932,2.541,933,3.392,934,2.088,935,2.197,936,2.879,937,3.392,938,3.392,939,2.197,940,2.197,941,1.151,942,2.197,943,2.197,944,2.197,945,2.197,946,4.658,947,3.392,948,2.197,949,2.197,950,2.197,951,1.244,952,2.197,953,1.865,954,2.197,955,1.865,956,1.865,957,2.197,958,2.197,959,2.197,960,2.55,961,2.197,962,2.197,963,2.197,964,2.197,965,2.197,966,2.197,967,2.197,968,2.197,969,2.197,970,1.646,971,2.197,972,3.392,973,2.197,974,2.197,975,2.289,976,2.197,977,2.197,978,3.392,979,3.392,980,3.392,981,3.392,982,1.865,983,4.861,984,2.197,985,5.095,986,3.392,987,3.392,988,4.291,989,4.273,990,1.865,991,1.646,992,4.861,993,3.49,994,2.197,995,3.954,996,3.274,997,2.879,998,4.482,999,2.879,1000,4.658,1001,4.273,1002,3.516,1003,2.289,1004,3.104,1005,2.197,1006,4.273,1007,4.658,1008,4.273,1009,3.392,1010,2.197,1011,2.197,1012,5.034,1013,2.197,1014,4.516,1015,3.954,1016,3.954,1017,4.861,1018,3.516,1019,3.144,1020,3.516,1021,3.392,1022,3.954,1023,3.516,1024,3.392,1025,3.392,1026,1.865,1027,2.197,1028,2.197,1029,4.273,1030,1.646,1031,2.541,1032,3.49,1033,3.392,1034,4.658,1035,3.516,1036,5.264,1037,4.658,1038,4.658,1039,4.658,1040,4.658,1041,4.658,1042,4.658,1043,3.392,1044,3.954,1045,3.392,1046,3.392,1047,2.197,1048,1.865,1049,4.273,1050,4.647,1051,1.865,1052,3.954,1053,3.392,1054,3.392,1055,1.865,1056,3.392,1057,1.865,1058,2.879,1059,2.541,1060,4.273,1061,3.392,1062,2.879,1063,2.197,1064,3.392,1065,4.143,1066,3.954,1067,1.865,1068,1.865,1069,1.865,1070,2.637,1071,1.352,1072,3.954,1073,2.879,1074,2.197,1075,2.879,1076,1.865,1077,3.392,1078,3.392,1079,3.392,1080,3.392,1081,2.197,1082,1.865,1083,2.197,1084,2.197,1085,1.865,1086,2.197,1087,3.516,1088,1.352,1089,2.197,1090,4.658,1091,3.392,1092,1.865,1093,3.516,1094,2.879,1095,3.392,1096,3.392,1097,2.197,1098,2.197,1099,1.865,1100,2.197,1101,2.879,1102,2.879,1103,2.879,1104,2.197,1105,2.197,1106,1.865,1107,1.865,1108,2.197,1109,2.197,1110,2.197,1111,2.197,1112,2.197]],["title/injectables/ContactManager.html",[177,0.446,1113,2.601]],["body/injectables/ContactManager.html",[3,0.223,4,0.194,8,0.194,11,1.148,13,0.899,15,0.885,25,0.256,26,0.564,29,0.488,33,0.889,47,0.907,48,0.025,49,0.645,50,0.37,51,0.645,52,0.62,60,0.663,61,0.938,71,0.874,74,0.303,75,0.194,85,0.223,86,0.223,87,0.545,88,1.011,103,0.885,110,1.45,143,0.016,144,0.016,155,0.663,161,2.021,172,0.574,173,1.401,175,1.775,176,1.463,177,0.613,179,0.957,182,0.891,184,1.393,194,1.672,215,1.01,221,2.463,238,1.775,255,2.28,286,0.526,342,3.932,344,1.591,345,3.048,348,1.666,349,2.495,350,1.893,351,2.021,352,3.574,353,5.008,354,2.933,362,2.7,365,2.463,367,1.003,368,2.842,375,2.826,379,3.064,382,2.306,391,1.566,392,2.162,393,3.574,398,2.627,408,2.367,452,2.333,498,2.549,507,1.893,558,3.57,608,3.57,626,2.367,653,4.351,658,4.227,701,1.706,712,1.3,733,3.57,838,1.226,1113,4.351,1114,5.897,1115,5.413,1116,5.413,1117,4.765,1118,4.045,1119,5.808,1120,5.808,1121,5.808,1122,4.765,1123,4.045,1124,4.765,1125,4.765,1126,5.808,1127,4.045,1128,2.977,1129,4.765,1130,2.977,1131,4.765,1132,3.507,1133,4.045,1134,2.977,1135,4.93,1136,4.93,1137,4.93,1138,4.93,1139,4.045,1140,2.977,1141,2.977,1142,4.765,1143,2.977,1144,4.765,1145,4.765,1146,2.977,1147,4.765,1148,3.507,1149,3.507,1150,2.977,1151,5.413,1152,6.073,1153,3.507,1154,4.765,1155,3.507,1156,3.507,1157,3.507,1158,2.627,1159,3.507,1160,3.507,1161,2.977,1162,2.977]],["title/injectables/ContactService.html",[177,0.446,452,1.293]],["body/injectables/ContactService.html",[3,0.163,4,0.142,8,0.142,13,0.66,15,0.478,25,0.122,26,0.597,29,0.532,33,0.883,47,0.883,48,0.025,49,0.682,50,0.355,51,0.635,52,0.628,54,0.71,60,0.814,61,0.992,64,0.98,65,2.353,71,0.893,74,0.343,75,0.142,85,0.29,86,0.163,87,0.561,88,1.057,104,0.875,110,1.447,140,0.864,143,0.013,144,0.013,155,0.532,158,1.923,161,1.091,166,2.398,172,0.562,175,0.959,177,0.649,178,1.928,179,0.702,182,0.893,184,1.022,191,1.256,194,1.295,195,2.605,198,2.218,209,3.166,214,1.424,215,1.198,216,2.55,218,1.337,222,1.542,225,1.216,226,1.584,244,2.143,254,1.065,255,1.766,257,1.348,258,2.995,261,3.408,270,1.348,272,1.737,274,1.252,275,1.348,276,0.9,277,0.759,285,1.348,286,0.902,288,1.17,296,1.348,323,2.002,334,2.164,345,2.457,362,2.551,367,0.938,368,2.291,379,2.164,391,1.659,411,1.737,412,2.184,413,2.44,414,3.321,415,1.737,416,1.737,417,1.457,418,1.168,419,2.58,420,0.845,421,2.582,422,2.353,423,1.584,424,1.584,425,1.584,426,2.184,427,2.58,428,2.58,429,1.348,430,1.737,431,1.737,432,2.778,433,0.959,434,1.737,435,1.584,436,2.864,437,2.164,438,1.928,439,1.584,440,1.976,441,1.348,442,1.928,443,2.184,444,1.457,445,2.184,446,1.324,447,1.518,448,2.864,449,2.353,450,3.245,451,1.86,452,1.424,453,2.864,454,3.245,455,3.872,456,3.078,457,3.245,458,3.872,459,3.245,460,3.418,461,3.245,462,2.457,463,3.872,464,1.86,465,3.418,466,3.245,467,3.245,468,3.783,469,3.245,470,2.864,471,3.245,472,4.58,473,3.245,474,3.245,475,3.245,476,3.245,477,3.245,478,3.245,479,3.245,480,3.245,481,3.245,482,3.245,483,3.245,484,3.245,485,3.245,486,3.245,487,3.245,488,3.245,489,3.245,490,3.245,491,3.245,492,3.245,493,3.245,494,3.245,495,3.245,496,3.245,497,2.457,498,2.106,499,4.286,500,1.584,501,3.872,502,3.274,503,3.603,504,3.245,505,2.184,506,3.245,507,2.005,508,4.286,509,2.184,510,3.872,511,3.245,512,2.164,513,1.584,514,2.184,515,2.184,516,1.584,517,1.584,518,2.184,519,1.584,520,2.002,521,3.108,522,1.86,523,2.002,524,3.245,525,2.353,526,2.184,527,3.245,528,1.584,529,1.584,530,2.353,531,2.864,532,2.353,533,4.799,534,1.86,535,3.245,536,2.184,537,1.584,538,2.184,539,2.164,540,4.286,541,2.864,542,2.353,543,2.353,544,1.621,545,1.518,546,3.245,547,2.58,548,3.245,549,2.353,550,3.245,551,3.245,552,2.184,553,2.184,554,2.184,555,1.621,556,3.245,557,2.864,558,2.864,559,2.184,560,4.286,561,2.184,562,2.457,563,4.286,564,3.245,565,2.751,566,3.245,567,3.245,568,2.184,569,2.864,570,4.286,571,2.184,572,2.184,573,1.424,574,3.245,575,2.184,576,2.184,577,3.245,578,2.58,579,1.735,580,3.245,581,3.245,582,3.245,583,3.872,584,3.245,585,3.245,586,2.184,587,2.184,588,2.184,589,2.184,590,2.184,591,2.184,608,2.864,609,2.864,652,1.928,656,1.928,658,2.58,782,3.245,1123,3.245,1163,3.823,1164,3.245,1165,3.823,1166,3.823,1167,3.823,1168,3.823,1169,2.184,1170,2.573,1171,2.573,1172,2.573,1173,2.573,1174,2.573,1175,2.573,1176,2.573,1177,2.184,1178,1.928,1179,2.573,1180,2.573,1181,2.573,1182,2.573,1183,2.573,1184,2.573,1185,1.737,1186,2.573,1187,2.184,1188,2.573,1189,2.573,1190,2.573,1191,2.573,1192,2.573,1193,2.573,1194,2.573,1195,2.573,1196,2.573,1197,2.573,1198,2.573,1199,2.573,1200,2.573]],["title/components/ContactsComponent.html",[0,0.164,116,0.836]],["body/components/ContactsComponent.html",[0,0.301,1,0.712,2,1.018,3,0.188,4,0.163,5,0.806,6,0.806,7,0.806,8,0.163,10,0.806,11,1.67,12,1.778,14,2.214,15,1.001,16,1.084,18,0.712,19,0.712,20,1.727,21,1.084,23,1.227,25,0.14,26,0.5,29,0.411,33,0.873,35,2.214,38,1.101,41,3.589,44,1.575,47,0.793,48,0.025,49,0.604,50,0.346,51,0.564,52,0.564,54,0.785,60,0.793,61,0.921,63,2.823,64,1.602,69,0.668,71,0.733,74,0.397,75,0.163,80,0.971,85,0.188,86,0.188,87,0.511,91,2.146,97,0.806,98,1.154,99,1.084,100,0.806,101,1.471,102,0.806,103,0.548,104,0.512,105,1.154,106,0.806,107,0.626,108,0.806,109,1.298,110,1.416,111,0.806,112,1.298,113,0.806,114,1.298,115,0.806,116,1.298,117,0.806,118,0.712,119,0.806,120,1.154,121,0.712,122,0.806,123,0.712,124,0.806,125,0.806,126,0.712,127,0.806,128,0.712,129,0.712,130,0.806,131,0.806,132,0.806,133,0.712,134,0.806,135,0.668,136,0.806,137,0.712,138,0.712,139,0.32,140,0.668,141,0.758,142,0.806,143,0.014,144,0.014,155,0.588,168,4.038,172,0.513,176,1.532,194,1.522,215,0.896,219,3.039,225,1.018,247,2.057,249,2.286,254,0.934,255,1.479,258,2.772,276,1.033,348,1.885,362,1.679,365,2.286,367,1.019,368,1.918,377,3.168,417,1.672,420,1.622,432,2.737,446,1.565,452,2.276,460,3.7,498,1.575,521,2.602,522,2.623,557,3.168,562,2.623,569,3.7,579,1.918,593,2.213,611,2.286,612,4.575,626,1.994,637,3.317,643,2.853,644,4.038,649,3.653,661,4.038,667,1.547,686,1.818,692,2.057,694,1.547,695,3.199,696,2.24,697,1.547,698,1.34,701,1.438,706,3.652,707,3.168,708,2.887,710,2.445,711,2.213,712,1.154,714,2.213,729,3.199,743,1.34,771,2.213,793,3.168,796,3.589,800,4.217,801,3.51,810,2.602,812,2.214,838,1.033,879,2.213,970,3.168,996,3.846,998,3.638,1003,2.853,1070,3.653,1071,1.818,1201,2.508,1202,4.228,1203,4.228,1204,4.191,1205,4.191,1206,4.938,1207,4.938,1208,4.938,1209,4.228,1210,5.39,1211,5.39,1212,3.589,1213,3.589,1214,3.589,1215,4.938,1216,4.228,1217,5.39,1218,4.228,1219,4.228,1220,4.155,1221,4.682,1222,2.954,1223,2.393,1224,2.393,1225,4.228,1226,2.954,1227,2.393,1228,4.454,1229,4.228,1230,2.954,1231,3.589,1232,6.11,1233,2.954,1234,2.954,1235,3.638,1236,2.853,1237,3.589,1238,4.575,1239,2.954,1240,3.589,1241,2.602,1242,3.589,1243,4.228,1244,4.228,1245,3.589,1246,2.954,1247,4.228,1248,3.168,1249,2.602,1250,3.589,1251,2.954,1252,2.954,1253,2.954,1254,1.994,1255,2.954,1256,2.954,1257,4.228,1258,4.228,1259,3.589,1260,3.589,1261,4.228,1262,2.954,1263,3.652,1264,4.228,1265,2.954,1266,2.393,1267,2.954,1268,2.954,1269,2.954,1270,2.954,1271,2.954,1272,4.228,1273,5.39,1274,2.954,1275,4.228,1276,2.954,1277,2.954,1278,2.954,1279,2.954,1280,4.228,1281,2.954,1282,2.508,1283,2.954,1284,2.954,1285,2.508,1286,2.954,1287,2.954,1288,2.954,1289,3.589,1290,4.228,1291,4.228,1292,4.228]],["title/injectables/DragDropManager.html",[177,0.446,1293,2.601]],["body/injectables/DragDropManager.html",[3,0.244,4,0.213,8,0.213,13,0.987,25,0.182,29,0.535,33,0.805,38,0.714,47,0.839,48,0.025,49,0.596,50,0.333,51,0.596,52,0.596,54,0.714,71,0.775,74,0.36,75,0.213,85,0.244,86,0.244,87,0.455,91,2.114,99,1.3,107,1.075,139,0.776,143,0.017,144,0.017,149,4.304,155,0.705,164,2.251,165,1.746,172,0.529,177,0.652,179,1.05,182,0.789,184,1.528,186,2.468,191,1.981,218,1.346,225,0.927,254,0.667,286,1.011,288,0.987,344,1.746,348,2.191,350,2.014,351,2.151,367,1.02,413,1.433,420,1.666,441,3.157,497,2.468,532,3.491,547,2.597,549,3.491,579,2.301,627,4.517,647,2.883,669,1.264,686,2.368,729,2.656,745,1.433,820,1.873,830,2.597,838,1.346,868,2.014,951,2.178,991,3.799,993,3.799,996,3.121,1032,3.799,1059,3.799,1140,3.266,1150,3.266,1235,3.422,1236,3.422,1242,4.304,1293,4.517,1294,5.461,1295,5.916,1296,6.736,1297,6.029,1298,4.304,1299,6.029,1300,5.071,1301,5.071,1302,2.368,1303,2.397,1304,3.848,1305,3.422,1306,5.672,1307,3.848,1308,3.848,1309,2.883,1310,2.87,1311,3.266,1312,4.304,1313,3.266,1314,2.883,1315,5.118,1316,5.071,1317,3.422,1318,5.071,1319,5.071,1320,4.304,1321,5.071,1322,5.071,1323,6.434,1324,6.029,1325,5.071,1326,4.304,1327,5.071,1328,5.071,1329,6.029,1330,4.821,1331,3.848,1332,6.029,1333,6.029,1334,3.848,1335,3.848,1336,3.848,1337,2.597,1338,3.848,1339,3.799,1340,3.848,1341,5.071,1342,5.071,1343,3.848,1344,2.015,1345,3.848,1346,6.56,1347,3.848,1348,6.029,1349,3.848,1350,3.848,1351,1.873,1352,3.848,1353,2.178,1354,3.848,1355,2.178,1356,3.848,1357,3.848,1358,5.071,1359,5.071,1360,5.071,1361,3.848,1362,3.266,1363,4.304,1364,3.422,1365,3.848,1366,3.848,1367,5.071,1368,3.848,1369,3.848,1370,3.848,1371,3.266,1372,3.848,1373,3.848,1374,3.848,1375,3.848,1376,3.848,1377,3.848,1378,3.848]],["title/interfaces/FirestoreTimestamp.html",[277,0.689,1379,2.343]],["body/interfaces/FirestoreTimestamp.html",[0,0.241,3,0.246,4,0.214,8,0.214,11,0.932,12,0.992,15,1.121,16,0.992,20,1.779,21,0.992,23,1.123,25,0.183,29,0.538,32,2.258,33,0.497,38,0.718,48,0.025,67,2.026,71,0.844,74,0.409,75,0.214,77,0.932,80,1.271,85,0.246,86,0.246,87,0.51,88,1.061,92,1.883,135,0.875,139,0.681,143,0.017,144,0.017,155,0.708,158,1.868,161,1.641,164,2.062,172,0.53,176,1.37,180,2.026,182,0.84,194,0.992,222,1.61,238,1.441,249,1.641,254,0.985,277,0.768,282,2.4,286,0.942,288,0.992,341,1.883,420,2.236,440,1.868,441,2.026,444,3.219,446,1.935,595,2.665,604,2.611,667,2.026,669,1.271,692,1.883,694,2.026,695,2.978,696,1.755,697,2.026,698,1.755,708,2.476,710,1.755,712,1.056,731,2.898,743,2.309,868,2.678,902,2.309,941,2.026,975,2.611,1303,2.118,1305,2.611,1344,2.026,1351,1.883,1353,2.19,1355,2.88,1379,4.348,1380,2.898,1381,5.128,1382,3.869,1383,2.611,1384,3.284,1385,3.284,1386,3.284,1387,2.611,1388,2.898,1389,2.611,1390,4.261,1391,3.284,1392,3.284,1393,3.284,1394,3.284,1395,3.219,1396,3.284,1397,3.284,1398,3.284,1399,4.827,1400,3.284,1401,3.284,1402,3.284,1403,3.284,1404,3.284,1405,3.284,1406,3.284,1407,3.284,1408,4.319,1409,3.284,1410,5.128,1411,3.284,1412,3.284,1413,4.319,1414,3.284,1415,3.284,1416,4.319,1417,4.319,1418,4.319,1419,4.319,1420,3.284,1421,2.026,1422,3.284,1423,3.284,1424,3.284,1425,5.328,1426,3.284,1427,2.381,1428,3.284,1429,3.284,1430,3.284,1431,3.284,1432,3.284,1433,3.284,1434,3.284,1435,3.284,1436,3.284,1437,4.319,1438,3.284,1439,4.827,1440,4.319,1441,3.284,1442,2.898,1443,3.284,1444,2.898,1445,2.898,1446,4.827,1447,3.284,1448,3.813,1449,3.284,1450,4.319,1451,5.328,1452,3.284,1453,5.328,1454,3.284,1455,3.284,1456,3.284,1457,4.319,1458,4.319,1459,3.284,1460,3.284,1461,3.284,1462,3.284,1463,4.319,1464,3.284,1465,4.319,1466,4.319,1467,3.284,1468,3.284,1469,3.284,1470,3.284]],["title/components/FooterComponent.html",[0,0.164,118,0.836]],["body/components/FooterComponent.html",[0,0.3,1,1.181,2,1.423,3,0.312,4,0.271,5,1.338,6,1.338,7,1.338,8,0.271,10,1.338,11,1.747,12,1.86,16,1.515,18,1.181,19,1.181,21,1.515,23,1.715,48,0.024,49,0.584,69,1.108,74,0.375,75,0.271,77,1.181,85,0.312,86,0.312,97,1.338,98,1.612,99,1.515,100,1.338,101,1.797,102,1.338,103,0.91,104,0.85,105,1.612,106,1.338,107,1.039,108,1.338,109,1.181,110,1.259,111,1.338,112,1.181,113,1.338,114,1.181,115,1.338,116,1.181,117,1.338,118,1.586,119,1.338,120,1.612,121,1.181,122,1.338,123,1.181,124,1.731,125,1.338,126,1.181,127,1.338,128,1.181,129,1.181,130,1.731,131,1.338,132,1.338,133,1.181,134,1.338,135,1.108,136,1.338,137,1.181,138,1.181,139,0.532,140,1.108,141,1.257,142,1.338,143,0.02,144,0.02,1471,3.018,1472,4.162,1473,5.909,1474,2.877,1475,5.909,1476,5.909,1477,3.636,1478,3.636]],["title/components/HeaderComponent.html",[0,0.164,19,0.836]],["body/components/HeaderComponent.html",[0,0.275,1,0.845,2,1.148,3,0.223,4,0.194,5,0.957,6,1.3,7,0.957,8,0.194,10,0.957,11,1.7,12,1.81,14,2.495,15,1.078,16,1.222,18,0.845,19,1.399,20,1.893,21,1.222,23,1.383,25,0.166,26,0.564,29,0.488,33,0.874,38,0.885,42,3.653,44,1.306,47,0.871,48,0.025,49,0.672,50,0.336,51,0.62,52,0.62,54,1.005,60,0.808,61,0.769,64,1.489,69,0.793,71,0.746,74,0.386,75,0.194,77,0.845,80,1.152,85,0.223,86,0.223,91,2.306,97,0.957,98,1.3,99,1.388,100,0.957,101,1.585,102,0.957,103,0.651,104,0.608,105,1.3,106,0.957,107,0.743,108,0.957,109,0.845,110,1.074,111,0.957,112,0.845,113,0.957,114,0.845,115,0.957,116,0.845,117,0.957,118,0.845,119,0.957,120,1.3,121,0.845,122,0.957,123,0.845,124,1.477,125,0.957,126,0.845,127,0.957,128,0.845,129,0.845,130,1.477,131,0.957,132,0.957,133,0.845,134,0.957,135,0.793,136,0.957,137,0.845,138,0.845,139,0.38,140,0.793,141,0.899,142,0.957,143,0.016,144,0.016,153,1.673,154,3.287,155,0.663,157,2.627,158,1.908,163,2.835,166,1.487,172,0.549,173,1.01,174,2.495,175,1.775,176,1.463,181,2.627,182,0.663,188,4.056,191,1.566,198,1.666,203,3.919,215,1.328,216,1.487,226,2.933,238,1.775,244,2.306,249,2.463,254,0.826,255,2.031,286,0.526,288,0.899,346,2.495,354,2.933,367,0.812,368,1.591,375,1.706,378,2.634,391,1.152,417,2.697,446,1.383,497,1.706,502,2.495,604,3.919,605,4.595,614,3.57,616,4.045,621,3.57,622,3.57,623,4.045,627,3.57,631,3.57,632,2.627,636,3.919,637,3.738,638,4.461,639,3.574,640,3.287,641,2.977,643,3.919,644,4.351,649,2.697,667,1.836,671,2.627,672,4.056,673,2.627,676,2.977,677,2.977,686,2.158,694,1.836,695,3.041,696,1.591,697,2.835,698,1.591,700,2.627,705,2.977,706,3.331,707,3.57,708,2.634,710,2.162,711,2.627,712,0.957,714,2.627,715,4.045,716,2.977,726,2.977,729,3.041,812,1.836,941,1.836,953,2.977,955,2.977,956,2.977,1003,2.367,1249,2.933,1260,4.045,1474,2.456,1477,2.933,1478,2.933,1479,2.977,1480,4.045,1481,4.045,1482,4.765,1483,5.808,1484,4.765,1485,4.765,1486,2.158,1487,2.158,1488,4.595,1489,4.765,1490,3.57,1491,5.155,1492,4.765,1493,4.045,1494,4.765,1495,3.57,1496,4.765,1497,3.507,1498,4.765,1499,3.507,1500,3.507,1501,2.977,1502,3.507,1503,2.367,1504,2.627,1505,3.507,1506,3.507,1507,3.507,1508,2.627,1509,2.977,1510,3.507,1511,2.367,1512,3.507,1513,2.933,1514,4.765,1515,4.765,1516,3.507,1517,4.045,1518,3.507,1519,3.507,1520,3.507,1521,3.507,1522,3.507,1523,3.57,1524,2.933,1525,4.045,1526,4.765,1527,3.57,1528,3.216]],["title/components/HelpComponent.html",[0,0.164,121,0.836]],["body/components/HelpComponent.html",[0,0.246,1,0.783,2,1.089,3,0.206,4,0.18,5,0.887,6,0.887,7,0.887,8,0.18,10,0.887,11,1.687,12,1.796,16,1.16,18,0.783,19,0.783,21,1.16,23,1.313,25,0.154,29,0.452,30,2.193,31,3.205,33,0.581,38,0.839,39,2.56,40,3.839,47,0.452,48,0.024,49,0.585,50,0.18,51,0.321,52,0.514,53,3.51,54,0.839,56,2.56,60,0.782,67,2.368,69,0.735,72,3.186,74,0.33,75,0.18,77,0.783,81,2.193,82,2.193,85,0.206,86,0.206,87,0.291,97,0.887,98,1.234,99,1.16,100,0.887,101,1.535,102,0.887,103,0.603,104,0.901,105,1.234,106,0.887,107,0.689,108,0.887,109,0.783,110,1.321,111,0.887,112,0.783,113,0.887,114,0.783,115,0.887,116,0.783,117,0.887,118,0.783,119,0.887,120,1.234,121,1.474,122,0.887,123,0.783,124,0.887,125,0.887,126,0.783,127,0.887,128,0.783,129,0.783,130,0.887,131,0.887,132,0.887,133,0.783,134,0.887,135,0.735,136,0.887,137,0.783,138,0.783,139,0.705,140,1.176,141,0.833,142,0.887,143,0.015,144,0.015,153,1.089,155,0.629,166,1.918,171,2.368,172,0.262,174,2.368,189,3.052,191,1.486,192,3.795,194,1.16,212,2.56,254,1.061,277,0.898,282,1.684,288,1.16,295,2.56,319,3.353,329,2.368,354,3.461,367,0.679,418,2.052,434,3.052,470,3.388,498,2.453,522,2.736,573,1.684,578,3.795,579,2.052,635,3.839,637,2.783,638,3.052,640,3.183,669,2.104,693,3.205,712,1.234,760,3.388,764,2.368,792,2.368,819,2.783,820,3.116,824,2.56,838,1.136,868,2.615,876,3.839,896,2.56,907,2.201,1003,3.795,1093,3.839,1158,3.388,1185,3.795,1227,3.183,1241,2.783,1254,3.052,1311,4.773,1317,3.052,1326,3.839,1330,3.388,1339,3.388,1351,2.736,1353,2.56,1355,3.183,1395,2.56,1427,2.783,1448,3.388,1474,2.36,1523,4.797,1524,3.941,1525,4.773,1527,4.934,1528,4.13,1529,2.758,1530,4.522,1531,4.522,1532,4.213,1533,3.25,1534,3.388,1535,3.839,1536,3.25,1537,2.201,1538,2.783,1539,2.435,1540,3.839,1541,4.522,1542,5.623,1543,2.758,1544,3.388,1545,3.052,1546,4.522,1547,5.623,1548,4.522,1549,4.522,1550,3.839,1551,3.839,1552,3.388,1553,3.388,1554,3.839,1555,3.839,1556,3.839,1557,4.522,1558,3.839,1559,3.839,1560,4.522,1561,4.522,1562,4.522,1563,3.839,1564,4.522,1565,5.623,1566,3.839,1567,4.522,1568,4.522,1569,4.522,1570,4.522,1571,4.522,1572,3.839,1573,5.623,1574,4.522,1575,3.839,1576,3.839,1577,5.623,1578,3.839,1579,3.839,1580,3.388,1581,3.388,1582,3.839,1583,4.213,1584,4.522,1585,3.839,1586,4.522,1587,3.388,1588,3.839,1589,3.839,1590,3.839,1591,4.522,1592,3.839,1593,3.839,1594,4.522,1595,4.681,1596,3.839,1597,4.522,1598,4.522,1599,3.25,1600,3.052,1601,4.522,1602,3.388,1603,4.522,1604,3.839,1605,5.623,1606,5.623,1607,3.839,1608,3.388,1609,4.522,1610,3.839,1611,2.736,1612,6.713,1613,3.25,1614,4.522,1615,3.839,1616,3.839,1617,4.522,1618,6.403,1619,3.052,1620,4.522,1621,3.388,1622,3.388,1623,4.522,1624,4.522,1625,4.522,1626,4.773,1627,4.522,1628,4.522,1629,3.839,1630,3.388,1631,3.839,1632,4.522,1633,4.522,1634,4.522,1635,4.522,1636,3.839,1637,4.522,1638,4.522,1639,3.839,1640,4.522,1641,4.522,1642,3.839,1643,3.839,1644,4.522,1645,4.522,1646,2.435,1647,3.388,1648,3.25,1649,4.522,1650,2.758,1651,3.25,1652,3.25,1653,2.435,1654,3.25]],["title/components/LegalNoticeComponent.html",[0,0.164,123,0.836]],["body/components/LegalNoticeComponent.html",[0,0.25,1,0.804,2,1.109,3,0.212,4,0.185,5,0.911,6,0.911,7,0.911,8,0.185,10,0.911,11,1.691,12,1.801,16,1.181,18,0.804,19,0.804,21,1.181,23,1.337,25,0.158,29,0.464,30,2.252,31,3.231,33,0.592,39,2.607,47,0.464,48,0.024,49,0.522,50,0.185,51,0.33,52,0.33,53,3.56,54,0.855,56,2.607,64,1.181,69,0.754,72,3.177,74,0.335,75,0.185,77,0.804,81,2.252,82,2.252,85,0.212,86,0.212,87,0.299,91,1.513,97,0.911,98,1.257,99,1.181,100,0.911,101,1.552,102,0.911,103,0.619,104,0.578,105,1.257,106,0.911,107,0.707,108,0.911,109,0.804,110,1.047,111,0.911,112,0.804,113,0.911,114,0.804,115,0.911,116,0.804,117,0.911,118,0.804,119,0.911,120,1.257,121,0.804,122,0.911,123,1.486,124,1.853,125,0.911,126,0.804,127,0.911,128,0.804,129,0.804,130,0.911,131,0.911,132,0.911,133,0.804,134,0.911,135,0.754,136,0.911,137,0.804,138,0.804,139,0.362,140,0.754,141,0.856,142,0.911,143,0.016,144,0.016,155,0.641,166,2.412,172,0.269,212,2.607,225,1.109,249,2.412,282,1.716,295,2.607,319,3.531,337,3.451,367,0.691,532,2.835,544,2.733,578,3.108,764,2.412,805,4.828,819,2.835,820,2.768,821,3.451,824,2.607,838,1.167,1070,2.607,1227,3.219,1309,3.451,1421,3.375,1474,2.393,1478,3.966,1487,2.835,1524,2.835,1532,4.261,1534,3.451,1535,3.91,1537,2.241,1538,2.835,1539,2.5,1550,5.47,1551,3.91,1552,3.451,1553,3.451,1554,3.91,1555,5.619,1556,5.619,1576,3.91,1578,4.828,1579,3.91,1580,3.451,1581,3.451,1587,3.451,1588,3.91,1589,3.91,1590,3.91,1592,3.91,1593,3.91,1608,3.451,1626,3.91,1646,2.5,1647,3.451,1653,2.5,1655,4.477,1656,4.477,1657,2.832,1658,4.606,1659,4.606,1660,3.337,1661,3.337,1662,4.606,1663,4.606,1664,4.606,1665,4.606,1666,4.606,1667,3.91,1668,4.606,1669,4.606,1670,4.606,1671,4.606,1672,4.606,1673,4.606,1674,4.606,1675,4.606,1676,4.606,1677,3.91,1678,5.238,1679,3.91,1680,6.444,1681,4.606,1682,4.828,1683,3.451,1684,4.828,1685,3.91,1686,4.606,1687,4.606,1688,4.606,1689,4.606,1690,6.444,1691,4.606,1692,4.606,1693,4.606,1694,4.606,1695,6.171,1696,5.688,1697,3.337,1698,4.261,1699,4.606,1700,6.171,1701,5.688,1702,4.606,1703,4.606,1704,4.606,1705,4.606,1706,4.606,1707,5.688,1708,5.688,1709,6.171,1710,4.606,1711,3.91,1712,3.91,1713,3.451,1714,4.606,1715,4.606,1716,4.606,1717,4.606,1718,3.91,1719,3.91,1720,4.606,1721,4.606,1722,4.606,1723,4.606,1724,4.606,1725,4.606,1726,4.606,1727,4.606,1728,3.91,1729,4.606,1730,4.606,1731,3.91,1732,5.688,1733,4.606,1734,5.688,1735,3.91,1736,4.606,1737,4.606,1738,4.606,1739,5.688,1740,5.688,1741,4.606,1742,4.606,1743,4.606,1744,4.606,1745,4.606,1746,4.606,1747,4.606,1748,4.606,1749,4.606,1750,3.91,1751,4.606,1752,4.606,1753,6.171,1754,5.688,1755,4.606,1756,4.606,1757,4.606,1758,4.606,1759,4.606,1760,4.606,1761,4.606,1762,5.688,1763,3.91,1764,4.606,1765,4.606,1766,4.606,1767,4.606,1768,4.606,1769,3.91,1770,3.91,1771,4.606,1772,4.606,1773,4.606,1774,4.606,1775,3.91,1776,4.606,1777,4.606,1778,4.606,1779,4.606,1780,4.606,1781,4.606,1782,3.91,1783,4.606,1784,4.606,1785,3.91,1786,3.91,1787,3.91]],["title/components/LoginComponent.html",[0,0.164,126,0.836]],["body/components/LoginComponent.html",[0,0.264,1,0.671,2,0.976,3,0.177,4,0.154,5,0.76,6,0.76,7,0.76,8,0.154,10,0.76,11,1.658,12,1.766,14,2.121,15,1.079,16,1.039,18,0.671,19,0.671,20,1.67,21,1.039,23,1.176,25,0.132,26,0.479,29,0.564,32,2.53,33,0.865,38,0.752,44,2.166,45,1.718,47,0.564,48,0.025,49,0.575,50,0.332,51,0.401,52,0.401,54,0.752,60,0.809,61,0.939,64,1.577,69,1.562,71,0.806,72,1.838,74,0.391,75,0.154,77,0.671,80,0.915,85,0.177,86,0.177,87,0.47,88,1.054,97,0.76,98,1.105,99,1.039,100,0.76,101,1.431,102,0.76,103,0.517,104,0.482,105,1.105,106,0.76,107,0.59,108,0.76,109,0.671,110,0.948,111,0.76,112,0.671,113,0.76,114,0.671,115,0.76,116,0.671,117,0.76,118,1.263,119,0.76,120,1.105,121,0.671,122,0.76,123,0.671,124,0.76,125,0.76,126,1.401,127,0.76,128,1.263,129,0.671,130,0.76,131,0.76,132,0.76,133,0.671,134,0.76,135,0.629,136,0.76,137,0.671,138,0.671,139,0.302,140,0.629,141,0.714,142,0.76,143,0.014,144,0.014,153,1.481,155,0.564,158,2.093,162,2.293,163,2.746,166,1.718,171,2.746,172,0.521,173,1.111,176,1.554,182,0.809,186,1.971,189,3.76,194,1.429,198,2.033,212,2.293,215,0.859,216,2.224,217,2.734,218,1.834,219,3.579,236,3.035,238,1.509,241,4.298,244,2.383,249,1.181,256,1.718,257,1.458,286,0.787,288,1.039,318,2.734,329,1.458,333,2.493,334,2.293,338,2.734,348,1.417,367,0.956,382,1.609,392,1.838,429,1.458,432,2.816,433,1.509,437,2.968,439,3.227,446,1.176,449,3.227,539,2.293,542,2.493,562,2.552,610,3.539,611,2.224,643,1.879,662,3.438,667,1.458,679,3.924,692,1.971,694,1.458,695,2.501,696,1.263,697,1.458,698,1.263,708,1.971,710,1.263,712,0.76,743,1.263,745,1.037,773,3.578,788,4.357,792,2.121,810,2.493,812,2.121,820,2.552,822,3.578,824,2.703,836,3.578,841,3.035,842,2.086,896,2.703,897,2.293,902,1.838,907,1.971,922,4.772,941,1.458,1031,3.035,1220,4.016,1223,2.968,1224,2.968,1231,4.451,1266,2.293,1351,1.971,1383,2.734,1387,1.879,1388,2.086,1389,1.879,1390,4.496,1395,3.291,1471,4.166,1474,2.166,1486,2.493,1490,3.035,1495,3.035,1501,3.438,1503,2.734,1504,3.035,1509,3.438,1513,3.227,1528,3.924,1537,1.971,1788,2.363,1789,4.051,1790,4.051,1791,4.73,1792,5.094,1793,4.053,1794,4.775,1795,4.053,1796,4.775,1797,4.053,1798,5.244,1799,3.438,1800,4.451,1801,5.244,1802,5.244,1803,5.244,1804,2.784,1805,4.051,1806,4.775,1807,2.784,1808,4.936,1809,4.051,1810,3.438,1811,2.784,1812,3.438,1813,4.73,1814,4.051,1815,2.784,1816,4.051,1817,4.357,1818,4.051,1819,2.784,1820,2.784,1821,2.784,1822,4.051,1823,3.035,1824,2.784,1825,4.936,1826,2.784,1827,4.051,1828,4.051,1829,4.051,1830,5.244,1831,2.784,1832,2.784,1833,3.438,1834,2.784,1835,2.784,1836,2.734,1837,2.784,1838,3.438,1839,2.784,1840,2.363,1841,2.086,1842,2.784,1843,2.784,1844,2.363,1845,2.784,1846,2.784,1847,2.784,1848,2.363,1849,2.784,1850,2.784,1851,2.784,1852,2.784,1853,2.784,1854,2.784,1855,2.784,1856,2.784,1857,3.438,1858,2.784,1859,2.784,1860,2.784,1861,4.73,1862,4.451,1863,2.784,1864,3.438,1865,2.784,1866,3.438,1867,3.438,1868,3.438,1869,2.784,1870,2.784,1871,2.363,1872,2.363,1873,2.363,1874,2.363,1875,1.879,1876,2.086,1877,2.363,1878,2.363,1879,2.363,1880,2.363,1881,2.363,1882,2.363,1883,3.035,1884,2.363,1885,2.363]],["title/components/LoginHeaderComponent.html",[0,0.164,128,0.836]],["body/components/LoginHeaderComponent.html",[0,0.301,1,0.976,2,1.264,3,0.258,4,0.224,5,1.106,6,1.106,7,1.106,8,0.224,10,1.106,11,1.722,12,1.833,15,0.752,16,1.345,18,0.976,19,0.976,21,1.345,23,1.523,25,0.192,26,0.621,33,0.791,38,1.142,42,3.54,44,1.954,48,0.025,49,0.519,50,0.29,60,0.73,61,0.847,64,1.345,66,3.229,69,1.501,72,2.38,74,0.37,75,0.224,77,0.976,85,0.258,86,0.258,97,1.106,98,1.432,99,1.345,100,1.106,101,1.679,102,1.106,103,0.752,104,0.702,105,1.432,106,1.106,107,0.859,108,1.106,109,0.976,110,1.155,111,1.106,112,0.976,113,1.106,114,0.976,115,1.106,116,0.976,117,1.106,118,0.976,119,1.106,120,1.432,121,0.976,122,1.106,123,0.976,124,1.106,125,1.106,126,0.976,127,1.106,128,1.482,129,0.976,130,1.106,131,1.106,132,1.106,133,0.976,134,1.106,135,0.916,136,1.106,137,0.976,138,0.976,139,0.44,140,0.916,141,1.039,142,1.106,143,0.018,144,0.018,153,1.264,155,0.73,172,0.423,173,1.112,176,1.264,194,1.745,215,1.112,249,1.719,256,2.225,318,3.54,367,0.923,433,1.954,446,1.689,562,2.553,595,2.123,611,2.609,667,2.123,679,3.54,694,2.123,695,3.046,696,1.839,697,2.123,698,1.839,708,3.176,710,1.839,712,1.587,743,1.839,745,1.51,810,3.229,812,2.747,1220,4.143,1223,2.969,1224,2.969,1263,3.229,1387,2.736,1389,2.736,1395,3.694,1471,3.921,1474,2.639,1480,4.453,1481,4.453,1495,3.931,1503,3.54,1513,3.229,1793,4.937,1795,4.937,1800,5.221,1808,4.453,1817,4.609,1833,4.453,1841,4.773,1844,3.441,1848,3.441,1857,4.453,1883,3.931,1886,5.408,1887,3.441,1888,4.054,1889,5.246,1890,5.246,1891,5.246,1892,4.453,1893,5.246,1894,5.246,1895,4.054,1896,3.229,1897,4.054,1898,4.453,1899,5.246,1900,5.246,1901,5.246,1902,5.638,1903,4.054,1904,4.054,1905,4.054,1906,4.054,1907,4.054,1908,4.054]],["title/injectables/NavigationHistoryService.html",[31,1.818,177,0.446]],["body/injectables/NavigationHistoryService.html",[3,0.263,4,0.229,8,0.229,13,1.508,25,0.196,26,0.63,29,0.577,31,2.787,32,2.754,33,0.825,35,2.787,36,4.648,38,1.219,45,2.921,47,0.577,48,0.025,49,0.41,50,0.294,51,0.41,52,0.526,54,0.988,56,3.867,60,0.577,61,0.669,71,0.844,73,3.276,74,0.374,75,0.229,76,4.99,77,0.998,83,2.798,84,3.106,85,0.263,86,0.263,87,0.372,88,0.949,89,3.519,91,1.362,92,2.017,93,3.519,143,0.018,144,0.018,155,0.74,165,2.979,166,2.257,172,0.539,177,0.684,179,1.131,182,0.818,184,1.646,195,2.897,221,2.257,222,1.645,256,2.257,278,2.787,286,0.622,367,0.799,372,4.186,507,2.464,544,2.631,712,1.131,815,3.988,838,1.45,1088,3.276,1185,4.431,1227,3.511,1254,4.61,1517,4.518,1537,3.019,1538,4.162,1566,4.518,1602,3.106,1610,4.518,1636,3.519,1836,3.592,1909,5.573,1910,3.519,1911,4.518,1912,5.323,1913,5.74,1914,5.846,1915,6.763,1916,5.323,1917,6.933,1918,6.203,1919,6.203,1920,6.203,1921,3.519,1922,5.323,1923,5.323,1924,5.323,1925,5.879,1926,5.323,1927,5.323,1928,4.146,1929,5.323,1930,5.323,1931,4.146,1932,4.146,1933,5.323,1934,5.323,1935,5.323,1936,4.146,1937,5.323,1938,4.146,1939,4.146,1940,4.146,1941,4.146,1942,5.323,1943,4.146,1944,4.146,1945,3.519]],["title/injectables/OverlayManager.html",[177,0.446,1946,2.601]],["body/injectables/OverlayManager.html",[3,0.218,4,0.19,8,0.19,13,0.88,15,0.637,25,0.162,26,0.556,29,0.653,32,2.472,33,0.903,38,1.069,39,2.658,47,0.886,48,0.025,49,0.63,50,0.375,51,0.651,52,0.63,60,0.866,61,0.973,71,0.871,74,0.366,75,0.19,77,0.827,85,0.218,86,0.218,87,0.48,88,1.134,91,2.045,107,0.995,139,0.764,140,1.301,143,0.016,144,0.016,155,0.653,164,2.045,165,1.557,166,1.992,172,0.55,173,1.411,175,1.749,176,1.563,177,0.604,179,0.937,182,0.866,184,1.363,186,2.285,194,1.688,215,0.995,221,2.873,225,0.827,255,1.2,286,0.515,344,1.557,348,1.872,349,2.459,350,1.865,351,1.992,362,2.126,365,1.992,367,0.988,368,2.944,378,1.67,391,1.128,392,2.131,397,2.914,409,2.572,410,2.317,420,1.759,432,2.27,440,1.128,447,1.865,451,2.605,453,2.572,464,1.67,522,1.67,545,1.865,562,1.67,565,2.285,579,2.131,639,2.89,675,4.068,686,2.113,692,1.67,698,1.557,729,3.337,800,4.631,801,2.89,912,2.572,996,3.543,998,4.068,1070,3.523,1071,2.113,1130,2.914,1204,4.544,1205,4.544,1212,3.986,1213,3.986,1214,3.986,1220,3.922,1221,4.313,1228,2.317,1235,3.885,1236,3.169,1237,2.914,1238,4.886,1240,4.544,1245,2.914,1248,4.011,1249,2.113,1250,3.986,1263,2.113,1285,3.986,1289,3.986,1303,2.373,1312,2.914,1315,2.914,1317,3.169,1320,3.986,1344,1.798,1513,2.113,1537,2.285,1611,2.285,1836,2.317,1838,2.914,1921,2.914,1946,4.313,1947,5.978,1948,4.697,1949,5.756,1950,5.354,1951,5.756,1952,3.986,1953,5.354,1954,4.313,1955,5.354,1956,5.354,1957,4.697,1958,5.756,1959,5.756,1960,5.756,1961,5.756,1962,5.756,1963,5.756,1964,4.697,1965,4.697,1966,5.354,1967,3.519,1968,3.433,1969,3.433,1970,2.914,1971,2.572,1972,3.433,1973,3.433,1974,2.914,1975,3.433,1976,3.433,1977,5.756,1978,3.433,1979,3.433,1980,3.433,1981,3.433,1982,3.433,1983,4.697,1984,4.697,1985,3.986,1986,4.697,1987,3.433,1988,3.433,1989,3.433,1990,4.697,1991,3.433,1992,3.433,1993,3.433,1994,3.433,1995,2.914,1996,2.914,1997,3.433,1998,3.433,1999,3.433,2000,3.433,2001,2.914,2002,3.433]],["title/components/PrivacyPolicyComponent.html",[0,0.164,129,0.836]],["body/components/PrivacyPolicyComponent.html",[0,0.193,1,0.516,2,0.801,3,0.259,4,0.118,5,0.584,6,0.584,7,0.584,8,0.118,10,1.112,11,1.602,12,1.735,16,0.853,18,0.516,19,0.516,21,0.853,23,0.965,25,0.101,29,0.298,30,1.445,31,2.757,33,0.591,36,3.944,39,2.6,45,1.41,46,3.553,47,0.298,48,0.024,49,0.492,50,0.304,51,0.212,52,0.212,53,2.75,54,1.303,55,2.244,56,2.6,59,2.757,63,1.741,64,0.853,69,0.921,72,2.704,73,3.24,74,0.259,75,0.118,77,0.516,81,1.445,82,1.445,85,0.136,86,0.136,87,0.192,97,0.584,98,0.907,99,0.853,100,0.584,101,1.254,102,0.584,103,0.397,104,0.371,105,0.907,106,0.584,107,0.454,108,0.584,109,0.516,110,1.267,111,0.584,112,0.516,113,0.584,114,0.516,115,0.584,116,0.516,117,0.584,118,0.516,119,0.584,120,0.907,121,0.516,122,0.584,123,0.516,124,1.656,125,0.584,126,0.516,127,0.584,128,0.516,129,1.268,130,1.858,131,0.584,132,0.584,133,0.516,134,0.584,135,0.484,136,0.584,137,0.516,138,0.516,139,0.54,140,1.318,141,0.549,142,0.584,143,0.011,144,0.011,150,3.553,151,2.822,152,2.822,153,1.107,155,0.732,163,2.406,166,1.948,171,1.741,172,0.173,187,2.244,191,1.092,192,4.022,193,3.442,195,1.41,209,2.084,211,3.832,212,1.882,225,1.728,235,2.046,244,2.448,247,2.236,257,2.974,278,2.406,282,1.711,295,2.98,319,3.372,327,2.491,329,3.228,333,2.046,336,3.442,349,2.757,350,1.32,367,0.499,413,1.238,414,2.828,415,3.553,417,2.6,420,1.092,421,2.6,435,2.828,437,1.882,447,1.32,498,1.238,523,1.741,532,2.828,534,2.236,544,1.41,549,2.046,562,1.618,573,1.238,636,2.244,637,2.828,675,2.244,679,4.345,692,2.763,712,0.907,745,1.238,748,2.491,764,3.555,812,1.741,819,2.046,820,2.999,821,2.491,830,3.832,838,0.749,868,1.825,896,2.6,897,3.214,907,1.618,934,2.046,970,2.491,1004,2.491,1019,2.244,1030,2.491,1070,1.882,1088,2.046,1227,2.6,1236,3.1,1249,2.046,1254,2.244,1263,2.046,1317,2.244,1330,3.442,1421,3.228,1427,2.828,1474,1.849,1477,4.178,1478,3.24,1503,3.553,1504,3.442,1523,2.491,1524,2.046,1527,2.491,1532,3.442,1537,1.618,1538,2.828,1539,1.604,1543,1.817,1544,4.465,1552,2.491,1559,3.9,1572,4.469,1575,3.9,1580,4.255,1581,4.733,1582,2.822,1583,3.442,1585,2.822,1587,2.491,1595,2.244,1602,2.491,1604,2.822,1607,2.822,1608,4.957,1615,3.9,1616,3.9,1619,2.244,1621,2.491,1622,2.491,1629,2.822,1639,3.9,1642,2.822,1643,2.822,1646,1.604,1647,2.491,1650,1.817,1653,1.604,1667,2.822,1677,3.9,1678,2.822,1679,3.9,1682,2.822,1683,3.944,1684,2.822,1685,4.469,1698,4.255,1711,2.822,1712,3.9,1718,4.469,1719,3.9,1728,2.822,1731,2.822,1735,4.469,1769,2.822,1770,2.822,1775,2.822,1782,2.822,1785,2.822,1786,2.822,1787,2.822,1823,3.944,1836,2.244,1878,2.822,1880,2.822,1902,2.822,1911,2.822,1913,4.469,1914,2.822,1970,2.822,2003,3.459,2004,3.459,2005,1.817,2006,3.325,2007,3.325,2008,2.141,2009,3.325,2010,2.141,2011,3.325,2012,3.325,2013,3.325,2014,3.325,2015,3.325,2016,3.325,2017,3.325,2018,3.325,2019,4.594,2020,3.325,2021,5.264,2022,3.325,2023,5.264,2024,3.325,2025,3.325,2026,4.594,2027,4.594,2028,6.318,2029,3.325,2030,2.822,2031,3.325,2032,4.594,2033,4.594,2034,4.594,2035,5.264,2036,3.325,2037,3.325,2038,2.244,2039,3.325,2040,3.325,2041,4.594,2042,3.325,2043,3.325,2044,3.325,2045,3.325,2046,4.594,2047,3.325,2048,3.325,2049,6.164,2050,3.9,2051,6.682,2052,4.469,2053,3.325,2054,4.594,2055,3.325,2056,3.325,2057,3.325,2058,3.325,2059,3.325,2060,4.594,2061,3.325,2062,3.325,2063,4.594,2064,3.325,2065,3.325,2066,5.264,2067,4.594,2068,4.159,2069,3.325,2070,3.325,2071,3.325,2072,3.325,2073,3.325,2074,3.325,2075,3.325,2076,3.325,2077,3.325,2078,3.325,2079,3.325,2080,2.491,2081,4.594,2082,3.325,2083,4.594,2084,3.325,2085,4.594,2086,3.325,2087,5.264,2088,3.325,2089,3.325,2090,3.325,2091,4.594,2092,4.594,2093,3.325,2094,3.325,2095,3.325,2096,3.325,2097,4.594,2098,3.325,2099,3.325,2100,3.325,2101,5.264,2102,3.325,2103,3.325,2104,3.325,2105,3.325,2106,3.9,2107,3.325,2108,3.325,2109,3.325,2110,4.594,2111,3.325,2112,3.325,2113,3.325,2114,3.325,2115,3.325,2116,3.325,2117,4.594,2118,3.325,2119,3.325,2120,3.325,2121,3.325,2122,3.325,2123,3.325,2124,3.325,2125,3.325,2126,3.325,2127,4.594,2128,4.594,2129,5.264,2130,3.325,2131,5.264,2132,3.325,2133,3.325,2134,3.325,2135,3.325,2136,3.325,2137,3.325,2138,4.594,2139,3.325,2140,3.325,2141,3.325,2142,3.325,2143,4.594,2144,3.325,2145,3.325,2146,4.594,2147,3.325,2148,5.264,2149,3.325,2150,3.325,2151,3.325,2152,3.325,2153,3.325,2154,3.325,2155,3.325,2156,4.594,2157,3.325,2158,3.325,2159,3.325,2160,3.325,2161,3.325,2162,3.325,2163,3.325,2164,3.325,2165,3.325,2166,4.594,2167,3.325,2168,3.325,2169,3.325,2170,4.594,2171,3.325,2172,3.325,2173,3.325,2174,3.325,2175,3.325,2176,3.325,2177,3.9,2178,3.325,2179,3.325,2180,3.325,2181,3.325,2182,3.325,2183,4.594,2184,2.822,2185,3.325,2186,3.325,2187,3.325,2188,2.822,2189,3.325,2190,3.325,2191,3.325,2192,3.325,2193,3.325,2194,3.325,2195,2.822,2196,3.325,2197,2.046,2198,3.325,2199,3.325,2200,4.594,2201,3.9,2202,3.325,2203,2.822,2204,3.325,2205,3.325,2206,2.491,2207,4.594,2208,3.442,2209,2.822,2210,2.244,2211,2.822,2212,3.325,2213,2.822,2214,3.325,2215,3.325,2216,3.325,2217,3.325,2218,3.325,2219,3.325,2220,3.325,2221,3.325,2222,3.325,2223,5.264,2224,3.325,2225,4.594,2226,3.325,2227,3.325,2228,3.325,2229,3.325,2230,3.325]],["title/components/SidebarComponent.html",[0,0.164,18,0.836]],["body/components/SidebarComponent.html",[0,0.31,1,1.066,2,1.337,3,0.281,4,0.245,5,1.208,6,1.208,7,1.208,8,0.245,10,1.208,11,1.734,12,1.846,15,1.03,16,1.423,18,1.608,19,1.066,20,2.12,21,1.423,23,1.611,25,0.209,29,0.616,33,0.713,43,5.394,45,2.695,47,0.616,48,0.025,49,0.6,50,0.245,51,0.438,52,0.549,54,1.03,64,1.423,69,1.001,73,3.416,74,0.404,75,0.245,77,1.066,80,1.455,85,0.281,86,0.281,87,0.397,97,1.208,98,1.514,99,1.423,100,1.208,101,1.734,102,1.208,103,0.822,104,1.05,105,1.514,106,1.208,107,0.939,108,1.208,109,1.066,110,1.203,111,1.208,112,1.066,113,1.208,114,1.066,115,1.208,116,1.066,117,1.208,118,1.066,119,1.208,120,1.514,121,1.066,122,1.208,123,1.066,124,1.654,125,1.208,126,1.066,127,1.208,128,1.066,129,1.066,130,1.654,131,1.208,132,1.208,133,1.066,134,1.208,135,1.001,136,1.208,137,1.066,138,1.066,139,0.657,140,1.001,141,1.135,142,1.208,143,0.019,144,0.019,153,1.608,154,3.141,155,0.772,157,3.318,158,2.226,160,4.711,162,3.141,163,3.328,164,1.823,172,0.448,173,1.176,174,2.906,175,2.067,176,1.337,181,3.318,182,0.616,203,4.289,215,1.176,238,2.367,447,2.204,498,2.067,838,1.548,941,2.319,1383,3.745,1474,2.75,1477,3.416,1478,3.416,1528,3.745,1595,3.745,1825,4.711,2177,4.711,2231,3.759,2232,5.55,2233,5.55,2234,4.428,2235,4.428]],["title/components/SignupComponent.html",[0,0.164,133,0.836]],["body/components/SignupComponent.html",[0,0.194,1,0.52,2,0.806,3,0.137,4,0.119,5,0.589,6,0.589,7,0.589,8,0.119,10,0.589,11,1.604,12,1.708,14,1.753,15,0.927,16,0.858,18,0.52,19,0.52,20,1.433,21,0.858,25,0.102,26,0.396,29,0.466,32,2.373,33,0.804,38,0.621,42,1.458,44,1.247,45,1.958,47,0.642,48,0.025,49,0.638,50,0.33,51,0.457,52,0.457,54,0.857,55,2.259,56,1.895,60,0.695,61,0.806,63,2.417,64,0.858,66,2.06,69,1.043,70,4.628,71,0.835,74,0.362,75,0.119,77,0.52,80,0.71,85,0.137,86,0.137,87,0.511,88,0.745,97,0.589,98,0.913,99,0.858,100,0.589,101,1.774,102,0.589,103,0.401,104,0.374,105,0.913,106,0.589,107,0.458,108,0.589,109,0.52,110,1.161,111,0.589,112,0.52,113,0.589,114,0.52,115,0.589,116,0.52,117,0.589,118,1.112,119,0.589,120,0.913,121,0.52,122,0.589,123,0.52,124,0.589,125,0.589,126,0.52,127,0.589,128,0.52,129,0.52,130,1.26,131,0.589,132,0.589,133,1.112,134,0.589,135,0.488,136,0.589,137,0.52,138,0.52,139,0.234,140,0.488,141,0.554,142,0.589,143,0.011,144,0.011,153,1.372,155,0.466,158,1.871,165,1.519,172,0.482,173,1.12,176,1.408,180,1.753,182,0.831,183,1.458,186,1.629,187,4.352,198,1.433,215,0.709,216,1.42,217,3.566,218,1.927,219,3.677,222,1.281,241,4.417,244,2.322,254,0.8,255,1.992,256,1.42,257,2.146,286,0.855,288,0.554,295,1.895,324,1.458,329,1.131,333,2.06,334,1.223,345,3.327,346,1.131,348,1.171,351,1.42,367,0.793,368,2.094,382,2.485,388,1.458,427,3.115,428,2.766,429,1.131,430,2.259,431,2.259,432,2.872,433,2.266,437,2.613,439,3.505,440,1.1,446,1.817,449,2.841,452,2.121,498,1.247,521,1.329,541,1.618,542,3.252,543,2.06,544,1.42,549,2.06,579,1.519,595,2.146,611,1.958,696,0.98,701,1.051,706,2.522,708,1.994,710,0.98,712,0.589,725,3.371,729,3.519,743,0.98,745,2.053,773,3.071,784,3.918,787,1.833,788,3.959,792,1.753,797,3.479,798,2.841,810,3.252,819,2.841,822,3.071,824,3.119,836,3.458,840,1.833,841,3.458,842,1.618,878,1.833,881,2.841,896,2.613,897,1.895,902,1.519,932,3.458,941,1.131,982,1.833,983,3.918,985,5.163,988,3.742,989,1.833,991,3.071,992,5.243,993,4.129,995,4.485,996,2.06,997,1.833,998,4.271,999,3.479,1001,2.841,1002,2.841,1004,4.628,1006,1.833,1008,3.479,1014,4.834,1015,4.239,1016,3.479,1017,5.163,1018,2.841,1019,3.115,1020,3.918,1022,4.834,1023,1.833,1026,2.841,1029,3.918,1030,2.508,1031,2.508,1032,4.267,1035,1.833,1036,3.479,1044,4.834,1048,1.833,1049,3.479,1050,4.558,1051,1.833,1052,3.479,1055,1.833,1057,4.239,1058,4.485,1059,3.742,1060,3.918,1062,2.841,1066,2.841,1067,4.239,1068,3.479,1069,2.841,1070,2.827,1071,3.074,1072,3.479,1073,1.833,1075,3.479,1076,1.833,1082,3.479,1085,2.841,1087,1.833,1092,3.479,1094,2.841,1101,3.918,1102,2.841,1103,2.841,1106,1.833,1107,1.833,1187,1.833,1220,1.329,1221,2.508,1223,1.895,1224,1.895,1227,2.32,1235,2.259,1266,1.895,1282,1.833,1351,1.629,1442,1.618,1471,3.895,1474,1.859,1477,2.522,1486,2.06,1513,2.06,1537,1.629,1583,2.508,1611,1.629,1621,2.508,1750,3.479,1791,4.239,1792,3.479,1797,3.479,1799,2.841,1810,2.841,1812,2.841,1813,5.071,1817,1.618,1840,1.833,1861,3.479,1862,2.841,1864,1.833,1866,1.833,1867,1.833,1868,1.833,1871,1.833,1872,1.833,1873,1.833,1874,1.833,1875,1.458,1876,1.618,1877,1.833,1879,2.841,1881,1.833,1882,1.833,1883,3.458,1884,1.833,1885,1.833,1892,3.918,1945,1.833,1985,1.833,2068,2.259,2106,2.841,2188,2.841,2195,4.239,2209,2.841,2236,1.833,2237,4.098,2238,3.347,2239,4.098,2240,4.098,2241,4.995,2242,4.616,2243,3.347,2244,3.347,2245,3.347,2246,2.16,2247,3.347,2248,3.347,2249,2.06,2250,2.16,2251,2.16,2252,4.098,2253,3.347,2254,2.16,2255,3.347,2256,3.347,2257,2.16,2258,5.283,2259,4.995,2260,3.347,2261,4.995,2262,2.16,2263,4.098,2264,4.616,2265,2.16,2266,2.259,2267,2.16,2268,2.16,2269,2.16,2270,2.16,2271,2.16,2272,2.16,2273,2.16,2274,2.16,2275,2.16,2276,3.347,2277,2.16,2278,2.16,2279,2.16,2280,2.16,2281,2.16,2282,2.16,2283,2.16,2284,2.16,2285,3.347,2286,2.16,2287,2.16,2288,2.16,2289,2.16,2290,2.16,2291,2.16,2292,3.347,2293,2.16,2294,3.347,2295,2.16,2296,2.16,2297,2.16,2298,2.16,2299,2.16,2300,2.16,2301,2.16,2302,4.098,2303,2.16,2304,2.16,2305,3.347,2306,2.16,2307,2.16,2308,4.098,2309,4.995,2310,2.16,2311,3.347,2312,2.16,2313,2.16,2314,2.16,2315,4.098,2316,2.16,2317,2.16,2318,2.16,2319,2.16,2320,2.16,2321,3.347,2322,2.16,2323,2.16,2324,2.16,2325,2.16,2326,2.16,2327,2.16,2328,2.16,2329,2.16,2330,2.16,2331,2.16,2332,2.16,2333,3.347,2334,3.347,2335,4.098,2336,3.347,2337,2.16,2338,2.16,2339,2.16,2340,2.259,2341,3.347,2342,4.098,2343,3.347,2344,3.347,2345,4.098,2346,2.16,2347,2.16,2348,2.16,2349,3.347,2350,2.16,2351,2.16,2352,2.16,2353,2.16,2354,2.16,2355,2.16,2356,4.098,2357,2.16,2358,3.347,2359,2.16,2360,2.16,2361,2.16,2362,2.16,2363,2.16,2364,2.16,2365,2.16,2366,2.16,2367,2.16,2368,2.16,2369,3.347,2370,2.16,2371,2.16,2372,2.16,2373,2.16,2374,2.16,2375,2.16,2376,2.16,2377,2.16,2378,2.16]],["title/interfaces/Subtask.html",[277,0.689,2379,1.379]],["body/interfaces/Subtask.html",[3,0.223,4,0.195,8,0.195,13,0.902,25,0.166,26,0.565,38,0.886,48,0.025,50,0.3,60,0.489,61,0.982,71,0.905,74,0.223,75,0.195,85,0.303,86,0.223,87,0.593,88,1.012,91,2.173,103,0.653,104,0.61,139,0.381,143,0.016,144,0.016,173,1.329,176,1.51,177,0.614,179,0.96,182,0.846,194,1.559,214,1.31,221,2.578,222,1.608,225,0.847,254,0.828,277,0.698,286,0.873,341,1.712,342,1.991,344,1.596,348,2.033,349,1.842,350,1.397,351,1.492,365,2.466,367,1.047,375,1.712,382,2.681,391,1.569,392,1.596,393,2.165,413,2.615,420,2.197,433,2.389,447,1.397,451,3.121,462,1.712,507,1.397,520,2.501,565,2.638,573,1.31,634,2.635,640,1.991,693,1.842,712,1.479,743,1.596,745,1.31,827,3.578,835,2.635,960,2.165,1241,3.742,1266,1.991,1511,2.374,1611,1.712,1875,3.222,2206,2.635,2379,2.87,2380,2.635,2381,3.222,2382,2.83,2383,2.986,2384,2.986,2385,2.986,2386,2.986,2387,2.986,2388,2.635,2389,4.357,2390,2.986,2391,4.602,2392,2.986,2393,2.986,2394,5.539,2395,2.986,2396,4.936,2397,2.986,2398,5.444,2399,2.986,2400,2.986,2401,5.16,2402,2.986,2403,5.444,2404,2.986,2405,2.986,2406,2.986,2407,4.602,2408,2.986,2409,4.357,2410,4.602,2411,4.053,2412,2.986,2413,2.986,2414,2.374,2415,4.053,2416,2.986,2417,2.635,2418,2.986,2419,2.986,2420,2.986,2421,2.986,2422,2.635,2423,2.986,2424,4.053,2425,2.986,2426,4.053,2427,4.053,2428,2.986,2429,2.986,2430,2.986,2431,4.602,2432,2.986,2433,4.053,2434,2.986,2435,2.986,2436,2.986,2437,2.986,2438,2.986,2439,2.986,2440,2.986,2441,2.986,2442,4.053,2443,2.986,2444,4.053,2445,2.986,2446,2.986,2447,2.986,2448,2.986,2449,4.053,2450,2.986,2451,2.986,2452,1.842,2453,2.986,2454,4.053]],["title/interfaces/Subtask-1.html",[277,0.576,712,0.792,2379,1.152]],["body/interfaces/Subtask-1.html",[3,0.194,4,0.169,8,0.169,13,0.783,25,0.144,26,0.512,28,4.387,38,0.567,48,0.025,50,0.278,51,0.623,52,0.541,54,0.567,67,2.266,71,0.914,74,0.319,75,0.169,85,0.319,86,0.194,87,0.62,88,0.493,92,2.106,104,0.529,139,0.78,143,0.015,144,0.015,153,1.042,164,1.898,172,0.517,173,1.066,177,0.556,179,0.833,182,0.968,191,1.797,198,2.098,209,3.11,214,1.612,215,1.066,216,1.835,218,1.913,222,1.616,225,1.042,247,2.106,254,0.871,256,1.295,258,2.281,270,1.599,274,1.486,275,1.599,276,1.068,277,0.859,278,1.599,282,2.553,285,2.266,286,1.012,288,1.538,296,2.266,340,2.865,341,1.486,346,2.266,358,1.879,360,1.879,365,1.295,382,1.719,391,1.003,413,2.618,418,1.385,421,2.45,422,1.879,423,1.879,424,1.879,425,1.879,440,1.898,446,1.256,447,1.212,462,2.662,464,2.106,497,2.447,500,1.879,502,3.141,503,3.367,507,1.212,512,3.097,513,2.664,516,2.664,517,2.664,519,2.664,520,2.266,522,1.486,523,2.865,525,3.555,528,2.664,529,2.664,530,1.879,534,2.811,537,2.664,539,1.728,544,1.295,545,1.719,555,1.295,573,1.612,669,1.003,693,1.599,792,2.633,838,1.068,868,2.382,902,1.964,907,1.486,934,1.879,951,2.45,1303,1.137,1310,2.846,1337,2.921,1364,2.921,1421,2.266,1487,1.879,1600,3.393,1611,1.486,2038,2.06,2197,1.879,2210,2.921,2249,1.879,2266,2.921,2340,2.06,2379,2.808,2382,2.919,2452,2.266,2455,2.06,2456,3.243,2457,4.494,2458,3.879,2459,2.287,2460,2.287,2461,2.287,2462,2.287,2463,3.393,2464,2.287,2465,2.287,2466,2.06,2467,2.06,2468,3.243,2469,2.287,2470,2.287,2471,4.099,2472,2.287,2473,2.287,2474,3.243,2475,4.327,2476,2.287,2477,2.287,2478,2.287,2479,2.287,2480,3.243,2481,2.287,2482,3.243,2483,2.287,2484,3.243,2485,2.287,2486,2.287,2487,2.287,2488,2.287,2489,2.287,2490,2.287,2491,3.767,2492,2.287,2493,2.287,2494,2.287,2495,2.287,2496,2.287,2497,2.287,2498,2.287,2499,2.287,2500,2.287,2501,2.287,2502,2.287,2503,2.287,2504,4.099,2505,3.243,2506,2.287,2507,3.243,2508,3.243,2509,2.287,2510,2.287,2511,2.287,2512,2.287,2513,2.287,2514,2.06,2515,2.287,2516,2.287,2517,3.243,2518,2.287,2519,2.287,2520,2.287,2521,2.287,2522,2.287,2523,2.287,2524,2.287,2525,1.879,2526,2.921,2527,1.879,2528,3.243,2529,2.06,2530,2.287,2531,2.287,2532,2.06,2533,2.287,2534,2.287,2535,2.287,2536,2.287,2537,2.287,2538,2.287,2539,2.287,2540,2.287,2541,2.287,2542,2.287,2543,2.287,2544,3.767,2545,2.287,2546,2.287,2547,2.287,2548,2.287,2549,2.287,2550,2.287,2551,2.287]],["title/injectables/SubtaskManager.html",[177,0.446,2381,2.343]],["body/injectables/SubtaskManager.html",[3,0.168,4,0.146,8,0.146,13,0.678,25,0.125,26,0.462,33,0.897,38,0.95,47,0.888,48,0.025,49,0.631,50,0.372,51,0.631,52,0.6,60,0.843,61,1.078,71,0.912,74,0.168,75,0.146,85,0.248,86,0.168,87,0.555,88,1.09,91,2.23,103,0.724,104,0.676,139,0.423,143,0.013,144,0.013,155,0.543,172,0.554,173,1.285,176,1.423,177,0.502,179,0.722,182,0.759,184,1.051,194,1.614,214,1.453,221,2.669,222,1.587,225,0.94,254,0.887,277,0.525,286,0.768,342,3.96,344,1.2,348,2.12,349,2.043,350,1.55,351,1.655,365,2.571,367,1.059,375,1.899,382,2.614,391,1.681,392,1.77,393,3.15,398,1.982,402,2.246,406,2.246,407,2.246,408,1.785,409,1.982,410,1.785,413,2.588,420,2.23,433,2.43,447,1.55,451,3.203,462,1.899,507,1.55,520,2.68,565,2.656,573,1.453,634,2.924,640,2.209,693,2.043,712,1.397,743,1.2,745,0.985,827,3.834,835,2.924,960,2.402,1128,2.246,1141,2.246,1143,2.246,1146,2.246,1241,2.402,1266,2.209,1314,1.982,1511,2.633,1611,1.899,1875,3.129,1967,1.982,2206,2.924,2379,2.879,2380,5.242,2381,3.454,2382,3.012,2383,3.935,2384,3.935,2385,3.935,2386,3.935,2387,3.935,2388,3.834,2389,3.834,2390,3.312,2391,3.935,2392,2.246,2393,4.344,2394,5.145,2395,3.312,2396,5.145,2397,4.344,2398,5.013,2399,3.312,2400,4.344,2401,4.633,2402,4.344,2403,5.013,2404,3.312,2405,4.344,2406,3.312,2407,4.847,2408,3.312,2409,3.834,2410,3.935,2411,3.312,2412,3.312,2413,3.312,2414,1.785,2415,4.344,2416,4.344,2417,3.834,2418,2.246,2419,2.246,2420,3.312,2421,2.246,2422,1.982,2423,3.312,2424,4.344,2425,3.312,2426,3.312,2427,3.312,2428,2.246,2429,2.246,2430,3.312,2431,4.633,2432,3.312,2433,3.312,2434,2.246,2435,2.246,2436,2.246,2437,2.246,2438,2.246,2439,2.246,2440,3.312,2441,4.344,2442,3.312,2443,2.246,2444,3.312,2445,4.344,2446,3.312,2447,3.312,2448,3.935,2449,3.312,2450,2.246,2451,2.246,2452,2.043,2453,3.312,2454,3.312,2552,3.902,2553,3.312,2554,3.902,2555,3.902,2556,3.902,2557,3.902,2558,3.902,2559,3.902,2560,3.902,2561,3.902,2562,3.902,2563,2.646,2564,2.646,2565,2.646,2566,2.646,2567,2.646,2568,2.646,2569,2.246,2570,2.646,2571,2.646,2572,2.646,2573,2.246,2574,2.646,2575,2.646,2576,2.646,2577,2.646]],["title/components/SummaryComponent.html",[0,0.164,135,0.785]],["body/components/SummaryComponent.html",[0,0.253,1,0.7,2,1.007,3,0.185,4,0.161,5,0.793,6,0.793,7,0.793,8,0.161,10,0.793,11,1.667,12,1.775,15,1.096,16,1.072,18,0.7,19,0.7,20,1.711,21,1.072,23,1.213,25,0.138,26,0.495,29,0.581,32,2.415,33,0.883,38,0.776,44,1.083,47,0.681,48,0.025,49,0.561,50,0.367,51,0.484,52,0.413,60,0.915,61,1.062,63,1.522,67,2.189,69,0.657,71,0.846,72,1.896,74,0.375,75,0.161,77,0.7,80,0.955,85,0.185,86,0.185,87,0.439,88,1.051,92,1.415,97,0.793,98,1.141,99,1.072,100,0.793,101,1.46,102,0.793,103,0.54,104,0.504,105,1.141,106,0.793,107,0.616,108,0.793,109,0.7,110,0.971,111,0.793,112,0.7,113,0.793,114,0.7,115,0.793,116,0.7,117,0.793,118,0.7,119,0.793,120,1.141,121,0.7,122,0.793,123,0.7,124,0.793,125,0.793,126,0.7,127,0.793,128,0.7,129,0.7,130,0.793,131,0.793,132,0.793,133,0.7,134,0.793,135,1.21,136,0.793,137,0.7,138,0.7,139,0.687,140,0.657,141,0.746,142,0.793,143,0.014,144,0.014,153,0.7,155,0.581,158,1.998,161,1.772,164,2.113,172,0.54,176,1.289,180,2.189,182,0.744,194,0.746,222,1.559,225,0.7,238,1.557,249,1.233,254,0.848,255,1.017,277,0.577,282,2.318,286,0.851,288,0.746,367,0.627,420,2.266,440,1.939,441,1.522,444,2.77,446,1.927,595,2.563,604,3.302,611,2.075,624,3.132,649,1.646,667,1.522,669,1.373,692,2.034,694,1.522,695,2.563,696,1.319,697,1.522,698,1.319,708,2.034,710,1.319,712,0.793,731,2.178,743,1.896,868,2.728,902,2.428,941,1.522,960,2.572,975,1.962,990,3.548,1302,1.789,1303,2.198,1305,3.302,1344,1.522,1351,2.381,1353,2.77,1355,3.029,1379,4.199,1380,2.178,1381,2.468,1383,2.821,1384,3.548,1385,3.548,1386,2.468,1387,1.962,1388,2.178,1389,1.962,1390,4.009,1391,2.468,1392,2.468,1393,5.161,1394,4.154,1395,3.208,1396,4.154,1397,4.811,1398,4.811,1399,5.585,1400,4.811,1401,4.811,1402,4.811,1403,4.811,1404,3.548,1405,3.548,1406,3.548,1407,2.468,1408,3.548,1409,2.468,1410,4.811,1411,3.548,1412,2.468,1413,4.154,1414,2.468,1415,4.811,1416,3.548,1417,3.548,1418,3.548,1419,3.548,1420,3.548,1421,2.189,1422,3.548,1423,3.548,1424,4.542,1425,4.811,1426,2.468,1427,1.789,1428,2.468,1429,2.468,1430,2.468,1431,2.468,1432,2.468,1433,2.468,1434,2.468,1435,2.468,1436,2.468,1437,3.548,1438,2.468,1439,4.154,1440,3.548,1441,2.468,1442,2.178,1443,2.468,1444,2.178,1445,2.178,1446,4.154,1447,2.468,1448,3.132,1449,2.468,1450,3.548,1451,4.811,1452,2.468,1453,4.811,1454,2.468,1455,2.468,1456,2.468,1457,3.548,1458,3.548,1459,2.468,1460,2.468,1461,2.468,1462,2.468,1463,3.548,1464,2.468,1465,3.548,1466,3.548,1467,2.468,1468,2.468,1469,2.468,1470,2.468,1537,1.415,1540,2.468,1595,1.962,1896,1.789,2203,2.468,2466,2.821,2578,4.18,2579,4.894,2580,4.18,2581,4.18,2582,2.907,2583,2.907,2584,2.907,2585,2.907,2586,2.907,2587,2.468,2588,2.907,2589,2.907,2590,2.907,2591,2.907,2592,2.907,2593,2.907,2594,2.907,2595,2.907,2596,2.907,2597,2.907,2598,2.907,2599,2.907,2600,2.907,2601,4.18,2602,4.18,2603,4.18,2604,4.18,2605,4.18,2606,4.18,2607,4.18,2608,4.18,2609,3.548]],["title/interfaces/Task.html",[139,0.377,277,0.689]],["body/interfaces/Task.html",[3,0.185,4,0.161,8,0.161,13,0.745,25,0.137,26,0.494,28,4.34,38,0.775,48,0.025,50,0.35,51,0.673,52,0.615,54,0.539,67,2.187,71,0.918,74,0.311,75,0.161,85,0.311,86,0.185,87,0.616,88,0.469,92,2.032,104,0.503,139,0.782,143,0.014,144,0.014,153,1.365,164,2.044,172,0.511,173,0.616,177,0.537,179,0.793,182,0.963,191,1.757,198,2.063,209,3.117,214,1.556,215,1.037,216,1.771,218,1.87,222,1.595,225,1.006,247,2.032,254,0.848,256,1.771,258,2.219,270,1.521,274,1.413,275,1.521,276,1.016,277,0.829,278,1.521,282,2.6,285,2.187,286,1.004,288,1.513,296,2.187,340,3.257,341,1.413,346,1.521,358,3.01,360,3.01,365,1.232,382,1.659,391,0.954,413,2.606,418,1.895,421,2.364,422,1.787,423,1.787,424,1.787,425,1.787,440,1.938,446,1.212,447,1.153,462,2.603,464,2.032,497,2.38,500,1.787,502,3.09,503,3.292,507,1.659,512,3.027,513,2.571,516,2.571,517,2.571,519,2.571,520,2.187,522,1.413,523,2.801,525,3.487,528,2.571,529,2.571,530,1.787,534,2.757,537,2.571,539,1.644,544,1.232,545,1.659,555,1.232,573,1.556,669,1.372,693,1.521,792,2.561,838,1.016,868,2.343,902,1.895,907,1.413,934,1.787,951,2.364,1303,1.082,1310,2.768,1337,2.819,1364,2.819,1421,2.187,1487,1.787,1600,3.301,1611,1.413,2038,1.96,2197,2.571,2210,2.819,2249,1.787,2266,2.819,2340,3.301,2379,2.806,2382,2.958,2452,1.521,2455,1.96,2456,2.176,2457,3.664,2458,4.049,2459,3.129,2460,3.129,2461,3.129,2462,3.129,2463,4.102,2464,3.129,2465,3.664,2466,3.301,2467,2.819,2468,4.245,2469,3.129,2470,3.129,2471,4.245,2472,2.176,2473,2.176,2474,3.129,2475,4.245,2476,2.176,2477,2.176,2478,2.176,2479,2.176,2480,3.129,2481,2.176,2482,3.129,2483,2.176,2484,3.129,2485,2.176,2486,2.176,2487,2.176,2488,2.176,2489,2.176,2490,2.176,2491,3.664,2492,2.176,2493,2.176,2494,2.176,2495,2.176,2496,2.176,2497,2.176,2498,2.176,2499,2.176,2500,2.176,2501,2.176,2502,2.176,2503,2.176,2504,4.007,2505,3.129,2506,2.176,2507,3.129,2508,3.129,2509,2.176,2510,2.176,2511,2.176,2512,2.176,2513,2.176,2514,1.96,2515,2.176,2516,2.176,2517,3.129,2518,2.176,2519,2.176,2520,2.176,2521,2.176,2522,2.176,2523,2.176,2524,2.176,2525,1.787,2526,2.819,2527,1.787,2528,3.129,2529,1.96,2530,2.176,2531,2.176,2532,1.96,2533,2.176,2534,2.176,2535,2.176,2536,2.176,2537,2.176,2538,2.176,2539,2.176,2540,2.176,2541,2.176,2542,2.176,2543,2.176,2544,3.664,2545,2.176,2546,2.176,2547,2.176,2548,2.176,2549,2.176,2550,2.176,2551,2.176]],["title/components/TaskComponent.html",[0,0.164,137,0.836]],["body/components/TaskComponent.html",[0,0.272,1,0.585,2,0.882,3,0.154,4,0.134,5,0.663,6,0.663,7,0.663,8,0.134,10,0.663,11,1.63,12,1.736,16,0.939,18,0.585,19,0.585,20,1.541,21,0.939,23,1.063,25,0.209,26,0.655,29,0.51,33,0.883,38,0.68,47,0.857,48,0.025,49,0.628,50,0.374,51,0.641,52,0.61,54,1.027,59,1.918,60,0.613,61,0.712,64,0.939,65,2.254,66,2.254,69,0.549,71,0.805,74,0.376,75,0.203,80,0.798,85,0.154,86,0.154,87,0.561,91,2.233,97,0.663,98,1,99,0.939,100,0.663,101,1.339,102,0.663,103,0.451,104,0.421,105,1,106,0.663,107,0.515,108,0.663,109,0.585,110,1.386,111,0.663,112,0.585,113,0.663,114,0.585,115,0.663,116,0.585,117,0.663,118,0.585,119,0.663,120,1,121,0.585,122,0.663,123,0.585,124,0.663,125,0.663,126,0.585,127,0.663,128,0.585,129,0.585,130,0.663,131,0.663,132,0.663,133,0.585,134,0.663,135,0.549,136,0.663,137,1.182,138,0.585,139,0.78,140,0.996,141,0.623,142,0.663,143,0.012,144,0.012,153,0.882,155,0.51,164,1.987,172,0.531,173,0.515,182,0.732,186,2.145,195,2.347,198,1.541,215,1.173,222,1.258,225,1.383,238,1.828,254,0.995,286,0.55,288,0.623,350,1.455,362,2.198,367,0.887,375,1.782,378,2.562,392,1.662,413,2.061,418,2.226,419,3.312,420,2.025,433,2.202,440,1.203,446,1.667,452,2.332,498,2.253,502,2.308,507,1.455,534,1.782,545,1.751,555,2.793,579,1.662,611,2.081,614,2.744,618,2.254,621,2.744,622,2.744,624,2.744,629,3.854,631,1.821,632,1.821,636,2.975,638,4.501,639,4.053,640,2.495,649,3.132,661,2.744,669,2.164,671,2.744,672,1.821,673,2.744,675,2.472,699,3.406,700,1.821,701,1.782,717,2.063,718,2.063,719,2.063,725,1.64,745,1.642,764,2.308,800,1.64,801,3.02,896,2.073,897,2.073,907,1.782,912,2.744,932,2.744,1088,2.254,1118,3.109,1133,3.109,1135,4.165,1136,4.165,1137,4.165,1138,4.165,1139,3.109,1158,2.744,1161,2.063,1162,2.063,1178,1.821,1223,2.778,1224,2.778,1228,3.735,1241,3.535,1248,1.821,1259,3.109,1263,2.254,1298,3.742,1302,1.496,1303,2.296,1309,4.429,1310,1.375,1344,2.308,1351,1.782,1353,2.073,1355,2.073,1486,2.254,1488,5.232,1490,3.303,1491,3.742,1493,4.875,1508,3.677,1538,2.254,1563,3.109,1622,4.146,1630,2.744,1713,3.677,1896,3.02,1954,3.303,2001,2.063,2379,2.198,2382,3.153,2414,2.472,2452,1.918,2587,3.109,2609,3.109,2610,2.063,2611,3.663,2612,3.663,2613,3.742,2614,3.663,2615,3.663,2616,4.907,2617,3.663,2618,3.663,2619,3.663,2620,3.663,2621,3.109,2622,4.408,2623,5.912,2624,4.408,2625,4.408,2626,4.408,2627,4.408,2628,2.43,2629,3.742,2630,2.43,2631,3.663,2632,6.586,2633,2.43,2634,2.43,2635,2.43,2636,3.663,2637,2.43,2638,2.43,2639,4.907,2640,2.43,2641,3.663,2642,2.43,2643,3.663,2644,3.663,2645,2.43,2646,4.165,2647,4.907,2648,2.43,2649,4.907,2650,2.43,2651,2.43,2652,3.663,2653,3.663,2654,3.663,2655,4.907,2656,2.43,2657,3.663,2658,4.907,2659,3.663,2660,3.663,2661,2.43,2662,3.663,2663,3.663,2664,2.43,2665,3.663,2666,2.43,2667,3.663,2668,2.43,2669,4.907,2670,2.43,2671,2.43,2672,2.43,2673,2.43,2674,2.43,2675,2.43,2676,2.43,2677,3.663,2678,3.663,2679,4.408,2680,3.663,2681,2.43,2682,2.43,2683,2.063,2684,3.742,2685,2.43,2686,2.43,2687,2.43,2688,2.43,2689,4.907,2690,2.43,2691,2.43,2692,2.43,2693,2.43,2694,2.43,2695,2.063,2696,2.063,2697,2.063,2698,2.063,2699,2.43,2700,3.109,2701,3.109,2702,3.109,2703,3.663,2704,3.109,2705,3.663,2706,3.663]],["title/components/TaskDetailsComponent.html",[0,0.164,138,0.836]],["body/components/TaskDetailsComponent.html",[0,0.265,1,0.677,2,0.982,3,0.179,4,0.155,5,0.767,6,0.767,7,0.767,8,0.155,10,0.767,11,1.66,12,1.768,15,0.757,16,1.046,18,0.677,19,0.677,20,1.679,21,1.046,23,1.184,25,0.265,26,0.483,29,0.733,32,2.596,33,0.883,38,0.757,45,1.73,47,0.778,48,0.025,49,0.595,50,0.365,51,0.622,52,0.553,54,1.083,60,0.837,61,0.775,63,2.136,64,1.046,65,2.511,69,0.635,71,0.75,74,0.399,75,0.155,77,0.677,80,0.923,85,0.179,86,0.179,87,0.54,88,0.454,91,2.285,97,0.767,98,1.113,99,1.046,100,0.767,101,1.437,102,0.767,103,0.522,104,0.487,105,1.113,106,0.767,107,0.596,108,0.767,109,0.677,110,1.352,111,0.767,112,0.677,113,0.767,114,0.677,115,0.767,116,0.677,117,0.767,118,0.677,119,0.767,120,1.113,121,0.677,122,0.767,123,0.677,124,0.767,125,0.767,126,0.677,127,0.767,128,0.677,129,0.677,130,0.767,131,0.767,132,0.767,133,0.677,134,0.767,135,0.635,136,0.767,137,0.677,138,1.269,139,0.768,140,1.264,141,0.721,142,0.767,143,0.014,144,0.014,153,0.982,155,0.567,164,1.34,165,2.39,172,0.507,176,0.677,182,0.567,186,2.336,191,1.731,195,2.474,198,1.679,211,2.753,214,1.519,215,0.865,218,0.983,254,0.832,274,1.368,282,2.458,286,0.422,288,0.721,362,1.62,367,0.903,375,1.985,378,2.563,413,1.519,418,2.797,429,1.472,433,1.788,451,1.985,452,2.409,464,1.985,498,2.242,534,2.563,547,1.897,555,2.772,565,2.839,573,1.519,594,2.106,597,3.462,598,3.462,611,2.234,618,2.511,629,3.704,647,3.056,649,3.49,652,3.056,669,2.026,682,2.386,688,3.462,699,3.242,701,1.985,762,3.056,764,2.136,774,4.075,783,4.471,801,2.511,812,2.758,814,3.462,866,2.386,868,1.907,897,2.309,951,1.591,1019,2.753,1088,3.242,1177,3.462,1178,2.106,1223,2.309,1224,2.309,1228,4.161,1249,2.511,1266,2.309,1302,1.73,1303,2.378,1344,2.136,1486,2.511,1508,3.947,1511,2.753,1619,2.753,1713,3.947,1876,3.056,1896,2.511,1898,3.462,1952,4.471,2201,3.462,2211,3.462,2379,2.717,2382,3.354,2389,2.106,2409,3.056,2414,2.753,2422,3.056,2452,2.136,2458,3.795,2463,2.753,2467,2.753,2514,2.753,2525,2.511,2526,2.753,2527,2.511,2529,2.753,2613,5.109,2621,3.462,2629,4.075,2646,4.471,2683,2.386,2684,3.462,2695,2.386,2696,2.386,2697,2.386,2698,2.386,2700,3.462,2701,3.462,2702,3.462,2704,3.462,2707,5.126,2708,5.807,2709,4.801,2710,3.462,2711,3.462,2712,5.268,2713,4.471,2714,4.079,2715,4.079,2716,4.801,2717,4.801,2718,4.801,2719,2.811,2720,2.811,2721,4.079,2722,2.811,2723,2.811,2724,2.811,2725,4.079,2726,2.811,2727,4.079,2728,2.811,2729,2.811,2730,3.462,2731,2.811,2732,2.811,2733,4.079,2734,2.811,2735,4.079,2736,2.811,2737,4.079,2738,4.079,2739,2.811,2740,4.079,2741,2.811,2742,2.811,2743,2.811,2744,2.386,2745,2.811,2746,2.811,2747,2.811,2748,2.811,2749,2.811,2750,2.811,2751,2.811,2752,2.811,2753,2.811,2754,2.811,2755,2.811,2756,4.079,2757,4.079,2758,4.079]],["title/injectables/TaskListManager.html",[177,0.446,2759,2.601]],["body/injectables/TaskListManager.html",[3,0.165,4,0.144,8,0.144,13,0.668,15,0.943,25,0.257,26,0.456,29,0.362,33,0.889,47,0.817,48,0.025,49,0.581,50,0.368,51,0.581,52,0.581,54,0.716,59,2.02,60,0.872,61,0.949,64,0.989,71,0.861,74,0.292,75,0.144,83,3.427,85,0.165,86,0.165,87,0.553,88,1.13,92,1.267,107,0.818,139,0.788,143,0.013,144,0.013,155,0.537,164,2.188,172,0.563,173,0.974,177,0.496,179,0.711,182,0.946,184,1.034,191,1.267,209,1.75,215,1.077,221,2.408,225,0.929,226,2.374,246,2.89,254,0.451,256,1.636,258,1.75,276,0.911,282,2.522,286,0.882,288,1.456,312,1.951,313,4.254,319,2.02,323,2.02,344,1.182,348,1.349,350,1.532,351,1.636,362,2.017,367,0.925,391,1.267,401,2.211,405,2.211,408,1.758,410,1.758,413,2.336,415,2.603,418,1.75,420,1.781,433,1.437,440,1.267,441,2.974,444,2.183,447,1.532,507,2.607,512,2.183,545,2.397,579,1.75,606,3.1,663,2.89,669,2.308,838,0.911,868,2.702,902,2.304,909,3.274,911,2.211,922,2.89,936,3.274,960,1.603,975,1.758,988,3.805,1127,2.211,1134,2.211,1302,1.603,1303,2.115,1305,3.1,1310,3.069,1314,2.89,1339,4.698,1344,1.364,1351,2.763,1353,3.214,1355,3.489,1362,3.274,1363,3.274,1444,1.951,1445,3.805,1558,4.311,1596,3.274,1619,3.427,1630,2.89,1896,3.495,1954,2.89,1967,1.951,1974,2.211,1995,2.211,1996,2.211,2249,3.126,2379,2.334,2382,3.261,2458,3.495,2525,2.374,2527,2.374,2532,2.603,2569,2.211,2573,2.211,2707,5.198,2713,4.311,2744,2.211,2759,3.805,2760,3.857,2761,4.594,2762,4.594,2763,4.594,2764,4.594,2765,4.594,2766,5.079,2767,5.079,2768,5.079,2769,3.857,2770,5.079,2771,3.857,2772,5.079,2773,5.079,2774,3.857,2775,3.857,2776,5.079,2777,5.079,2778,5.079,2779,3.857,2780,3.857,2781,5.079,2782,2.604,2783,3.857,2784,3.857,2785,3.857,2786,3.857,2787,4.594,2788,2.604,2789,3.857,2790,5.079,2791,2.604,2792,3.857,2793,5.079,2794,3.857,2795,3.857,2796,2.604,2797,2.604,2798,3.857,2799,2.604,2800,3.857,2801,2.604,2802,3.857,2803,2.604,2804,3.857,2805,3.274,2806,2.604,2807,3.857,2808,5.079,2809,3.857,2810,5.877,2811,5.079,2812,3.857,2813,3.857,2814,2.604,2815,3.857,2816,3.857,2817,3.857,2818,3.857,2819,3.857,2820,2.604,2821,5.422,2822,5.422,2823,5.422,2824,5.422,2825,3.857,2826,2.604,2827,3.857,2828,2.604,2829,2.604,2830,2.604,2831,2.604,2832,2.604,2833,2.604,2834,2.604,2835,2.604,2836,4.594,2837,2.604,2838,4.594,2839,2.604,2840,2.604,2841,2.604,2842,2.604,2843,2.604,2844,3.857,2845,3.857,2846,2.604,2847,5.079,2848,2.604,2849,2.604,2850,2.604,2851,2.604,2852,2.604,2853,2.604,2854,2.604,2855,3.857,2856,3.857,2857,3.857,2858,3.857,2859,3.857,2860,2.604,2861,2.604,2862,2.604,2863,2.604,2864,2.604]],["title/injectables/TaskService.html",[177,0.446,1303,1.293]],["body/injectables/TaskService.html",[3,0.154,4,0.134,8,0.134,13,0.62,25,0.114,26,0.432,28,3.87,29,0.336,33,0.866,38,0.449,47,0.908,48,0.025,49,0.646,50,0.364,51,0.666,52,0.663,54,0.677,60,0.336,61,0.39,67,2.563,71,0.925,74,0.279,75,0.134,85,0.279,86,0.154,87,0.601,88,0.71,92,1.776,104,0.632,139,0.785,143,0.012,144,0.012,153,1.059,155,0.508,164,1.726,172,0.563,173,0.513,177,0.469,179,0.66,182,0.941,184,0.96,191,1.939,198,2.331,209,3.14,214,1.823,215,1.171,216,2.076,218,1.712,222,1.644,225,1.179,247,2.382,254,0.848,256,1.025,258,2.384,270,1.266,274,1.177,275,1.266,276,0.846,277,0.724,278,1.911,282,2.584,285,1.911,286,0.972,288,1.416,296,1.911,340,2.751,346,1.266,358,2.246,360,2.246,365,1.547,367,0.548,382,1.745,391,1.199,413,2.609,418,1.097,421,2.488,422,1.488,423,1.488,424,1.488,425,1.488,440,1.985,446,1.059,447,1.449,462,2.872,464,2.382,497,2.688,500,1.488,502,3.319,503,3.529,507,0.96,512,2.771,513,2.246,516,2.246,517,2.246,519,2.246,520,2.563,522,1.776,523,2.563,525,3.234,528,2.246,529,2.246,530,1.488,534,2.872,537,2.246,539,2.065,544,1.547,545,2.194,555,1.547,573,1.823,669,0.794,693,1.266,792,1.911,838,0.846,868,2.399,902,2.221,907,1.776,934,2.246,951,2.065,1164,3.097,1169,2.053,1303,1.359,1310,3.127,1337,3.303,1364,3.303,1421,2.563,1487,2.246,1600,2.463,1611,1.177,2038,2.463,2197,1.488,2210,3.303,2249,2.246,2266,3.303,2340,2.463,2379,2.813,2382,2.94,2388,2.734,2417,2.734,2452,1.266,2455,1.632,2456,1.812,2457,3.668,2458,3.901,2459,1.812,2460,1.812,2461,1.812,2462,1.812,2463,3.303,2464,1.812,2465,2.734,2466,2.463,2467,1.632,2468,3.293,2469,1.812,2470,1.812,2471,4.296,2472,3.293,2473,3.668,2474,3.293,2475,4.613,2476,2.734,2477,1.812,2478,2.734,2479,1.812,2480,3.668,2481,3.668,2482,2.734,2483,1.812,2484,2.734,2485,1.812,2486,1.812,2487,2.734,2488,1.812,2489,1.812,2490,1.812,2491,3.668,2492,2.734,2493,1.812,2494,1.812,2495,1.812,2496,2.734,2497,2.734,2498,1.812,2499,1.812,2500,1.812,2501,2.734,2502,1.812,2503,1.812,2504,4.423,2505,3.668,2506,2.734,2507,2.734,2508,2.734,2509,1.812,2510,2.734,2511,1.812,2512,2.734,2513,1.812,2514,2.463,2515,2.734,2516,2.734,2517,2.734,2518,1.812,2519,1.812,2520,1.812,2521,1.812,2522,1.812,2523,1.812,2524,1.812,2525,2.246,2526,3.303,2527,2.246,2528,3.668,2529,2.463,2530,1.812,2531,1.812,2532,2.463,2533,2.734,2534,2.734,2535,1.812,2536,1.812,2537,1.812,2538,1.812,2539,1.812,2540,1.812,2541,1.812,2542,1.812,2543,2.734,2544,3.293,2545,3.668,2546,3.668,2547,2.734,2548,3.668,2549,2.734,2550,1.812,2551,1.812,2553,3.097,2710,3.097,2711,3.097,2865,3.649,2866,3.649,2867,3.649,2868,3.649,2869,3.649,2870,3.649,2871,3.649,2872,3.649,2873,2.418,2874,2.418,2875,2.418,2876,2.418,2877,2.418,2878,2.418,2879,2.418,2880,2.418,2881,2.418,2882,2.418,2883,2.418,2884,2.418,2885,2.418,2886,2.418,2887,2.418,2888,2.418,2889,2.418,2890,2.418]],["title/interfaces/UserData.html",[277,0.689,279,2.343]],["body/interfaces/UserData.html",[3,0.212,4,0.185,8,0.185,13,0.856,15,1.145,25,0.158,26,0.545,29,0.464,32,2.37,35,1.747,38,1.056,44,1.243,45,1.415,46,2.252,48,0.025,49,0.456,50,0.315,51,0.563,52,0.33,54,0.619,59,1.747,60,0.464,64,0.856,69,1.192,71,0.891,74,0.379,75,0.185,77,0.804,85,0.293,86,0.212,87,0.586,88,0.964,143,0.016,144,0.016,150,2.252,153,1.712,154,3.378,158,1.513,161,1.415,162,3.579,163,2.412,164,1.869,165,1.514,170,2.5,171,1.747,172,0.52,173,0.707,174,1.747,175,1.243,176,1.486,177,0.592,179,0.911,182,0.982,183,2.252,185,2.5,186,1.624,187,2.252,188,2.5,189,4.027,190,2.832,191,1.096,192,3.56,193,2.5,194,1.181,195,1.415,196,3.952,197,2.832,198,2.158,199,2.832,200,2.5,201,2.832,203,2.252,205,2.832,206,2.832,208,5.368,209,3.004,211,4.164,212,2.607,214,1.243,215,1.206,216,2.617,217,4.612,218,2.39,219,4.026,221,1.415,222,1.582,224,2.832,225,1.437,226,3.246,227,2.832,229,2.832,230,2.832,231,2.832,232,2.832,233,2.832,234,3.91,235,2.054,236,2.5,238,1.243,239,3.91,240,2.832,241,4.612,243,4.477,244,2.753,246,2.5,247,1.624,249,1.415,250,2.832,251,5.676,253,2.832,254,0.986,255,1.611,256,1.415,257,2.762,258,2.393,259,2.832,260,2.832,261,2.252,263,2.832,264,2.832,265,2.832,266,2.832,267,2.832,268,2.832,269,2.832,270,1.747,271,2.832,272,2.252,273,2.832,274,1.624,275,1.747,276,1.167,277,1.047,278,2.412,279,4.414,280,5.238,281,5.238,282,2.223,283,2.832,284,2.832,285,3.312,286,1.004,287,3.91,288,1.715,289,3.91,290,3.91,291,3.91,292,4.828,293,3.91,294,3.91,295,2.986,296,3.125,297,4.477,298,3.91,299,3.91,300,3.91,301,3.91,302,3.91,303,2.832,304,2.832,305,2.832,306,4.828,307,2.832,308,2.832,309,2.832,310,2.832,311,2.832,312,2.5,313,4.828,314,3.91,315,2.832,316,2.832,317,2.832,318,3.108,319,2.412,320,2.832,321,2.832,322,2.832,323,1.747,324,3.108,325,2.832,326,3.91,327,2.5,328,2.832,329,2.762,330,3.91,331,2.832,332,2.832,333,2.054,334,1.889,335,2.832,336,2.5,337,2.5,338,2.252,339,2.832,341,1.624]],["title/coverage.html",[2891,4.017]],["body/coverage.html",[0,0.34,1,1.077,8,0.247,9,3.796,18,1.077,19,1.077,31,2.342,48,0.025,50,0.247,103,0.83,107,0.948,109,1.077,110,0.888,112,1.077,114,1.077,116,1.077,118,1.077,121,1.077,123,1.077,126,1.077,128,1.077,129,1.077,133,1.077,135,1.011,137,1.077,138,1.077,139,0.485,143,0.019,144,0.019,145,3.018,146,3.351,148,3.796,158,1.469,177,0.896,185,4.184,254,0.775,277,1.348,279,3.018,340,2.342,342,3.789,343,4.184,344,3.115,347,3.018,411,4.109,416,3.018,441,2.342,446,1.905,452,1.666,592,4.109,593,3.351,594,4.184,669,1.469,745,2.529,771,3.351,772,3.796,837,3.351,879,3.351,880,3.796,1071,2.752,1113,3.351,1114,3.796,1201,3.796,1293,3.351,1294,3.796,1295,3.796,1303,1.666,1379,3.018,1380,4.184,1471,3.925,1472,3.796,1479,3.796,1529,3.796,1655,3.796,1656,3.796,1657,3.796,1788,3.796,1841,3.351,1886,3.796,1887,3.796,1909,3.796,1910,3.796,1946,3.351,1947,3.796,2003,3.796,2004,3.796,2005,3.796,2231,3.796,2236,3.796,2379,2.218,2380,4.184,2381,3.018,2455,4.109,2610,3.796,2707,4.184,2708,3.796,2759,3.351,2805,3.796,2891,3.796,2892,4.472,2893,4.472,2894,4.472,2895,4.472,2896,4.472,2897,4.472,2898,5.584,2899,4.472,2900,5.584,2901,4.472,2902,4.472,2903,4.472,2904,4.472,2905,4.472,2906,4.472,2907,3.796,2908,4.472,2909,3.796,2910,5.584,2911,4.472,2912,4.472,2913,4.472,2914,4.472,2915,4.472,2916,6.377,2917,4.472,2918,6.089,2919,4.472,2920,4.472,2921,4.472,2922,4.472,2923,4.472,2924,4.472,2925,4.472,2926,4.472,2927,4.472,2928,4.472,2929,5.584,2930,6.089,2931,5.584,2932,4.472,2933,4.472,2934,5.584,2935,4.472,2936,4.472,2937,4.472,2938,4.472,2939,4.472,2940,4.472,2941,4.472,2942,4.472,2943,4.472,2944,4.472,2945,4.472,2946,6.089,2947,4.472,2948,4.472,2949,4.472,2950,4.472]],["title/dependencies.html",[2951,2.463,2952,3.543]],["body/dependencies.html",[48,0.025,75,0.302,77,1.314,80,1.793,143,0.021,144,0.021,276,1.908,429,2.857,698,2.476,2068,4.247,2213,4.632,2952,4.632,2953,6.293,2954,5.456,2955,7.111,2956,5.456,2957,5.456,2958,6.293,2959,5.456,2960,5.456,2961,5.456,2962,5.456,2963,5.456]],["title/miscellaneous/functions.html",[2208,3.127,2964,1.958]],["body/miscellaneous/functions.html",[25,0.259,47,0.762,48,0.023,49,0.542,50,0.303,51,0.542,52,0.542,143,0.021,144,0.021,161,2.323,172,0.442,175,2.04,218,1.915,222,1.617,323,2.868,411,3.696,427,4.256,428,3.696,430,3.696,431,3.696,432,2.675,433,2.04,434,3.696,435,3.371,436,4.103,437,3.57,438,4.103,439,3.371,440,1.799,442,4.103,837,4.725,2208,4.103,2964,3.696,2965,5.477]],["title/index.html",[25,0.137,2966,2.901,2967,2.901]],["body/index.html",[0,0.303,2,1.207,4,0.277,48,0.02,55,3.383,60,0.833,72,2.274,73,3.685,141,1.285,143,0.02,144,0.02,165,3.009,171,2.625,235,3.685,254,0.869,319,2.625,351,2.126,372,3.383,417,2.837,435,3.085,497,2.439,523,2.625,544,2.126,639,3.085,659,5.434,669,1.647,764,2.625,820,2.913,1185,3.383,1313,4.254,1395,2.837,1524,3.94,1534,3.755,1545,3.383,1553,4.486,1631,4.254,1683,3.755,1698,3.755,1763,4.254,1823,3.755,2030,4.254,2052,4.254,2068,3.383,2080,3.755,2197,3.085,2730,4.254,2968,6.778,2969,5.012,2970,6.402,2971,5.012,2972,6.778,2973,6.879,2974,6.879,2975,5.012,2976,5.987,2977,5.012,2978,5.012,2979,5.012,2980,5.987,2981,5.012,2982,5.012,2983,5.012,2984,5.012,2985,5.012,2986,5.012,2987,6.402,2988,5.012,2989,5.012,2990,5.012,2991,5.012,2992,5.012,2993,5.012,2994,5.012,2995,5.012,2996,5.987,2997,6.402,2998,5.012,2999,5.012,3000,5.012,3001,5.012,3002,6.402,3003,5.012,3004,6.879,3005,5.012,3006,5.987,3007,5.012,3008,5.012,3009,5.012,3010,5.012,3011,5.012,3012,5.012,3013,5.012]],["title/modules.html",[3014,4.017]],["body/modules.html",[48,0.022,143,0.022,144,0.022,3014,4.82]],["title/overview.html",[1545,3.194]],["body/overview.html",[2,1.357,48,0.022,143,0.022,144,0.022,145,3.803,184,2.238,341,2.742,712,1.538,748,4.222,1545,3.803,2184,4.783,3015,5.635]],["title/properties.html",[26,0.494,2951,2.463]],["body/properties.html",[26,0.67,48,0.023,143,0.022,144,0.022,2080,4.242,3016,5.662]],["title/miscellaneous/variables.html",[1971,3.127,2964,1.958]],["body/miscellaneous/variables.html",[15,0.988,25,0.252,48,0.025,50,0.294,60,0.74,61,0.859,72,2.979,143,0.021,144,0.021,745,1.982,1050,3.988,1099,4.518,1371,4.518,1427,3.818,1544,3.988,1971,3.988,2050,4.518,2907,4.518,2909,5.265,2964,3.592,3017,5.322,3018,5.322,3019,5.322,3020,5.322,3021,5.322,3022,5.322,3023,5.322,3024,5.322,3025,5.322,3026,5.322,3027,5.322,3028,5.322,3029,5.322,3030,5.322,3031,5.322,3032,5.322,3033,5.322,3034,5.322,3035,5.322,3036,5.322,3037,5.322,3038,5.322,3039,5.322,3040,5.322,3041,5.322,3042,5.322,3043,5.322,3044,5.322,3045,5.322,3046,5.322,3047,5.322,3048,5.322]]],"invertedIndex":[["",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":446,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":3016,"title":{},"body":{"properties.html":{}}}],["0.05",{"_index":2316,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.15.0",{"_index":2963,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":2360,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.2s",{"_index":1023,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["0.3",{"_index":1104,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.3s",{"_index":1105,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.4",{"_index":1108,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.5s",{"_index":1392,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["0.6",{"_index":2344,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.7s",{"_index":1906,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["0.8s",{"_index":2370,"title":{},"body":{"components/SignupComponent.html":{}}}],["0/1",{"_index":2910,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2949,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2900,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":1045,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0038ff",{"_index":361,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["007cee",{"_index":1081,"title":{},"body":{"components/ContactListComponent.html":{}}}],["00bcd4",{"_index":478,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0118acff",{"_index":490,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0288d1",{"_index":491,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["049484ff",{"_index":493,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["084c6bff",{"_index":495,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0px",{"_index":2315,"title":{},"body":{"components/SignupComponent.html":{}}}],["1",{"_index":712,"title":{"interfaces/Subtask-1.html":{}},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":2539,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["1.1",{"_index":2015,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.2",{"_index":2025,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.5vw",{"_index":1046,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1/1",{"_index":2940,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2936,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":748,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"overview.html":{}}}],["10/10",{"_index":2945,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":745,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":1099,"title":{},"body":{"components/ContactListComponent.html":{},"miscellaneous/variables.html":{}}}],["1000px",{"_index":1083,"title":{},"body":{"components/ContactListComponent.html":{}}}],["100px",{"_index":987,"title":{},"body":{"components/ContactListComponent.html":{}}}],["10px",{"_index":1061,"title":{},"body":{"components/ContactListComponent.html":{}}}],["12",{"_index":1428,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["12/13",{"_index":2931,"title":{},"body":{"coverage.html":{}}}],["12/15",{"_index":2899,"title":{},"body":{"coverage.html":{}}}],["120px",{"_index":2359,"title":{},"body":{"components/SignupComponent.html":{}}}],["12px",{"_index":1075,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["12vw",{"_index":1011,"title":{},"body":{"components/ContactListComponent.html":{}}}],["13/14",{"_index":2933,"title":{},"body":{"coverage.html":{}}}],["13/16",{"_index":2902,"title":{},"body":{"coverage.html":{}}}],["13/26",{"_index":2924,"title":{},"body":{"coverage.html":{}}}],["13px",{"_index":2363,"title":{},"body":{"components/SignupComponent.html":{}}}],["14/15",{"_index":2926,"title":{},"body":{"coverage.html":{}}}],["14/21",{"_index":2917,"title":{},"body":{"coverage.html":{}}}],["1440px",{"_index":2307,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":2345,"title":{},"body":{"components/SignupComponent.html":{}}}],["15/26",{"_index":2921,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":1055,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["16/17",{"_index":2929,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":1022,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["17",{"_index":1786,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["17/20",{"_index":2928,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":1047,"title":{},"body":{"components/ContactListComponent.html":{}}}],["18",{"_index":1429,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["18/19",{"_index":2919,"title":{},"body":{"coverage.html":{}}}],["18px",{"_index":2342,"title":{},"body":{"components/SignupComponent.html":{}}}],["19",{"_index":3015,"title":{},"body":{"overview.html":{}}}],["19.2.0",{"_index":2955,"title":{},"body":{"dependencies.html":{}}}],["19.2.12",{"_index":2969,"title":{},"body":{"index.html":{}}}],["19.2.14",{"_index":2953,"title":{},"body":{"dependencies.html":{}}}],["19/21",{"_index":2943,"title":{},"body":{"coverage.html":{}}}],["190px",{"_index":1084,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1976d2",{"_index":486,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["1:703986298510:web:8cb9707daf583f2153a3df",{"_index":3027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1fd7c1",{"_index":359,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["1px",{"_index":1051,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["1rem",{"_index":2324,"title":{},"body":{"components/SignupComponent.html":{}}}],["1vw",{"_index":1054,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2",{"_index":1602,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["2.1",{"_index":2036,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.2",{"_index":2045,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.3.0",{"_index":2961,"title":{},"body":{"dependencies.html":{}}}],["2.5vh",{"_index":2323,"title":{},"body":{"components/SignupComponent.html":{}}}],["2.5vw",{"_index":1021,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2/3",{"_index":2946,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2935,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":1442,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["200ms",{"_index":715,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["2025",{"_index":1787,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["20px",{"_index":1044,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2196f3",{"_index":474,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["21px",{"_index":1096,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22.5px",{"_index":1013,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22391",{"_index":1668,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["23/24",{"_index":2938,"title":{},"body":{"coverage.html":{}}}],["23/29",{"_index":2904,"title":{},"body":{"coverage.html":{}}}],["24/25",{"_index":2923,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":1008,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["25/35",{"_index":2913,"title":{},"body":{"coverage.html":{}}}],["25/42",{"_index":2897,"title":{},"body":{"coverage.html":{}}}],["250ms",{"_index":709,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["26",{"_index":2947,"title":{},"body":{"coverage.html":{}}}],["28px",{"_index":2337,"title":{},"body":{"components/SignupComponent.html":{}}}],["29abe2",{"_index":1106,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2a3647",{"_index":1064,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2px",{"_index":1066,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2s",{"_index":1845,"title":{},"body":{"components/LoginComponent.html":{}}}],["2vw",{"_index":1035,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["3",{"_index":1254,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["3.1",{"_index":2071,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.1",{"_index":2073,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.2",{"_index":2079,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.3",{"_index":2090,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3/3",{"_index":2934,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2906,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1371,"title":{},"body":{"injectables/DragDropManager.html":{},"miscellaneous/variables.html":{}}}],["3000",{"_index":1288,"title":{},"body":{"components/ContactsComponent.html":{}}}],["30px",{"_index":1095,"title":{},"body":{"components/ContactListComponent.html":{}}}],["32px",{"_index":1073,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["352px",{"_index":1009,"title":{},"body":{"components/ContactListComponent.html":{}}}],["360",{"_index":2601,"title":{},"body":{"components/SummaryComponent.html":{}}}],["36px",{"_index":1048,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["388e3c",{"_index":485,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3f51b5",{"_index":482,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3px",{"_index":2334,"title":{},"body":{"components/SignupComponent.html":{}}}],["3vw",{"_index":1007,"title":{},"body":{"components/ContactListComponent.html":{}}}],["4",{"_index":1622,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["4.1",{"_index":2134,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.2",{"_index":2144,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.3",{"_index":2152,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4",{"_index":2160,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.1",{"_index":2161,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.2",{"_index":2167,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4/4",{"_index":2944,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":2932,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1042,"title":{},"body":{"components/ContactListComponent.html":{}}}],["440px",{"_index":2319,"title":{},"body":{"components/SignupComponent.html":{}}}],["44px",{"_index":2357,"title":{},"body":{"components/SignupComponent.html":{}}}],["456px",{"_index":984,"title":{},"body":{"components/ContactListComponent.html":{}}}],["45px",{"_index":1074,"title":{},"body":{"components/ContactListComponent.html":{}}}],["46px",{"_index":1100,"title":{},"body":{"components/ContactListComponent.html":{}}}],["4caf50",{"_index":476,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["4px",{"_index":1072,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["4vw",{"_index":1025,"title":{},"body":{"components/ContactListComponent.html":{}}}],["5",{"_index":1427,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"miscellaneous/variables.html":{}}}],["5/19",{"_index":2948,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":2939,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":2915,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1071,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["500",{"_index":1443,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["500px",{"_index":2328,"title":{},"body":{"components/SignupComponent.html":{}}}],["5191daff",{"_index":480,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["560px",{"_index":2320,"title":{},"body":{"components/SignupComponent.html":{}}}],["56px",{"_index":1012,"title":{},"body":{"components/ContactListComponent.html":{}}}],["57",{"_index":2920,"title":{},"body":{"coverage.html":{}}}],["59",{"_index":2896,"title":{},"body":{"coverage.html":{}}}],["5c0582ff",{"_index":487,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["5vw",{"_index":2318,"title":{},"body":{"components/SignupComponent.html":{}}}],["6",{"_index":1667,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["6/6",{"_index":2941,"title":{},"body":{"coverage.html":{}}}],["6125f",{"_index":3025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebaseapp.com",{"_index":3033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebasestorage.app",{"_index":3029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["64px",{"_index":2311,"title":{},"body":{"components/SignupComponent.html":{}}}],["66",{"_index":2916,"title":{},"body":{"coverage.html":{}}}],["666",{"_index":2361,"title":{},"body":{"components/SignupComponent.html":{}}}],["6bb604ff",{"_index":496,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["6px",{"_index":1107,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["7",{"_index":2184,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"overview.html":{}}}],["7.8.0",{"_index":2959,"title":{},"body":{"dependencies.html":{}}}],["703986298510",{"_index":3035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["71",{"_index":2912,"title":{},"body":{"coverage.html":{}}}],["72px",{"_index":2310,"title":{},"body":{"components/SignupComponent.html":{}}}],["75",{"_index":2905,"title":{},"body":{"coverage.html":{}}}],["768px",{"_index":2309,"title":{},"body":{"components/SignupComponent.html":{}}}],["780px",{"_index":1086,"title":{},"body":{"components/ContactListComponent.html":{}}}],["79",{"_index":2903,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1878,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["80",{"_index":2898,"title":{},"body":{"coverage.html":{}}}],["80px",{"_index":997,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["81",{"_index":2901,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":2914,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2927,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":1049,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["9",{"_index":2221,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["90",{"_index":2942,"title":{},"body":{"coverage.html":{}}}],["90vw",{"_index":2325,"title":{},"body":{"components/SignupComponent.html":{}}}],["92",{"_index":2930,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":2925,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":2918,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":2937,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":2922,"title":{},"body":{"coverage.html":{}}}],["9c27b0",{"_index":473,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["9e9e9e",{"_index":756,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["9px",{"_index":994,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.dateobj!.gettime",{"_index":1461,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["a.key.localecompare(b.key",{"_index":977,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.name.localecompare(b.name",{"_index":976,"title":{},"body":{"components/ContactListComponent.html":{}}}],["absolute",{"_index":1069,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["abstractcontrol",{"_index":427,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["abuses",{"_index":2230,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accent",{"_index":2335,"title":{},"body":{"components/SignupComponent.html":{}}}],["accept",{"_index":2302,"title":{},"body":{"components/SignupComponent.html":{}}}],["acceptable",{"_index":2175,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["acceptance",{"_index":1677,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["access",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["accessing",{"_index":1679,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accessors",{"_index":624,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["accidental",{"_index":1318,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["accordance",{"_index":1719,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accordingly",{"_index":647,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["account",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["accounts",{"_index":2198,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accuracy",{"_index":1590,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["acknowledge",{"_index":1681,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["acquisition",{"_index":2138,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["act",{"_index":2013,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["action",{"_index":1317,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["actions",{"_index":1335,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["activated",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{}}}],["active",{"_index":828,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["activities",{"_index":1723,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["activity",{"_index":2095,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["actual_component",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["add",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["add/edit",{"_index":1977,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["addcontact",{"_index":1163,"title":{},"body":{"injectables/ContactService.html":{}}}],["addcontact(newcontact",{"_index":524,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc",{"_index":423,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(contactsref",{"_index":526,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc(subtasksref",{"_index":2500,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(tasksref",{"_index":2495,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["added",{"_index":522,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addedcontact",{"_index":785,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["adding",{"_index":1611,"title":{},"body":{"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["additional",{"_index":1631,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["address",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["addresses",{"_index":2193,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adds",{"_index":520,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addsubtask",{"_index":2417,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskService.html":{}}}],["addsubtask(colid",{"_index":2497,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtask",{"_index":2865,"title":{},"body":{"injectables/TaskService.html":{}}}],["addtask(newtask",{"_index":2492,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtaskcomponent",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["adequate",{"_index":2150,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adjust",{"_index":1219,"title":{},"body":{"components/ContactsComponent.html":{}}}],["adjusts",{"_index":645,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["advertising",{"_index":2225,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["advised",{"_index":1760,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["affiliates",{"_index":1769,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["again",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["against",{"_index":1775,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["agents",{"_index":1773,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["agree",{"_index":1682,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["aizasyawyou260exmo3445mltsqcjzrheg6aq9a",{"_index":3031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["akademie",{"_index":1556,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["align",{"_index":1015,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["allcontacts.find((contact",{"_index":732,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["allowed",{"_index":541,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["allows",{"_index":1916,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["along",{"_index":2636,"title":{},"body":{"components/TaskComponent.html":{}}}],["alphabetical",{"_index":938,"title":{},"body":{"components/ContactListComponent.html":{}}}],["alphabetically",{"_index":906,"title":{},"body":{"components/ContactListComponent.html":{}}}],["already",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"interfaces/UserData.html":{}}}],["amendments",{"_index":1687,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["amp",{"_index":1697,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["analysis",{"_index":2136,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["analytics",{"_index":2131,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["and/or",{"_index":1783,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["angular",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["angular's",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{}}}],["angular/animations",{"_index":698,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SummaryComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":2954,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/drag",{"_index":1343,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["angular/common",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":2956,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":2957,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/auth",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["angular/fire/firestore",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["angular/forms",{"_index":429,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":2958,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["animate",{"_index":697,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["animate('1.5s",{"_index":1391,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["animate('250ms",{"_index":1273,"title":{},"body":{"components/ContactsComponent.html":{}}}],["animate('2s",{"_index":1844,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["animation",{"_index":1220,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["animationdirection",{"_index":1204,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animationevent",{"_index":1238,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animations",{"_index":667,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["animationstate",{"_index":599,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["anonymized",{"_index":2202,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["another",{"_index":1626,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["apikey",{"_index":3030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["app.component.html",{"_index":22,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":2909,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appear",{"_index":1902,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["appearance",{"_index":2349,"title":{},"body":{"components/SignupComponent.html":{}}}],["appid",{"_index":3026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applicable",{"_index":821,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["application",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"index.html":{}}}],["applicationconfig",{"_index":3018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":1617,"title":{},"body":{"components/HelpComponent.html":{}}}],["arguments",{"_index":631,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["arising",{"_index":1762,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["array",{"_index":507,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["array.isarray(subtasklist",{"_index":2686,"title":{},"body":{"components/TaskComponent.html":{}}}],["arrays",{"_index":911,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["artifacts",{"_index":2990,"title":{},"body":{"index.html":{}}}],["ascending",{"_index":2810,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["aside",{"_index":1710,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ask",{"_index":2074,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["aspect",{"_index":1699,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["aspects",{"_index":1591,"title":{},"body":{"components/HelpComponent.html":{}}}],["asset",{"_index":2164,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["assign",{"_index":1158,"title":{},"body":{"injectables/ContactManager.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["assigned",{"_index":418,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["assignedto",{"_index":2468,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["assignees",{"_index":1620,"title":{},"body":{"components/HelpComponent.html":{}}}],["associated",{"_index":1713,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["assume",{"_index":2181,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["async",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["attaches",{"_index":1225,"title":{},"body":{"components/ContactsComponent.html":{}}}],["attempts",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth.service",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["auth/email",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/invalid",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/network",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/too",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/user",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/weak",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/wrong",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["authdomain",{"_index":3032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":2108,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["authenticated",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["authentication",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["authguard",{"_index":146,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["authservice",{"_index":158,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["auto",{"_index":991,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["automatic",{"_index":1325,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["automatically",{"_index":417,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["availability",{"_index":1588,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["available",{"_index":372,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/NavigationHistoryService.html":{},"index.html":{}}}],["avatar",{"_index":468,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["avatarcolors",{"_index":472,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["avoid",{"_index":543,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["await",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["awaitfeedback",{"_index":2761,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["awaitfeedbacklist",{"_index":1352,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["awaiting",{"_index":2609,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["awaitingfeedbackcount",{"_index":1403,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b",{"_index":975,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["b.dateobj!.gettime",{"_index":1462,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b3c511ff",{"_index":483,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["back",{"_index":1227,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["backend",{"_index":2211,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["background",{"_index":998,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["backgroundvisible",{"_index":1205,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["backtolist",{"_index":619,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["based",{"_index":579,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["beacons",{"_index":2092,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["before",{"_index":1836,"title":{},"body":{"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["behalf",{"_index":2064,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["behavior",{"_index":1952,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskDetailsComponent.html":{}}}],["behaviorsubject",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["behaviorsubject(false",{"_index":459,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["behaviorsubject(null",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["behind",{"_index":1264,"title":{},"body":{"components/ContactsComponent.html":{}}}],["bei",{"_index":2853,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["being",{"_index":464,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["belonging",{"_index":2456,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["benefit",{"_index":1546,"title":{},"body":{"components/HelpComponent.html":{}}}],["best",{"_index":1584,"title":{},"body":{"components/HelpComponent.html":{}}}],["better",{"_index":759,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{}}}],["between",{"_index":1259,"title":{},"body":{"components/ContactsComponent.html":{},"components/TaskComponent.html":{}}}],["billboard",{"_index":1560,"title":{},"body":{"components/HelpComponent.html":{}}}],["block",{"_index":1092,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["board",{"_index":1595,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{}}}],["board'},{'name",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["boardcomponent",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["boolean",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["bootcamp",{"_index":1554,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["border",{"_index":1050,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":2061,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["bottom",{"_index":996,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["bound",{"_index":2657,"title":{},"body":{"components/TaskComponent.html":{}}}],["box",{"_index":1101,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["breach",{"_index":1784,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["break",{"_index":2847,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["brightness(0",{"_index":1111,"title":{},"body":{"components/ContactListComponent.html":{}}}],["browser",{"_index":2068,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"dependencies.html":{},"index.html":{}}}],["browsing",{"_index":2055,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["btn",{"_index":725,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["build",{"_index":2987,"title":{},"body":{"index.html":{}}}],["builder",{"_index":791,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["buildthis",{"_index":2988,"title":{},"body":{"index.html":{}}}],["built",{"_index":1548,"title":{},"body":{"components/HelpComponent.html":{}}}],["business",{"_index":1580,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["button",{"_index":1003,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["c.email",{"_index":949,"title":{},"body":{"components/ContactListComponent.html":{}}}],["c.id",{"_index":1154,"title":{},"body":{"injectables/ContactManager.html":{}}}],["c.value",{"_index":385,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["c2185b",{"_index":492,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c303aaff",{"_index":489,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c44314ff",{"_index":479,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c90d0dff",{"_index":488,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calc(1.8vw",{"_index":2314,"title":{},"body":{"components/SignupComponent.html":{}}}],["calc(100",{"_index":1005,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calc(100dvh",{"_index":986,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calculate",{"_index":582,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calculates",{"_index":2587,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["callback",{"_index":1312,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["called",{"_index":661,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/TaskComponent.html":{}}}],["calling",{"_index":1502,"title":{},"body":{"components/HeaderComponent.html":{}}}],["campaigns",{"_index":2133,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["canactivate",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cancel",{"_index":802,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["cancels",{"_index":2415,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["cancelsubtask",{"_index":2416,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["cancelsubtaskedit",{"_index":2445,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["capitalize",{"_index":2548,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalize(text",{"_index":2549,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalized",{"_index":2038,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalizes",{"_index":2547,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["card",{"_index":1618,"title":{},"body":{"components/HelpComponent.html":{}}}],["cards",{"_index":1612,"title":{},"body":{"components/HelpComponent.html":{}}}],["case",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["catch",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["catch(error",{"_index":2753,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["categories",{"_index":357,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category",{"_index":340,"title":{"interfaces/Category.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["category.color",{"_index":389,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.label",{"_index":386,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.value",{"_index":381,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["categorymanager",{"_index":347,"title":{"injectables/CategoryManager.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"coverage.html":{}}}],["caution",{"_index":1637,"title":{},"body":{"components/HelpComponent.html":{}}}],["ccc",{"_index":388,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["cdk",{"_index":1336,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdk_drag_config",{"_index":3041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cdkdragdrop",{"_index":1332,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdkdragmove",{"_index":1323,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cellphone",{"_index":2057,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["center",{"_index":1017,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["certain",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["change",{"_index":1309,"title":{},"body":{"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{}}}],["changed",{"_index":2658,"title":{},"body":{"components/TaskComponent.html":{}}}],["changes",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["changes['task",{"_index":2681,"title":{},"body":{"components/TaskComponent.html":{}}}],["changes['task'].firstchange",{"_index":2682,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus",{"_index":2614,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus(status",{"_index":2644,"title":{},"body":{"components/TaskComponent.html":{}}}],["changetaskstatus",{"_index":1298,"title":{},"body":{"injectables/DragDropManager.html":{},"components/TaskComponent.html":{}}}],["changetaskstatus(taskid",{"_index":1304,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["character",{"_index":908,"title":{},"body":{"components/ContactListComponent.html":{}}}],["characters",{"_index":1879,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["check",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["checkbox",{"_index":2346,"title":{},"body":{"components/SignupComponent.html":{}}}],["checked.png",{"_index":2354,"title":{},"body":{"components/SignupComponent.html":{}}}],["checkiftouchdevice",{"_index":1798,"title":{},"body":{"components/LoginComponent.html":{}}}],["checks",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"interfaces/UserData.html":{}}}],["choices",{"_index":2114,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["choose",{"_index":3010,"title":{},"body":{"index.html":{}}}],["city",{"_index":2076,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["claim",{"_index":1776,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["clamp(12px",{"_index":1006,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["clamp(14px",{"_index":1043,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(20px",{"_index":1024,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(24px",{"_index":2322,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(32px",{"_index":2313,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(440px",{"_index":2317,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(48px",{"_index":1010,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(4px",{"_index":1053,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(8px",{"_index":1034,"title":{},"body":{"components/ContactListComponent.html":{}}}],["class",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["clean",{"_index":2515,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["cleans",{"_index":809,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clear",{"_index":835,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["clearall",{"_index":393,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["cleareditingtask",{"_index":2546,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["clearinputs",{"_index":781,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clears",{"_index":391,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["clearselection",{"_index":560,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["cli",{"_index":2968,"title":{},"body":{"index.html":{}}}],["click",{"_index":640,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{}}}],["clicking",{"_index":635,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HelpComponent.html":{}}}],["clicks",{"_index":1491,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["close",{"_index":1249,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closecontactdetails",{"_index":607,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["closed",{"_index":801,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closedetailsoverlay",{"_index":1957,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedetailsoverlay(event",{"_index":1968,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedotsmenu",{"_index":2624,"title":{},"body":{"components/TaskComponent.html":{}}}],["closeoverlay",{"_index":786,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closes",{"_index":378,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closetaskdetails",{"_index":2716,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["closing",{"_index":806,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closure",{"_index":1991,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["cloud",{"_index":2207,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["code",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["codes",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["colid",{"_index":2496,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collaborate",{"_index":1603,"title":{},"body":{"components/HelpComponent.html":{}}}],["collect",{"_index":2085,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collected",{"_index":2066,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collecting",{"_index":2070,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collection",{"_index":421,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.firestore",{"_index":500,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.gettasksref",{"_index":2477,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["color",{"_index":345,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["colorerror",{"_index":2362,"title":{},"body":{"components/SignupComponent.html":{}}}],["colors",{"_index":469,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["column",{"_index":2321,"title":{},"body":{"components/SignupComponent.html":{}}}],["combinelatest",{"_index":702,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["come",{"_index":3008,"title":{},"body":{"index.html":{}}}],["comes",{"_index":2089,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["comma",{"_index":1135,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["command",{"_index":3002,"title":{},"body":{"index.html":{}}}],["commercially",{"_index":2174,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["commonmodule",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["company",{"_index":2049,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["compare",{"_index":916,"title":{},"body":{"components/ContactListComponent.html":{}}}],["compile",{"_index":2989,"title":{},"body":{"index.html":{}}}],["complete",{"_index":2030,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["completed",{"_index":1241,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{}}}],["completion",{"_index":2452,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["compliance",{"_index":2120,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{},"overview.html":{}}}],["computer",{"_index":2056,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["conditions",{"_index":1684,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["confirm",{"_index":2258,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmation",{"_index":2396,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["confirmpassword",{"_index":2276,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirms",{"_index":2412,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["confirmsubtask",{"_index":2552,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["confirmsubtask(event",{"_index":2413,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["connection",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"components/LegalNoticeComponent.html":{},"interfaces/UserData.html":{}}}],["consent",{"_index":2143,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["consequential",{"_index":1751,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["considered",{"_index":1515,"title":{},"body":{"components/HeaderComponent.html":{}}}],["consistent",{"_index":578,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["console.error('error",{"_index":951,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["console.error(err",{"_index":530,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["console.log(err",{"_index":576,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["console.warn",{"_index":2851,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["const",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["constructor",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["constructor(auth",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["constructor(contactservice",{"_index":626,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{}}}],["constructor(fb",{"_index":1804,"title":{},"body":{"components/LoginComponent.html":{}}}],["constructor(firestore",{"_index":1169,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["constructor(form",{"_index":787,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(navigationservice",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["constructor(private",{"_index":838,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["constructor(router",{"_index":1921,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{}}}],["constructor(taskservice",{"_index":1302,"title":{},"body":{"injectables/DragDropManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["constructs",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"components/SidebarComponent.html":{}}}],["contact",{"_index":110,"title":{"interfaces/Contact.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contact's",{"_index":653,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["contact.email",{"_index":765,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["contact.id",{"_index":733,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["contact.name",{"_index":762,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contact.name).join",{"_index":1162,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["contact.name.charat(0).touppercase",{"_index":971,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact.phone",{"_index":769,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["contact?.email",{"_index":981,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact?.name",{"_index":980,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactdetailscomponent",{"_index":109,"title":{"components/ContactDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactform",{"_index":777,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactformcomponent",{"_index":112,"title":{"components/ContactFormComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactid",{"_index":1178,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacting",{"_index":2158,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["contactlist",{"_index":2613,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactlist.length",{"_index":2706,"title":{},"body":{"components/TaskComponent.html":{}}}],["contactlist.slice(0",{"_index":2703,"title":{},"body":{"components/TaskComponent.html":{}}}],["contactlistcomponent",{"_index":114,"title":{"components/ContactListComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactmanager",{"_index":1113,"title":{"injectables/ContactManager.html":{}},"body":{"injectables/ContactManager.html":{},"coverage.html":{}}}],["contactname",{"_index":580,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactref",{"_index":586,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contacts",{"_index":498,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacts'},{'name",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacts.component.html",{"_index":1202,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.component.scss",{"_index":1203,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.filter(contact",{"_index":968,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.find(c",{"_index":948,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.push",{"_index":515,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactscomponent",{"_index":116,"title":{"components/ContactsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactselected",{"_index":894,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice",{"_index":452,"title":{"injectables/ContactService.html":{}},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactservice.getinitials(contact.name",{"_index":2704,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactservice.getinitials(contact?.name",{"_index":979,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice.getinitials(contacttoedit.name",{"_index":869,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactsref",{"_index":510,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactssubscription",{"_index":884,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacttoedit",{"_index":778,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactvisible",{"_index":600,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["contact’s",{"_index":581,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contain",{"_index":1030,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["container",{"_index":1091,"title":{},"body":{"components/ContactListComponent.html":{}}}],["containing",{"_index":549,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["contains",{"_index":434,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1019,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["context",{"_index":1340,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["contextual",{"_index":2631,"title":{},"body":{"components/TaskComponent.html":{}}}],["contracts",{"_index":2118,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["control",{"_index":437,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["control.errors",{"_index":1872,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['email",{"_index":1874,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['minlength",{"_index":1877,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['minlength'].requiredlength",{"_index":2298,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['pattern",{"_index":2299,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['required",{"_index":1873,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['requiredtrue",{"_index":2301,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.touched",{"_index":1871,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.value",{"_index":443,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["control?.touched",{"_index":2295,"title":{},"body":{"components/SignupComponent.html":{}}}],["controls",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["conversion",{"_index":2461,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["convert",{"_index":2527,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["convertdate",{"_index":2710,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(date",{"_index":2529,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(task.date",{"_index":2756,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["converts",{"_index":2525,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["cookie",{"_index":2110,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["cookies",{"_index":2051,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["copy",{"_index":1929,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["copyrighted",{"_index":1714,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["corresponding",{"_index":654,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["corresponds",{"_index":1496,"title":{},"body":{"components/HeaderComponent.html":{}}}],["cost",{"_index":1779,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["count",{"_index":1405,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counts",{"_index":1404,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counttasksbystatus",{"_index":2578,"title":{},"body":{"components/SummaryComponent.html":{}}}],["counttasksbystatus(tasks",{"_index":1406,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["coverage",{"_index":2891,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":876,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{}}}],["created",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["createdat",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createerror",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creates",{"_index":819,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["createuserwithemailandpassword",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createuserwithemailandpassword(this.auth",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creating",{"_index":792,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["creation",{"_index":2206,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["credentials",{"_index":1827,"title":{},"body":{"components/LoginComponent.html":{}}}],["crud",{"_index":794,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["current",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["currently",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["currenttext",{"_index":2431,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["currentuser",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["currentuser.uid",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["currentuseremail",{"_index":885,"title":{},"body":{"components/ContactListComponent.html":{}}}],["currentusersubject",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["cursor",{"_index":1058,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["custom",{"_index":430,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["d",{"_index":2605,"title":{},"body":{"components/SummaryComponent.html":{}}}],["damage",{"_index":1778,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["damages",{"_index":1753,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["dark",{"_index":1001,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["data",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["database",{"_index":2201,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["date",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["date().gethours",{"_index":1426,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date(date).gettime",{"_index":2843,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date(t.date",{"_index":1456,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date.getfullyear",{"_index":2541,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["date.gettime",{"_index":2842,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date.todate",{"_index":2840,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date.todate().gettime",{"_index":2841,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["datea",{"_index":2836,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["dateb",{"_index":2838,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["dateobj",{"_index":1453,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["day",{"_index":2535,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["day}/${month}/${year",{"_index":2542,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["dd/mm/yyyy",{"_index":2528,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["ddg",{"_index":2014,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["deadline",{"_index":2607,"title":{},"body":{"components/SummaryComponent.html":{}}}],["decoration",{"_index":2356,"title":{},"body":{"components/SignupComponent.html":{}}}],["decorators",{"_index":672,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["dedicated",{"_index":1549,"title":{},"body":{"components/HelpComponent.html":{}}}],["default",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":1766,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["defined",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["definitions",{"_index":2035,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["delay",{"_index":1315,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["delayed",{"_index":1816,"title":{},"body":{"components/LoginComponent.html":{}}}],["delays",{"_index":1242,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{}}}],["delete",{"_index":573,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deleteaccount",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deletecontact",{"_index":782,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["deletecontact(docid",{"_index":574,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deleted",{"_index":2100,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["deletedoc",{"_index":425,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(docref).catch(err",{"_index":2511,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(this.getsinglecontactsref(docid)).catch((err",{"_index":575,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deletedoc(this.getsingletaskref(docid)).catch(console.error",{"_index":2513,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletes",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["deletesubtask",{"_index":2553,"title":{},"body":{"injectables/SubtaskManager.html":{},"injectables/TaskService.html":{}}}],["deletesubtask(id",{"_index":2420,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["deletesubtask(taskid",{"_index":2510,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletetask",{"_index":2711,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deletetask(docid",{"_index":2512,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletetask(event",{"_index":2727,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["deleteuser",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleteuser(user",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleting",{"_index":693,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletion",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["demand",{"_index":1777,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["dependencies",{"_index":2952,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":1420,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["describes",{"_index":2017,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["describing",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["description",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["descriptive",{"_index":2248,"title":{},"body":{"components/SignupComponent.html":{}}}],["deselect",{"_index":1144,"title":{},"body":{"injectables/ContactManager.html":{}}}],["design",{"_index":1700,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["designed",{"_index":1547,"title":{},"body":{"components/HelpComponent.html":{}}}],["desktop",{"_index":1260,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["destroy",{"_index":2766,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["destroyed",{"_index":662,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/LoginComponent.html":{}}}],["destruction",{"_index":811,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["detail",{"_index":1228,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["detailed",{"_index":2730,"title":{},"body":{"components/TaskDetailsComponent.html":{},"index.html":{}}}],["details",{"_index":140,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details'},{'name",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component",{"_index":1270,"title":{},"body":{"components/ContactsComponent.html":{}}}],["details.component.html",{"_index":597,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.scss",{"_index":598,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.ts",{"_index":594,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["details.component.ts:107",{"_index":2726,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:114",{"_index":642,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:116",{"_index":2739,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:125",{"_index":678,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:130",{"_index":2728,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:136",{"_index":691,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:143",{"_index":666,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:147",{"_index":2736,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:162",{"_index":2731,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:174",{"_index":2729,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:197",{"_index":660,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:206",{"_index":674,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:217",{"_index":670,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:232",{"_index":657,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:242",{"_index":651,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:250",{"_index":648,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:257",{"_index":668,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:40",{"_index":2722,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:45",{"_index":2723,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:50",{"_index":2724,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:55",{"_index":2720,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:60",{"_index":2719,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:65",{"_index":682,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.ts:66",{"_index":681,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:67",{"_index":680,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:68",{"_index":684,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:69",{"_index":685,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:70",{"_index":688,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.ts:71",{"_index":687,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:72",{"_index":689,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:73",{"_index":683,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:75",{"_index":630,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:76",{"_index":628,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:80",{"_index":2742,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:81",{"_index":2741,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:88",{"_index":2732,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:90",{"_index":633,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:96",{"_index":2734,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details/contact",{"_index":593,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["details/task",{"_index":2708,"title":{},"body":{"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["detecting",{"_index":1519,"title":{},"body":{"components/HeaderComponent.html":{}}}],["detection",{"_index":1822,"title":{},"body":{"components/LoginComponent.html":{}}}],["detects",{"_index":1490,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/TaskComponent.html":{}}}],["determine",{"_index":37,"title":{},"body":{"components/AppComponent.html":{}}}],["determines",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["developed",{"_index":1693,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["developer",{"_index":1555,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["development",{"_index":1553,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["device",{"_index":679,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["devices",{"_index":1629,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["diagnostic",{"_index":2084,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["diagnostics",{"_index":2088,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["different",{"_index":2785,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["digital",{"_index":2012,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["direct",{"_index":1747,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["direction",{"_index":1221,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["directive",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["directives",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["directly",{"_index":900,"title":{},"body":{"components/ContactListComponent.html":{}}}],["directors",{"_index":1772,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["directory",{"_index":2992,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["disclaimer",{"_index":1731,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["disclose",{"_index":2169,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["disclosure",{"_index":2019,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["display",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["displayed",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["displayname",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["displays",{"_index":1825,"title":{},"body":{"components/LoginComponent.html":{},"components/SidebarComponent.html":{}}}],["disputes",{"_index":2155,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["dist",{"_index":2991,"title":{},"body":{"index.html":{}}}],["distance",{"_index":3048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distributes",{"_index":2807,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distribution",{"_index":1705,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["doc",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["doc(collection(this.firestore",{"_index":2479,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.firestore",{"_index":2507,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.getcontactsref",{"_index":505,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["doc.data",{"_index":517,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc.id",{"_index":516,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docid",{"_index":503,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref",{"_index":525,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref.id",{"_index":528,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["document",{"_index":502,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{}}}],["document.queryselector('.subtask",{"_index":2434,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["document:click",{"_index":622,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["document:click(event",{"_index":632,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["documentation",{"_index":2892,"title":{},"body":{"coverage.html":{}}}],["documentdata",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["domsgen",{"_index":1676,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["done",{"_index":1355,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["donecount",{"_index":1401,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["donelist",{"_index":1354,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["don´t",{"_index":874,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["dots",{"_index":2632,"title":{},"body":{"components/TaskComponent.html":{}}}],["dr",{"_index":1663,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["drag",{"_index":1296,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dragdropmanager",{"_index":1293,"title":{"injectables/DragDropManager.html":{}},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["dragging",{"_index":1326,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["drags",{"_index":1319,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dragstartthreshold",{"_index":3043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drop",{"_index":1295,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["dropdown",{"_index":353,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{}}}],["dropping",{"_index":1628,"title":{},"body":{"components/HelpComponent.html":{}}}],["due",{"_index":1619,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["duration",{"_index":2205,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["during",{"_index":1892,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["dynamic",{"_index":2213,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1218,"title":{},"body":{"components/ContactsComponent.html":{}}}],["e",{"_index":767,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["e.g",{"_index":692,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["e2e",{"_index":3005,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":3007,"title":{},"body":{"index.html":{}}}],["e91e63",{"_index":481,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["each",{"_index":1630,"title":{},"body":{"components/HelpComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["ease",{"_index":710,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["edge",{"_index":1328,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["edit",{"_index":565,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["editcontact",{"_index":465,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["editcontactsubject",{"_index":463,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["editcontactsubscription",{"_index":779,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["edited",{"_index":462,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["editing",{"_index":451,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["editingsubtaskid",{"_index":2384,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editingsubtasktext",{"_index":2385,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editingtask",{"_index":2472,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["edits",{"_index":2423,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editsubtask",{"_index":2554,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["editsubtask(id",{"_index":2425,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editsubtaskprompt",{"_index":2555,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["editsubtaskprompt(id",{"_index":2432,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["edittask",{"_index":2717,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["educational",{"_index":1576,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["effect",{"_index":2185,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["effective",{"_index":1562,"title":{},"body":{"components/HelpComponent.html":{}}}],["effectively",{"_index":1640,"title":{},"body":{"components/HelpComponent.html":{}}}],["efficiency",{"_index":1568,"title":{},"body":{"components/HelpComponent.html":{}}}],["el.iscompleted).length",{"_index":2688,"title":{},"body":{"components/TaskComponent.html":{}}}],["electronic",{"_index":2176,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["element",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["elementref",{"_index":627,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{}}}],["ellipsis",{"_index":1080,"title":{},"body":{"components/ContactListComponent.html":{}}}],["elsewhere",{"_index":1492,"title":{},"body":{"components/HeaderComponent.html":{}}}],["email",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["email.trim",{"_index":859,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["emits",{"_index":555,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["emitted",{"_index":1247,"title":{},"body":{"components/ContactsComponent.html":{}}}],["emitting",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["employees",{"_index":1774,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["empties",{"_index":2783,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["empty",{"_index":2249,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["emptyarrays",{"_index":2767,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["enabled",{"_index":1809,"title":{},"body":{"components/LoginComponent.html":{}}}],["encrypted",{"_index":2194,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["end",{"_index":3004,"title":{},"body":{"index.html":{}}}],["enforcement",{"_index":2156,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["enhancements",{"_index":1901,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["enjoy",{"_index":1649,"title":{},"body":{"components/HelpComponent.html":{}}}],["ensure",{"_index":1583,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["enter",{"_index":1875,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["entered",{"_index":2264,"title":{},"body":{"components/SignupComponent.html":{}}}],["entity",{"_index":2069,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["entry",{"_index":815,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["err",{"_index":529,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["error",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["errorcode",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["errormessage",{"_index":1791,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["errors",{"_index":1829,"title":{},"body":{"components/LoginComponent.html":{}}}],["escape",{"_index":2451,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["essential",{"_index":2107,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["etc",{"_index":1621,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["evaluate",{"_index":2649,"title":{},"body":{"components/TaskComponent.html":{}}}],["even",{"_index":1759,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["event",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.container",{"_index":1357,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.container.data",{"_index":1358,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.container.id",{"_index":1348,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.currentindex",{"_index":1360,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.item.data",{"_index":1345,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.key",{"_index":2449,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["event.pointerposition.y",{"_index":1368,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.preventdefault",{"_index":2409,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["event.previouscontainer",{"_index":1356,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previouscontainer.data",{"_index":1361,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previousindex",{"_index":1359,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.stoppropagation",{"_index":2414,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.target",{"_index":718,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskComponent.html":{}}}],["event.tostate",{"_index":1290,"title":{},"body":{"components/ContactsComponent.html":{}}}],["event.urlafterredirects",{"_index":96,"title":{},"body":{"components/AppComponent.html":{}}}],["eventcoalescing",{"_index":3020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":629,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["events",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["example",{"_index":2973,"title":{},"body":{"index.html":{}}}],["examples",{"_index":2105,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["excluding",{"_index":2659,"title":{},"body":{"components/TaskComponent.html":{}}}],["execute",{"_index":2998,"title":{},"body":{"index.html":{}}}],["exemplary",{"_index":1752,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["exercise",{"_index":1577,"title":{},"body":{"components/HelpComponent.html":{}}}],["exist",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["existing",{"_index":531,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["expected",{"_index":1992,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["experience",{"_index":1586,"title":{},"body":{"components/HelpComponent.html":{}}}],["expiry",{"_index":2104,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["exploring",{"_index":1594,"title":{},"body":{"components/HelpComponent.html":{}}}],["export",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["express",{"_index":1738,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["extensive",{"_index":1579,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["extra",{"_index":546,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["extracts",{"_index":1184,"title":{},"body":{"injectables/ContactService.html":{}}}],["eye",{"_index":2376,"title":{},"body":{"components/SignupComponent.html":{}}}],["f44336",{"_index":477,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["f5f5f5",{"_index":1063,"title":{},"body":{"components/ContactListComponent.html":{}}}],["fab",{"_index":1090,"title":{},"body":{"components/ContactListComponent.html":{}}}],["facilitate",{"_index":2065,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["fade",{"_index":1889,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["failed",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["fails",{"_index":1830,"title":{},"body":{"components/LoginComponent.html":{}}}],["failure",{"_index":2266,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["fallback",{"_index":1498,"title":{},"body":{"components/HeaderComponent.html":{}}}],["false",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["family",{"_index":1037,"title":{},"body":{"components/ContactListComponent.html":{}}}],["fb",{"_index":1806,"title":{},"body":{"components/LoginComponent.html":{}}}],["features",{"_index":2214,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["feedback",{"_index":1353,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["feel",{"_index":1644,"title":{},"body":{"components/HelpComponent.html":{}}}],["fees",{"_index":1781,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fetches",{"_index":1177,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskDetailsComponent.html":{}}}],["fetching",{"_index":2629,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["ff5722",{"_index":484,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ff9800",{"_index":475,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ffa000",{"_index":494,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["fff",{"_index":2368,"title":{},"body":{"components/SignupComponent.html":{}}}],["ffffff",{"_index":1065,"title":{},"body":{"components/ContactListComponent.html":{}}}],["field",{"_index":1813,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["fields",{"_index":542,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["files",{"_index":2052,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["fill",{"_index":1605,"title":{},"body":{"components/HelpComponent.html":{}}}],["fills",{"_index":834,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["filter",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/TaskListManager.html":{}}}],["filter((t",{"_index":1450,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["filtered",{"_index":2795,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filtering",{"_index":2760,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filters",{"_index":2792,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["find",{"_index":1311,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["finished",{"_index":1838,"title":{},"body":{"components/LoginComponent.html":{},"injectables/OverlayManager.html":{}}}],["firebase",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["firebase’s",{"_index":2220,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["firestore",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["firestoretimestamp",{"_index":1379,"title":{"interfaces/FirestoreTimestamp.html":{}},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["first",{"_index":907,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{}}}],["firstload",{"_index":601,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["fitness",{"_index":1742,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fixed",{"_index":1097,"title":{},"body":{"components/ContactListComponent.html":{}}}],["flag",{"_index":1495,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["flex",{"_index":1014,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["flickering",{"_index":1244,"title":{},"body":{"components/ContactsComponent.html":{}}}],["flow",{"_index":1569,"title":{},"body":{"components/HelpComponent.html":{}}}],["following",{"_index":1683,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["font",{"_index":1036,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["footer",{"_index":1473,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer'},{'name",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["footer.component.html",{"_index":1475,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.component.scss",{"_index":1476,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer/footer.component",{"_index":1840,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["footercomponent",{"_index":118,"title":{"components/FooterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["forget",{"_index":875,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form",{"_index":432,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["form'},{'name",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["form.component",{"_index":1271,"title":{},"body":{"components/ContactsComponent.html":{}}}],["form.component.html",{"_index":775,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.scss",{"_index":776,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts",{"_index":772,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{}}}],["form.component.ts:102",{"_index":816,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:113",{"_index":817,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:139",{"_index":804,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:146",{"_index":807,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:32",{"_index":795,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:38",{"_index":799,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:43",{"_index":823,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:48",{"_index":826,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:53",{"_index":789,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:60",{"_index":825,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:66",{"_index":813,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:79",{"_index":831,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:93",{"_index":808,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form/contact",{"_index":771,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["format",{"_index":2533,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["formatdate",{"_index":2866,"title":{},"body":{"injectables/TaskService.html":{}}}],["formatdate(date",{"_index":2534,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["formats",{"_index":2532,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["formatted",{"_index":2526,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["formbuilder",{"_index":788,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formgroup",{"_index":822,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formsmodule",{"_index":774,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["found",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["four",{"_index":1601,"title":{},"body":{"components/HelpComponent.html":{}}}],["frame",{"_index":2312,"title":{},"body":{"components/SignupComponent.html":{}}}],["framework",{"_index":3009,"title":{},"body":{"index.html":{}}}],["fraud",{"_index":2109,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["free",{"_index":1645,"title":{},"body":{"components/HelpComponent.html":{}}}],["friendly",{"_index":1812,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["fs12",{"_index":1068,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["fs14",{"_index":2347,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs20",{"_index":2338,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs47",{"_index":2332,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":419,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{}}}],["fullcontact",{"_index":527,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["function",{"_index":441,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["functionality",{"_index":2111,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["functions",{"_index":2208,"title":{"miscellaneous/functions.html":{}},"body":{"components/PrivacyPolicyComponent.html":{},"miscellaneous/functions.html":{}}}],["future",{"_index":1900,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["futuretasks",{"_index":1449,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.filter",{"_index":1467,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.length",{"_index":1459,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.sort((a",{"_index":1460,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks[0].dateobj",{"_index":1464,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["gap",{"_index":1020,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["general",{"_index":2016,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["generate",{"_index":659,"title":{},"body":{"components/ContactDetailsComponent.html":{},"index.html":{}}}],["generated",{"_index":523,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["generates",{"_index":577,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["generator",{"_index":2024,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["german",{"_index":2011,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["getanimationdirection",{"_index":1958,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getauth",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getawaitfeedbacktasks",{"_index":2768,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getbackgroundvisible",{"_index":1959,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getcategories",{"_index":373,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorycolor",{"_index":387,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorytext",{"_index":383,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcleanjson",{"_index":1164,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updated",{"_index":2516,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updatedcontact",{"_index":550,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcompletedsubtaskscount",{"_index":2615,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcompletedsubtaskscount(subtasklist",{"_index":2647,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontactbyid",{"_index":1165,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactbyid(contactid",{"_index":1175,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactcolor",{"_index":608,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["getcontactcolor(contact",{"_index":1129,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactcolor(contactname",{"_index":585,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactcolor(name",{"_index":650,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["getcontactinitials",{"_index":1117,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactinitials(contact",{"_index":1131,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactlist",{"_index":2616,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontacts",{"_index":508,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactsref",{"_index":499,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcurrentuser",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["getcurrentuserdata",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getcurrentusername",{"_index":1483,"title":{},"body":{"components/HeaderComponent.html":{}}}],["getcurrentusername().charat(0).touppercase",{"_index":1526,"title":{},"body":{"components/HeaderComponent.html":{}}}],["getdatatoedit",{"_index":780,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["getdatevalue",{"_index":2769,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdatevalue(date",{"_index":2784,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdoc",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["getdoc(contactref).then(snapshot",{"_index":588,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdoc(doc(this.firestore",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getdocs",{"_index":426,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdonetasks",{"_index":2770,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdragdelay",{"_index":1299,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["geteditingsubtaskid",{"_index":2400,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["geteditingsubtasktext",{"_index":2402,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["geteditingtask",{"_index":2545,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["geterrormessage",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["geterrormessage(errorcode",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getfilteredtasks",{"_index":2771,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfilteredtasks(status",{"_index":2789,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfirestore",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getgreeting",{"_index":1424,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["gethistory",{"_index":1918,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getinitials",{"_index":609,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinitials(contact.name",{"_index":761,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["getinitials(name",{"_index":656,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinprogresstasks",{"_index":2772,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getisanimationdisabled",{"_index":690,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["getisdotsmenuopen",{"_index":2674,"title":{},"body":{"components/TaskComponent.html":{}}}],["getoverlayvisible",{"_index":1960,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getpreviousurl",{"_index":1919,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getremainingcontactnames",{"_index":1118,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["getremainingcontactnames(remainingcontacts",{"_index":1133,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["gets",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["getselectedcategory",{"_index":363,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getselectedcontacts",{"_index":1119,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedcontactstext",{"_index":1120,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedtask",{"_index":1961,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowaddoredittask",{"_index":1962,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowcategorydropdown",{"_index":369,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getshowcontactdropdown",{"_index":1121,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getshowsubtaskconfirmation",{"_index":2397,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["getshowtaskdetails",{"_index":1963,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getsinglecontactsref",{"_index":1166,"title":{},"body":{"injectables/ContactService.html":{}}}],["getsinglecontactsref(docid",{"_index":504,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getsingletaskref",{"_index":2867,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskref(docid",{"_index":2478,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtaskinput",{"_index":2393,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["getsubtasks",{"_index":2388,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskService.html":{}}}],["getsubtasks(taskid",{"_index":2487,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtasksbytaskid",{"_index":2773,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask",{"_index":2774,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask(selectedtask",{"_index":2798,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask",{"_index":2775,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask(taskid",{"_index":2800,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksref",{"_index":2868,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsubtasksref(subcolid",{"_index":2476,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasklist",{"_index":2776,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettasks",{"_index":2481,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasksref",{"_index":2473,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getting",{"_index":2966,"title":{"index.html":{}},"body":{}}],["gettodotasks",{"_index":2777,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettotaltaskcount",{"_index":2599,"title":{},"body":{"components/SummaryComponent.html":{}}}],["getvalidationmessage",{"_index":1799,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('confirmpassword",{"_index":2304,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('email",{"_index":1881,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('name",{"_index":2303,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('password",{"_index":1882,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'confirmpassword",{"_index":2378,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'email",{"_index":1884,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'name",{"_index":2377,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'password",{"_index":1885,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(field",{"_index":1810,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["given",{"_index":902,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["glance",{"_index":2603,"title":{},"body":{"components/SummaryComponent.html":{}}}],["gmbh",{"_index":1695,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["go",{"_index":1604,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["goback",{"_index":1532,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["good",{"_index":1422,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["goodwill",{"_index":1756,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["google",{"_index":2189,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google´s",{"_index":2219,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google’s",{"_index":2215,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["gotoboard",{"_index":2579,"title":{},"body":{"components/SummaryComponent.html":{}}}],["greeting",{"_index":1399,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingshown",{"_index":1437,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingstate",{"_index":1394,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["group",{"_index":824,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["group.get('confirmpassword')?.value",{"_index":2281,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.get('password')?.value",{"_index":2280,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.key",{"_index":978,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial",{"_index":889,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial(contacts",{"_index":903,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouped",{"_index":933,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupedcontacts",{"_index":886,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouping",{"_index":923,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups",{"_index":905,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial",{"_index":972,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].push(contact",{"_index":973,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].sort((a",{"_index":974,"title":{},"body":{"components/ContactListComponent.html":{}}}],["guarantee",{"_index":1587,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["guard",{"_index":145,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guest",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["guest123",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guest@join.com",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guestemail",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guestpassword",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guide",{"_index":1541,"title":{},"body":{"components/HelpComponent.html":{}}}],["guidelines",{"_index":1686,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["h2",{"_index":2330,"title":{},"body":{"components/SignupComponent.html":{}}}],["h4",{"_index":1033,"title":{},"body":{"components/ContactListComponent.html":{}}}],["hamburg",{"_index":1669,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["handle",{"_index":2009,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["handledragmove",{"_index":1300,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledragmove(event",{"_index":1322,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop",{"_index":1301,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop(event",{"_index":1331,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handler",{"_index":1510,"title":{},"body":{"components/HeaderComponent.html":{}}}],["handles",{"_index":348,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["handling",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["harass",{"_index":1724,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harm",{"_index":1725,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harmless",{"_index":1768,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["hash",{"_index":583,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hasn't",{"_index":1818,"title":{},"body":{"components/LoginComponent.html":{}}}],["hasn’t",{"_index":1890,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["hasselectedcategory",{"_index":390,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["header",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["header'},{'name",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["header.component",{"_index":1842,"title":{},"body":{"components/LoginComponent.html":{}}}],["header.component.html",{"_index":1480,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.scss",{"_index":1481,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.ts",{"_index":1887,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["header.component.ts:50",{"_index":1903,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:56",{"_index":1897,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:61",{"_index":1895,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:69",{"_index":1888,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header/header.component",{"_index":79,"title":{},"body":{"components/AppComponent.html":{}}}],["header/login",{"_index":1841,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["headercomponent",{"_index":19,"title":{"components/HeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["height",{"_index":985,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["help",{"_index":1527,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["help'},{'name",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["help.component.html",{"_index":1530,"title":{},"body":{"components/HelpComponent.html":{}}}],["help.component.scss",{"_index":1531,"title":{},"body":{"components/HelpComponent.html":{}}}],["helpbuilding",{"_index":2986,"title":{},"body":{"index.html":{}}}],["helpcomponent",{"_index":121,"title":{"components/HelpComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["helper",{"_index":937,"title":{},"body":{"components/ContactListComponent.html":{}}}],["here",{"_index":1542,"title":{},"body":{"components/HelpComponent.html":{}}}],["hex",{"_index":655,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["hexadecimal",{"_index":584,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hidden",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hideform",{"_index":570,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hides",{"_index":569,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["hiding",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/ContactsComponent.html":{}}}],["highlight",{"_index":2355,"title":{},"body":{"components/SignupComponent.html":{}}}],["highly",{"_index":1561,"title":{},"body":{"components/HelpComponent.html":{}}}],["history",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["history.service",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["history.service.ts",{"_index":1910,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["history.service.ts:16",{"_index":1922,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:42",{"_index":1928,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:51",{"_index":1931,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:63",{"_index":1932,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["hold",{"_index":1767,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["holding",{"_index":1935,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["holds",{"_index":932,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hook",{"_index":1224,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["hostlistener",{"_index":700,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('document:click",{"_index":673,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('window:resize",{"_index":677,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["hostlisteners",{"_index":621,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hour",{"_index":1425,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["hover",{"_index":1062,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["html",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["htmlelement",{"_index":719,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskComponent.html":{}}}],["htmlinputelement",{"_index":2435,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["http://localhost:4200",{"_index":2977,"title":{},"body":{"index.html":{}}}],["human",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["icon",{"_index":2341,"title":{},"body":{"components/SignupComponent.html":{}}}],["icon.toggle",{"_index":2375,"title":{},"body":{"components/SignupComponent.html":{}}}],["id",{"_index":413,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["identifiable",{"_index":2060,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identification",{"_index":471,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["identified",{"_index":2059,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifier",{"_index":416,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"coverage.html":{}}}],["identifiers",{"_index":2083,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifying",{"_index":899,"title":{},"body":{"components/ContactListComponent.html":{}}}],["ids",{"_index":2467,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["illegal",{"_index":1722,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["image",{"_index":1026,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["img",{"_index":1094,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["implements",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["implied",{"_index":1739,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["important",{"_index":1093,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{}}}],["imports",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["imprint",{"_index":1662,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["improve",{"_index":2023,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["inboard",{"_index":2608,"title":{},"body":{"components/SummaryComponent.html":{}}}],["incidental",{"_index":1749,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["include",{"_index":1004,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["includes",{"_index":351,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["including",{"_index":544,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["indemnify",{"_index":1765,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["indemnity",{"_index":1764,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1513,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["indicating",{"_index":1248,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["indicator",{"_index":1828,"title":{},"body":{"components/LoginComponent.html":{}}}],["indirect",{"_index":1748,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["individual",{"_index":1615,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["infinite",{"_index":2372,"title":{},"body":{"components/SignupComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["info&#64;michelle",{"_index":1646,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["info@michelle",{"_index":1653,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["information",{"_index":764,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["infrastructure",{"_index":2216,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["infringement",{"_index":1745,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["init",{"_index":2662,"title":{},"body":{"components/TaskComponent.html":{}}}],["initial",{"_index":970,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["initialization",{"_index":2733,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["initializeanimation",{"_index":1800,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["initializeapp",{"_index":3023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializeform",{"_index":1801,"title":{},"body":{"components/LoginComponent.html":{}}}],["initializes",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["initials",{"_index":658,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["initiates",{"_index":2430,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["injectable",{"_index":177,"title":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["injectables",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"overview.html":{}}}],["injecting",{"_index":790,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["injects",{"_index":1486,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["inline",{"_index":1985,"title":{},"body":{"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["inprogress",{"_index":2762,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["inprogresscount",{"_index":1402,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["inprogresslist",{"_index":1350,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["input",{"_index":433,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"miscellaneous/functions.html":{}}}],["input::placeholder",{"_index":2339,"title":{},"body":{"components/SignupComponent.html":{}}}],["input:focus",{"_index":2366,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox",{"_index":2348,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox\"]:checked",{"_index":2352,"title":{},"body":{"components/SignupComponent.html":{}}}],["inputelement",{"_index":2433,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.focus",{"_index":2437,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.setselectionrange(inputelement.value.length",{"_index":2438,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.value",{"_index":2436,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.value.length",{"_index":2439,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputs",{"_index":2621,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["insensitive",{"_index":2794,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["instance",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["instanceof",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["intangible",{"_index":1757,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intended",{"_index":1578,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["inter",{"_index":1038,"title":{},"body":{"components/ContactListComponent.html":{}}}],["inter400",{"_index":1067,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["inter700",{"_index":2331,"title":{},"body":{"components/SignupComponent.html":{}}}],["interact",{"_index":1607,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["interaction",{"_index":454,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["interactions",{"_index":1730,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["interface",{"_index":277,"title":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["interfaces",{"_index":341,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{},"overview.html":{}}}],["internal",{"_index":1934,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["internet",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["interpretation",{"_index":2034,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["intimidate",{"_index":1727,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intuitive",{"_index":1574,"title":{},"body":{"components/HelpComponent.html":{}}}],["invalid",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["invert(1",{"_index":1112,"title":{},"body":{"components/ContactListComponent.html":{}}}],["investigate",{"_index":2171,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["ip",{"_index":2067,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["irreversible",{"_index":1638,"title":{},"body":{"components/HelpComponent.html":{}}}],["isanimationdisabled",{"_index":625,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["iscompleted",{"_index":2457,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["iscontactchange",{"_index":739,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["iscontactselected",{"_index":1122,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscontactselected(contact",{"_index":1142,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscurrentuser",{"_index":890,"title":{},"body":{"components/ContactListComponent.html":{}}}],["iscurrentuser(contact",{"_index":913,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isdeleting",{"_index":602,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["isdotsmenuopen",{"_index":2627,"title":{},"body":{"components/TaskComponent.html":{}}}],["isediting",{"_index":603,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["isfirestoretimestamp",{"_index":2580,"title":{},"body":{"components/SummaryComponent.html":{}}}],["isfirestoretimestamp(obj",{"_index":1411,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["isloading",{"_index":1792,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["isloggedin",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["ismobile",{"_index":604,"title":{},"body":{"components/ContactDetailsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["isselected",{"_index":891,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isselected(contact",{"_index":917,"title":{},"body":{"components/ContactListComponent.html":{}}}],["issmallscreen",{"_index":2002,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["issue",{"_index":1814,"title":{},"body":{"components/LoginComponent.html":{}}}],["istouchdevice",{"_index":1793,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["item",{"_index":2819,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["items",{"_index":1016,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["japanese",{"_index":1557,"title":{},"body":{"components/HelpComponent.html":{}}}],["jenny",{"_index":1675,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["join",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["joins",{"_index":2652,"title":{},"body":{"components/TaskComponent.html":{}}}],["json",{"_index":540,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["july",{"_index":1785,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["jurisdiction",{"_index":2147,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["justify",{"_index":1018,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["kanban",{"_index":1523,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["karma",{"_index":2999,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1911,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["keeps",{"_index":1923,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["keine",{"_index":766,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["key",{"_index":960,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["keyasc",{"_index":887,"title":{},"body":{"components/ContactListComponent.html":{}}}],["keyboard",{"_index":2407,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["keyboardevent",{"_index":2448,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["keyframes",{"_index":2373,"title":{},"body":{"components/SignupComponent.html":{}}}],["keys",{"_index":910,"title":{},"body":{"components/ContactListComponent.html":{}}}],["kind",{"_index":1737,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["label",{"_index":346,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["language",{"_index":2112,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["last",{"_index":1913,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["later",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["law",{"_index":2021,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["lawful",{"_index":1717,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["laws",{"_index":1720,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["layout",{"_index":646,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["leaks",{"_index":665,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["left",{"_index":2329,"title":{},"body":{"components/SignupComponent.html":{}}}],["legal",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["legally",{"_index":2159,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["legalnoticecomponent",{"_index":123,"title":{"components/LegalNoticeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["legend",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["length",{"_index":1470,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["letter",{"_index":934,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["level",{"_index":2464,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["leverages",{"_index":1570,"title":{},"body":{"components/HelpComponent.html":{}}}],["liability",{"_index":1734,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["liable",{"_index":1746,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["lifecycle",{"_index":1223,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["light",{"_index":999,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["limit",{"_index":1566,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["limitation",{"_index":1733,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["limited",{"_index":1740,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["linear",{"_index":2371,"title":{},"body":{"components/SignupComponent.html":{}}}],["link",{"_index":2364,"title":{},"body":{"components/SignupComponent.html":{}}}],["links",{"_index":2177,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["list",{"_index":669,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{},"index.html":{}}}],["list'},{'name",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["list.component",{"_index":1269,"title":{},"body":{"components/ContactsComponent.html":{}}}],["list.component.html",{"_index":883,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.scss",{"_index":882,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts",{"_index":880,"title":{},"body":{"components/ContactListComponent.html":{},"coverage.html":{}}}],["list.component.ts:109",{"_index":914,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:117",{"_index":926,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:127",{"_index":918,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:134",{"_index":924,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:143",{"_index":904,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:157",{"_index":935,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:164",{"_index":901,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:27",{"_index":921,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:48",{"_index":898,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:61",{"_index":931,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:66",{"_index":939,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:71",{"_index":930,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:76",{"_index":929,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:78",{"_index":928,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:79",{"_index":940,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:84",{"_index":895,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:92",{"_index":927,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:99",{"_index":919,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list/contact",{"_index":879,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["listed",{"_index":1690,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["listen",{"_index":1927,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["listener",{"_index":1217,"title":{},"body":{"components/ContactsComponent.html":{}}}],["lists",{"_index":1339,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["literal",{"_index":909,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["llc",{"_index":2190,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["load",{"_index":814,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["loadassignedcontacts",{"_index":2712,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["loading",{"_index":922,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"injectables/TaskListManager.html":{}}}],["loads",{"_index":1896,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadsubtasks",{"_index":2713,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadtasks",{"_index":2778,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["local",{"_index":2971,"title":{},"body":{"index.html":{}}}],["log",{"_index":1528,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{}}}],["logged",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["login",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["login'},{'name",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["login.component.html",{"_index":1789,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":1790,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":126,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["loginform",{"_index":1794,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginheadercomponent",{"_index":128,"title":{"components/LoginHeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["logins",{"_index":2199,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["logo",{"_index":1817,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["logostate",{"_index":1795,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["logout",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"interfaces/UserData.html":{}}}],["logs",{"_index":1501,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["long",{"_index":1880,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["lookup",{"_index":2804,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["loss",{"_index":1754,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["losses",{"_index":1758,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["low",{"_index":2465,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["mail",{"_index":768,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["main",{"_index":2333,"title":{},"body":{"components/SignupComponent.html":{}}}],["maintain",{"_index":2115,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["making",{"_index":1980,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manage",{"_index":1572,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["management",{"_index":354,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["manager.ts",{"_index":344,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["manager.ts:101",{"_index":2572,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:102",{"_index":1307,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:104",{"_index":403,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:105",{"_index":1134,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:111",{"_index":397,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{}}}],["manager.ts:112",{"_index":1128,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:12",{"_index":1150,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{}}}],["manager.ts:123",{"_index":2814,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:124",{"_index":2564,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:129",{"_index":1988,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:13",{"_index":1127,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:132",{"_index":2563,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:133",{"_index":2806,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:14",{"_index":1995,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:142",{"_index":1969,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:149",{"_index":2567,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:15",{"_index":1996,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:156",{"_index":1993,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:158",{"_index":2568,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:16",{"_index":1997,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:17",{"_index":409,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:170",{"_index":2569,"title":{},"body":{"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:18",{"_index":410,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:180",{"_index":2803,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:186",{"_index":2574,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:19",{"_index":1967,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:196",{"_index":2801,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:198",{"_index":2565,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:20",{"_index":408,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:207",{"_index":2571,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:209",{"_index":2799,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:21",{"_index":1314,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:219",{"_index":2820,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:22",{"_index":2577,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:221",{"_index":2576,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:229",{"_index":2782,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:231",{"_index":2566,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:27",{"_index":1146,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:28",{"_index":401,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:29",{"_index":1972,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:32",{"_index":1334,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:34",{"_index":1141,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:35",{"_index":405,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:36",{"_index":1973,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:39",{"_index":2796,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:41",{"_index":1148,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:42",{"_index":402,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:43",{"_index":1974,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:47",{"_index":2788,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:48",{"_index":1149,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:49",{"_index":406,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:50",{"_index":1978,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:54",{"_index":2797,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:56",{"_index":398,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:57",{"_index":1976,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:63",{"_index":407,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:64",{"_index":1975,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:65",{"_index":2791,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:70",{"_index":1143,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:71",{"_index":404,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:74",{"_index":1994,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:77",{"_index":2570,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:78",{"_index":1140,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{}}}],["manager.ts:80",{"_index":400,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:83",{"_index":1989,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:84",{"_index":2575,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:87",{"_index":1132,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:91",{"_index":2573,"title":{},"body":{"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:92",{"_index":399,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:96",{"_index":1130,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{}}}],["manages",{"_index":793,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["managing",{"_index":447,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["many",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["map",{"_index":703,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["map((t",{"_index":1452,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["maps",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["marco",{"_index":1671,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["margin",{"_index":992,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["match",{"_index":2259,"title":{},"body":{"components/SignupComponent.html":{}}}],["matchedcontact",{"_index":947,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matches",{"_index":915,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matching",{"_index":144,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1715,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["math.round((completed",{"_index":2691,"title":{},"body":{"components/TaskComponent.html":{}}}],["max",{"_index":983,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["maximize",{"_index":1567,"title":{},"body":{"components/HelpComponent.html":{}}}],["maximum",{"_index":1930,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["meaning",{"_index":1559,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["meanings",{"_index":2039,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["media",{"_index":1085,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["media(max",{"_index":1082,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["medium",{"_index":2340,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["memory",{"_index":664,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["menu",{"_index":638,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["menuopen",{"_index":605,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["menuref",{"_index":1482,"title":{},"body":{"components/HeaderComponent.html":{}}}],["merchantability",{"_index":1741,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["merger",{"_index":2128,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["message",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["messages",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["messagingsenderid",{"_index":3034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["method",{"_index":1563,"title":{},"body":{"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["methods",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["metrics",{"_index":2602,"title":{},"body":{"components/SummaryComponent.html":{}}}],["michelle",{"_index":1664,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["milliseconds",{"_index":1321,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["min",{"_index":1076,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["minimum",{"_index":2297,"title":{},"body":{"components/SignupComponent.html":{}}}],["miscellaneous",{"_index":2964,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mismatched",{"_index":2247,"title":{},"body":{"components/SignupComponent.html":{}}}],["missing",{"_index":872,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["mmmm",{"_index":2604,"title":{},"body":{"components/SummaryComponent.html":{}}}],["mobile",{"_index":637,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["mobilemenu",{"_index":720,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mobilemenu?.contains(target",{"_index":727,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mobileoptions",{"_index":722,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mobileoptions?.contains(target",{"_index":728,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mode",{"_index":827,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["modification",{"_index":1704,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["modify",{"_index":2979,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3014,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monitor",{"_index":2116,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["month",{"_index":2537,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["more",{"_index":435,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["morning",{"_index":1423,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["mouse",{"_index":1493,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mouseevent",{"_index":1488,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mousey",{"_index":1367,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["move",{"_index":1634,"title":{},"body":{"components/HelpComponent.html":{}}}],["moved",{"_index":1390,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["moveiteminarray",{"_index":1341,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["moves",{"_index":1624,"title":{},"body":{"components/HelpComponent.html":{}}}],["moving",{"_index":1623,"title":{},"body":{"components/HelpComponent.html":{}}}],["name",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["name.trim",{"_index":858,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["namefor",{"_index":2983,"title":{},"body":{"index.html":{}}}],["names",{"_index":1138,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["native",{"_index":2460,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["naumann",{"_index":1674,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["navigate",{"_index":1534,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["navigateback",{"_index":1920,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["navigates",{"_index":1537,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["navigation",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["navigationend",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["navigationhistoryservice",{"_index":31,"title":{"injectables/NavigationHistoryService.html":{}},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["navigationservice",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["navigator.maxtouchpoints",{"_index":1851,"title":{},"body":{"components/LoginComponent.html":{}}}],["near",{"_index":1327,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["necessary",{"_index":2106,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["need",{"_index":1597,"title":{},"body":{"components/HelpComponent.html":{}}}],["needs",{"_index":2197,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["network",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["new",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"index.html":{}}}],["newcontact",{"_index":521,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["newemail",{"_index":2261,"title":{},"body":{"components/SignupComponent.html":{}}}],["newly",{"_index":796,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{}}}],["newname",{"_index":2263,"title":{},"body":{"components/SignupComponent.html":{}}}],["news",{"_index":2124,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["newstatus",{"_index":1346,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["newsubtask",{"_index":2418,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["newtask",{"_index":2491,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["newtext",{"_index":2424,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["newtext.trim",{"_index":2429,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["next",{"_index":736,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["nextdate",{"_index":1463,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdate.gettime",{"_index":1469,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdeadlinecount",{"_index":1398,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdeadlinedate",{"_index":1397,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextsubtaskid",{"_index":2383,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["ng",{"_index":2974,"title":{},"body":{"index.html":{}}}],["ngfor",{"_index":2816,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["ngonchanges",{"_index":2617,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngonchanges(changes",{"_index":2654,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngondestroy",{"_index":610,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{}}}],["ngoninit",{"_index":611,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["nice",{"_index":1433,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nocontactvisible",{"_index":620,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["non",{"_index":1744,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["none",{"_index":988,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"injectables/TaskListManager.html":{}}}],["note",{"_index":1575,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["notice",{"_index":1478,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["notice'},{'name",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["notice.component.html",{"_index":1658,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.scss",{"_index":1659,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts",{"_index":1657,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notice.component.ts:19",{"_index":1660,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts:31",{"_index":1661,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice/legal",{"_index":1656,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notifications",{"_index":2123,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notify",{"_index":2166,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notonlywhitespace",{"_index":837,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["notonlywhitespace(control",{"_index":442,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["now",{"_index":1448,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{}}}],["nowrap",{"_index":1079,"title":{},"body":{"components/ContactListComponent.html":{}}}],["null",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":420,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["number.max_safe_integer",{"_index":2787,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["numbers",{"_index":2300,"title":{},"body":{"components/SignupComponent.html":{}}}],["numeric",{"_index":2786,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["obj",{"_index":1410,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["obj.todate",{"_index":1412,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["object",{"_index":440,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["objects",{"_index":2653,"title":{},"body":{"components/TaskComponent.html":{}}}],["obligations",{"_index":2154,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["observable",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["observable((observer",{"_index":509,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observable(observer",{"_index":2482,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.error(error",{"_index":519,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(contacts",{"_index":518,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observer.next(subtasks",{"_index":2490,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(tasks",{"_index":2486,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observes",{"_index":2480,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["occurred",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["offers",{"_index":2125,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["officers",{"_index":1771,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["oh",{"_index":873,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["oldest",{"_index":1925,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["onaddnewcontact",{"_index":892,"title":{},"body":{"components/ContactListComponent.html":{}}}],["onauthstatechanged",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onauthstatechanged(this.auth",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onbacktolist",{"_index":612,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{}}}],["onbacktologin",{"_index":2242,"title":{},"body":{"components/SignupComponent.html":{}}}],["once",{"_index":1606,"title":{},"body":{"components/HelpComponent.html":{}}}],["onchanges",{"_index":2676,"title":{},"body":{"components/TaskComponent.html":{}}}],["onclose",{"_index":783,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["oncontactadded",{"_index":1209,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactadded(newcontact",{"_index":1229,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactselect",{"_index":893,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselect(contact",{"_index":925,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselected",{"_index":1210,"title":{},"body":{"components/ContactsComponent.html":{}}}],["ondeletecontact",{"_index":613,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["ondestroy",{"_index":596,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["ondocumentclick",{"_index":614,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["ondocumentclick(event",{"_index":671,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["one",{"_index":1185,"title":{},"body":{"injectables/ContactService.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"index.html":{}}}],["oneditcontact",{"_index":615,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["onguestlogin",{"_index":1802,"title":{},"body":{"components/LoginComponent.html":{}}}],["oninit",{"_index":595,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["onlogin",{"_index":1803,"title":{},"body":{"components/LoginComponent.html":{}}}],["onnocontactvisible",{"_index":1211,"title":{},"body":{"components/ContactsComponent.html":{}}}],["onoverlayanimationdone",{"_index":1212,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onoverlayanimationdone(event",{"_index":1237,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onresize",{"_index":616,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["onresize(event",{"_index":676,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["onsnapshot",{"_index":422,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.getsubtasksref(taskid",{"_index":2488,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.gettasksref",{"_index":2483,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsubmit",{"_index":784,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["onsubtaskeditkeydown",{"_index":2556,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["onsubtaskeditkeydown(event",{"_index":2447,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["onsubtaskenter",{"_index":2557,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["onsubtaskenter(event",{"_index":2408,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["onsubtaskinputclick",{"_index":2405,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["onsubtasktoggle",{"_index":2714,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["onsubtasktoggle(subtask",{"_index":2735,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["ontouchstart",{"_index":1850,"title":{},"body":{"components/LoginComponent.html":{}}}],["oops",{"_index":870,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["opacity",{"_index":708,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["open",{"_index":639,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"index.html":{}}}],["openaddoreditoverlay",{"_index":1964,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["openaddoreditoverlay(event",{"_index":1983,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opendotsmenu",{"_index":2625,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler",{"_index":2618,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler(event",{"_index":2663,"title":{},"body":{"components/TaskComponent.html":{}}}],["opened",{"_index":2641,"title":{},"body":{"components/TaskComponent.html":{}}}],["openedittask",{"_index":2715,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedittask(event",{"_index":2738,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedmenutaskid",{"_index":2622,"title":{},"body":{"components/TaskComponent.html":{}}}],["opening/closing",{"_index":1948,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opens",{"_index":675,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["opentaskdetail",{"_index":1965,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetail(selectedtask",{"_index":1987,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetails",{"_index":2619,"title":{},"body":{"components/TaskComponent.html":{}}}],["opentaskdetails(task",{"_index":2665,"title":{},"body":{"components/TaskComponent.html":{}}}],["operational",{"_index":2217,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["operations",{"_index":350,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["operator",{"_index":2227,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["optimize",{"_index":2817,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["optimizes",{"_index":2994,"title":{},"body":{"index.html":{}}}],["option",{"_index":1632,"title":{},"body":{"components/HelpComponent.html":{}}}],["optional",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":724,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["order",{"_index":1596,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["orders",{"_index":2119,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["os",{"_index":2086,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["otherwise",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["output",{"_index":699,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outputs",{"_index":618,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outside",{"_index":636,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["over",{"_index":2027,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["overflow",{"_index":989,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["overlay",{"_index":800,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["overlaymanager",{"_index":1946,"title":{"injectables/OverlayManager.html":{}},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["overlays",{"_index":1949,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overlayvisible",{"_index":1953,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overview",{"_index":1545,"title":{"overview.html":{}},"body":{"components/HelpComponent.html":{},"index.html":{},"overview.html":{}}}],["owned",{"_index":1701,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ownership",{"_index":1692,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["package",{"_index":2951,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":995,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["page",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["pageloaded",{"_index":1796,"title":{},"body":{"components/LoginComponent.html":{}}}],["pages",{"_index":2081,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["palummieri",{"_index":1672,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["param",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":2475,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["part",{"_index":1551,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["partial",{"_index":551,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["particular",{"_index":1743,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["partners",{"_index":1770,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["party",{"_index":2033,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["password",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["passwordmismatch",{"_index":2292,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwords",{"_index":2195,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["passwordsdontmatch",{"_index":2282,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator",{"_index":2243,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator(group",{"_index":2256,"title":{},"body":{"components/SignupComponent.html":{}}}],["path",{"_index":1933,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["percentage",{"_index":2669,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted",{"_index":2620,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted(subtasklist",{"_index":2667,"title":{},"body":{"components/TaskComponent.html":{}}}],["perform",{"_index":2117,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["performance",{"_index":1763,"title":{},"body":{"components/LegalNoticeComponent.html":{},"index.html":{}}}],["periodically",{"_index":2187,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["permanently",{"_index":1635,"title":{},"body":{"components/HelpComponent.html":{}}}],["permitted",{"_index":2226,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persistent",{"_index":2101,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persists",{"_index":1308,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["person",{"_index":1728,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["person.svg",{"_index":1028,"title":{},"body":{"components/ContactListComponent.html":{}}}],["personal",{"_index":1608,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["personally",{"_index":2075,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["phone",{"_index":414,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["phone.trim",{"_index":860,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["pipe(filter((event",{"_index":90,"title":{},"body":{"components/AppComponent.html":{}}}],["pipe(filter(event",{"_index":1936,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["pipes",{"_index":2985,"title":{},"body":{"index.html":{}}}],["pixel",{"_index":2098,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["place",{"_index":2151,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["placed",{"_index":2053,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["plain",{"_index":539,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["played",{"_index":1891,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["please",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["plural",{"_index":2044,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["pointer",{"_index":1059,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["pointerdirectionchangethreshold",{"_index":3044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["policies",{"_index":1685,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["policy",{"_index":1477,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["policy'},{'name",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["policy.component.html",{"_index":2006,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.scss",{"_index":2007,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts",{"_index":2005,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["policy.component.ts:19",{"_index":2008,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts:31",{"_index":2010,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy/privacy",{"_index":2004,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["popularity",{"_index":2099,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["position",{"_index":1032,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["position:relative",{"_index":2306,"title":{},"body":{"components/SignupComponent.html":{}}}],["possibility",{"_index":1761,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["possible",{"_index":1585,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["posted",{"_index":2186,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["powerful",{"_index":2981,"title":{},"body":{"index.html":{}}}],["pre",{"_index":833,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["preferences",{"_index":2113,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["prefill",{"_index":1986,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["prefilled",{"_index":566,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["prepares",{"_index":2740,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["presented",{"_index":1689,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["preset",{"_index":467,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["press",{"_index":2406,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["prevent",{"_index":812,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["prevents",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/DragDropManager.html":{}}}],["previous",{"_index":1538,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["previousurl",{"_index":1942,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["primary",{"_index":2336,"title":{},"body":{"components/SignupComponent.html":{}}}],["principles",{"_index":1571,"title":{},"body":{"components/HelpComponent.html":{}}}],["priority",{"_index":2463,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["privacy",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["privacypolicy",{"_index":2277,"title":{},"body":{"components/SignupComponent.html":{}}}],["privacypolicycomponent",{"_index":129,"title":{"components/PrivacyPolicyComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["private",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["procedures",{"_index":2018,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["process",{"_index":2209,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["processed",{"_index":2146,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["processing",{"_index":2063,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["product",{"_index":1680,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["production",{"_index":2993,"title":{},"body":{"index.html":{}}}],["products",{"_index":2139,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["profile",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["profits",{"_index":1755,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["program",{"_index":2048,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["progress",{"_index":1351,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["prohibited",{"_index":1708,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["prohibition",{"_index":2222,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["project",{"_index":1524,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["projectid",{"_index":3024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects",{"_index":1573,"title":{},"body":{"components/HelpComponent.html":{}}}],["promise",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["promotions",{"_index":2140,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["propagation",{"_index":1508,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["properties",{"_index":26,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"properties.html":{}}}],["proprietary",{"_index":1709,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["protect",{"_index":2170,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protection",{"_index":2031,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protects",{"_index":2022,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["provide",{"_index":1544,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":1735,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["providedin",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["providefirebaseapp",{"_index":3022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":2062,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["providerouter(routes",{"_index":3021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":2050,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":448,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["providezonechangedetection",{"_index":3019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["publicly",{"_index":2142,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["purpose",{"_index":1696,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["purposes",{"_index":1718,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["puschkarow",{"_index":1665,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["puschkarow.de",{"_index":1647,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["push",{"_index":2122,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["quality",{"_index":1592,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["questions",{"_index":1643,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["radius",{"_index":1060,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["reached",{"_index":1926,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["reactive",{"_index":449,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["reactiveformsmodule",{"_index":773,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["readable",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["reading",{"_index":2462,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["readonly",{"_index":1414,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["real",{"_index":2210,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["reasonable",{"_index":1780,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["receive",{"_index":829,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["receives",{"_index":832,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["recent",{"_index":1912,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["rect",{"_index":1373,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["redirect",{"_index":2253,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirected",{"_index":2289,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirects",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["refer",{"_index":2218,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reference",{"_index":497,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["references",{"_index":3013,"title":{},"body":{"index.html":{}}}],["refers",{"_index":2046,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reflect",{"_index":1627,"title":{},"body":{"components/HelpComponent.html":{}}}],["reflects",{"_index":1641,"title":{},"body":{"components/HelpComponent.html":{}}}],["regarding",{"_index":1593,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["regardless",{"_index":2042,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["register",{"_index":1598,"title":{},"body":{"components/HelpComponent.html":{}}}],["registers",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["registration",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["regulations",{"_index":1721,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["reject",{"_index":2096,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["related",{"_index":349,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["relating",{"_index":1782,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["relative",{"_index":1057,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["relevant",{"_index":1970,"title":{},"body":{"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["reliability",{"_index":1589,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["reload",{"_index":1313,"title":{},"body":{"injectables/DragDropManager.html":{},"index.html":{}}}],["reloadcallback",{"_index":1306,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["reloads",{"_index":2660,"title":{},"body":{"components/TaskComponent.html":{}}}],["remain",{"_index":2102,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["remaining",{"_index":1137,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remainingcontacts",{"_index":1139,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remainingcontacts.map((contact",{"_index":1161,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remember",{"_index":1639,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["removal",{"_index":1990,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["remove",{"_index":1636,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["removebackground",{"_index":1213,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["removebackground(event",{"_index":1245,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["rendering",{"_index":2818,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["reorders",{"_index":1338,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["repeat",{"_index":1031,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["repeating",{"_index":1894,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["replication",{"_index":1706,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["represent",{"_index":1614,"title":{},"body":{"components/HelpComponent.html":{}}}],["representation",{"_index":2514,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["represented",{"_index":1670,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["representing",{"_index":412,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["represents",{"_index":1600,"title":{},"body":{"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["reproduction",{"_index":1703,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["request",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["requests",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["required",{"_index":896,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["requirements",{"_index":2168,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["requires",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{}}}],["reserved",{"_index":1899,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["reserves",{"_index":2228,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["resetoverlaystates",{"_index":1966,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["resets",{"_index":392,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{}}}],["resize",{"_index":644,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["resolved",{"_index":2639,"title":{},"body":{"components/TaskComponent.html":{}}}],["resolving",{"_index":1179,"title":{},"body":{"injectables/ContactService.html":{}}}],["resources",{"_index":3012,"title":{},"body":{"index.html":{}}}],["responsibility",{"_index":2182,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["responsible",{"_index":1487,"title":{},"body":{"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["responsive",{"_index":1951,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["restructuring",{"_index":2130,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["result",{"_index":1864,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.message",{"_index":1868,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.success",{"_index":1866,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["results",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1711,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["retained",{"_index":2157,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retention",{"_index":2153,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retrieve",{"_index":2802,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["retrieved",{"_index":2469,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["retrieves",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["return",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["returns",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":2183,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["rgba(0",{"_index":1103,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["right",{"_index":1070,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["rights",{"_index":1712,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["root",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["root'},{'name",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["rotate(360deg",{"_index":2374,"title":{},"body":{"components/SignupComponent.html":{}}}],["route",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["router",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["routermodule",{"_index":1474,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["routeroutlet",{"_index":17,"title":{},"body":{"components/AppComponent.html":{}}}],["routes",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{}}}],["routing",{"_index":1535,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["run",{"_index":2972,"title":{},"body":{"index.html":{}}}],["runner",{"_index":3001,"title":{},"body":{"index.html":{}}}],["running",{"_index":2976,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["s.id",{"_index":2427,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["safety",{"_index":2173,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sale",{"_index":2129,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["same",{"_index":2041,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sanitize",{"_index":548,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["sans",{"_index":1039,"title":{},"body":{"components/ContactListComponent.html":{}}}],["save",{"_index":877,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["savenewcontact",{"_index":2244,"title":{},"body":{"components/SignupComponent.html":{}}}],["savenewcontact(newname",{"_index":2260,"title":{},"body":{"components/SignupComponent.html":{}}}],["saves",{"_index":2440,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["savesubtaskedit",{"_index":2441,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["saving",{"_index":2255,"title":{},"body":{"components/SignupComponent.html":{}}}],["scaffolding",{"_index":2980,"title":{},"body":{"index.html":{}}}],["scale(0.95",{"_index":1110,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scale(1.1",{"_index":1109,"title":{},"body":{"components/ContactListComponent.html":{}}}],["schematics",{"_index":2984,"title":{},"body":{"index.html":{}}}],["scope",{"_index":1691,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["screen",{"_index":1235,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["screens",{"_index":1320,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["scripts",{"_index":2094,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["scrollable",{"_index":1329,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollbar",{"_index":1000,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scrolling",{"_index":1297,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollproximity",{"_index":3047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollsection",{"_index":1324,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollsection?.nativeelement",{"_index":1372,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollspeed",{"_index":3046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollstep",{"_index":1370,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["search",{"_index":2793,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchlower",{"_index":2830,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm",{"_index":2790,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm.tolowercase",{"_index":2831,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm.trim",{"_index":2829,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["seconds",{"_index":1255,"title":{},"body":{"components/ContactsComponent.html":{}}}],["section",{"_index":1330,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["section.getboundingclientrect",{"_index":1374,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["securely",{"_index":2200,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["security",{"_index":2028,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["see",{"_index":1434,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["seems",{"_index":871,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["select",{"_index":379,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcategory",{"_index":394,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["selectcategory(category",{"_index":380,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectcontact",{"_index":1123,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcontact(contact",{"_index":558,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selected",{"_index":362,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedcategory",{"_index":355,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectedcontact",{"_index":456,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["selectedcontact.id",{"_index":734,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["selectedcontacts",{"_index":1115,"title":{},"body":{"injectables/ContactManager.html":{}}}],["selectedcontactsubject",{"_index":455,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["selectedtask",{"_index":1954,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedtask?.id",{"_index":2863,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["selection",{"_index":352,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["selectionsubscription",{"_index":888,"title":{},"body":{"components/ContactListComponent.html":{}}}],["selector",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["selects",{"_index":377,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactsComponent.html":{}}}],["sending",{"_index":2224,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["separate",{"_index":1984,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["separated",{"_index":1136,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["separately",{"_index":2470,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["serif",{"_index":1040,"title":{},"body":{"components/ContactListComponent.html":{}}}],["serveonce",{"_index":2975,"title":{},"body":{"index.html":{}}}],["server",{"_index":2970,"title":{},"body":{"index.html":{}}}],["service",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["services",{"_index":897,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["services/auth.service",{"_index":941,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["services/contact.service",{"_index":701,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["services/navigation",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["services/task.service",{"_index":1344,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["session",{"_index":1503,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["sessionstorage",{"_index":1893,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.getitem('greetingshown",{"_index":1438,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.getitem('logoappeared",{"_index":1907,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.getitem('logomoved",{"_index":1855,"title":{},"body":{"components/LoginComponent.html":{}}}],["sessionstorage.removeitem('greetingshown",{"_index":1522,"title":{},"body":{"components/HeaderComponent.html":{}}}],["sessionstorage.setitem('greetingshown",{"_index":1441,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.setitem('logoappeared",{"_index":1908,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.setitem('logomoved",{"_index":1858,"title":{},"body":{"components/LoginComponent.html":{}}}],["setanimationdirection",{"_index":1214,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setanimationdirection(width",{"_index":1250,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setdoc",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["setdoc(doc(this.firestore",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["seteditingsubtasktext",{"_index":2558,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["seteditingsubtasktext(value",{"_index":2404,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["seteditingtask",{"_index":2869,"title":{},"body":{"injectables/TaskService.html":{}}}],["seteditingtask(task",{"_index":2543,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["sets",{"_index":365,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["setselectedcategory",{"_index":395,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setselectedcategory(category",{"_index":366,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setselectedcontacts",{"_index":1124,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setselectedcontacts(contacts",{"_index":1145,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcategorydropdown",{"_index":396,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setshowcategorydropdown(value",{"_index":371,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setshowcontactdropdown",{"_index":1125,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcontactdropdown(value",{"_index":1147,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowsubtaskconfirmation",{"_index":2559,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["setshowsubtaskconfirmation(value",{"_index":2399,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["setsubtaskinput",{"_index":2560,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["setsubtaskinput(value",{"_index":2395,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["setsubtasks",{"_index":2561,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["setsubtasks(subtasks",{"_index":2390,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["settimeout",{"_index":743,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{}}}],["settings",{"_index":2097,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shadow",{"_index":1102,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["shall",{"_index":2040,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["share",{"_index":2141,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sharing",{"_index":2135,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shortcuts",{"_index":2446,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["show",{"_index":556,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddform",{"_index":563,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddoredittask",{"_index":1955,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["showcategorydropdown",{"_index":356,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["showconfirmpassword",{"_index":2239,"title":{},"body":{"components/SignupComponent.html":{}}}],["showcontactdetails",{"_index":1206,"title":{},"body":{"components/ContactsComponent.html":{}}}],["showcontactdropdown",{"_index":1116,"title":{},"body":{"injectables/ContactManager.html":{}}}],["showcontent",{"_index":2709,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["showeditform",{"_index":1167,"title":{},"body":{"injectables/ContactService.html":{}}}],["showeditform(contact",{"_index":567,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showform",{"_index":460,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["showformsubject",{"_index":458,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showgreeting",{"_index":1396,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["showheaderandsidebar",{"_index":27,"title":{},"body":{"components/AppComponent.html":{}}}],["showing",{"_index":1243,"title":{},"body":{"components/ContactsComponent.html":{}}}],["shown",{"_index":1266,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["showpassword",{"_index":1797,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["shows",{"_index":1231,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{}}}],["showsubtaskconfirmation",{"_index":2387,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["showtaskdetails",{"_index":1956,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["shrink",{"_index":2351,"title":{},"body":{"components/SignupComponent.html":{}}}],["sidebar",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/SidebarComponent.html":{}}}],["sidebar'},{'name",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["sidebar.component.html",{"_index":2232,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar.component.scss",{"_index":2233,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar/sidebar.component",{"_index":78,"title":{},"body":{"components/AppComponent.html":{}}}],["sidebarcomponent",{"_index":18,"title":{"components/SidebarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["sign",{"_index":1883,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["signed",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signin",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(email",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinasguest",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signing",{"_index":2305,"title":{},"body":{"components/SignupComponent.html":{}}}],["signinwithemailandpassword",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinwithemailandpassword(this.auth",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout(this.auth",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signoutuser",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signs",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{}}}],["signup'].includes",{"_index":95,"title":{},"body":{"components/AppComponent.html":{}}}],["signup'},{'name",{"_index":134,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["signup(email",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup.component.html",{"_index":2238,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.scss",{"_index":2237,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/footer/footer.component.ts",{"_index":1472,"title":{},"body":{"components/FooterComponent.html":{},"coverage.html":{}}}],["signup/login",{"_index":1886,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts",{"_index":1788,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts:113",{"_index":1821,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:122",{"_index":1807,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:129",{"_index":1819,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:140",{"_index":1815,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:156",{"_index":1826,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:177",{"_index":1824,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:195",{"_index":1811,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:207",{"_index":1820,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:64",{"_index":1835,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:69",{"_index":1837,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:74",{"_index":1834,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:79",{"_index":1831,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:84",{"_index":1832,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:89",{"_index":1839,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:94",{"_index":1805,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/signup/signup.component.ts",{"_index":2236,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["signup/signup/signup.component.ts:109",{"_index":2257,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:119",{"_index":2254,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:147",{"_index":2262,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:160",{"_index":2251,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:174",{"_index":2246,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:44",{"_index":2269,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:49",{"_index":2265,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:54",{"_index":2270,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:59",{"_index":2267,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:64",{"_index":2268,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:69",{"_index":2245,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:89",{"_index":2250,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":133,"title":{"components/SignupComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["signupform",{"_index":2240,"title":{},"body":{"components/SignupComponent.html":{}}}],["similar",{"_index":2087,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["simplechanges",{"_index":2655,"title":{},"body":{"components/TaskComponent.html":{}}}],["single",{"_index":501,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["singular",{"_index":2043,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sites",{"_index":2180,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["size",{"_index":1029,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sizing",{"_index":2326,"title":{},"body":{"components/SignupComponent.html":{}}}],["skiplocationchange",{"_index":2252,"title":{},"body":{"components/SignupComponent.html":{}}}],["slide",{"_index":1240,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["slight",{"_index":1979,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["small",{"_index":1236,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["smooth",{"_index":1981,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["sms",{"_index":2121,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["snapshot",{"_index":513,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.data",{"_index":591,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.exists",{"_index":589,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach((doc",{"_index":514,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach(doc",{"_index":2484,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.id",{"_index":590,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["software",{"_index":2047,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["solely",{"_index":1729,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["solid",{"_index":1052,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sort",{"_index":2812,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorted",{"_index":2811,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorting",{"_index":936,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["sorts",{"_index":2808,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate",{"_index":2779,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate(tasks",{"_index":2809,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["space",{"_index":1078,"title":{},"body":{"components/ContactListComponent.html":{}}}],["spam",{"_index":2229,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["special",{"_index":1750,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/SignupComponent.html":{}}}],["specific",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["speed",{"_index":2995,"title":{},"body":{"index.html":{}}}],["spent",{"_index":2082,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["spin",{"_index":2369,"title":{},"body":{"components/SignupComponent.html":{}}}],["spinner",{"_index":2367,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/.../app.config.ts",{"_index":3017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contact.service.ts",{"_index":2965,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/add",{"_index":342,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"coverage.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:30",{"_index":62,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:35",{"_index":34,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":2907,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/board/board.component.ts",{"_index":2911,"title":{},"body":{"coverage.html":{}}}],["src/app/board/drag",{"_index":1294,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["src/app/board/overlay",{"_index":1947,"title":{},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["src/app/board/task",{"_index":2707,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts",{"_index":2610,"title":{},"body":{"components/TaskComponent.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts:103",{"_index":2673,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:104",{"_index":2671,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:113",{"_index":2643,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:128",{"_index":2661,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:139",{"_index":2656,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:152",{"_index":2645,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:168",{"_index":2648,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:180",{"_index":2668,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:191",{"_index":2666,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:201",{"_index":2675,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:210",{"_index":2664,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:223",{"_index":2650,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:239",{"_index":2651,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:44",{"_index":2670,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:51",{"_index":2634,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:56",{"_index":2633,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:61",{"_index":2642,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:66",{"_index":2638,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:71",{"_index":2672,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:76",{"_index":2630,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:81",{"_index":2640,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:86",{"_index":2637,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:91",{"_index":2635,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:94",{"_index":2628,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/contacts/contact",{"_index":592,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts",{"_index":1201,"title":{},"body":{"components/ContactsComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts:106",{"_index":1230,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:116",{"_index":1251,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:123",{"_index":1252,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:137",{"_index":1246,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:149",{"_index":1239,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:160",{"_index":1226,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:167",{"_index":1233,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:174",{"_index":1234,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:53",{"_index":1256,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:58",{"_index":1268,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:63",{"_index":1267,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:68",{"_index":1262,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:73",{"_index":1265,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:78",{"_index":1216,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:93",{"_index":1222,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/header/header.component.ts",{"_index":1479,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/header/header.component.ts:108",{"_index":1506,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:117",{"_index":1500,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:129",{"_index":1497,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:138",{"_index":1499,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:52",{"_index":1516,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:57",{"_index":1512,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:62",{"_index":1485,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:77",{"_index":1494,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:92",{"_index":1489,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/login",{"_index":1471,"title":{},"body":{"components/FooterComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts:12",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.guard.ts:30",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.service.ts",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts:108",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:138",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:147",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:159",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:167",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:176",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:203",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:40",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:45",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:71",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:95",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/contact.service.ts",{"_index":411,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/services/contact.service.ts:103",{"_index":1181,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:129",{"_index":1171,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:147",{"_index":1193,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:161",{"_index":1174,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:175",{"_index":1190,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:182",{"_index":1172,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:189",{"_index":1191,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:198",{"_index":1192,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:206",{"_index":1189,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:216",{"_index":1173,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:228",{"_index":1180,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:242",{"_index":1183,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:255",{"_index":1176,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:54",{"_index":1198,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:56",{"_index":1197,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:59",{"_index":1200,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:61",{"_index":1199,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:64",{"_index":1196,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:66",{"_index":1195,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:69",{"_index":1194,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:75",{"_index":1170,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:85",{"_index":1182,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:94",{"_index":1188,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/navigation",{"_index":1909,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts",{"_index":2455,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts:103",{"_index":2886,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:124",{"_index":2884,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:144",{"_index":2874,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:162",{"_index":2873,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:179",{"_index":2890,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:191",{"_index":2889,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:202",{"_index":2878,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:212",{"_index":2879,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:221",{"_index":2881,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:247",{"_index":2877,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:261",{"_index":2880,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:273",{"_index":2888,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:280",{"_index":2882,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:287",{"_index":2876,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:297",{"_index":2875,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:71",{"_index":2872,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:78",{"_index":2887,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:87",{"_index":2885,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:96",{"_index":2883,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/shared/help/help.component.ts",{"_index":1529,"title":{},"body":{"components/HelpComponent.html":{},"coverage.html":{}}}],["src/app/shared/help/help.component.ts:19",{"_index":1533,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/help/help.component.ts:31",{"_index":1536,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/legal",{"_index":1655,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["src/app/shared/privacy",{"_index":2003,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts",{"_index":2231,"title":{},"body":{"components/SidebarComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts:19",{"_index":2234,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/sidebar/sidebar.component.ts:30",{"_index":2235,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/summary/summary.component.ts",{"_index":1380,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["src/app/summary/summary.component.ts:113",{"_index":2584,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:121",{"_index":2586,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:15",{"_index":1382,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{}}}],["src/app/summary/summary.component.ts:32",{"_index":2596,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:33",{"_index":2598,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:35",{"_index":2590,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:36",{"_index":2595,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:37",{"_index":2592,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:39",{"_index":2594,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:40",{"_index":2593,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:41",{"_index":2589,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:43",{"_index":2597,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:44",{"_index":2588,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:45",{"_index":2591,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:46",{"_index":2581,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:62",{"_index":2582,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:73",{"_index":2585,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:83",{"_index":2600,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:97",{"_index":2583,"title":{},"body":{"components/SummaryComponent.html":{}}}],["stage",{"_index":1625,"title":{},"body":{"components/HelpComponent.html":{}}}],["stages",{"_index":1633,"title":{},"body":{"components/HelpComponent.html":{}}}],["standalone",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["start",{"_index":1395,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["started",{"_index":2967,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1316,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["startmessageanimation",{"_index":1215,"title":{},"body":{"components/ContactsComponent.html":{}}}],["starts",{"_index":1253,"title":{},"body":{"components/ContactsComponent.html":{}}}],["state",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["state('appear",{"_index":1905,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["state('moved",{"_index":1388,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["state('start",{"_index":1387,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["state/province",{"_index":2077,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["statements",{"_index":2893,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1950,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["statistics",{"_index":2203,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["status",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["status).length",{"_index":1409,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["statusarraymap",{"_index":2826,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["statusarraymap[status",{"_index":2828,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["steps",{"_index":2149,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["still",{"_index":1642,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["stop",{"_index":2646,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["stops",{"_index":1507,"title":{},"body":{"components/HeaderComponent.html":{}}}],["storage",{"_index":1504,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["storagebucket",{"_index":3028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"index.html":{}}}],["stored",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["stores",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["storing",{"_index":2191,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["story",{"_index":360,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["stream",{"_index":506,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["streams",{"_index":450,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["strictly",{"_index":1707,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["string",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["string(date.getdate()).padstart(2",{"_index":2536,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["string(date.getmonth",{"_index":2538,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["strive",{"_index":1582,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["student",{"_index":1694,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["students",{"_index":1550,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["style",{"_index":695,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["styles",{"_index":878,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styles.scss",{"_index":982,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styleurl",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["styleurls",{"_index":881,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["subcolid",{"_index":2474,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subcollection",{"_index":2471,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["submission",{"_index":798,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["submit",{"_index":803,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["subscribe",{"_index":735,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["subscribe((event",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["subscribes",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/UserData.html":{}}}],["subscribing",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{}}}],["subscription",{"_index":606,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["subscriptions",{"_index":920,"title":{},"body":{"components/ContactListComponent.html":{}}}],["subtask",{"_index":2379,"title":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{}},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["subtask's",{"_index":2737,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtask.completed",{"_index":2454,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtask.id",{"_index":2422,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["subtask.text",{"_index":2428,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtask.title",{"_index":2758,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtaskchanged",{"_index":2718,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtaskid",{"_index":2504,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtaskinput",{"_index":2386,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtasklist",{"_index":2623,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.filter((el",{"_index":2687,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.length",{"_index":2689,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtaskmanager",{"_index":2381,"title":{"injectables/SubtaskManager.html":{}},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"coverage.html":{}}}],["subtasks",{"_index":2382,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["subtasks.length",{"_index":2392,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtasks.push",{"_index":2489,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtasksbytaskid",{"_index":2763,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["subtasksref",{"_index":2498,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["success",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["successful",{"_index":797,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["successfully",{"_index":1292,"title":{},"body":{"components/ContactsComponent.html":{}}}],["successmessage",{"_index":2241,"title":{},"body":{"components/SignupComponent.html":{}}}],["such",{"_index":1698,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["suits",{"_index":3011,"title":{},"body":{"index.html":{}}}],["summary",{"_index":1383,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{}}}],["summary'},{'name",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["summary.component.html",{"_index":1384,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summary.component.scss",{"_index":1385,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summarycomponent",{"_index":135,"title":{"components/SummaryComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["support",{"_index":2137,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["supports",{"_index":1833,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["switch",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["switches",{"_index":1258,"title":{},"body":{"components/ContactsComponent.html":{}}}],["system",{"_index":2459,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["t",{"_index":1457,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.date",{"_index":1451,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.date.todate",{"_index":1455,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.dateobj",{"_index":1458,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.dateobj!.gettime",{"_index":1468,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.id",{"_index":1376,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["t.status",{"_index":1408,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["table",{"_index":2805,"title":{},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2950,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":2058,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tags",{"_index":2093,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["take",{"_index":2148,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["target",{"_index":717,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskComponent.html":{}}}],["target.closest('.dots",{"_index":2677,"title":{},"body":{"components/TaskComponent.html":{}}}],["task",{"_index":139,"title":{"interfaces/Task.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["task's",{"_index":1337,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["task'},{'name",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["task.component.html",{"_index":2611,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.scss",{"_index":2612,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.ts",{"_index":2895,"title":{},"body":{"coverage.html":{}}}],["task.description?.tolowercase().includes(searchlower",{"_index":2834,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task.id",{"_index":1362,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["task.priority",{"_index":2757,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["task.status",{"_index":1363,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["task.title",{"_index":2854,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task.title.tolowercase().includes(searchlower",{"_index":2833,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task/add",{"_index":2894,"title":{},"body":{"coverage.html":{}}}],["task/category",{"_index":343,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"coverage.html":{}}}],["task/contact",{"_index":1114,"title":{},"body":{"injectables/ContactManager.html":{},"coverage.html":{}}}],["task/subtask",{"_index":2380,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"coverage.html":{}}}],["task['status",{"_index":1347,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["taskcomponent",{"_index":137,"title":{"components/TaskComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskdetailscomponent",{"_index":138,"title":{"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskid",{"_index":1310,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["tasklist",{"_index":1305,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["tasklist.find((t",{"_index":1375,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["tasklistmanager",{"_index":2759,"title":{"injectables/TaskListManager.html":{}},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tasks",{"_index":868,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["tasks.filter((t",{"_index":1407,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["tasks.push",{"_index":2485,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks/${taskid}/subtasks/${subtaskid",{"_index":2508,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks].sort((a",{"_index":2835,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["taskselected",{"_index":2626,"title":{},"body":{"components/TaskComponent.html":{}}}],["taskservice",{"_index":1303,"title":{"injectables/TaskService.html":{}},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskservice.capitalize(task.category",{"_index":2700,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.description",{"_index":2702,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.title",{"_index":2701,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["tasksforstatus",{"_index":2827,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasksforstatus.filter",{"_index":2832,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasksref",{"_index":2493,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["team",{"_index":760,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/HelpComponent.html":{}}}],["technical",{"_index":358,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["technologies",{"_index":2091,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["telefonnummer",{"_index":770,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["tells",{"_index":2020,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["term",{"_index":1558,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["terms",{"_index":1678,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["test",{"_index":3000,"title":{},"body":{"index.html":{}}}],["testing",{"_index":3006,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":3003,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2997,"title":{},"body":{"index.html":{}}}],["text",{"_index":382,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.charat(0).touppercase",{"_index":2550,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.slice(1",{"_index":2551,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["thereto",{"_index":1688,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["therfore",{"_index":2212,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third",{"_index":2032,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third‑party",{"_index":2179,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["this.addedcontact.emit(newcontact",{"_index":864,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.addsubtask",{"_index":2411,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.animationdirection",{"_index":1285,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.animationstate",{"_index":747,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.auth.currentuser",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authservice.getcurrentuser",{"_index":953,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["this.authservice.isloggedin",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["this.authservice.signin(email",{"_index":1865,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signinasguest",{"_index":1869,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signoutuser",{"_index":1521,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.authservice.signup(email",{"_index":2287,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.awaitfeedback",{"_index":2823,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitfeedback.push(task",{"_index":2849,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitingfeedbackcount",{"_index":1418,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.backgroundvisible",{"_index":1289,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.backtolist.emit",{"_index":758,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.cancelsubtaskedit",{"_index":2444,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.categories",{"_index":374,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.categories.find(c",{"_index":384,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.changetaskstatus.emit",{"_index":2685,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.checkiftouchdevice",{"_index":1847,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.clearinputs",{"_index":865,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closedotsmenu.emit",{"_index":2679,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.closeoverlay.emit('closed",{"_index":855,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closetaskdetails.emit('close",{"_index":2746,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.contact",{"_index":738,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contact?.id",{"_index":752,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactform",{"_index":839,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.patchvalue",{"_index":848,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.reset",{"_index":854,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.valid",{"_index":856,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.value",{"_index":857,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactlist",{"_index":2683,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactlist.push(contact",{"_index":2698,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contacts.emit(this.contactlist",{"_index":2699,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.contactselected.emit",{"_index":964,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.addcontact(contact",{"_index":863,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.addcontact(newcontact",{"_index":2290,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.contactservice.clearselection",{"_index":754,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.deletecontact(this.contact.id",{"_index":753,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.deletecontact(this.contacttoedit.id",{"_index":867,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.editcontact$.subscribe(this.getdatatoedit",{"_index":846,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.getcontactbyid(contactid",{"_index":2697,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactservice.getcontactcolor(contact.name",{"_index":1160,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getcontactcolor(name",{"_index":757,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.getcontacts().subscribe",{"_index":943,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.getinitials(contact.name",{"_index":1159,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getinitials(name",{"_index":755,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["this.contactservice.hideform",{"_index":853,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.selectcontact(contact",{"_index":963,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.selectcontact(newcontact",{"_index":1282,"title":{},"body":{"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["this.contactservice.selectedcontact$.subscribe",{"_index":958,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showaddform",{"_index":966,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showeditform(this.contact",{"_index":751,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.showform",{"_index":1279,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.contactservice.updatecontact(this.contacttoedit.id",{"_index":862,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactssubscription",{"_index":942,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactssubscription.unsubscribe",{"_index":961,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contacttoedit",{"_index":847,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.email",{"_index":850,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.name",{"_index":849,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.phone",{"_index":851,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit?.id",{"_index":861,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactvisible",{"_index":742,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.counttasksbystatus",{"_index":1447,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.counttasksbystatus(tasks",{"_index":1446,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.currentuser",{"_index":954,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentuseremail",{"_index":946,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentusersubject.asobservable",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.currentusersubject.next(user",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.done",{"_index":2824,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.done.push(task",{"_index":2850,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.donecount",{"_index":1419,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.editcontactsubject.asobservable",{"_index":466,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(contact",{"_index":568,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(null",{"_index":572,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubscription",{"_index":845,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editcontactsubscription.unsubscribe",{"_index":852,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editingsubtaskid",{"_index":2401,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.editingsubtasktext",{"_index":2403,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.editingsubtasktext.trim",{"_index":2442,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.editingtask",{"_index":2544,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.editsubtask(this.editingsubtaskid",{"_index":2443,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.edittask.emit(\"edit",{"_index":2749,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.elementref.nativeelement.queryselector",{"_index":723,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.elementref.nativeelement.queryselector('.mobile",{"_index":721,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.emptyarrays",{"_index":2845,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.errormessage",{"_index":1862,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.fb.group",{"_index":1853,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.firstload",{"_index":746,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.form.group",{"_index":840,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["this.formatdate(date",{"_index":2531,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.formatdate(date.todate",{"_index":2530,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcleanjson(updatedcontact)).catch((err",{"_index":538,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcleanjson(updatedsubtask)).catch(console.error",{"_index":2509,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcleanjson(updatedtask)).catch(console.error",{"_index":2503,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcompletedsubtaskscount(subtasklist",{"_index":2690,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactlist",{"_index":2680,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactsref",{"_index":511,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcurrentuser",{"_index":952,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.getdatevalue(a.date",{"_index":2837,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.getdatevalue(b.date",{"_index":2839,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.geterrormessage(createerror.code",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.geterrormessage(error.code",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.getgreeting",{"_index":1436,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.getpreviousurl",{"_index":1943,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.getsinglecontactsref(contactid",{"_index":587,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsinglecontactsref(docid",{"_index":536,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsingletaskref(docid",{"_index":2502,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getsubtasksref(colid",{"_index":2499,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.gettasksref",{"_index":2494,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.greeting",{"_index":1435,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.greetingstate",{"_index":1440,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.groupbyinitial(contacts",{"_index":945,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.groupedcontacts",{"_index":944,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.history",{"_index":1940,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.length",{"_index":1937,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.push(event.urlafterredirects",{"_index":1939,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.shift",{"_index":1938,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history[this.history.length",{"_index":1941,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.initializeanimation",{"_index":1848,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.initializeform",{"_index":1846,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.inprogress",{"_index":2822,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogress.push(task",{"_index":2848,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogresscount",{"_index":1417,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isdeleting",{"_index":740,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.isdotsmenuopen",{"_index":2678,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.isediting",{"_index":741,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.isfirestoretimestamp(t.date",{"_index":1454,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isloading",{"_index":1861,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.ismobile",{"_index":731,"title":{},"body":{"components/ContactDetailsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.istouchdevice",{"_index":1849,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loadassignedcontacts",{"_index":2743,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.loadsubtasks",{"_index":2744,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.loginform",{"_index":1852,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.get(field",{"_index":1870,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.invalid",{"_index":1859,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.markallastouched",{"_index":1860,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.value",{"_index":1863,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.logostate",{"_index":1857,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.menuopen",{"_index":726,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["this.navigationservice.navigateback",{"_index":1539,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["this.nextdeadlinecount",{"_index":1466,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextdeadlinedate",{"_index":1465,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextsubtaskid",{"_index":2391,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.nocontactvisible.emit",{"_index":744,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.onclose",{"_index":866,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.oncontactselect(matchedcontact",{"_index":950,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.oncontactselected",{"_index":1283,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.opendotsmenu.emit(this.task.id",{"_index":2694,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.openedmenutaskid",{"_index":2693,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.overlayvisible",{"_index":1998,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.pageloaded",{"_index":1856,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.passwordsmatchvalidator",{"_index":2279,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.events",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["this.router.navigate(['/login",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["this.router.navigate(['/summary",{"_index":1867,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl",{"_index":1945,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl(previousurl",{"_index":1944,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.savenewcontact(name",{"_index":2288,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.savesubtaskedit",{"_index":2450,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.selectedcategory",{"_index":364,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.selectedcontact",{"_index":959,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontact?.id",{"_index":965,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontacts",{"_index":1151,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.findindex(c",{"_index":1153,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.push(contact",{"_index":1155,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.some(c",{"_index":1157,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.splice(index",{"_index":1156,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontactsubject.asobservable",{"_index":457,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(contact",{"_index":559,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(null",{"_index":561,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedtask",{"_index":2001,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["this.selectionsubscription",{"_index":957,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectionsubscription.unsubscribe",{"_index":962,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.setanimationdirection(window.innerwidth",{"_index":1280,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showaddoredittask",{"_index":2000,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.showcategorydropdown",{"_index":370,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.showcontactdetails",{"_index":1291,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showcontactdropdown",{"_index":1152,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.showcontent",{"_index":2745,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.showform",{"_index":1278,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showformsubject.asobservable",{"_index":461,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(false",{"_index":571,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(true",{"_index":564,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showgreeting",{"_index":1439,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.showheaderandsidebar",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["this.showsubtaskconfirmation",{"_index":2398,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.showtaskdetails",{"_index":1999,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.signupform",{"_index":2271,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.errors?.['passwordsdontmatch",{"_index":2293,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('password')?.touched",{"_index":2296,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get(field",{"_index":2291,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.invalid",{"_index":2283,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.markallastouched",{"_index":2284,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.value",{"_index":2286,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.sorttasksbyduedate(this.awaitfeedback",{"_index":2857,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.done",{"_index":2858,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.inprogress",{"_index":2856,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.todo",{"_index":2855,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.startmessageanimation",{"_index":1284,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.subscription",{"_index":749,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.subscription.unsubscribe",{"_index":750,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.subtaskchanged.emit(this.subtasks",{"_index":2752,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.subtaskinput",{"_index":2394,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtaskinput.trim",{"_index":2410,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasks",{"_index":2389,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["this.subtasks.filter(subtask",{"_index":2421,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasks.find(s",{"_index":2426,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasks.push(newsubtask",{"_index":2419,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasksbytaskid",{"_index":2825,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[selectedtask.id",{"_index":2864,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[task.id",{"_index":2861,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[taskid",{"_index":2862,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.successmessage",{"_index":2285,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.task.assignedto",{"_index":2696,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task.id",{"_index":2684,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.assignedto?.length",{"_index":2695,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.id",{"_index":2754,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.tasklist",{"_index":1445,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskselected.emit(this.selectedtask",{"_index":2692,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.taskservice.convertdate(date",{"_index":2747,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.deletetask(this.task.id",{"_index":2750,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.getsubtasks(task.id).subscribe((subtasks",{"_index":2860,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.taskservice.getsubtasks(this.task.id).subscribe((subtasks",{"_index":2755,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.gettasks().subscribe((tasks",{"_index":1444,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskservice.seteditingtask(this.task",{"_index":2748,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatesubtask(this.task.id",{"_index":2751,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatetask(task.id",{"_index":1365,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.taskservice.updatetask(taskid",{"_index":1377,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.toastanimationstate",{"_index":1287,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.toastmessagevisible",{"_index":1286,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.todo",{"_index":2821,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todo.push(task",{"_index":2846,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todocount",{"_index":1416,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.unsubtask",{"_index":2844,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.unsubtask.unsubscribe",{"_index":2859,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.username",{"_index":1430,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["threaten",{"_index":1726,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["threshold",{"_index":1369,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["through",{"_index":2192,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["thumb",{"_index":1089,"title":{},"body":{"components/ContactListComponent.html":{}}}],["time",{"_index":1421,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["timestamp",{"_index":2458,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["title",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["title]=\"getremainingcontactnames(contactlist.slice(4",{"_index":2705,"title":{},"body":{"components/TaskComponent.html":{}}}],["toast",{"_index":1232,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastanimationstate",{"_index":1207,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastmessagevisible",{"_index":1208,"title":{},"body":{"components/ContactsComponent.html":{}}}],["todate",{"_index":1381,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["todo",{"_index":2764,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["todocount",{"_index":1400,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["todolist",{"_index":1349,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["toggle",{"_index":1511,"title":{},"body":{"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["togglecategorydropdown",{"_index":376,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["togglecontactdropdown",{"_index":1126,"title":{},"body":{"injectables/ContactManager.html":{}}}],["toggled",{"_index":2725,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["togglemenu",{"_index":1484,"title":{},"body":{"components/HeaderComponent.html":{}}}],["togglemenu(event",{"_index":1505,"title":{},"body":{"components/HeaderComponent.html":{}}}],["togglemobilemenu",{"_index":617,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["toggles",{"_index":375,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["togglesubtaskcompletion",{"_index":2562,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["togglesubtaskcompletion(id",{"_index":2453,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["tokens",{"_index":2196,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tool",{"_index":1525,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["tools",{"_index":2982,"title":{},"body":{"index.html":{}}}],["top",{"_index":993,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["total",{"_index":1413,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["totaltaskcount",{"_index":1415,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["touch",{"_index":1808,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["touched",{"_index":2294,"title":{},"body":{"components/SignupComponent.html":{}}}],["track",{"_index":1088,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["trackby",{"_index":2815,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid",{"_index":2780,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid(index",{"_index":2813,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tracking",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["tracks",{"_index":1517,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["trademarks",{"_index":1716,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["transactions",{"_index":2162,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfer",{"_index":2145,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transferarrayitem",{"_index":1342,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["transferred",{"_index":2165,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfers",{"_index":2127,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transform",{"_index":706,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{}}}],["transition",{"_index":696,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["transition(':enter",{"_index":705,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["transition(':increment",{"_index":713,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["transition(':leave",{"_index":716,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["transition('bottom",{"_index":1277,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('right",{"_index":1274,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('start",{"_index":1389,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["transition('void",{"_index":1272,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transitions",{"_index":1257,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatex(0",{"_index":711,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatex(100",{"_index":707,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatey",{"_index":2343,"title":{},"body":{"components/SignupComponent.html":{}}}],["translatey(0",{"_index":1276,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatey(100",{"_index":1275,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transmission",{"_index":2026,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transparent",{"_index":1002,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["trends",{"_index":2132,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["trigger",{"_index":694,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeout",{"_index":1904,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["trigger('fadeoutgreeting",{"_index":1386,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeoutwrapper",{"_index":1843,"title":{},"body":{"components/LoginComponent.html":{}}}],["trigger('slideinfromright",{"_index":704,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["trigger('slideinout",{"_index":714,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["triggered",{"_index":634,"title":{},"body":{"components/ContactDetailsComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["triggering",{"_index":1509,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["triggers",{"_index":562,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["trimming",{"_index":1924,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["true",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["tslib",{"_index":2960,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1186,"title":{},"body":{"injectables/ContactService.html":{}}}],["type",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":444,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["types",{"_index":2072,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["ui",{"_index":557,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["uid",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["unauthorized",{"_index":1702,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["unbekannt",{"_index":763,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["unbekannter",{"_index":2852,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["undefined",{"_index":545,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["under",{"_index":1616,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["undergoes",{"_index":2163,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["underline",{"_index":2365,"title":{},"body":{"components/SignupComponent.html":{}}}],["understand",{"_index":2204,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unique",{"_index":415,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{}}}],["unit",{"_index":2996,"title":{},"body":{"index.html":{}}}],["unless",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["unset",{"_index":2358,"title":{},"body":{"components/SignupComponent.html":{}}}],["unsolicited",{"_index":2223,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribe",{"_index":512,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["unsubscribed",{"_index":2126,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribes",{"_index":663,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["unsubtask",{"_index":2765,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["until",{"_index":2103,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unused",{"_index":1898,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["up",{"_index":810,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["upcoming",{"_index":2606,"title":{},"body":{"components/SummaryComponent.html":{}}}],["update",{"_index":532,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["updatecallback",{"_index":1333,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatecontact",{"_index":1168,"title":{},"body":{"injectables/ContactService.html":{}}}],["updatecontact(docid",{"_index":535,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updated",{"_index":534,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["updated.assignedto",{"_index":2522,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.category",{"_index":2523,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.date",{"_index":2519,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.description",{"_index":2518,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.iscompleted",{"_index":2524,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.priority",{"_index":2520,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.status",{"_index":2521,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.title",{"_index":2517,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedcontact",{"_index":533,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.email",{"_index":553,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.name",{"_index":552,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.phone",{"_index":554,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedoc",{"_index":424,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedoc(docref",{"_index":537,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedsubtask",{"_index":2505,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask",{"_index":1364,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask).catch((error",{"_index":1366,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatedtask).then",{"_index":1378,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updateprofile",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updateprofile(user",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updates",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["updatesubtask",{"_index":2870,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatesubtask(taskid",{"_index":2506,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetask",{"_index":2871,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(docid",{"_index":2501,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetasklists",{"_index":2781,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["updating",{"_index":547,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["uppercase",{"_index":1187,"title":{},"body":{"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["urgent",{"_index":2466,"title":{},"body":{"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["url",{"_index":1917,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["url(\"../../../../public/assets/img/svg/add",{"_index":1027,"title":{},"body":{"components/ContactListComponent.html":{}}}],["url(\"/assets/img/icons/checkbox",{"_index":2353,"title":{},"body":{"components/SignupComponent.html":{}}}],["url(\"/assets/img/icons/checkbox.png",{"_index":2350,"title":{},"body":{"components/SignupComponent.html":{}}}],["urls",{"_index":1915,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["usage",{"_index":1581,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["use",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["used",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["user",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["user's",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["user.email",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user.uid",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user?.displayname",{"_index":955,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["user?.email",{"_index":956,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["usercredential",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["usercredential.user",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdata",{"_index":279,"title":{"interfaces/UserData.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["userdata.displayname",{"_index":1432,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdata?.displayname?.trim",{"_index":1431,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdoc",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.data",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.exists",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["username",{"_index":1393,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["users",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["uses",{"_index":2188,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["usevalue",{"_index":3042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":820,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["ux",{"_index":1982,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["valid",{"_index":1876,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["validate",{"_index":438,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["validates",{"_index":818,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validation",{"_index":439,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validationerrors",{"_index":428,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":431,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validators",{"_index":836,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.email",{"_index":842,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.min(10",{"_index":843,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.minlength(2",{"_index":2272,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.minlength(6",{"_index":1854,"title":{},"body":{"components/LoginComponent.html":{}}}],["validators.minlength(8",{"_index":2273,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^(?=.*[a",{"_index":2274,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^\\d",{"_index":844,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.required",{"_index":841,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.requiredtrue",{"_index":2278,"title":{},"body":{"components/SignupComponent.html":{}}}],["validcontacts",{"_index":967,"title":{},"body":{"components/ContactListComponent.html":{}}}],["validcontacts.reduce((groups",{"_index":969,"title":{},"body":{"components/ContactListComponent.html":{}}}],["value",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/variables.html":{}}}],["value.trim().length",{"_index":445,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["values",{"_index":912,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["var",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["variable",{"_index":2908,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1971,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OverlayManager.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":2080,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{},"properties.html":{}}}],["via",{"_index":830,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["view",{"_index":649,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["viewchild",{"_index":1520,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild('menu",{"_index":1518,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewing",{"_index":453,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{}}}],["viewport",{"_index":1514,"title":{},"body":{"components/HeaderComponent.html":{}}}],["views",{"_index":1261,"title":{},"body":{"components/ContactsComponent.html":{}}}],["viktor",{"_index":1673,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["visibility",{"_index":368,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["visible",{"_index":1263,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["visit",{"_index":1823,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["visited",{"_index":1914,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["visual",{"_index":470,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{}}}],["visualize",{"_index":1564,"title":{},"body":{"components/HelpComponent.html":{}}}],["void",{"_index":367,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["vulnerabilities",{"_index":2029,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["waldingstraße",{"_index":1666,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranties",{"_index":1732,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranty",{"_index":1736,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["wasempty",{"_index":737,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["we'll",{"_index":1543,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we're",{"_index":1648,"title":{},"body":{"components/HelpComponent.html":{}}}],["we\\'ll",{"_index":1650,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we\\'re",{"_index":1654,"title":{},"body":{"components/HelpComponent.html":{}}}],["weak",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["web",{"_index":1552,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["webkit",{"_index":1087,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["website",{"_index":2054,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["websites",{"_index":2178,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["weight",{"_index":1041,"title":{},"body":{"components/ContactListComponent.html":{}}}],["welcome",{"_index":1540,"title":{},"body":{"components/HelpComponent.html":{},"components/SummaryComponent.html":{}}}],["whenever",{"_index":2978,"title":{},"body":{"index.html":{}}}],["whether",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["white",{"_index":1077,"title":{},"body":{"components/ContactListComponent.html":{}}}],["whitespace",{"_index":436,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["whose",{"_index":2721,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["width",{"_index":729,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["window",{"_index":643,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["window).innerwidth",{"_index":730,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["window.addeventlistener('resize",{"_index":1281,"title":{},"body":{"components/ContactsComponent.html":{}}}],["window.innerwidth",{"_index":686,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{}}}],["window:resize",{"_index":623,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["window:resize(event",{"_index":641,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["within",{"_index":1610,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["without",{"_index":805,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["words",{"_index":2037,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["work",{"_index":1565,"title":{},"body":{"components/HelpComponent.html":{}}}],["wrap",{"_index":1056,"title":{},"body":{"components/ContactListComponent.html":{}}}],["wrapper",{"_index":2308,"title":{},"body":{"components/SignupComponent.html":{}}}],["wrong",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["wrongdoing",{"_index":2172,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["x",{"_index":2327,"title":{},"body":{"components/SignupComponent.html":{}}}],["y",{"_index":990,"title":{},"body":{"components/ContactListComponent.html":{},"components/SummaryComponent.html":{}}}],["year",{"_index":2540,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["yes",{"_index":652,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/ContactService.html":{},"components/TaskDetailsComponent.html":{}}}],["you'll",{"_index":1599,"title":{},"body":{"components/HelpComponent.html":{}}}],["you've",{"_index":1613,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ll",{"_index":1651,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ve",{"_index":1652,"title":{},"body":{"components/HelpComponent.html":{}}}],["yourself",{"_index":1609,"title":{},"body":{"components/HelpComponent.html":{}}}],["z",{"_index":1098,"title":{},"body":{"components/ContactListComponent.html":{}}}],["z])(?=.*\\d)(?=.*[!@#$%^&*()_",{"_index":2275,"title":{},"body":{"components/SignupComponent.html":{}}}],["zindex",{"_index":3045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zip/postal",{"_index":2078,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["zone.js",{"_index":2962,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                SidebarComponent\n                                HeaderComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                showHeaderAndSidebar\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:35\n                            \n                        \n\n                \n                    \n                            Subscribes to router events to determine if the current route\nrequires hiding the header and sidebar. Also initializes navigation tracking.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to store navigation history.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's router for subscribing to route changes.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        showHeaderAndSidebar\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:30\n                        \n                    \n\n            \n                \n                    Controls whether the header and sidebar should be displayed.\nHidden on specific routes like login or signup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'join'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:35\n                        \n                    \n\n            \n                \n                    The title of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet, Router, NavigationEnd } from '@angular/router';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { HeaderComponent } from './header/header.component';\nimport { CommonModule } from '@angular/common';\nimport { NavigationHistoryService } from './services/navigation-history.service';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, SidebarComponent, HeaderComponent, CommonModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n\n  /**\n   * Controls whether the header and sidebar should be displayed.\n   * Hidden on specific routes like login or signup.\n   */\n  showHeaderAndSidebar = true;\n\n  /**\n   * The title of the application.\n   */\n  title = 'join';\n\n  /**\n   * Subscribes to router events to determine if the current route\n   * requires hiding the header and sidebar. Also initializes navigation tracking.\n   *\n   * @param navigationService - Service to store navigation history.\n   * @param router - Angular's router for subscribing to route changes.\n   */\n  constructor(\n    private navigationService: NavigationHistoryService,\n    private router: Router\n  ) {\n    this.router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        this.showHeaderAndSidebar = !['/login', '/', '/signup'].includes(\n          event.urlAfterRedirects\n        );\n      });\n  }\n}\n\n\n    \n\n    \n        \n  \n  \n    \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/services/auth.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Route guard that prevents access to certain routes\nunless the user is authenticated.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Constructs the AuthGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to check the user's authentication status\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.guard.ts:30\n                        \n                    \n\n\n            \n                \n                        Determines whether a route can be activated.\nIf the user is not authenticated, redirects to the login page.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is logged in, otherwise false\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n/**\n * Route guard that prevents access to certain routes\n * unless the user is authenticated.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  /**\n   * Constructs the AuthGuard.\n   * @param authService - Service to check the user's authentication status\n   * @param router - Angular Router used for navigation\n   */\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  /**\n   * Determines whether a route can be activated.\n   * If the user is not authenticated, redirects to the login page.\n   *\n   * @returns True if the user is logged in, otherwise false\n   */\n  canActivate(): boolean {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication service for handling user registration, login, logout,\nguest access, profile updates, account deletion, and state tracking.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentUser$\n                            \n                            \n                                    Private\n                                currentUserSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                getCurrentUser\n                            \n                            \n                                    Async\n                                getCurrentUserData\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInAsGuest\n                            \n                            \n                                    Async\n                                signOutUser\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: Auth, firestore: Firestore, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.service.ts:45\n                            \n                        \n\n                \n                    \n                            Initializes the AuthService and subscribes to authentication state changes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Auth instance\n\n\n                                                        \n                                                \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Firestore instance\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAccount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Deletes the currently authenticated user account.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Gets the current authenticated Firebase user.\n\n\n                        \n                            Returns :     User | null\n\n                        \n                            \n                                The current user or null if not logged in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCurrentUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Retrieves the current user's data from Firestore.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The user's Firestore data or null if not found\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(errorCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Maps Firebase Auth error codes to human-readable error messages.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                errorCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFirebase Auth error code\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string describing the error\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Checks whether a user is currently authenticated.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a user is signed in, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Signs in a user with email and password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInAsGuest()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Signs in as a guest user. If guest user does not exist, it will be created.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Signs out the currently authenticated user and redirects to the login page.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(email: string, password: string, displayName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Registers a new user with email, password, and display name.\nStores user data in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email address\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                        \n                                                displayName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's display name\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentUser$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentUserSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:45\n                        \n                    \n\n            \n                \n                    Observable emitting the current authenticated Firebase user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category.html":{"url":"interfaces/Category.html","title":"interface - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryManager {\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  \n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryManager.html":{"url":"injectables/CategoryManager.html","title":"injectable - CategoryManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                CategoryManager handles all category-related operations for the AddTaskComponent.\nThis includes category selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                categories\n                            \n                            \n                                    Private\n                                selectedCategory\n                            \n                            \n                                    Private\n                                showCategoryDropdown\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getCategories\n                            \n                            \n                                getCategoryColor\n                            \n                            \n                                getCategoryText\n                            \n                            \n                                getSelectedCategory\n                            \n                            \n                                getShowCategoryDropdown\n                            \n                            \n                                hasSelectedCategory\n                            \n                            \n                                selectCategory\n                            \n                            \n                                setSelectedCategory\n                            \n                            \n                                setShowCategoryDropdown\n                            \n                            \n                                toggleCategoryDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:111\n                        \n                    \n\n\n            \n                \n                        Clears the selected category and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategories\n                        \n                    \n                \n            \n            \n                \ngetCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Gets all available categories\n\n\n                        \n                            Returns :         Category[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryColor\n                        \n                    \n                \n            \n            \n                \ngetCategoryColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:92\n                        \n                    \n\n\n            \n                \n                        Returns the color for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category color or default color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryText\n                        \n                    \n                \n            \n            \n                \ngetCategoryText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:80\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category label or default text.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedCategory\n                        \n                    \n                \n            \n            \n                \ngetSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:28\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected category\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:42\n                        \n                    \n\n\n            \n                \n                        Gets the category dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSelectedCategory\n                        \n                    \n                \n            \n            \n                \nhasSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:104\n                        \n                    \n\n\n            \n                \n                        Checks if a category is currently selected.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a category is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectCategory\n                        \n                    \n                \n            \n            \n                \nselectCategory(category: Category)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:71\n                        \n                    \n\n\n            \n                \n                        Selects a category and closes the dropdown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            Category\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe category to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedCategory\n                        \n                    \n                \n            \n            \n                \nsetSelectedCategory(category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:35\n                        \n                    \n\n\n            \n                \n                        Sets the selected category\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowCategoryDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:49\n                        \n                    \n\n\n            \n                \n                        Sets the category dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:63\n                        \n                    \n\n\n            \n                \n                        Toggles the category dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showCategoryDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryManager {\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  \n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact.html":{"url":"interfaces/Contact.html","title":"interface - Contact","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a contact.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email address of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Unique identifier (automatically assigned by Firestore)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Full name of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional phone number of the contact\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n * Updates an existing contact in Firestore.\n *\n * @param docId - The Firestore document ID of the contact to update.\n * @param updatedContact - The updated contact data.\n */\nasync updateContact(docId: string, updatedContact: Contact): Promise {\n  let docRef = this.getSingleContactsRef(docId);\n  await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n    console.error(err);\n  });\n}\n\n/**\n * Returns a plain JSON object with only the allowed contact fields.\n * This is used to avoid including undefined or extra properties when updating Firestore.\n *\n * @param updatedContact - The contact object to sanitize.\n * @returns A JSON object containing name, email, and phone.\n */\ngetCleanJson(updatedContact: Contact): Partial {\n  return {\n    name: updatedContact.name,\n    email: updatedContact.email,\n    phone: updatedContact.phone,\n  };\n}\n\n/**\n * Emits a contact to the selected contact observable.\n * Used to show the contact details in the UI.\n *\n * @param contact - The contact to select.\n */\nselectContact(contact: Contact): void {\n  this.selectedContactSubject.next(contact);\n}\n\n/**\n * Clears the currently selected contact.\n */\nclearSelection(): void {\n  this.selectedContactSubject.next(null);\n}\n\n/**\n * Triggers the display of the add contact form.\n */\nshowAddForm(): void {\n  this.showFormSubject.next(true);\n}\n\n/**\n * Triggers the display of the edit contact form with a prefilled contact.\n *\n * @param contact - The contact to edit.\n */\nshowEditForm(contact: Contact): void {\n  this.editContactSubject.next(contact);\n  this.showFormSubject.next(true);\n}\n\n/**\n * Hides the contact form and clears the edit state.\n */\nhideForm(): void {\n  this.showFormSubject.next(false);\n  this.editContactSubject.next(null);\n}\n\n/**\n * Deletes a contact from Firestore.\n *\n * @param docId - The Firestore document ID of the contact to delete.\n */\nasync deleteContact(docId: string): Promise {\n  await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n    console.log(err);\n  });\n}\n\n/**\n * Generates a consistent avatar color for a contact based on their name.\n *\n * @param contactName - The contact’s name used to calculate a hash.\n * @returns A hexadecimal color string from the avatarColors array.\n */\ngetContactColor(contactName: string): string {\n  let hash = 0;\n  for (let i = 0; i  {\n  const contactRef = this.getSingleContactsRef(contactId);\n  return getDoc(contactRef).then(snapshot => {\n    if (snapshot.exists()) {\n      return { id: snapshot.id, ...snapshot.data() } as Contact;\n    }\n    return null;\n  });\n}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactDetailsComponent.html":{"url":"components/ContactDetailsComponent.html","title":"component - ContactDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-details/contact-details.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-details\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contact-details.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contact-details.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                animationState\n                            \n                            \n                                    Optional\n                                contact\n                            \n                            \n                                contactVisible\n                            \n                            \n                                    Private\n                                firstLoad\n                            \n                            \n                                isDeleting\n                            \n                            \n                                isEditing\n                            \n                            \n                                isMobile\n                            \n                            \n                                menuOpen\n                            \n                            \n                                    Private\n                                    Optional\n                                subscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeContactDetails\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getInitials\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToList\n                            \n                            \n                                onDeleteContact\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                onEditContact\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMobileMenu\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                backToList\n                            \n                            \n                                noContactVisible\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isAnimationDisabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, elementRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:76\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        backToList\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-details/contact-details.component.ts:75\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        noContactVisible\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-details/contact-details.component.ts:76\n                            \n                        \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Triggered when clicking outside the mobile menu.\nCloses the menu if it is open and the click occurred outside.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe click event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Triggered on window resize.\nAdjusts the mobile layout and menu accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe resize event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeContactDetails\n                        \n                    \n                \n            \n            \n                \ncloseContactDetails()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:250\n                        \n                    \n\n\n            \n                \n                        Closes the contact details view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:242\n                        \n                    \n\n\n            \n                \n                        Returns the color for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe contact's name.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The corresponding color as a hex code.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns the initials of a name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe name from which to generate initials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The initials.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:197\n                        \n                    \n\n\n            \n                \n                        Called when the component is destroyed.\nUnsubscribes from the subscription to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Initializes the component, subscribes to contact changes, and controls animations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToList\n                        \n                    \n                \n            \n            \n                \nonBackToList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:257\n                        \n                    \n\n\n            \n                \n                        Emits the event to return to the contact list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDeleteContact\n                        \n                    \n                \n            \n            \n                \nonDeleteContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:217\n                        \n                    \n\n\n            \n                \n                        Deletes the current contact and clears the selection.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Triggered when clicking outside the mobile menu.\nCloses the menu if it is open and the click occurred outside.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe click event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEditContact\n                        \n                    \n                \n            \n            \n                \nonEditContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:206\n                        \n                    \n\n\n            \n                \n                        Opens the edit form for the current contact.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Triggered on window resize.\nAdjusts the mobile layout and menu accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe resize event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMobileMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMobileMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:125\n                        \n                    \n\n\n            \n                \n                        Opens or closes the mobile menu when on a mobile device.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        animationState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contact\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contactVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        firstLoad\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleting\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEditing\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : window.innerWidth \n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        subscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:72\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isAnimationDisabled\n                    \n                \n\n                \n                    \n                        getisAnimationDisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/app/contacts/contact-details/contact-details.component.ts:136\n                                \n                            \n                    \n                        \n                                Returns whether animations are disabled (e.g., when deleting or editing).\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {\n  Component,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy,\n  HostListener,\n  ElementRef,\n} from '@angular/core';\nimport { ContactService, Contact } from '../../services/contact.service';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-contact-details',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './contact-details.component.html',\n  styleUrl: './contact-details.component.scss',\n\n  animations: [\n    trigger('slideInFromRight', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '250ms ease-in-out',\n          style({ transform: 'translateX(0%)', opacity: 1 })\n        ),\n      ]),\n      transition(':increment', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '250ms ease-in-out',\n          style({ transform: 'translateX(0%)', opacity: 1 })\n        ),\n      ]),\n    ],),\n\n    trigger('slideInOut', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '200ms ease-out',\n          style({ transform: 'translateX(0)', opacity: 1 })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '200ms ease-in',\n          style({ transform: 'translateX(100%)', opacity: 0 })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class ContactDetailsComponent implements OnInit, OnDestroy {\n  contactVisible = false;\n  contact?: Contact;\n  animationState = 0;\n  isDeleting = false;\n  isEditing = false;\n  menuOpen = false;\n  isMobile = window.innerWidth ();\n  @Output() noContactVisible = new EventEmitter();\n\n  constructor(\n    private contactService: ContactService,\n    private elementRef: ElementRef\n  ) {}\n\n  /**\n   * Triggered when clicking outside the mobile menu.\n   * Closes the menu if it is open and the click occurred outside.\n   *\n   * @param {Event} event - The click event.\n   */\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: Event) {\n    const target = event.target as HTMLElement;\n    const mobileMenu =\n      this.elementRef.nativeElement.querySelector('.mobile-menu');\n    const mobileOptions = this.elementRef.nativeElement.querySelector(\n      '.mobile-options-btn'\n    );\n\n    if (\n      this.menuOpen &&\n      !mobileMenu?.contains(target) &&\n      !mobileOptions?.contains(target)\n    ) {\n      this.menuOpen = false;\n    }\n  }\n\n  /**\n   * Triggered on window resize.\n   * Adjusts the mobile layout and menu accordingly.\n   *\n   * @param {Event} event - The resize event.\n   */\n  @HostListener('window:resize', ['$event'])\n  onResize(event: Event) {\n    const width = (event.target as Window).innerWidth;\n    this.isMobile = width  {\n          if (!selectedContact) return null;\n          return (\n            allContacts.find((contact) => contact.id === selectedContact.id) ||\n            selectedContact\n          );\n        })\n      )\n\n      .subscribe({\n        next: (contact) => {\n          const wasEmpty = !this.contact;\n          const isContactChange = contact && contact !== this.contact;\n\n          this.contact = contact || undefined;\n\n          if (!contact) {\n            this.isDeleting = false;\n            this.isEditing = false;\n            this.contactVisible = false;\n\n            setTimeout(() => {\n              this.noContactVisible.emit();\n            }, 100);\n          } else if (isContactChange) {\n            this.isEditing = false;\n\n            if (\n              !this.isDeleting &&\n              (this.firstLoad || wasEmpty || isContactChange)\n            ) {\n              this.contactVisible = false;\n\n              setTimeout(() => {\n                this.contactVisible = true;\n                this.animationState++;\n                this.firstLoad = false;\n              }, 10);\n            }\n          }\n        },\n      });\n  }\n\n  /**\n   * Called when the component is destroyed.\n   * Unsubscribes from the subscription to avoid memory leaks.\n   */\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Opens the edit form for the current contact.\n   */\n  onEditContact(): void {\n    if (this.contact) {\n      this.isEditing = true;\n      this.contactService.showEditForm(this.contact);\n      this.menuOpen = false;\n    }\n  }\n\n  /**\n   * Deletes the current contact and clears the selection.\n   */\n  onDeleteContact(): void {\n    if (this.contact?.id) {\n      this.isDeleting = true;\n      this.menuOpen = false;\n      this.contactService.deleteContact(this.contact.id);\n      this.contactService.clearSelection();\n    }\n  }\n\n  /**\n   * Returns the initials of a name.\n   *\n   * @param {string} [name] - The name from which to generate initials.\n   * @returns {string} The initials.\n   */\n  getInitials(name?: string): string {\n    return this.contactService.getInitials(name);\n  }\n\n  /**\n   * Returns the color for a contact.\n   *\n   * @param {string} [name] - The contact's name.\n   * @returns {string} The corresponding color as a hex code.\n   */\n  getContactColor(name?: string): string {\n    if (!name) return '#9E9E9E';\n    return this.contactService.getContactColor(name);\n  }\n\n  /**\n   * Closes the contact details view.\n   */\n  closeContactDetails(): void {\n    this.contactVisible = false;\n  }\n\n  /**\n   * Emits the event to return to the contact list.\n   */\n  onBackToList() {\n    this.backToList.emit();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Contacts\n      \n      Better with a team\n      \n        \n      \n    \n\n    \n      \n        \n          {{ getInitials(contact.name) }}\n        \n        \n          {{ contact.name || \"Unbekannt\" }}\n\n          \n            \n              \n              \n              Edit\n            \n\n            \n              \n              \n              Delete\n            \n          \n        \n      \n\n      \n        Contact Information\n\n        \n          Email\n          {{ contact.email || \"Keine E-Mail\" }}\n        \n\n        \n          Phone\n          \n            {{ contact.phone || \"Keine Telefonnummer\" }}\n          \n        \n      \n    \n\n    \n      \n      \n    \n\n    \n      \n        \n        \n        Edit\n      \n\n      \n        \n        \n        Delete\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Contacts            Better with a team                                                    {{ getInitials(contact.name) }}                          {{ contact.name || \"Unbekannt\" }}                                                                Edit                                                                  Delete                                                  Contact Information                  Email          {{ contact.email || \"Keine E-Mail\" }}                          Phone                      {{ contact.phone || \"Keine Telefonnummer\" }}                                                                                  Edit                                    Delete            '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactFormComponent.html":{"url":"components/ContactFormComponent.html","title":"component - ContactFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-form/contact-form.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-form\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contact-form.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contact-form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactForm\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                contactToEdit\n                            \n                            \n                                    Private\n                                    Optional\n                                editContactSubscription\n                            \n                            \n                                getDataToEdit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearInputs\n                            \n                            \n                                deleteContact\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                addedContact\n                            \n                            \n                                closeOverlay\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:53\n                            \n                        \n\n                \n                    \n                            Constructor injecting the form builder and contact service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's FormBuilder for creating the form.\n\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService that manages contact CRUD operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        addedContact\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:32\n                            \n                        \n                \n                    \n                        Emits a newly created contact after successful form submission.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeOverlay\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:38\n                            \n                        \n                \n                    \n                        Emits when the form overlay is closed (e.g., after cancel or submit).\nEmits the string 'closed' as an identifier.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearInputs\n                        \n                    \n                \n            \n            \n                \nclearInputs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:139\n                        \n                    \n\n\n            \n                \n                        Resets the form without closing the overlay.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteContact\n                        \n                    \n                \n            \n            \n                \ndeleteContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Deletes the contact being edited (if any) and closes the form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:93\n                        \n                    \n\n\n            \n                \n                        Cleans up the subscription on component destruction to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:66\n                        \n                    \n\n\n            \n                \n                        Initializes the form and subscribes to editContact$ to load contact data\nwhen editing an existing entry.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:102\n                        \n                    \n\n\n            \n                \n                        Closes the contact form, resets its state, and emits a closing event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Handles form submission. Validates input, creates or updates the contact\nusing the ContactService, emits the new contact (if applicable),\nand closes the form.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:43\n                        \n                    \n\n            \n                \n                    The reactive form group for the contact form.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:60\n                        \n                    \n\n            \n                \n                    - Service that manages contact CRUD operations.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:48\n                        \n                    \n\n            \n                \n                    The contact to edit, if editing mode is active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        editContactSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:53\n                        \n                    \n\n            \n                \n                    Subscription to receive the contact data to be edited via the ContactService.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDataToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:79\n                        \n                    \n\n            \n                \n                    Receives a contact to be edited and pre-fills the form fields.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    contact\n                                                    \n                                                            \nThe contact object or null to clear the form.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact, notOnlyWhitespace } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-contact-form',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  templateUrl: './contact-form.component.html',\n  styleUrl: './contact-form.component.scss',\n})\nexport class ContactFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * Emits a newly created contact after successful form submission.\n   */\n  @Output() addedContact = new EventEmitter();\n\n  /**\n   * Emits when the form overlay is closed (e.g., after cancel or submit).\n   * Emits the string 'closed' as an identifier.\n   */\n  @Output() closeOverlay = new EventEmitter();\n\n  /**\n   * The reactive form group for the contact form.\n   */\n  contactForm!: FormGroup;\n\n  /**\n   * The contact to edit, if editing mode is active.\n   */\n  contactToEdit?: Contact;\n\n  /**\n   * Subscription to receive the contact data to be edited via the ContactService.\n   */\n  private editContactSubscription?: Subscription;\n\n  /**\n   * Constructor injecting the form builder and contact service.\n   * @param form - Angular's FormBuilder for creating the form.\n   * @param contactService - Service that manages contact CRUD operations.\n   */\n  constructor(private form: FormBuilder, public contactService: ContactService) { }\n\n  /**\n   * Initializes the form and subscribes to editContact$ to load contact data\n   * when editing an existing entry.\n   */\n  ngOnInit(): void {\n    this.contactForm = this.form.group({\n      name: ['', [Validators.required, notOnlyWhitespace]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.required, Validators.min(10), Validators.pattern(/^\\d+$/)]]\n    });\n    this.editContactSubscription = this.contactService.editContact$.subscribe(this.getDataToEdit);\n  }\n\n  /**\n   * Receives a contact to be edited and pre-fills the form fields.\n   * @param contact - The contact object or null to clear the form.\n   */\n  getDataToEdit = (contact: Contact | null) => {\n    this.contactToEdit = contact || undefined;\n    if (this.contactToEdit) {\n      this.contactForm.patchValue({\n        name: this.contactToEdit.name,\n        email: this.contactToEdit.email,\n        phone: this.contactToEdit.phone\n      });\n    }\n  }\n\n  /**\n   * Cleans up the subscription on component destruction to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    if (this.editContactSubscription) {\n      this.editContactSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Closes the contact form, resets its state, and emits a closing event.\n   */\n  onClose(): void {\n    this.contactService.hideForm();\n    this.contactForm.reset();\n    this.closeOverlay.emit('closed');\n  }\n\n  /**\n   * Handles form submission. Validates input, creates or updates the contact\n   * using the ContactService, emits the new contact (if applicable),\n   * and closes the form.\n   */\n  async onSubmit() {\n    if (this.contactForm.valid) {\n      const { name, email, phone } = this.contactForm.value;\n      const contact: Contact = {\n        name: name.trim(),\n        email: email.trim(),\n        phone: phone.trim()\n      };\n\n      if (this.contactToEdit?.id) {\n        this.contactService.updateContact(this.contactToEdit.id, contact);\n      } else {\n        const newContact = await this.contactService.addContact(contact);\n        if (newContact) {\n          this.addedContact.emit(newContact);\n        }\n      }\n\n      this.clearInputs();\n      this.onClose();\n    }\n  }\n\n  /**\n   * Resets the form without closing the overlay.\n   */\n  clearInputs() {\n    this.contactForm.reset();\n  }\n\n  /**\n   * Deletes the contact being edited (if any) and closes the form.\n   */\n  deleteContact() {\n    if (this.contactToEdit?.id) {\n      this.contactService.deleteContact(this.contactToEdit.id);\n      this.onClose();\n    }\n  }\n}\n\n\n    \n\n    \n        \n    \n        \n          \n              \n              \n              \n              \n              \n               \n            \n        \n     \n    \n        \n        Add contact\n        Edit contact\n        Tasks are better with a team!\n        \n    \n    \n        \n            \n                \n                {{ contactService.getInitials(contactToEdit.name) }}\n            \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! Please add a name.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! This email seems invalid or missing.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oh! Don´t forget the phone number.\n                                \n                 \n                    \n                        Cancel\n                         \n                            \n                            \n                            \n                            \n                            \n                            \n                        \n                    \n                     \n                        Delete\n                    \n                    \n                        Create contact\n                        \n                    \n                    \n                        Save\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                        Add contact        Edit contact        Tasks are better with a team!                                                                    {{ contactService.getInitials(contactToEdit.name) }}                                                                                                                                                                            Oops! Please add a name.                                                                                                                                                                    Oops! This email seems invalid or missing.                                                                                                                                                                    Oh! Don´t forget the phone number.                                                                                             Cancel                                                                                                                                                                                                                                                                                          Delete                                                                Create contact                                                                                        Save                                                                                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactListComponent.html":{"url":"components/ContactListComponent.html","title":"component - ContactListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-list/contact-list.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-list\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./contact-list.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./contact-list.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Private\n                                contactsSubscription\n                            \n                            \n                                currentUser\n                            \n                            \n                                currentUserEmail\n                            \n                            \n                                groupedContacts\n                            \n                            \n                                keyAsc\n                            \n                            \n                                selectedContact\n                            \n                            \n                                    Private\n                                selectionSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUser\n                            \n                            \n                                getInitials\n                            \n                            \n                                groupByInitial\n                            \n                            \n                                isCurrentUser\n                            \n                            \n                                isSelected\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAddNewContact\n                            \n                            \n                                onContactSelect\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactSelected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:84\n                            \n                        \n\n                \n                    \n                            Constructor injecting required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nManages contact data and selection.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nProvides the currently logged-in user's info.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        contactSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-list/contact-list.component.ts:84\n                            \n                        \n                \n                    \n                        Emits an event when a contact is selected.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:48\n                        \n                    \n\n\n            \n                \n                        Identifying the current user to directly select this user in the contact list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:164\n                        \n                    \n\n\n            \n                \n                        Returns the initials of the given name using ContactService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Initials string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupByInitial\n                        \n                    \n                \n            \n            \n                \ngroupByInitial(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Groups contacts alphabetically by the first character of their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of contacts to group.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object with initials as keys and arrays of contacts as values.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCurrentUser\n                        \n                    \n                \n            \n            \n                \nisCurrentUser(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Checks if the given contact matches the current logged-in user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to compare with the current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact's email matches the user's email.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSelected\n                        \n                    \n                \n            \n            \n                \nisSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Determines if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:99\n                        \n                    \n\n\n            \n                \n                        Unsubscribes from all subscriptions to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:27\n                        \n                    \n\n\n            \n                \n                        Initializes the component by loading and grouping contacts,\nidentifying the current user, and subscribing to contact selection.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAddNewContact\n                        \n                    \n                \n            \n            \n                \nonAddNewContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:134\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the \"add contact\" form via the ContactService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelect\n                        \n                    \n                \n            \n            \n                \nonContactSelect(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Handles selection of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:92\n                        \n                    \n\n            \n                \n                    - Manages contact data and selection.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        contactsSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:76\n                        \n                    \n\n            \n                \n                    The display name of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUserEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:71\n                        \n                    \n\n            \n                \n                    The email of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:61\n                        \n                    \n\n            \n                \n                    Holds the contacts grouped by the first letter of their name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyAsc\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:157\n                        \n                    \n\n            \n                \n                    Sorting helper for alphabetical keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedContact\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:66\n                        \n                    \n\n            \n                \n                    The currently selected contact (if any).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectionSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:79\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-contact-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './contact-list.component.html',\n  styleUrls: ['./contact-list.component.scss']\n})\nexport class ContactListComponent implements OnInit, OnDestroy {\n\n    /**\n   * Initializes the component by loading and grouping contacts,\n   * identifying the current user, and subscribing to contact selection.\n   */\n  ngOnInit(): void {\n    this.contactsSubscription = this.contactService.getContacts().subscribe({\n      next: (contacts) => {\n        this.groupedContacts = this.groupByInitial(contacts);\n        if (this.currentUserEmail) {\n          const matchedContact = contacts.find(c => c.email === this.currentUserEmail);\n          if (matchedContact) {\n            this.onContactSelect(matchedContact);\n          }\n        }\n      },\n      error: (error) => {\n        console.error('Error loading contacts:', error);\n      }\n    });\n    this.getCurrentUser();\n  }\n\n  /**\n   * Identifying the current user to directly select this user in the contact list.\n   */\n  getCurrentUser(){\n    const user = this.authService.getCurrentUser();\n    this.currentUser = user?.displayName || null;\n    this.currentUserEmail = user?.email || null;\n\n    this.selectionSubscription = this.contactService.selectedContact$.subscribe(\n      contact => this.selectedContact = contact\n    );\n  }\n\n  /**\n   * Holds the contacts grouped by the first letter of their name.\n   */\n  groupedContacts: { [key: string]: Contact[] } = {};\n\n  /**\n   * The currently selected contact (if any).\n   */\n  selectedContact: Contact | null = null;\n\n  /**\n   * The email of the currently authenticated user.\n   */\n  currentUserEmail: string | null = null;\n\n  /**\n   * The display name of the currently authenticated user.\n   */\n  currentUser: string | null = null;\n\n  private contactsSubscription: Subscription = new Subscription();\n  private selectionSubscription: Subscription = new Subscription();\n\n  /**\n   * Emits an event when a contact is selected.\n   */\n  @Output() contactSelected = new EventEmitter();\n\n  /**\n   * Constructor injecting required services.\n   * @param contactService - Manages contact data and selection.\n   * @param authService - Provides the currently logged-in user's info.\n   */\n  constructor(\n    public contactService: ContactService,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Unsubscribes from all subscriptions to avoid memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.contactsSubscription.unsubscribe();\n    this.selectionSubscription.unsubscribe();\n  }\n\n  /**\n   * Checks if the given contact matches the current logged-in user.\n   * @param contact - The contact to compare with the current user.\n   * @returns True if the contact's email matches the user's email.\n   */\n  isCurrentUser(contact: Contact): boolean {\n    return typeof contact.email === 'string' && contact.email === this.currentUserEmail;\n  }\n\n  /**\n   * Handles selection of a contact.\n   * @param contact - The contact to select.\n   */\n  onContactSelect(contact: Contact): void {\n    this.contactService.selectContact(contact);\n    this.contactSelected.emit();\n  }\n\n  /**\n   * Determines if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected.\n   */\n  isSelected(contact: Contact): boolean {\n    return this.selectedContact?.id === contact.id;\n  }\n\n  /**\n   * Triggers the display of the \"add contact\" form via the ContactService.\n   */\n  onAddNewContact(): void {\n    this.contactService.showAddForm();\n  }\n\n  /**\n   * Groups contacts alphabetically by the first character of their name.\n   * @param contacts - The list of contacts to group.\n   * @returns An object with initials as keys and arrays of contacts as values.\n   */\n  groupByInitial(contacts: Contact[]): { [key: string]: Contact[] } {\n    const validContacts = contacts.filter(contact => contact && contact.name);\n    return validContacts.reduce((groups, contact) => {\n      const initial = contact.name.charAt(0).toUpperCase();\n      groups[initial] = groups[initial] || [];\n      groups[initial].push(contact);\n      groups[initial].sort((a, b) => a.name.localeCompare(b.name));\n      return groups;\n    }, {} as { [key: string]: Contact[] });\n  }\n\n  /**\n   * Sorting helper for alphabetical keys.\n   */\n  keyAsc = (a: any, b: any) => a.key.localeCompare(b.key);\n\n  /**\n   * Returns the initials of the given name using ContactService.\n   * @param name - The full name of the contact.\n   * @returns Initials string.\n   */\n  getInitials(name: string | undefined): string {\n    return this.contactService.getInitials(name);\n  }\n}\n\n    \n\n    \n        \n  \n    Add new contact\n  \n\n  \n    {{ group.key }}\n    \n      \n        {{ contactService.getInitials(contact?.name) }}\n      \n      Me\n      \n        \n          {{ contact?.name || \"Unbekannt\" }}\n        \n        {{ contact?.email || \"Keine E-Mail\" }}\n      \n    \n  \n\n\n\n  \n    \n  \n\n\n    \n\n    \n                \n                    ./contact-list.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.contact-list {\n  width: 100%;\n  max-width: 456px;\n  height: calc(100dvh - 100px);\n  max-height: none;\n  overflow-y: auto;\n  margin-top: -9px;\n  padding-bottom: 80px;\n  background-color: var(--background-light);\n  scrollbar-color: var(--background-default-dark) transparent;\n\n  .add-button {\n    @include btn;\n    @include btn-dark;\n    width: calc(100% - clamp(12px, 3vw, 24px));\n    max-width: 352px;\n    height: clamp(48px, 12vw, 56px);\n    margin-top: 22.5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: clamp(12px, 2.5vw, 16px);\n    transition: background-color 0.2s ease;\n\n    &::after {\n      content: \"\";\n      width: clamp(20px, 4vw, 24px);\n      height: clamp(20px, 4vw, 24px);\n      background-image: url(\"../../../../public/assets/img/svg/add-person.svg\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n  }\n\n  h4 {\n    margin-top: clamp(8px, 2vw, 16px);\n    font-family: \"Inter\", sans-serif;\n    font-weight: 400;\n    font-size: clamp(14px, 3vw, 20px);\n    color: #000000;\n    padding: clamp(8px, 1.5vw, 17px) clamp(12px, 3vw, 36px);\n    gap: 8px;\n    border-bottom: 1px solid var(--background-default-dark);\n    margin-bottom: clamp(4px, 1vw, 8px);\n    max-width: 352px;\n  }\n\n  .contact-entry {\n    display: flex;\n    align-items: center;\n    margin: clamp(4px, 1vw, 8px) 0;\n    padding: clamp(8px, 1.5vw, 15px) clamp(8px, 2vw, 24px);\n    gap: clamp(12px, 2vw, 24px);\n    flex-wrap: wrap;\n    position: relative;\n    cursor: pointer;\n    transition: background-color 0.2s;\n    border-radius: 10px;\n\n    &:hover {\n      background-color: #f5f5f5;\n    }\n\n    &.selected {\n      background-color: #2a3647;\n\n      .info .name {\n        color: #ffffff;\n      }\n\n      .avatar {\n        border: 2px solid #ffffff;\n      }\n    }\n\n    .active-user {\n      @include inter400-fs12;\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      color: var(--text-color-dark);\n      border-radius: 50%;\n      background-color: var(--background-light);\n      border: 2px solid var(--text-color-error);\n      padding: 4px;\n    }\n\n    .avatar {\n      width: 32px;\n      height: 32px;\n      border-radius: 45px;\n      background-color: #ccc;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-right: 10px;\n      font-family: \"Inter\", sans-serif;\n      font-weight: 400;\n      font-size: 12px;\n      color: #ffffff;\n      border: 2px solid transparent;\n      transition: border 0.2s ease;\n    }\n\n    .info {\n      flex: 1;\n      min-width: 0;\n      \n      .name {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(14px, 3vw, 20px);\n        color: #000000;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        margin-bottom: 2px;\n      }\n\n      .email {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(12px, 2.5vw, 16px);\n        color: #007cee;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n  }\n}\n\n@media(max-width: 1000px) {\n  .contact-list {\n    height: calc(100dvh - 190px);\n  }\n}\n\n@media (max-width: 780px) {\n  .contact-list {\n    width: 100%;\n    max-width: none;\n    margin: 0;\n    &::-webkit-scrollbar {\n      width: 4px;\n    }\n    &::-webkit-scrollbar-track {\n      background: transparent;\n    }\n    &::-webkit-scrollbar-thumb {\n      background-color: --background-default-dark;\n      border-radius: 4px;\n    }\n    \n    .add-button {\n      display: none;\n    }\n    \n    h4 {\n      max-width: none;\n      width: 100%;\n    }\n    \n    .contact-entry {\n      width: 100%;\n      max-width: none;\n    }\n  }\n  \n  .fab-container {\n    display: block !important;\n    bottom: 100px !important;\n    right: 20px !important;\n  }\n  \n  .fab {\n    width: 56px;\n    height: 56px;\n    \n    img {\n      width: 30px;\n      height: 21px;\n    }\n  }\n}\n\n.fab-container {\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n  z-index: 1000;\n  display: none;\n}\n\n.fab {\n  width: 56px;\n  height: 56px;\n  border-radius: 46px;\n  background-color: #2a3647;\n  border: none;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: #29ABE2;\n    border: none;\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);\n    transform: scale(1.1);\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  img {\n    width: 30px;\n    height: 21px;\n    filter: brightness(0) invert(1);\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Add new contact        {{ group.key }}                  {{ contactService.getInitials(contact?.name) }}            Me                        {{ contact?.name || \"Unbekannt\" }}                {{ contact?.email || \"Keine E-Mail\" }}                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactManager.html":{"url":"injectables/ContactManager.html","title":"injectable - ContactManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/contact-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                ContactManager handles all contact-related operations for the AddTaskComponent.\nThis includes contact selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                selectedContacts\n                            \n                            \n                                    Private\n                                showContactDropdown\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContactInitials\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                getSelectedContacts\n                            \n                            \n                                getSelectedContactsText\n                            \n                            \n                                getShowContactDropdown\n                            \n                            \n                                isContactSelected\n                            \n                            \n                                selectContact\n                            \n                            \n                                setSelectedContacts\n                            \n                            \n                                setShowContactDropdown\n                            \n                            \n                                toggleContactDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/add-task/contact-manager.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Clears all selected contacts and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns the color for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get color for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactInitials\n                        \n                    \n                \n            \n            \n                \ngetContactInitials(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the initials for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get initials for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's initials.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames(remainingContacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Returns a comma-separated string of remaining contact names.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                remainingContacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe remaining contacts to display.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContacts\n                        \n                    \n                \n            \n            \n                \ngetSelectedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:20\n                        \n                    \n\n\n            \n                \n                        Gets all selected contacts\n\n\n                        \n                            Returns :         Contact[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContactsText\n                        \n                    \n                \n            \n            \n                \ngetSelectedContactsText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for selected contacts.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The text to display in the contact selector.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowContactDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowContactDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Gets the contact dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isContactSelected\n                        \n                    \n                \n            \n            \n                \nisContactSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:70\n                        \n                    \n\n\n            \n                \n                        Checks if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Toggles the selection state of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select or deselect.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedContacts\n                        \n                    \n                \n            \n            \n                \nsetSelectedContacts(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Sets the selected contacts array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowContactDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowContactDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:41\n                        \n                    \n\n\n            \n                \n                        Sets the contact dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleContactDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleContactDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:48\n                        \n                    \n\n\n            \n                \n                        Toggles the contact dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showContactDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Contact, ContactService } from '../services/contact.service';\n\n/**\n * ContactManager handles all contact-related operations for the AddTaskComponent.\n * This includes contact selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactManager {\n  private selectedContacts: Contact[] = [];\n  private showContactDropdown: boolean = false;\n\n  constructor(private contactService: ContactService) {}\n\n  /**\n   * Gets all selected contacts\n   */\n  getSelectedContacts(): Contact[] {\n    return this.selectedContacts;\n  }\n\n  /**\n   * Sets the selected contacts array\n   */\n  setSelectedContacts(contacts: Contact[]): void {\n    this.selectedContacts = contacts;\n  }\n\n  /**\n   * Gets the contact dropdown visibility state\n   */\n  getShowContactDropdown(): boolean {\n    return this.showContactDropdown;\n  }\n\n  /**\n   * Sets the contact dropdown visibility state\n   */\n  setShowContactDropdown(value: boolean): void {\n    this.showContactDropdown = value;\n  }\n\n  /**\n   * Toggles the contact dropdown visibility.\n   */\n  toggleContactDropdown(): void {\n    this.showContactDropdown = !this.showContactDropdown;\n  }\n\n  /**\n   * Toggles the selection state of a contact.\n   * @param contact - The contact to select or deselect.\n   */\n  selectContact(contact: Contact): void {\n    const index = this.selectedContacts.findIndex(c => c.id === contact.id);\n    if (index === -1) {\n      this.selectedContacts.push(contact);\n    } else {\n      this.selectedContacts.splice(index, 1);\n    }\n  }\n\n  /**\n   * Checks if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected, false otherwise.\n   */\n  isContactSelected(contact: Contact): boolean {\n    return this.selectedContacts.some(c => c.id === contact.id);\n  }\n\n  /**\n   * Returns the text to display for selected contacts.\n   * @returns The text to display in the contact selector.\n   */\n  getSelectedContactsText(): string {\n    return 'Select contacts to assign';\n  }\n\n  /**\n   * Returns the initials for a contact.\n   * @param contact - The contact to get initials for.\n   * @returns The contact's initials.\n   */\n  getContactInitials(contact: Contact): string {\n    return this.contactService.getInitials(contact.name);\n  }\n\n  /**\n   * Returns the color for a contact.\n   * @param contact - The contact to get color for.\n   * @returns The contact's color.\n   */\n  getContactColor(contact: Contact): string {\n    return this.contactService.getContactColor(contact.name);\n  }\n\n  /**\n   * Returns a comma-separated string of remaining contact names.\n   * @param remainingContacts - The remaining contacts to display.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(remainingContacts: Contact[]): string {\n    return remainingContacts.map((contact) => contact.name).join(', ');\n  }\n\n  /**\n   * Clears all selected contacts and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedContacts = [];\n    this.showContactDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactService.html":{"url":"injectables/ContactService.html","title":"injectable - ContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable service for managing contact data in Firestore.\nProvides reactive streams for selected contact, form visibility, and editing state.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                avatarColors\n                            \n                            \n                                    Public\n                                editContact$\n                            \n                            \n                                    Private\n                                editContactSubject\n                            \n                            \n                                    Public\n                                selectedContact$\n                            \n                            \n                                    Private\n                                selectedContactSubject\n                            \n                            \n                                    Public\n                                showForm$\n                            \n                            \n                                    Private\n                                showFormSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addContact\n                            \n                            \n                                clearSelection\n                            \n                            \n                                    Async\n                                deleteContact\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                    Async\n                                getContactById\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContacts\n                            \n                            \n                                getContactsRef\n                            \n                            \n                                getInitials\n                            \n                            \n                                getSingleContactsRef\n                            \n                            \n                                hideForm\n                            \n                            \n                                selectContact\n                            \n                            \n                                showAddForm\n                            \n                            \n                                showEditForm\n                            \n                            \n                                    Async\n                                updateContact\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/contact.service.ts:75\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    addContact(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Adds a new contact to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The added contact with its generated ID or null if failed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearSelection\n                        \n                    \n                \n            \n            \n                \nclearSelection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:182\n                        \n                    \n\n\n            \n                \n                        Clears the currently selected contact.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteContact(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:216\n                        \n                    \n\n\n            \n                \n                        Deletes a contact from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Returns a plain JSON object with only the allowed contact fields.\nThis is used to avoid including undefined or extra properties when updating Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact object to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Partial\n\n                        \n                            \n                                A JSON object containing name, email, and phone.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactById(contactId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:255\n                        \n                    \n\n\n            \n                \n                        Fetches a single contact by its Firestore document ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise resolving to the contact object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contactName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:228\n                        \n                    \n\n\n            \n                \n                        Generates a consistent avatar color for a contact based on their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact’s name used to calculate a hash.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A hexadecimal color string from the avatarColors array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContacts\n                        \n                    \n                \n            \n            \n                \ngetContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Returns an observable stream of all contacts from Firestore.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable of Contact array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactsRef\n                        \n                    \n                \n            \n            \n                \ngetContactsRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to the contacts collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:242\n                        \n                    \n\n\n            \n                \n                        Extracts the initials from a contact name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string with one or two uppercase initials, or '?' if the name is invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleContactsRef\n                        \n                    \n                \n            \n            \n                \ngetSingleContactsRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to a single contact document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the contact document.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideForm\n                        \n                    \n                \n            \n            \n                \nhideForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:206\n                        \n                    \n\n\n            \n                \n                        Hides the contact form and clears the edit state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Emits a contact to the selected contact observable.\nUsed to show the contact details in the UI.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showAddForm\n                        \n                    \n                \n            \n            \n                \nshowAddForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the add contact form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEditForm\n                        \n                    \n                \n            \n            \n                \nshowEditForm(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the edit contact form with a prefilled contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to edit.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateContact(docId: string, updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Updates an existing contact in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to update.\n\n\n                                            \n                                        \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated contact data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        avatarColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:69\n                        \n                    \n\n            \n                \n                    Preset avatar colors for visual identification\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        editContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.editContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:66\n                        \n                    \n\n            \n                \n                    Observable for the contact being edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:64\n                        \n                    \n\n            \n                \n                    Currently selected contact to be edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectedContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.selectedContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:56\n                        \n                    \n\n            \n                \n                    Observable for the selected contact\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:54\n                        \n                    \n\n            \n                \n                    Currently selected contact (for viewing or interaction)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.showFormSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:61\n                        \n                    \n\n            \n                \n                    Observable for contact form visibility\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showFormSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:59\n                        \n                    \n\n            \n                \n                    Whether the contact form should be displayed\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n * Updates an existing contact in Firestore.\n *\n * @param docId - The Firestore document ID of the contact to update.\n * @param updatedContact - The updated contact data.\n */\nasync updateContact(docId: string, updatedContact: Contact): Promise {\n  let docRef = this.getSingleContactsRef(docId);\n  await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n    console.error(err);\n  });\n}\n\n/**\n * Returns a plain JSON object with only the allowed contact fields.\n * This is used to avoid including undefined or extra properties when updating Firestore.\n *\n * @param updatedContact - The contact object to sanitize.\n * @returns A JSON object containing name, email, and phone.\n */\ngetCleanJson(updatedContact: Contact): Partial {\n  return {\n    name: updatedContact.name,\n    email: updatedContact.email,\n    phone: updatedContact.phone,\n  };\n}\n\n/**\n * Emits a contact to the selected contact observable.\n * Used to show the contact details in the UI.\n *\n * @param contact - The contact to select.\n */\nselectContact(contact: Contact): void {\n  this.selectedContactSubject.next(contact);\n}\n\n/**\n * Clears the currently selected contact.\n */\nclearSelection(): void {\n  this.selectedContactSubject.next(null);\n}\n\n/**\n * Triggers the display of the add contact form.\n */\nshowAddForm(): void {\n  this.showFormSubject.next(true);\n}\n\n/**\n * Triggers the display of the edit contact form with a prefilled contact.\n *\n * @param contact - The contact to edit.\n */\nshowEditForm(contact: Contact): void {\n  this.editContactSubject.next(contact);\n  this.showFormSubject.next(true);\n}\n\n/**\n * Hides the contact form and clears the edit state.\n */\nhideForm(): void {\n  this.showFormSubject.next(false);\n  this.editContactSubject.next(null);\n}\n\n/**\n * Deletes a contact from Firestore.\n *\n * @param docId - The Firestore document ID of the contact to delete.\n */\nasync deleteContact(docId: string): Promise {\n  await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n    console.log(err);\n  });\n}\n\n/**\n * Generates a consistent avatar color for a contact based on their name.\n *\n * @param contactName - The contact’s name used to calculate a hash.\n * @returns A hexadecimal color string from the avatarColors array.\n */\ngetContactColor(contactName: string): string {\n  let hash = 0;\n  for (let i = 0; i  {\n  const contactRef = this.getSingleContactsRef(contactId);\n  return getDoc(contactRef).then(snapshot => {\n    if (snapshot.exists()) {\n      return { id: snapshot.id, ...snapshot.data() } as Contact;\n    }\n    return null;\n  });\n}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactsComponent.html":{"url":"components/ContactsComponent.html","title":"component - ContactsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contacts.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contacts\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                ContactListComponent\n                                ContactDetailsComponent\n                                ContactFormComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contacts.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contacts.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                animationDirection\n                            \n                            \n                                backgroundVisible\n                            \n                            \n                                showContactDetails\n                            \n                            \n                                showForm$\n                            \n                            \n                                toastAnimationState\n                            \n                            \n                                toastMessageVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToList\n                            \n                            \n                                onContactAdded\n                            \n                            \n                                onContactSelected\n                            \n                            \n                                onNoContactVisible\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                removeBackground\n                            \n                            \n                                setAnimationDirection\n                            \n                            \n                                startMessageAnimation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contacts.component.ts:78\n                            \n                        \n\n                \n                    \n                            Initializes the component and subscribes to the form visibility observable.\nAlso sets up the resize event listener to dynamically adjust the animation direction.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service that manages contact data and UI state.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:93\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: Sets initial animation direction and attaches resize listener.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToList\n                        \n                    \n                \n            \n            \n                \nonBackToList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Handles the back button in mobile view, hiding the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactAdded\n                        \n                    \n                \n            \n            \n                \nonContactAdded(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:106\n                        \n                    \n\n\n            \n                \n                        Called when a new contact is added from the form.\nIt selects the new contact, shows the contact detail view, and triggers a toast.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly added contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelected\n                        \n                    \n                \n            \n            \n                \nonContactSelected()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNoContactVisible\n                        \n                    \n                \n            \n            \n                \nonNoContactVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Hides the contact detail view if no contact is selected and the screen is small.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Called when the slide-in animation of an overlay is completed.\nDelays showing the background overlay to prevent flickering.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe animation transition event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Handles the event emitted by the contact form when it is closed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating the close state (e.g., 'closed').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Determines the animation direction based on screen width.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current window width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startMessageAnimation\n                        \n                    \n                \n            \n            \n                \nstartMessageAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:123\n                        \n                    \n\n\n            \n                \n                        Starts the toast message animation and automatically hides it after 3 seconds.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:53\n                        \n                    \n\n            \n                \n                    Current direction of the animation for overlay transitions.\nIt switches between 'right' for desktop and 'bottom' for mobile views.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:68\n                        \n                    \n\n            \n                \n                    Whether the background overlay is visible behind the form or detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContactDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:78\n                        \n                    \n\n            \n                \n                    Controls whether the contact detail view is visible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:73\n                        \n                    \n\n            \n                \n                    Observable that determines whether the contact form should be shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastAnimationState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\" | \"void\"\n\n                    \n                \n                \n                    \n                        Default value : 'void'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:63\n                        \n                    \n\n            \n                \n                    Controls the current animation state of the toast.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastMessageVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:58\n                        \n                    \n\n            \n                \n                    Whether the toast message is currently visible.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ContactListComponent } from './contact-list/contact-list.component';\nimport { ContactDetailsComponent } from './contact-details/contact-details.component';\nimport { ContactFormComponent } from './contact-form/contact-form.component';\nimport { ContactService, Contact } from './../services/contact.service';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { trigger, style, transition, animate, AnimationEvent } from '@angular/animations';\n\n@Component({\n  selector: 'app-contacts',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ContactListComponent,\n    ContactDetailsComponent,\n    ContactFormComponent,\n  ],\n  templateUrl: './contacts.component.html',\n  styleUrl: './contacts.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition('void => right', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateX(0)', opacity: 1 })),\n      ]),\n      transition('right => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateX(100%)', opacity: 0 })),\n      ]),\n      transition('void => bottom', [\n        style({ transform: 'translateY(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateY(0)', opacity: 1 })),\n      ]),\n      transition('bottom => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateY(100%)', opacity: 0 })),\n      ]),\n    ]),\n  ],\n})\nexport class ContactsComponent {\n\n  /**\n   * Current direction of the animation for overlay transitions.\n   * It switches between 'right' for desktop and 'bottom' for mobile views.\n   */\n  animationDirection: 'right' | 'bottom' = 'right';\n\n  /**\n   * Whether the toast message is currently visible.\n   */\n  toastMessageVisible = false;\n\n  /**\n   * Controls the current animation state of the toast.\n   */\n  toastAnimationState: 'right' | 'bottom' | 'void' = 'void';\n\n  /**\n   * Whether the background overlay is visible behind the form or detail view.\n   */\n  backgroundVisible = false;\n\n  /**\n   * Observable that determines whether the contact form should be shown.\n   */\n  showForm$: Observable;\n\n  /**\n   * Controls whether the contact detail view is visible.\n   */\n  showContactDetails = false;\n\n  /**\n   * Initializes the component and subscribes to the form visibility observable.\n   * Also sets up the resize event listener to dynamically adjust the animation direction.\n   * \n   * @param contactService - The service that manages contact data and UI state.\n   */\n  constructor(private contactService: ContactService) {\n    this.showForm$ = this.contactService.showForm$;\n  }\n\n  /**\n   * Lifecycle hook: Sets initial animation direction and attaches resize listener.\n   */\n  ngOnInit() {\n    this.setAnimationDirection(window.innerWidth);\n    window.addEventListener('resize', () => {\n      this.setAnimationDirection(window.innerWidth);\n    });\n  }\n\n  /**\n   * Called when a new contact is added from the form.\n   * It selects the new contact, shows the contact detail view, and triggers a toast.\n   * \n   * @param newContact - The newly added contact.\n   */\n  onContactAdded(newContact: Contact) {\n    this.contactService.selectContact(newContact);\n    this.onContactSelected();\n    this.startMessageAnimation();\n  }\n\n  /**\n   * Determines the animation direction based on screen width.\n   * @param width - The current window width.\n   */\n  setAnimationDirection(width: number) {\n    this.animationDirection = width  {\n      this.toastMessageVisible = false;\n      this.toastAnimationState = 'void';\n    }, 3000);\n  }\n\n  /**\n   * Handles the event emitted by the contact form when it is closed.\n   * @param event - A string indicating the close state (e.g., 'closed').\n   */\n  removeBackground(event: string) {\n    if (event === 'closed') {\n      this.backgroundVisible = false;\n    }\n  }\n\n  /**\n   * Called when the slide-in animation of an overlay is completed.\n   * Delays showing the background overlay to prevent flickering.\n   * \n   * @param event - The animation transition event.\n   */\n  onOverlayAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'right' || event.toState === 'bottom') {\n      setTimeout(() => {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Handles the back button in mobile view, hiding the contact detail component.\n   */\n  onBackToList() {\n    this.showContactDetails = false;\n  }\n\n  /**\n   * Triggers the display of the contact detail component.\n   */\n  onContactSelected() {\n    this.showContactDetails = true;\n  }\n\n  /**\n   * Hides the contact detail view if no contact is selected and the screen is small.\n   */\n  onNoContactVisible() {\n    if (window.innerWidth \n    \n\n    \n        \n    \n     \n    \n     \n      \n    \n\n\n\n  \n    \n  \n\n\n\n  Contact successfully created\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                      Contact successfully created'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DragDropManager.html":{"url":"injectables/DragDropManager.html","title":"injectable - DragDropManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DragDropManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/drag-drop-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                DragDropManager handles all drag-and-drop operations for the BoardComponent.\nThis includes drag delays, drop handling, auto-scrolling, and task status updates.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                getDragDelay\n                            \n                            \n                                handleDragMove\n                            \n                            \n                                handleDrop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/drag-drop-manager.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeTaskStatus\n                        \n                    \n                \n            \n            \n                \nchangeTaskStatus(taskId: string, status: string, taskList: Task[], reloadCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:102\n                        \n                    \n\n\n            \n                \n                        Updates the status of a task and persists the change via the task service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new status for the task.\n\n\n                                            \n                                        \n                                        \n                                                taskList\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current task list to find the task in.\n\n\n                                            \n                                        \n                                        \n                                                reloadCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to reload tasks after update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDragDelay\n                        \n                    \n                \n            \n            \n                \ngetDragDelay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:21\n                        \n                    \n\n\n            \n                \n                        Returns the delay for starting a drag action based on screen width.\nPrevents accidental drags on small screens.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                Drag delay in milliseconds.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDragMove\n                        \n                    \n                \n            \n            \n                \nhandleDragMove(event: CdkDragMove, scrollSection: ElementRef)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Handles automatic scrolling while dragging near the top or bottom edge\nof the scrollable task section.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        CdkDragMove\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragMove event containing the pointer position.\n\n\n                                            \n                                        \n                                        \n                                                scrollSection\n                                            \n                                                        ElementRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe scrollable section element reference.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDrop\n                        \n                    \n                \n            \n            \n                \nhandleDrop(event: CdkDragDrop, updateCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:32\n                        \n                    \n\n\n            \n                \n                        Handles drag-and-drop actions for tasks using the Angular CDK.\nUpdates the task's status and reorders task lists accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CdkDragDrop\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragDrop event containing task data and drop context.\n\n\n                                            \n                                        \n                                        \n                                                updateCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to update task lists after drop.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ElementRef } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem, CdkDragMove } from '@angular/cdk/drag-drop';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * DragDropManager handles all drag-and-drop operations for the BoardComponent.\n * This includes drag delays, drop handling, auto-scrolling, and task status updates.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DragDropManager {\n  constructor(private taskService: TaskService) {}\n\n  /**\n   * Returns the delay for starting a drag action based on screen width.\n   * Prevents accidental drags on small screens.\n   *\n   * @returns Drag delay in milliseconds.\n   */\n  getDragDelay(): number {\n    return window.innerWidth , updateCallback: () => void): void {\n    const task = event.item.data as Task;\n    let newStatus: Task['status'];\n    \n    if (event.container.id === 'todoList') {\n      newStatus = 'to-do';\n    } else if (event.container.id === 'inprogressList') {\n      newStatus = 'in-progress';\n    } else if (event.container.id === 'awaitfeedbackList') {\n      newStatus = 'await-feedback';\n    } else if (event.container.id === 'doneList') {\n      newStatus = 'done';\n    } else {\n      return;\n    }\n\n    if (event.previousContainer === event.container) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n      if (task.id && task.status !== newStatus) {\n        const updatedTask: Task = { ...task, status: newStatus };\n        this.taskService.updateTask(task.id, updatedTask).catch((error) => {\n          console.error('Error updating task status:', error);\n        });\n      }\n    }\n    updateCallback();\n  }\n\n  /**\n   * Handles automatic scrolling while dragging near the top or bottom edge\n   * of the scrollable task section.\n   *\n   * @param event - The CdkDragMove event containing the pointer position.\n   * @param scrollSection - The scrollable section element reference.\n   */\n  handleDragMove(event: CdkDragMove, scrollSection: ElementRef): void {\n    const mouseY = event.pointerPosition.y;\n    const threshold = 100;\n    const scrollStep = 30;\n    const section = scrollSection?.nativeElement;\n    \n    if (!section) return;\n    \n    const rect = section.getBoundingClientRect();\n    if (mouseY  void\n  ): void {\n    const task = taskList.find((t) => t.id === taskId);\n    if (task && task.status !== status) {\n      const updatedTask = { ...task, status };\n      this.taskService.updateTask(taskId, updatedTask).then(() => {\n        reloadCallback();\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirestoreTimestamp.html":{"url":"interfaces/FirestoreTimestamp.html","title":"interface - FirestoreTimestamp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FirestoreTimestamp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/summary/summary.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toDate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toDate\n                        \n                    \n                \n            \n            \n                \ntoDate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showGreeting = true;\n        this.greetingState = 'start';\n        setTimeout(() => {\n          this.greetingState = 'moved';\n          setTimeout(() => {\n            this.showGreeting = false;\n            sessionStorage.setItem('greetingShown', 'true');\n          }, 2000);\n        }, 500);\n      } else {\n        this.showGreeting = false;\n      }\n    });\n\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n\n      this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n      this.doneCount = this.countTasksByStatus(tasks, 'done');\n      this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n      this.awaitingFeedbackCount = this.countTasksByStatus(\n        tasks,\n        'await-feedback'\n      );\n\n      const now = new Date();\n      const futureTasks = tasks\n        .filter((t) => t.date && t.status !== 'done')\n        .map((t) => {\n          let dateObj: Date | null = null;\n          if (t.date instanceof Date) {\n            dateObj = t.date;\n          } else if (this.isFirestoreTimestamp(t.date)) {\n            dateObj = t.date.toDate();\n          } else if (typeof t.date === 'string' || typeof t.date === 'number') {\n            dateObj = new Date(t.date);\n          }\n          return { ...t, dateObj };\n        })\n        .filter((t) => t.dateObj && t.dateObj > now);\n\n      if (futureTasks.length > 0) {\n        futureTasks.sort((a, b) => a.dateObj!.getTime() - b.dateObj!.getTime());\n        const nextDate = futureTasks[0].dateObj!;\n        this.nextDeadlineDate = nextDate;\n        this.nextDeadlineCount = futureTasks.filter(\n          (t) => t.dateObj!.getTime() === nextDate.getTime()\n        ).length;\n      } else {\n        this.nextDeadlineDate = null;\n        this.nextDeadlineCount = 0;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/footer/footer.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n\n            \n                styleUrl\n                ./footer.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-footer',\n  imports: [\n    RouterModule,\n  ],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss'\n})\nexport class FooterComponent {}\n\n    \n\n    \n        \n    \n        \n            Privacy Policy\n        \n        \n            Legal notice\n        \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Privacy Policy                            Legal notice                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/header/header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isMobile\n                            \n                            \n                                menuOpen\n                            \n                            \n                                    \n                                menuRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUserName\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/header/header.component.ts:62\n                            \n                        \n\n                \n                    \n                            Initializes the header component and injects the authentication service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service responsible for user authentication.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUserName\n                        \n                    \n                \n            \n            \n                \ngetCurrentUserName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:129\n                        \n                    \n\n\n            \n                \n                        Returns the display name or email of the currently authenticated user.\nIf no user is found, returns a default label.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The display name, email, or a fallback string ('User').\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Logs the user out by calling the authentication service,\nclears session storage, and closes the menu.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the mobile menu.\nStops propagation to prevent triggering the outside click handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The click event on the toggle button.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : window.innerWidth \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:57\n                        \n                    \n\n            \n                \n                    Indicates if the current viewport is considered mobile (width \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:52\n                        \n                    \n\n            \n                \n                    Tracks whether the mobile menu is currently open.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        menuRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('menu')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:62\n                        \n                    \n\n            \n                \n                    Reference to the menu DOM element, used for detecting outside clicks.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, ViewChild, ElementRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '200ms ease-out',\n          style({ transform: 'translateX(0)', opacity: 1 })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '200ms ease-in',\n          style({ transform: 'translateX(100%)', opacity: 0 })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class HeaderComponent {\n  /**\n   * Tracks whether the mobile menu is currently open.\n   */\n  menuOpen = false;\n\n  /**\n   * Indicates if the current viewport is considered mobile (width  {\n    await this.authService.signOutUser();\n    sessionStorage.removeItem('greetingShown');\n    this.menuOpen = false;\n  }\n\n  /**\n   * Returns the display name or email of the currently authenticated user.\n   * If no user is found, returns a default label.\n   * \n   * @returns The display name, email, or a fallback string ('User').\n   */\n  getCurrentUserName(): string {\n    const user = this.authService.getCurrentUser();\n    return user?.displayName || user?.email || 'User';\n  }\n\n   /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n\n    \n      Kanban Project Management Tool\n    \n\n    \n      \n        \n      \n\n      \n        {{ getCurrentUserName().charAt(0).toUpperCase() }}\n        \n          Help\n          Privacy Policy\n          Legal notice\n          Log out\n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          Kanban Project Management Tool                                          {{ getCurrentUserName().charAt(0).toUpperCase() }}                  Help          Privacy Policy          Legal notice          Log out                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HelpComponent.html":{"url":"components/HelpComponent.html","title":"component - HelpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HelpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/help/help.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-help\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./help.component.html\n            \n\n\n\n            \n                styleUrl\n                ./help.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/help/help.component.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of HelpComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/help/help.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-help',\n  imports: [RouterModule],\n  templateUrl: './help.component.html',\n  styleUrl: './help.component.scss'\n})\nexport class HelpComponent {\n\n  /**\n   * Creates an instance of HelpComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n \n     Help\n     \n        \n            \n        \n     \n \n\n  \n    Welcome to the help page for Join, your guide to using our kanban project management tool.\n    Here, we'll provide an overview of what Join is, how it can benefit you, and how to use it.\n  \n\n  \n    What is Join?\n    \n      Join is a kanban-based project management tool designed and built by a group of dedicated\n      students as part of their web development bootcamp at the Developer Akademie.\n    \n    \n      Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit\n      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users\n      manage their tasks and projects in an intuitive, visual interface.\n    \n    \n      It is important to note that Join is designed as an educational exercise and is not intended for extensive\n      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent\n      availability, reliability, accuracy, or other aspects of quality regarding Join.\n    \n  \n\n  \n    How to use it\n    \n      \n        1. Exploring the Board\n        \n          In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you'll find a default board. \n          This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.\n        \n      \n      \n        2. Creating Contacts\n        \n          In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,\n          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board. \n          If you are logged in with your personal account, you will find yourself as a contact within the contact list.\n        \n      \n      \n        3. Adding Cards\n        \n          Now that you've added your contacts, you can start adding new cards. Cards represent individual tasks. Click the\n          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task\n          name, description, due date, assignees, etc.\n        \n      \n      \n        4. Moving Cards\n        \n          As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the\n          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages \n          in the board by clicking the \"...\" button.\n        \n      \n      \n        5. Deleting Cards\n        \n          Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will\n          permanently remove it from the board. Please exercise caution when deleting cards, as this action is\n          irreversible.\n        \n      \n    \n    \n      Remember that using Join effectively requires consistent updates from you and your team to ensure the board\n      reflects the current state of your project.\n    \n  \n\n  \n    Still have questions?\n    \n      Feel free to contact us at info&#64;michelle-puschkarow.de. We're here to help!\n    \n    Enjoy using Join!\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Help                                             Welcome to the help page for Join, your guide to using our kanban project management tool.    Here, we\\'ll provide an overview of what Join is, how it can benefit you, and how to use it.        What is Join?          Join is a kanban-based project management tool designed and built by a group of dedicated      students as part of their web development bootcamp at the Developer Akademie.              Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users      manage their tasks and projects in an intuitive, visual interface.              It is important to note that Join is designed as an educational exercise and is not intended for extensive      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent      availability, reliability, accuracy, or other aspects of quality regarding Join.            How to use it                  1. Exploring the Board                  In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you\\'ll find a default board.           This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.                            2. Creating Contacts                  In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board.           If you are logged in with your personal account, you will find yourself as a contact within the contact list.                            3. Adding Cards                  Now that you\\'ve added your contacts, you can start adding new cards. Cards represent individual tasks. Click the          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task          name, description, due date, assignees, etc.                            4. Moving Cards                  As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages           in the board by clicking the \"...\" button.                            5. Deleting Cards                  Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will          permanently remove it from the board. Please exercise caution when deleting cards, as this action is          irreversible.                            Remember that using Join effectively requires consistent updates from you and your team to ensure the board      reflects the current state of your project.            Still have questions?          Feel free to contact us at info@michelle-puschkarow.de. We\\'re here to help!        Enjoy using Join!  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HelpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegalNoticeComponent.html":{"url":"components/LegalNoticeComponent.html","title":"component - LegalNoticeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LegalNoticeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/legal-notice/legal-notice.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-legal-notice\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./legal-notice.component.html\n            \n\n\n\n            \n                styleUrl\n                ./legal-notice.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/legal-notice/legal-notice.component.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of LegalNoticeComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/legal-notice/legal-notice.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-legal-notice',\n  imports: [RouterModule],\n  templateUrl: './legal-notice.component.html',\n  styleUrl: './legal-notice.component.scss'\n})\nexport class LegalNoticeComponent {\n\n  /**\n   * Creates an instance of LegalNoticeComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n    \n\n    \n        \n  \n     Legal Notice\n     \n        \n            \n        \n     \n  \n\n  \n    Imprint\n    Dr. Michelle Puschkarow\n    Waldingstraße 6\n    22391 Hamburg\n    info&#64;michelle-puschkarow.de\n    Represented by:\n    Marco Palummieri\n    Viktor Naumann\n    Jenny Domsgen\n  \n\n  \n    Acceptance of Terms\n    \n      By accessing and using Join (Product), you acknowledge and agree to the following terms and\n      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.\n      We, the listed students, may update or change the terms and conditions from time to time without notice.\n    \n  \n\n  \n    Scope and Ownership of the Product\n    \n      Join has been developed as part of a student group project in a web development bootcamp at the Developer\n      Akademie GmbH. It has an educational purpose and is not intended for extensive personal &amp; business usage. As\n      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality\n      regarding this Product.\n    \n    \n      The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,\n      distribution, or replication of the design is strictly prohibited.\n    \n  \n\n  \n    Proprietary Right\n    \n      Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in\n      Join, including any associated copyrighted material, trademarks,\n      and other proprietary information.\n    \n  \n\n  \n    Use of the Product\n    \n      Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.\n      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly\n      prohibited. You are solely responsible for your interactions with other users of Join.\n    \n  \n\n  \n    Disclaimer of Warranties and Limitation of Liability\n    \n      Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to\n      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.\n    \n    \n      In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,\n      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of\n      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such\n      damages, arising out of or in connection with the use or performance of Join.\n    \n  \n\n  \n    Indemnity\n    \n      You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our\n      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,\n      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join\n      and/or your breach of this Legal Notice.\n    \n  \n\n  Date: July 17, 2025\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '       Legal Notice                                              Imprint    Dr. Michelle Puschkarow    Waldingstraße 6    22391 Hamburg    info@michelle-puschkarow.de    Represented by:    Marco Palummieri    Viktor Naumann    Jenny Domsgen        Acceptance of Terms          By accessing and using Join (Product), you acknowledge and agree to the following terms and      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.      We, the listed students, may update or change the terms and conditions from time to time without notice.            Scope and Ownership of the Product          Join has been developed as part of a student group project in a web development bootcamp at the Developer      Akademie GmbH. It has an educational purpose and is not intended for extensive personal & business usage. As      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality      regarding this Product.              The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,      distribution, or replication of the design is strictly prohibited.            Proprietary Right          Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in      Join, including any associated copyrighted material, trademarks,      and other proprietary information.            Use of the Product          Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly      prohibited. You are solely responsible for your interactions with other users of Join.            Disclaimer of Warranties and Limitation of Liability          Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.              In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such      damages, arising out of or in connection with the use or performance of Join.            Indemnity          You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join      and/or your breach of this Legal Notice.        Date: July 17, 2025'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LegalNoticeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login/login.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                LoginHeaderComponent\n                                FooterComponent\n                            CommonModule\n                            ReactiveFormsModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                isTouchDevice\n                            \n                            \n                                loginForm\n                            \n                            \n                                logoState\n                            \n                            \n                                pageLoaded\n                            \n                            \n                                showPassword\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkIfTouchDevice\n                            \n                            \n                                getValidationMessage\n                            \n                            \n                                    Private\n                                initializeAnimation\n                            \n                            \n                                    Private\n                                initializeForm\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Async\n                                onGuestLogin\n                            \n                            \n                                    Async\n                                onLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/login/login.component.ts:94\n                            \n                        \n\n                \n                    \n                            Initializes the LoginComponent and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder instance for creating the login form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling authentication\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router for navigation after login\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkIfTouchDevice\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfTouchDevice()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:122\n                        \n                    \n\n\n            \n                \n                        Checks whether the user's device is a touch-enabled device.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:195\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for a given form field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the form control (e.g. 'email' or 'password')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string message describing the validation issue.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:140\n                        \n                    \n\n\n            \n                \n                        Triggers a delayed logo animation if it hasn't already occurred.\nStores a flag in session storage to prevent repeat animation.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:129\n                        \n                    \n\n\n            \n                \n                        Initializes the reactive login form with validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:207\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: resets the loading state when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: initializes the login form, touch detection,\nand triggers logo animation on first visit.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onGuestLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onGuestLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:177\n                        \n                    \n\n\n            \n                \n                        Logs in as a guest user using the AuthService.\nNavigates to the summary page on success or displays an error.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:156\n                        \n                    \n\n\n            \n                \n                        Handles user login using credentials from the form.\nShows loading indicator and displays errors if authentication fails.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:79\n                        \n                    \n\n            \n                \n                    Displays the current error message if login fails.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:84\n                        \n                    \n\n            \n                \n                    Shows whether a login request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:94\n                        \n                    \n\n            \n                \n                    Detects if the device supports touch input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:74\n                        \n                    \n\n            \n                \n                    Reactive form group for email and password login fields.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:64\n                        \n                    \n\n            \n                \n                    State of the logo animation. 'start' before animation, 'moved' after.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageLoaded\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:69\n                        \n                    \n\n            \n                \n                    Indicates whether the page has finished loading (used for triggering animation).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:89\n                        \n                    \n\n            \n                \n                    Indicates whether the password should be shown in plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FooterComponent } from '../footer/footer.component';\nimport { LoginHeaderComponent } from '../login-header/login-header.component';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  group\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router, RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    LoginHeaderComponent,\n    FooterComponent,\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n  animations: [\n    trigger('fadeOutWrapper', [\n      state('start', style({\n        opacity: 1\n      })),\n      state('moved', style({\n        opacity: 0\n      })),\n      transition('start => moved', [\n        animate('2s 2s ease-in-out')\n      ])\n    ])\n  ]\n})\nexport class LoginComponent {\n  /**\n   * State of the logo animation. `'start'` before animation, `'moved'` after.\n   */\n  logoState: 'start' | 'moved' = 'start';\n\n  /**\n   * Indicates whether the page has finished loading (used for triggering animation).\n   */\n  pageLoaded = false;\n\n  /**\n   * Reactive form group for email and password login fields.\n   */\n  loginForm!: FormGroup;\n\n  /**\n   * Displays the current error message if login fails.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Shows whether a login request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Indicates whether the password should be shown in plain text.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Detects if the device supports touch input.\n   */\n  isTouchDevice = false;\n\n  /**\n   * Initializes the LoginComponent and injects required services.\n   * \n   * @param fb FormBuilder instance for creating the login form\n   * @param authService Service for handling authentication\n   * @param router Router for navigation after login\n   */\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n  ) {}\n\n  /**\n   * Lifecycle hook: initializes the login form, touch detection,\n   * and triggers logo animation on first visit.\n   */\n  ngOnInit(): void {\n    this.initializeForm();\n    this.checkIfTouchDevice();\n    this.initializeAnimation();    \n  }\n\n  /**\n   * Checks whether the user's device is a touch-enabled device.\n   */\n  private checkIfTouchDevice(): void {\n    this.isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n  }\n\n  /**\n   * Initializes the reactive login form with validators.\n   */\n  private initializeForm(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  /**\n   * Triggers a delayed logo animation if it hasn't already occurred.\n   * Stores a flag in session storage to prevent repeat animation.\n   */\n  private initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoMoved')) {\n      setTimeout(() => {\n        this.pageLoaded = true;\n        this.logoState = 'moved';\n        sessionStorage.setItem('logoMoved', 'true');\n      }, 100);\n    } else {\n      this.logoState = 'moved';\n    }\n  }\n\n  /**\n   * Handles user login using credentials from the form.\n   * Shows loading indicator and displays errors if authentication fails.\n   */\n  async onLogin(): Promise {\n    if (this.loginForm.invalid) {\n      this.loginForm.markAllAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = '';\n    const { email, password } = this.loginForm.value;\n    const result = await this.authService.signIn(email, password);\n    if (result.success) {\n      this.router.navigate(['/summary']);\n    } else {\n      this.errorMessage = result.message || 'Login failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Logs in as a guest user using the AuthService.\n   * Navigates to the summary page on success or displays an error.\n   */\n  async onGuestLogin(): Promise {\n    this.isLoading = true;\n    this.errorMessage = '';\n    const result = await this.authService.signInAsGuest();\n    if (result.success) {\n      this.router.navigate(['/summary']);\n    } else {\n      this.errorMessage = result.message || 'Guest login failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for a given form field.\n   * \n   * @param field The name of the form control (e.g. 'email' or 'password')\n   * @returns A string message describing the validation issue.\n   */\n  getValidationMessage(field: string): string {\n    const control = this.loginForm.get(field);\n    if (!control || !control.touched || !control.errors) return '';\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['email']) return 'Please enter a valid email address';\n    if (control.errors['minlength']) return 'Password must be at least 8 characters long';\n    return '';\n  }\n\n  /**\n   * Lifecycle hook: resets the loading state when the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    this.isLoading = false;\n  }\n}\n\n    \n\n    \n        \n    \n    \n        \n    \n\n    \n        Log in\n        \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('email') }}\n                    \n                \n                \n                    \n                        \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('password') }}\n                    \n                \n                {{ errorMessage }}\n            \n            \n                \n                    {{ isLoading ? 'Loading...' : 'Log in' }}\n                \n                \n                    {{ isLoading ? 'Loading...' : 'Guest Log in' }}\n                \n            \n        \n    \n\n    \n        Not a Join user?\n        \n            Sign up\n        \n    \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                Log in                                                                                                                                                                                                {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                        {{ getValidationMessage(\\'password\\') }}                                                    {{ errorMessage }}                                                            {{ isLoading ? \\'Loading...\\' : \\'Log in\\' }}                                                    {{ isLoading ? \\'Loading...\\' : \\'Guest Log in\\' }}                                                    Not a Join user?                    Sign up                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginHeaderComponent.html":{"url":"components/LoginHeaderComponent.html","title":"component - LoginHeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginHeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login-header/login-header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login-header\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login-header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login-header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTouchDevice\n                            \n                            \n                                logoState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initializeAnimation\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \ninitializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:69\n                        \n                    \n\n\n            \n                \n                        Triggers the logo fade-in animation if it hasn’t already played during the session.\nStores a flag in sessionStorage to prevent the animation from repeating.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:61\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that initializes the animation state when the component loads.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:56\n                        \n                    \n\n            \n                \n                    Indicates whether the current device supports touch input.\nCurrently unused, but reserved for future enhancements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"appear\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:50\n                        \n                    \n\n            \n                \n                    The current state of the logo animation.\n\n'start': hidden state with opacity 0\n'appear': visible state with opacity 1\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/animations';\n\n\n@Component({\n  selector: 'app-login-header',\n  imports: [\n    RouterModule,\n  ],\n  templateUrl: './login-header.component.html',\n  styleUrl: './login-header.component.scss',\n  animations: [\n    trigger('fadeOut', [\n      state('start', style({\n        opacity: 0\n      })),\n      state('appear', style({\n        opacity: 1\n      })),\n      transition('start => appear', [\n        animate('2s 0.7s ease-in-out')\n      ])\n    ])\n  ]\n})\nexport class LoginHeaderComponent {\n  /**\n   * The current state of the logo animation.\n   * - `'start'`: hidden state with opacity 0\n   * - `'appear'`: visible state with opacity 1\n   */\n  logoState: 'start' | 'appear' = 'start';\n\n  /**\n   * Indicates whether the current device supports touch input.\n   * Currently unused, but reserved for future enhancements.\n   */\n  isTouchDevice: boolean = false;\n\n  /**\n   * Lifecycle hook that initializes the animation state when the component loads.\n   */\n  ngOnInit(): void {\n    this.initializeAnimation();\n  }\n\n  /**\n   * Triggers the logo fade-in animation if it hasn’t already played during the session.\n   * Stores a flag in sessionStorage to prevent the animation from repeating.\n   */\n  initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoAppeared')) {\n      setTimeout(() => {\n        this.logoState = 'appear';\n        sessionStorage.setItem('logoAppeared', 'true');\n      }, 100);\n    } else {\n      this.logoState = 'appear';\n    }\n  }\n}\n    \n\n    \n        \n    \n        \n    \n    \n        Not a Join user?\n        \n            Sign up\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Not a Join user?                    Sign up            '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginHeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NavigationHistoryService.html":{"url":"injectables/NavigationHistoryService.html","title":"injectable - NavigationHistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NavigationHistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/navigation-history.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service to keep track of recent navigation history within the Angular application.\nStores the last 3 visited URLs (including the current one) and allows navigation\nback to the previous URL.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                history\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getHistory\n                            \n                            \n                                    Public\n                                getPreviousUrl\n                            \n                            \n                                    Public\n                                navigateBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/navigation-history.service.ts:16\n                            \n                        \n\n                \n                    \n                            Subscribes to Angular Router events and tracks navigation history.\nKeeps the last 3 visited URLs (including the current one), trimming\nthe oldest entry when the limit is reached.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used to listen to navigation events.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Returns a copy of the navigation history.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of the last visited URLs (maximum of 3).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getPreviousUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPreviousUrl()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Gets the URL visited before the current one.\n\n\n                        \n                            Returns :     string | null\n\n                        \n                            \n                                The previous URL, or null if not available.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        navigateBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous URL if available.\nIf no previous URL is stored, navigates to the root path ('/').\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/services/navigation-history.service.ts:16\n                        \n                    \n\n            \n                \n                    Internal array holding the last 3 visited URLs\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n/**\n * A service to keep track of recent navigation history within the Angular application.\n * \n * Stores the last 3 visited URLs (including the current one) and allows navigation\n * back to the previous URL.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationHistoryService {\n  /** Internal array holding the last 3 visited URLs */\n  private history: string[] = [];\n\n  /**\n   * Subscribes to Angular Router events and tracks navigation history.\n   * \n   * Keeps the last 3 visited URLs (including the current one), trimming\n   * the oldest entry when the limit is reached.\n   * \n   * @param router - Angular Router used to listen to navigation events.\n   */\n  constructor(private router: Router) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        if (this.history.length === 3) {\n          this.history.shift(); // Remove the oldest URL\n        }\n        this.history.push(event.urlAfterRedirects);\n      });\n  }\n\n  /**\n   * Returns a copy of the navigation history.\n   * \n   * @returns An array of the last visited URLs (maximum of 3).\n   */\n  public getHistory(): string[] {\n    return [...this.history];\n  }\n\n  /**\n   * Gets the URL visited before the current one.\n   * \n   * @returns The previous URL, or null if not available.\n   */\n  public getPreviousUrl(): string | null {\n    if (this.history.length > 1) {\n      return this.history[this.history.length - 2];\n    }\n    return null;\n  }\n\n  /**\n   * Navigates back to the previous URL if available.\n   * \n   * If no previous URL is stored, navigates to the root path (`'/'`).\n   */\n  public navigateBack(): void {\n    const previousUrl = this.getPreviousUrl();\n    if (previousUrl) {\n      this.router.navigateByUrl(previousUrl);\n    } else {\n      this.router.navigateByUrl('/');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverlayManager.html":{"url":"injectables/OverlayManager.html","title":"injectable - OverlayManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OverlayManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/overlay-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                OverlayManager handles all overlay-related operations for the BoardComponent.\nThis includes opening/closing overlays, managing animation states, and handling responsive behavior.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                animationDirection\n                            \n                            \n                                    Private\n                                backgroundVisible\n                            \n                            \n                                    Private\n                                overlayVisible\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Private\n                                showAddOrEditTask\n                            \n                            \n                                    Private\n                                showTaskDetails\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDetailsOverlay\n                            \n                            \n                                getAnimationDirection\n                            \n                            \n                                getBackgroundVisible\n                            \n                            \n                                getOverlayVisible\n                            \n                            \n                                getSelectedTask\n                            \n                            \n                                getShowAddOrEditTask\n                            \n                            \n                                getShowTaskDetails\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                openAddOrEditOverlay\n                            \n                            \n                                openTaskDetail\n                            \n                            \n                                removeBackground\n                            \n                            \n                                resetOverlayStates\n                            \n                            \n                                setAnimationDirection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/overlay-manager.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDetailsOverlay\n                        \n                    \n                \n            \n            \n                \ncloseDetailsOverlay(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:142\n                        \n                    \n\n\n            \n                \n                        Closes the overlay for task details or task form.\nAlso resets relevant state variables and clears editing data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating why the overlay is being closed (e.g., 'close', 'added').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAnimationDirection\n                        \n                    \n                \n            \n            \n                \ngetAnimationDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:29\n                        \n                    \n\n\n            \n                \n                        Gets the current animation direction\n\n\n                        \n                            Returns :     \"right\" | \"bottom\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBackgroundVisible\n                        \n                    \n                \n            \n            \n                \ngetBackgroundVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:36\n                        \n                    \n\n\n            \n                \n                        Gets the background visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayVisible\n                        \n                    \n                \n            \n            \n                \ngetOverlayVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:43\n                        \n                    \n\n\n            \n                \n                        Gets the overlay visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSelectedTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected task\n\n\n                        \n                            Returns :         Task | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowAddOrEditTask\n                        \n                    \n                \n            \n            \n                \ngetShowAddOrEditTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:57\n                        \n                    \n\n\n            \n                \n                        Gets the add/edit task visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowTaskDetails\n                        \n                    \n                \n            \n            \n                \ngetShowTaskDetails()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:50\n                        \n                    \n\n\n            \n                \n                        Gets the task details visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:96\n                        \n                    \n\n\n            \n                \n                        Callback for when the overlay slide-in animation is finished.\nSlight delay before making the background visible for smooth UX.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAnimationEvent from Angular.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openAddOrEditOverlay\n                        \n                    \n                \n            \n            \n                \nopenAddOrEditOverlay(event: string, status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:111\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for adding or editing a task.\nOn small screens, navigates to a separate route; otherwise opens the overlay inline.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nEither 'open' or 'edit', indicating the action type.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to prefill in the add/edit task form.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetail\n                        \n                    \n                \n            \n            \n                \nopenTaskDetail(selectedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:129\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for viewing the details of a selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object to display in detail.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:83\n                        \n                    \n\n\n            \n                \n                        Handles removal of background and overlay if the event indicates closure.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string (expected: 'closed') that triggers background removal.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetOverlayStates\n                        \n                    \n                \n            \n            \n                \nresetOverlayStates()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:156\n                        \n                    \n\n\n            \n                \n                        Resets all overlay states to default values\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:74\n                        \n                    \n\n\n            \n                \n                        Sets the animation direction based on screen width.\nUsed for responsive slide-in overlays.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrent screen width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showAddOrEditTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTaskDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AnimationEvent } from '@angular/animations';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * OverlayManager handles all overlay-related operations for the BoardComponent.\n * This includes opening/closing overlays, managing animation states, and handling responsive behavior.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayManager {\n  private animationDirection: 'right' | 'bottom' = 'right';\n  private backgroundVisible = false;\n  private overlayVisible = false;\n  private showTaskDetails = false;\n  private showAddOrEditTask: boolean = false;\n  private selectedTask?: Task;\n\n  constructor(\n    private router: Router,\n    private taskService: TaskService\n  ) {}\n\n  /**\n   * Gets the current animation direction\n   */\n  getAnimationDirection(): 'right' | 'bottom' {\n    return this.animationDirection;\n  }\n\n  /**\n   * Gets the background visibility state\n   */\n  getBackgroundVisible(): boolean {\n    return this.backgroundVisible;\n  }\n\n  /**\n   * Gets the overlay visibility state\n   */\n  getOverlayVisible(): boolean {\n    return this.overlayVisible;\n  }\n\n  /**\n   * Gets the task details visibility state\n   */\n  getShowTaskDetails(): boolean {\n    return this.showTaskDetails;\n  }\n\n  /**\n   * Gets the add/edit task visibility state\n   */\n  getShowAddOrEditTask(): boolean {\n    return this.showAddOrEditTask;\n  }\n\n  /**\n   * Gets the currently selected task\n   */\n  getSelectedTask(): Task | undefined {\n    return this.selectedTask;\n  }\n\n  /**\n   * Sets the animation direction based on screen width.\n   * Used for responsive slide-in overlays.\n   *\n   * @param width - Current screen width.\n   */\n  setAnimationDirection(width: number): void {\n    this.animationDirection = width  {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Opens the overlay for adding or editing a task.\n   * On small screens, navigates to a separate route; otherwise opens the overlay inline.\n   *\n   * @param event - Either 'open' or 'edit', indicating the action type.\n   * @param status - The status to prefill in the add/edit task form.\n   */\n  openAddOrEditOverlay(event: string, status: string): void {\n    const isSmallScreen = window.innerWidth \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PrivacyPolicyComponent.html":{"url":"components/PrivacyPolicyComponent.html","title":"component - PrivacyPolicyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PrivacyPolicyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/privacy-policy/privacy-policy.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-privacy-policy\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./privacy-policy.component.html\n            \n\n\n\n            \n                styleUrl\n                ./privacy-policy.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrivacyPolicyComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nA service used to handle navigation history and go back to the previous route.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-privacy-policy',\n  imports: [RouterModule],\n  templateUrl: './privacy-policy.component.html',\n  styleUrl: './privacy-policy.component.scss'\n})\nexport class PrivacyPolicyComponent {\n\n  /**\n   * Creates an instance of PrivacyPolicyComponent.\n   *\n   * @param navigationService - A service used to handle navigation history and go back to the previous route.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n    \n     Privacy Policy\n     \n        \n            \n        \n     \n    \n  Information in accordance with Section 5 of the German Digital Services Act (DDG)\n  Last updated: July 17, 2025\n\n  \n    1. Disclaimer\n    1.1 General Information\n    \n      This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your\n      information when You use Join, and tells You about Your privacy rights and how the law protects You.\n    \n    \n      We use Your Personal data to provide and improve the Service. By using the Service, You agree to the\n      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been\n      created with the help of the Privacy Policy Generator.\n    \n  \n\n  \n    1.2 Note on Data Transmission\n    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.\n  \n\n  \n    2. Interpretation and Definitions\n    2.1 Interpretation\n    \n      The words of which the initial letter is capitalized have meanings defined under the following conditions.\n      The following definitions shall have the same meaning regardless of whether they appear in singular or in\n      plural.\n    \n\n    2.2 Definitions\n    \n      Account\n      A unique account created for You to access the kanban board Join.\n\n      Application\n      Refers to Join, the software program provided by the Company.\n\n      Company\n      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.\n\n      Cookies\n      Small files placed on Your device by a website, containing browsing history details.\n\n      Device\n      Any device that can access the Service (e.g. computer, cellphone, tablet).\n\n      Personal Data\n      Any information relating to an identified or identifiable individual.\n\n      Service\n      The Application or the Website or both - meaning Join.\n\n      Service Provider\n       Any person or company processing data on behalf of the Company to facilitate or provide the Service.\n\n      Usage Data\n       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).\n\n      You\n      \n        The individual or legal entity accessing or using the Service, as applicable.\n      \n    \n  \n\n  \n    3. Collecting and Using Your Personal Data\n\n    3.1 Types of Data Collected\n    3.1.1 Personal Data\n    \n      We may ask You for personally identifiable information, such as email address, first and last name,\n      phone number, address, city, state/province, ZIP/postal code.\n    \n\n    3.1.2 Usage Data\n    \n      Collected automatically, including IP address, browser type and version, pages visited, visit time and date,\n      time spent, unique device identifiers and other diagnostic data.\n      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.\n      This data comes from your browser or mobile device when accessing the Service.\n    \n\n    3.1.3 Tracking Technologies and Cookies\n    \n      We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the\n      Service.\n    \n    \n      Cookies: small files you can reject via browser settings.\n      Web Beacons: pixel files for tracking email opens, page popularity, etc.\n    \n    Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).\n\n    Examples of Cookies Used\n    \n      Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.\n      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.\n      Functionality Cookies (Persistent) – remember login or language preferences.\n    \n    \n      For more details and cookie choices, please visit our Cookies Policy section.\n    \n  \n\n  \n    4. Use of Your Personal Data\n    \n      Provide and maintain our Service, monitor usage.\n      Manage Your Account and registration.\n      Perform contracts (orders, service compliance).\n      Contact You (email, phone, SMS, push notifications).\n      Provide news, offers, events (unless unsubscribed).\n      Manage your requests to Us.\n      Business transfers (merger, sale, restructuring).\n      Other: analytics, usage trends, improve campaigns & Service.\n    \n\n    4.1 Sharing of Personal Information\n    \n      With Service Providers: for analysis and support.\n      For Business Transfers: in events like sale or acquisition.\n      With Affiliates: under this same Privacy Policy.\n      With Business Partners: for related products, services, promotions.\n      With Other Users: any info you share publicly is visible.\n      With Your Consent: for any other purposes.\n    \n  \n\n  \n    4.2 Transfer of Your Personal Data\n    \n      Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We\n      take steps to ensure adequate controls and security are in place.\n    \n  \n\n  \n    4.3 Data Retention and Deletion\n    \n      We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.\n      Usage Data retained for analytics or security.\n      You can delete or request deletion of your data via account settings or by contacting us. We may retain\n      information if legally required.\n    \n  \n\n  \n    4.4 Disclosure of Your Personal Data\n\n    4.4.1 Business Transactions\n    \n      If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify\n      before such changes.\n    \n\n    4.4.2 Law Enforcement & Other Legal Requirements\n    \n      We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.\n    \n  \n\n  \n    5. Security of Your Personal Data\n    \n      We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to\n      internet and electronic storage methods.\n    \n  \n\n  \n    6. Links to Other Websites\n    \n      Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for\n      their policies or content. Please review their Privacy Policies.\n    \n  \n\n  \n    7. Changes to this Privacy Policy\n    \n      We may update this policy from time to time. We'll notify via email or Service notice and update the \"Last\n      updated\" date. Changes take effect when posted. Please review periodically.\n    \n  \n\n  \n    8. Data Storage and Third-Party Services\n    \n      Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.\n      Through the use of Firebase services the following data might be processed:\n    \n    \n      Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.\n      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.\n      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.\n      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.\n    \n    \n      The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to\n      Google´s Privacy Policy and \n      Firebase’s Data Processing and Security Terms\n    \n  \n\n  \n    9. Prohibition of unsolicited contact\n    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted. \n       As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.\n  \n\n  \n    10. Contact Us\n    \n      If there are still questions, please contact us at\n      info&#64;michelle-puschkarow.de.\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '         Privacy Policy                                            Information in accordance with Section 5 of the German Digital Services Act (DDG)  Last updated: July 17, 2025      1. Disclaimer    1.1 General Information          This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your      information when You use Join, and tells You about Your privacy rights and how the law protects You.              We use Your Personal data to provide and improve the Service. By using the Service, You agree to the      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been      created with the help of the Privacy Policy Generator.            1.2 Note on Data Transmission    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.        2. Interpretation and Definitions    2.1 Interpretation          The words of which the initial letter is capitalized have meanings defined under the following conditions.      The following definitions shall have the same meaning regardless of whether they appear in singular or in      plural.        2.2 Definitions          Account      A unique account created for You to access the kanban board Join.      Application      Refers to Join, the software program provided by the Company.      Company      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.      Cookies      Small files placed on Your device by a website, containing browsing history details.      Device      Any device that can access the Service (e.g. computer, cellphone, tablet).      Personal Data      Any information relating to an identified or identifiable individual.      Service      The Application or the Website or both - meaning Join.      Service Provider       Any person or company processing data on behalf of the Company to facilitate or provide the Service.      Usage Data       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).      You              The individual or legal entity accessing or using the Service, as applicable.                  3. Collecting and Using Your Personal Data    3.1 Types of Data Collected    3.1.1 Personal Data          We may ask You for personally identifiable information, such as email address, first and last name,      phone number, address, city, state/province, ZIP/postal code.        3.1.2 Usage Data          Collected automatically, including IP address, browser type and version, pages visited, visit time and date,      time spent, unique device identifiers and other diagnostic data.      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.      This data comes from your browser or mobile device when accessing the Service.        3.1.3 Tracking Technologies and Cookies          We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the      Service.              Cookies: small files you can reject via browser settings.      Web Beacons: pixel files for tracking email opens, page popularity, etc.        Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).    Examples of Cookies Used          Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.      Functionality Cookies (Persistent) – remember login or language preferences.              For more details and cookie choices, please visit our Cookies Policy section.            4. Use of Your Personal Data          Provide and maintain our Service, monitor usage.      Manage Your Account and registration.      Perform contracts (orders, service compliance).      Contact You (email, phone, SMS, push notifications).      Provide news, offers, events (unless unsubscribed).      Manage your requests to Us.      Business transfers (merger, sale, restructuring).      Other: analytics, usage trends, improve campaigns & Service.        4.1 Sharing of Personal Information          With Service Providers: for analysis and support.      For Business Transfers: in events like sale or acquisition.      With Affiliates: under this same Privacy Policy.      With Business Partners: for related products, services, promotions.      With Other Users: any info you share publicly is visible.      With Your Consent: for any other purposes.            4.2 Transfer of Your Personal Data          Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We      take steps to ensure adequate controls and security are in place.            4.3 Data Retention and Deletion          We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.      Usage Data retained for analytics or security.      You can delete or request deletion of your data via account settings or by contacting us. We may retain      information if legally required.            4.4 Disclosure of Your Personal Data    4.4.1 Business Transactions          If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify      before such changes.        4.4.2 Law Enforcement & Other Legal Requirements          We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.            5. Security of Your Personal Data          We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to      internet and electronic storage methods.            6. Links to Other Websites          Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for      their policies or content. Please review their Privacy Policies.            7. Changes to this Privacy Policy          We may update this policy from time to time. We\\'ll notify via email or Service notice and update the \"Last      updated\" date. Changes take effect when posted. Please review periodically.            8. Data Storage and Third-Party Services          Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.      Through the use of Firebase services the following data might be processed:              Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.              The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to      Google´s Privacy Policy and       Firebase’s Data Processing and Security Terms            9. Prohibition of unsolicited contact    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted.        As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.        10. Contact Us          If there are still questions, please contact us at      info@michelle-puschkarow.de.      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PrivacyPolicyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SidebarComponent.html":{"url":"components/SidebarComponent.html","title":"component - SidebarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SidebarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/sidebar/sidebar.component.ts\n\n\n\n    \n        Description\n    \n    \n        Sidebar component for application navigation.\nDisplays navigation links and checks the user's authentication status.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sidebar\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sidebar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sidebar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLoggedIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/sidebar/sidebar.component.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs the SidebarComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing user authentication\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/sidebar/sidebar.component.ts:30\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Sidebar component for application navigation.\n * Displays navigation links and checks the user's authentication status.\n */\n@Component({\n  selector: 'app-sidebar',\n  imports: [\n    RouterModule,\n    CommonModule\n  ],\n  templateUrl: './sidebar.component.html',\n  styleUrl: './sidebar.component.scss'\n})\nexport class SidebarComponent {\n  /**\n   * Constructs the SidebarComponent.\n   * @param authService - Service for managing user authentication\n   */\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n  \n  \n    \n      \n        \n          \n          Summary\n        \n      \n      \n        \n          \n          Add Task\n        \n      \n      \n        \n          \n          Board\n        \n      \n      \n        \n          \n          Contacts\n        \n      \n    \n  \n  \n    \n      \n        \n          \n          Log In\n        \n      \n    \n  \n  \n    Privacy Policy\n    Legal notice\n  \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                Summary                                                Add Task                                                Board                                                Contacts                                                            Log In                          Privacy Policy    Legal notice  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SidebarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/signup/signup.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                                FooterComponent\n                            ReactiveFormsModule\n                \n            \n\n            \n                styleUrls\n                ./signup.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                showConfirmPassword\n                            \n                            \n                                showPassword\n                            \n                            \n                                signupform\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getValidationMessage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToLogin\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                passwordsMatchValidator\n                            \n                            \n                                saveNewContact\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, authService: AuthService, router: Router, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                            \n                        \n\n                \n                    \n                            Initializes the signup form and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder for creating the reactive form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for user registration\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to store new users as contacts\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for the given form field.\nIncludes special handling for mismatched passwords.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the form control.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A descriptive validation message or empty string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: creates the signup form with all necessary validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToLogin\n                        \n                    \n                \n            \n            \n                \nonBackToLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Navigates the user back to the login screen.\nUses skipLocationChange to avoid adding the redirect to browser history.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:119\n                        \n                    \n\n\n            \n                \n                        Handles the form submission process, including validation,\nuser registration, contact saving, and navigation on success.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordsMatchValidator\n                        \n                    \n                \n            \n            \n                \npasswordsMatchValidator(group: AbstractControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Custom validator to ensure password and confirm password fields match.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                group\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form group containing password fields.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                A validation error object or null if passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveNewContact\n                        \n                    \n                \n            \n            \n                \nsaveNewContact(newName: string, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Creates and stores a new contact based on registration input.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name entered during registration.\n\n                                            \n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email address entered during registration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:49\n                        \n                    \n\n            \n                \n                    Holds the current error message for display on form failure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:59\n                        \n                    \n\n            \n                \n                    Indicates whether a registration request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showConfirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                        \n                    \n\n            \n                \n                    Controls visibility of the confirm password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:64\n                        \n                    \n\n            \n                \n                    Controls visibility of the password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signupform\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:44\n                        \n                    \n\n            \n                \n                    The reactive signup form with fields for name, email, password, etc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:54\n                        \n                    \n\n            \n                \n                    Holds the success message shown after successful registration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ReactiveFormsModule } from '@angular/forms';\nimport { FooterComponent } from '../footer/footer.component';\nimport { RouterModule, Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../services/auth.service';\nimport { Contact, ContactService } from '../../services/contact.service';\n\n@Component({\n  selector: 'app-signup',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    FooterComponent,\n    ReactiveFormsModule\n  ],\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\n\nexport class SignupComponent implements OnInit {\n  /**\n   * The reactive signup form with fields for name, email, password, etc.\n   */\n  signupform!: FormGroup;\n\n  /**\n   * Holds the current error message for display on form failure.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Holds the success message shown after successful registration.\n   */\n  successMessage: string = '';\n\n  /**\n   * Indicates whether a registration request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Controls visibility of the password input field.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Controls visibility of the confirm password input field.\n   */\n  showConfirmPassword: boolean = false;\n\n  /**\n   * Initializes the signup form and injects required services.\n   * \n   * @param form FormBuilder for creating the reactive form\n   * @param authService Service for user registration\n   * @param router Angular Router for navigation\n   * @param contactService Service to store new users as contacts\n   */\n  constructor(\n    private form: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private contactService: ContactService,\n  ) {}\n\n  /**\n   * Lifecycle hook: creates the signup form with all necessary validators.\n   */\n  ngOnInit(): void {\n    this.signupform = this.form.group({\n      name : ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.pattern(/^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_\\-+=\\[\\]{};:'\"\\\\|,.<>\\/?]).+$/)\n      ]],\n      confirmPassword: ['', Validators.required],\n      privacyPolicy: [false, [Validators.requiredTrue]],\n    }, { validators: this.passwordsMatchValidator });\n  }\n\n  /**\n   * Custom validator to ensure password and confirm password fields match.\n   * \n   * @param group The form group containing password fields.\n   * @returns A validation error object or null if passwords match.\n   */\n  passwordsMatchValidator(group: AbstractControl): ValidationErrors | null {\n    const password = group.get('password')?.value;\n    const confirm = group.get('confirmPassword')?.value;\n    return password === confirm ? null : { passwordsDontMatch: true };\n  }\n\n  /**\n   * Handles the form submission process, including validation,\n   * user registration, contact saving, and navigation on success.\n   */\n  async onSubmit(): Promise {\n    if (this.signupform.invalid) {\n      this.signupform.markAllAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = '';\n    this.successMessage = '';\n    const { name, email, password } = this.signupform.value;\n    const result = await this.authService.signUp(email, password, name);\n    this.saveNewContact(name, email);\n    if (result.success) {\n      this.successMessage = 'Registration successful! You will be redirected...';\n      setTimeout(() => {\n        this.router.navigate(['/summary']);\n      }, 2000);\n    } else {\n      this.errorMessage = result.message || 'Registration failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Creates and stores a new contact based on registration input.\n   * \n   * @param newName Name entered during registration.\n   * @param newEmail Email address entered during registration.\n   */\n  saveNewContact(newName: string, newEmail: string): void {\n    const newContact: Contact = {\n      name: newName,\n      email: newEmail,\n    };\n    this.contactService.addContact(newContact);\n    this.contactService.selectContact(newContact);\n  }\n\n  /**\n   * Navigates the user back to the login screen.\n   * Uses `skipLocationChange` to avoid adding the redirect to browser history.\n   */\n  onBackToLogin(): void {\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\n      this.router.navigate(['/login']);\n    });\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for the given form field.\n   * Includes special handling for mismatched passwords.\n   * \n   * @param field The name of the form control.\n   * @returns A descriptive validation message or empty string.\n   */\n  getValidationMessage(field: string): string {\n    const control = this.signupform.get(field);\n\n    if (field === 'confirmPassword') {\n      const passwordMismatch = this.signupform.errors?.['passwordsDontMatch'];\n      const touched = control?.touched || this.signupform.get('password')?.touched;\n      if (passwordMismatch && touched) {\n        return 'Passwords do not match';\n      }\n    }\n    if (!control || !control.touched || !control.errors) return '';\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['email']) return 'Please enter a valid email address';\n    if (control.errors['minlength']) {\n      return `Minimum ${control.errors['minlength'].requiredLength} characters required`;\n    }\n    if (control.errors['pattern']) {\n      return 'Password must contain uppercase, numbers and special characters';\n    }\n    if (control.errors['requiredTrue']) return 'You must accept the privacy policy';\n\n    return '';\n  }\n}\n    \n\n    \n            \n    \n        \n    \n\n    \n        \n            \n                \n            \n            Sign up\n        \n        \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('name') }}\n                    \n                \n               \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('email') }}\n                    \n                \n                \n            \n                \n                    \n                        \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('password') }}\n                    \n                \n                \n             \n                \n                    \n                        \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('confirmPassword') }}\n                    \n                \n            \n                \n                \n                    \n                    I accept the Privacy policy\n                \n                \n            \n                \n                    Sign Up\n                    \n                        \n                        Signing up...\n                    \n                \n            \n            {{ successMessage }}\n            {{ errorMessage }}\n        \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./signup.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.signup-content {\n    position:relative;\n    max-width: 1440px;\n    margin: 0 auto;\n}\n\n.dark-logo-wrapper {\n    padding: 32px;\n\n    img {\n        @media (max-width: 768px) {\n            height: 72px;\n            width: 64px;\n        }\n    }\n}\n\n.signup-frame {\n  background-color: var(--background-light);\n  border-radius: 20px;\n  padding: clamp(32px, calc(1.8vw + 20px), 64px);\n  box-shadow: 0px 4px 24px rgba(0, 0, 0, 0.05);\n  width: clamp(440px, 5vw + 440px, 560px);\n  margin: 0 auto;\n  @include flex-center;\n  flex-direction: column;\n  align-items: center;\n  gap: clamp(24px, 2.5vh, 36px);\n  margin-top: 1rem;\n\n  @media (max-width: 768px){\n    width: 90vw;\n    padding: 16px 12px;\n    gap: 20px;\n    box-sizing: border-box;\n    overflow-x: hidden;\n    max-height: 500px;\n  }\n}  \n\n.signup-header {\n  width: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .btn-back {\n    @include btn();\n    position: absolute;\n    left: 0;\n\n    img {\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n    h2 {\n        @include inter700-fs47;\n        color: var(--text-color-main);\n        position: relative;\n        margin-bottom: 0;\n\n        &::after {\n        content: \"\";\n        display: block;\n        width: 80px;\n        height: 3px;\n        background-color: var(--accent-primary-color);\n        margin: 12px auto 0;\n        border-radius: 3px;\n        }\n    }\n}    \n\nform {\n    padding: 0;\n}\n\n.form-group-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 20px;\n\n    @media(max-width: 768px) {\n        gap: 16px;\n    }\n}\n\n.form-group {\n    @include form-group();\n    background-color: var(--background-light);\n    position: relative;\n    \n\n    input {\n        width: 100%;\n        background-color: transparent;\n        color: var(--text-color-main);\n        padding-right: 28px;\n        @include inter400-fs20();\n        height: 16px;\n        font-size: 16px;\n    }\n\n    input::placeholder {\n        color: var(--text-color-medium);\n        opacity: 1; \n    }\n\n    .input-icon {\n        position: absolute;\n        right: clamp(12px, 2vw, 18px);\n        top: 50%;\n        transform: translateY(-50%);\n        height: 20px;\n        width: 20px;\n        opacity: 0.6;\n    }\n\n    @media(max-width: 768px) {\n        width: 100%;\n\n        input {\n            width: 100%;\n            font-size: 15px;\n            height: 14px;\n        }\n\n        .input-icon {\n            width: 18px;\n            height: 18px;\n            right: 12px;\n        }\n    }\n\n}\n\n.checkbox-label {\n    @include flex-center;\n    gap: 8px;\n    margin: 8px;\n    margin-top: 16px;\n    width: 100%;\n    @include inter400-fs14();\n    color: var(--text-color-medium);\n    cursor: pointer;\n    position: relative;\n\n    input[type=\"checkbox\"] {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        cursor: pointer;\n        background-image: url(\"/assets/img/icons/checkbox.png\");\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        border: none;\n        margin: 0;\n        padding: 0;\n        flex-shrink: 0;\n    }\n\n    input[type=\"checkbox\"]:checked {\n        background-image: url(\"/assets/img/icons/checkbox-checked.png\");\n    }\n\n    .highlight {\n        color: var(--accent-primary-color);\n        text-decoration: none;\n        cursor: pointer;\n    }\n}\n\n.btn-wrapper {\n    width: 100%;\n    @include flex-center;\n}\n\n.btn-signup {\n    cursor: pointer;\n    height: 44px;\n    border-radius: 8px;\n    border: unset;\n    min-width: 120px;\n    transition: background-color 0.2s ease;\n    justify-content: center;\n    @include btn-dark();\n\n    &:hover {\n        background-color: #29abe2;\n        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);\n    }\n\n    &:disabled {\n        background-color: #ccc;\n        color: #666;\n        cursor: not-allowed;\n        opacity: 0.6;\n    }\n}\n\n.colorError {\n    border: 1px solid var(--text-color-error);\n}\n\n.error-message {\n    @include inter400-fs12;\n    color: var(--text-color-error);\n    display: hidden;\n\n    @media(max-width: 768px) {\n        font-size: 13px;\n    }\n}\n\n.success-message {\n    @include inter400-fs12;\n    color: var(--text-color-success);\n    display: block;\n    margin-top: 16px;\n    text-align: center;\n}\n\n.login-link {\n    @include inter400-fs12;\n    color: var(--text-color-light);\n    text-align: center;\n    margin-top: 16px;\n    \n    a {\n        color: var(--accent-color);\n        text-decoration: none;\n        \n        &:hover {\n            text-decoration: underline;\n        }\n    }\n}\n\ninput:focus {\n    border: unset;\n}\n\n.spinner {\n  border: 2px solid #fff;\n  border-top: 2px solid transparent;\n  border-radius: 50%;\n  width: 14px;\n  height: 14px;\n  display: inline-block;\n  animation: spin 0.8s linear infinite;\n  margin-right: 6px;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.input-icon.toggle-eye {\n    cursor: pointer;\n    right: 16px;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                    Sign up                                                                                                                                                                                                        {{ getValidationMessage(\\'name\\') }}                                                                                                                                                                                                                                           {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                                                    {{ getValidationMessage(\\'password\\') }}                                                                                                                                                                                                                                                                     {{ getValidationMessage(\\'confirmPassword\\') }}                                                                                                                        I accept the Privacy policy                                                                                Sign Up                                                                    Signing up...                                                            {{ successMessage }}            {{ errorMessage }}            '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask.html":{"url":"interfaces/Subtask.html","title":"interface - Subtask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/subtask-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            completed\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        completed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        completed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Subtask {\n  id: string | number;\n  text: string;\n  completed: boolean;\n}\n\n/**\n * SubtaskManager handles all subtask-related operations for the AddTaskComponent.\n * This includes adding, editing, deleting, and managing subtask state.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubtaskManager {\n  private subtasks: Subtask[] = [];\n  private nextSubtaskId: number = 1;\n  private editingSubtaskId: string | number | null = null;\n  private editingSubtaskText: string = '';\n  private subtaskInput: string = '';\n  private showSubtaskConfirmation: boolean = false;\n\n  /**\n   * Gets all subtasks\n   */\n  getSubtasks(): Subtask[] {\n    return this.subtasks;\n  }\n\n  /**\n   * Sets the subtasks array\n   */\n  setSubtasks(subtasks: Subtask[]): void {\n    this.subtasks = subtasks;\n    this.nextSubtaskId = subtasks.length + 1;\n  }\n\n  /**\n   * Gets the current subtask input value\n   */\n  getSubtaskInput(): string {\n    return this.subtaskInput;\n  }\n\n  /**\n   * Sets the subtask input value\n   */\n  setSubtaskInput(value: string): void {\n    this.subtaskInput = value;\n  }\n\n  /**\n   * Gets the subtask confirmation state\n   */\n  getShowSubtaskConfirmation(): boolean {\n    return this.showSubtaskConfirmation;\n  }\n\n  /**\n   * Sets the subtask confirmation state\n   */\n  setShowSubtaskConfirmation(value: boolean): void {\n    this.showSubtaskConfirmation = value;\n  }\n\n  /**\n   * Gets the editing subtask ID\n   */\n  getEditingSubtaskId(): string | number | null {\n    return this.editingSubtaskId;\n  }\n\n  /**\n   * Gets the editing subtask text\n   */\n  getEditingSubtaskText(): string {\n    return this.editingSubtaskText;\n  }\n\n  /**\n   * Sets the editing subtask text\n   */\n  setEditingSubtaskText(value: string): void {\n    this.editingSubtaskText = value;\n  }\n\n  /**\n   * Handles subtask input click to clear the input if confirmation is not shown.\n   */\n  onSubtaskInputClick(): void {\n    if (!this.showSubtaskConfirmation) {\n      this.subtaskInput = '';\n    }\n  }\n\n  /**\n   * Handles Enter key press on subtask input to add the subtask.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEnter(event: Event): void {\n    event.preventDefault();\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      this.addSubtask();\n    }\n  }\n\n  /**\n   * Confirms and adds the subtask.\n   * @param event - The event that triggered the confirmation.\n   */\n  confirmSubtask(event: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.addSubtask();\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Cancels subtask creation and clears the input.\n   */\n  cancelSubtask(): void {\n    this.subtaskInput = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Adds a new subtask to the task.\n   */\n  addSubtask(): void {\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      const newSubtask: Subtask = {\n        id: this.nextSubtaskId++,\n        text: this.subtaskInput.trim(),\n        completed: false\n      };\n      this.subtasks.push(newSubtask);\n      this.subtaskInput = '';\n      this.showSubtaskConfirmation = false;\n    }\n  }\n\n  /**\n   * Deletes a subtask by its ID.\n   * @param id - The ID of the subtask to delete.\n   */\n  deleteSubtask(id: string | number): void {\n    this.subtasks = this.subtasks.filter(subtask => subtask.id !== id);\n  }\n\n  /**\n   * Edits the text of a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param newText - The new text for the subtask.\n   */\n  editSubtask(id: string | number, newText: string): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.text = newText.trim();\n    }\n  }\n\n  /**\n   * Initiates editing mode for a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param currentText - The current text of the subtask.\n   */\n  editSubtaskPrompt(id: string | number, currentText: string): void {\n    this.editingSubtaskId = id;\n    this.editingSubtaskText = currentText;\n    setTimeout(() => {\n      const inputElement = document.querySelector('.subtask-edit-input') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = this.editingSubtaskText;\n        inputElement.focus();\n        inputElement.setSelectionRange(inputElement.value.length, inputElement.value.length);\n      }\n    }, 100);\n  }\n\n  /**\n   * Saves the edited subtask text.\n   */\n  saveSubtaskEdit(): void {\n    if (this.editingSubtaskId !== null) {\n      if (this.editingSubtaskText && this.editingSubtaskText.trim()) {\n        this.editSubtask(this.editingSubtaskId, this.editingSubtaskText.trim());\n      }\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Cancels subtask editing mode.\n   */\n  cancelSubtaskEdit(): void {\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n  }\n\n  /**\n   * Handles keyboard shortcuts for subtask editing.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEditKeydown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.saveSubtaskEdit();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Toggles the completion state of a subtask.\n   * @param id - The ID of the subtask to toggle.\n   */\n  toggleSubtaskCompletion(id: string | number): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.completed = !subtask.completed;\n    }\n  }\n\n  /**\n   * Clears all subtask data and resets to default state.\n   */\n  clearAll(): void {\n    this.subtasks = [];\n    this.subtaskInput = '';\n    this.nextSubtaskId = 1;\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n    this.showSubtaskConfirmation = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask-1.html":{"url":"interfaces/Subtask-1.html","title":"interface - Subtask-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a subtask belonging to a task.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Completion status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title or label of the subtask\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubtaskManager.html":{"url":"injectables/SubtaskManager.html","title":"injectable - SubtaskManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubtaskManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/subtask-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                SubtaskManager handles all subtask-related operations for the AddTaskComponent.\nThis includes adding, editing, deleting, and managing subtask state.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editingSubtaskId\n                            \n                            \n                                    Private\n                                editingSubtaskText\n                            \n                            \n                                    Private\n                                nextSubtaskId\n                            \n                            \n                                    Private\n                                showSubtaskConfirmation\n                            \n                            \n                                    Private\n                                subtaskInput\n                            \n                            \n                                    Private\n                                subtasks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addSubtask\n                            \n                            \n                                cancelSubtask\n                            \n                            \n                                cancelSubtaskEdit\n                            \n                            \n                                clearAll\n                            \n                            \n                                confirmSubtask\n                            \n                            \n                                deleteSubtask\n                            \n                            \n                                editSubtask\n                            \n                            \n                                editSubtaskPrompt\n                            \n                            \n                                getEditingSubtaskId\n                            \n                            \n                                getEditingSubtaskText\n                            \n                            \n                                getShowSubtaskConfirmation\n                            \n                            \n                                getSubtaskInput\n                            \n                            \n                                getSubtasks\n                            \n                            \n                                onSubtaskEditKeydown\n                            \n                            \n                                onSubtaskEnter\n                            \n                            \n                                onSubtaskInputClick\n                            \n                            \n                                saveSubtaskEdit\n                            \n                            \n                                setEditingSubtaskText\n                            \n                            \n                                setShowSubtaskConfirmation\n                            \n                            \n                                setSubtaskInput\n                            \n                            \n                                setSubtasks\n                            \n                            \n                                toggleSubtaskCompletion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addSubtask\n                        \n                    \n                \n            \n            \n                \naddSubtask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:132\n                        \n                    \n\n\n            \n                \n                        Adds a new subtask to the task.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cancelSubtask\n                        \n                    \n                \n            \n            \n                \ncancelSubtask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:124\n                        \n                    \n\n\n            \n                \n                        Cancels subtask creation and clears the input.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cancelSubtaskEdit\n                        \n                    \n                \n            \n            \n                \ncancelSubtaskEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:198\n                        \n                    \n\n\n            \n                \n                        Cancels subtask editing mode.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:231\n                        \n                    \n\n\n            \n                \n                        Clears all subtask data and resets to default state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmSubtask\n                        \n                    \n                \n            \n            \n                \nconfirmSubtask(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Confirms and adds the subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event that triggered the confirmation.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteSubtask\n                        \n                    \n                \n            \n            \n                \ndeleteSubtask(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:149\n                        \n                    \n\n\n            \n                \n                        Deletes a subtask by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editSubtask\n                        \n                    \n                \n            \n            \n                \neditSubtask(id: string | number, newText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:158\n                        \n                    \n\n\n            \n                \n                        Edits the text of a subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to edit.\n\n\n                                            \n                                        \n                                        \n                                                newText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new text for the subtask.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editSubtaskPrompt\n                        \n                    \n                \n            \n            \n                \neditSubtaskPrompt(id: string | number, currentText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:170\n                        \n                    \n\n\n            \n                \n                        Initiates editing mode for a subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to edit.\n\n\n                                            \n                                        \n                                        \n                                                currentText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current text of the subtask.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingSubtaskId\n                        \n                    \n                \n            \n            \n                \ngetEditingSubtaskId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:70\n                        \n                    \n\n\n            \n                \n                        Gets the editing subtask ID\n\n\n                        \n                            Returns :     string | number | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingSubtaskText\n                        \n                    \n                \n            \n            \n                \ngetEditingSubtaskText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:77\n                        \n                    \n\n\n            \n                \n                        Gets the editing subtask text\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowSubtaskConfirmation\n                        \n                    \n                \n            \n            \n                \ngetShowSubtaskConfirmation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Gets the subtask confirmation state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtaskInput\n                        \n                    \n                \n            \n            \n                \ngetSubtaskInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:42\n                        \n                    \n\n\n            \n                \n                        Gets the current subtask input value\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasks\n                        \n                    \n                \n            \n            \n                \ngetSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Gets all subtasks\n\n\n                        \n                            Returns :     Subtask[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskEditKeydown\n                        \n                    \n                \n            \n            \n                \nonSubtaskEditKeydown(event: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:207\n                        \n                    \n\n\n            \n                \n                        Handles keyboard shortcuts for subtask editing.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe keyboard event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskEnter\n                        \n                    \n                \n            \n            \n                \nonSubtaskEnter(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:101\n                        \n                    \n\n\n            \n                \n                        Handles Enter key press on subtask input to add the subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe keyboard event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskInputClick\n                        \n                    \n                \n            \n            \n                \nonSubtaskInputClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:91\n                        \n                    \n\n\n            \n                \n                        Handles subtask input click to clear the input if confirmation is not shown.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveSubtaskEdit\n                        \n                    \n                \n            \n            \n                \nsaveSubtaskEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:186\n                        \n                    \n\n\n            \n                \n                        Saves the edited subtask text.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditingSubtaskText\n                        \n                    \n                \n            \n            \n                \nsetEditingSubtaskText(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:84\n                        \n                    \n\n\n            \n                \n                        Sets the editing subtask text\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowSubtaskConfirmation\n                        \n                    \n                \n            \n            \n                \nsetShowSubtaskConfirmation(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:63\n                        \n                    \n\n\n            \n                \n                        Sets the subtask confirmation state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSubtaskInput\n                        \n                    \n                \n            \n            \n                \nsetSubtaskInput(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:49\n                        \n                    \n\n\n            \n                \n                        Sets the subtask input value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSubtasks\n                        \n                    \n                \n            \n            \n                \nsetSubtasks(subtasks: Subtask[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Sets the subtasks array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                subtasks\n                                            \n                                                        Subtask[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSubtaskCompletion\n                        \n                    \n                \n            \n            \n                \ntoggleSubtaskCompletion(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:221\n                        \n                    \n\n\n            \n                \n                        Toggles the completion state of a subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to toggle.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingSubtaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingSubtaskText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nextSubtaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showSubtaskConfirmation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtaskInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Subtask {\n  id: string | number;\n  text: string;\n  completed: boolean;\n}\n\n/**\n * SubtaskManager handles all subtask-related operations for the AddTaskComponent.\n * This includes adding, editing, deleting, and managing subtask state.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubtaskManager {\n  private subtasks: Subtask[] = [];\n  private nextSubtaskId: number = 1;\n  private editingSubtaskId: string | number | null = null;\n  private editingSubtaskText: string = '';\n  private subtaskInput: string = '';\n  private showSubtaskConfirmation: boolean = false;\n\n  /**\n   * Gets all subtasks\n   */\n  getSubtasks(): Subtask[] {\n    return this.subtasks;\n  }\n\n  /**\n   * Sets the subtasks array\n   */\n  setSubtasks(subtasks: Subtask[]): void {\n    this.subtasks = subtasks;\n    this.nextSubtaskId = subtasks.length + 1;\n  }\n\n  /**\n   * Gets the current subtask input value\n   */\n  getSubtaskInput(): string {\n    return this.subtaskInput;\n  }\n\n  /**\n   * Sets the subtask input value\n   */\n  setSubtaskInput(value: string): void {\n    this.subtaskInput = value;\n  }\n\n  /**\n   * Gets the subtask confirmation state\n   */\n  getShowSubtaskConfirmation(): boolean {\n    return this.showSubtaskConfirmation;\n  }\n\n  /**\n   * Sets the subtask confirmation state\n   */\n  setShowSubtaskConfirmation(value: boolean): void {\n    this.showSubtaskConfirmation = value;\n  }\n\n  /**\n   * Gets the editing subtask ID\n   */\n  getEditingSubtaskId(): string | number | null {\n    return this.editingSubtaskId;\n  }\n\n  /**\n   * Gets the editing subtask text\n   */\n  getEditingSubtaskText(): string {\n    return this.editingSubtaskText;\n  }\n\n  /**\n   * Sets the editing subtask text\n   */\n  setEditingSubtaskText(value: string): void {\n    this.editingSubtaskText = value;\n  }\n\n  /**\n   * Handles subtask input click to clear the input if confirmation is not shown.\n   */\n  onSubtaskInputClick(): void {\n    if (!this.showSubtaskConfirmation) {\n      this.subtaskInput = '';\n    }\n  }\n\n  /**\n   * Handles Enter key press on subtask input to add the subtask.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEnter(event: Event): void {\n    event.preventDefault();\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      this.addSubtask();\n    }\n  }\n\n  /**\n   * Confirms and adds the subtask.\n   * @param event - The event that triggered the confirmation.\n   */\n  confirmSubtask(event: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.addSubtask();\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Cancels subtask creation and clears the input.\n   */\n  cancelSubtask(): void {\n    this.subtaskInput = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Adds a new subtask to the task.\n   */\n  addSubtask(): void {\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      const newSubtask: Subtask = {\n        id: this.nextSubtaskId++,\n        text: this.subtaskInput.trim(),\n        completed: false\n      };\n      this.subtasks.push(newSubtask);\n      this.subtaskInput = '';\n      this.showSubtaskConfirmation = false;\n    }\n  }\n\n  /**\n   * Deletes a subtask by its ID.\n   * @param id - The ID of the subtask to delete.\n   */\n  deleteSubtask(id: string | number): void {\n    this.subtasks = this.subtasks.filter(subtask => subtask.id !== id);\n  }\n\n  /**\n   * Edits the text of a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param newText - The new text for the subtask.\n   */\n  editSubtask(id: string | number, newText: string): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.text = newText.trim();\n    }\n  }\n\n  /**\n   * Initiates editing mode for a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param currentText - The current text of the subtask.\n   */\n  editSubtaskPrompt(id: string | number, currentText: string): void {\n    this.editingSubtaskId = id;\n    this.editingSubtaskText = currentText;\n    setTimeout(() => {\n      const inputElement = document.querySelector('.subtask-edit-input') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = this.editingSubtaskText;\n        inputElement.focus();\n        inputElement.setSelectionRange(inputElement.value.length, inputElement.value.length);\n      }\n    }, 100);\n  }\n\n  /**\n   * Saves the edited subtask text.\n   */\n  saveSubtaskEdit(): void {\n    if (this.editingSubtaskId !== null) {\n      if (this.editingSubtaskText && this.editingSubtaskText.trim()) {\n        this.editSubtask(this.editingSubtaskId, this.editingSubtaskText.trim());\n      }\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Cancels subtask editing mode.\n   */\n  cancelSubtaskEdit(): void {\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n  }\n\n  /**\n   * Handles keyboard shortcuts for subtask editing.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEditKeydown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.saveSubtaskEdit();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Toggles the completion state of a subtask.\n   * @param id - The ID of the subtask to toggle.\n   */\n  toggleSubtaskCompletion(id: string | number): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.completed = !subtask.completed;\n    }\n  }\n\n  /**\n   * Clears all subtask data and resets to default state.\n   */\n  clearAll(): void {\n    this.subtasks = [];\n    this.subtaskInput = '';\n    this.nextSubtaskId = 1;\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n    this.showSubtaskConfirmation = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SummaryComponent.html":{"url":"components/SummaryComponent.html","title":"component - SummaryComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SummaryComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/summary/summary.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-summary\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./summary.component.html\n            \n\n\n\n            \n                styleUrl\n                ./summary.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                awaitingFeedbackCount\n                            \n                            \n                                doneCount\n                            \n                            \n                                greeting\n                            \n                            \n                                greetingState\n                            \n                            \n                                inProgressCount\n                            \n                            \n                                isMobile\n                            \n                            \n                                nextDeadlineCount\n                            \n                            \n                                nextDeadlineDate\n                            \n                            \n                                showGreeting\n                            \n                            \n                                taskList\n                            \n                            \n                                todoCount\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                countTasksByStatus\n                            \n                            \n                                getGreeting\n                            \n                            \n                                goToBoard\n                            \n                            \n                                    Private\n                                isFirestoreTimestamp\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    totalTaskCount\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/summary/summary.component.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        countTasksByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    countTasksByStatus(tasks: Task[], status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:62\n                        \n                    \n\n\n            \n                \n                        Counts the number of tasks with a specific status.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of tasks.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to count.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of tasks with the given status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGreeting\n                        \n                    \n                \n            \n            \n                \ngetGreeting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Returns a greeting depending on the current time.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The greeting (e.g., \"Good morning,\").\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToBoard\n                        \n                    \n                \n            \n            \n                \ngoToBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Navigates to the board view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isFirestoreTimestamp\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFirestoreTimestamp(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Checks if the given object is a FirestoreTimestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         FirestoreTimestamp\n\n                        \n                            \n                                True if the object is a FirestoreTimestamp.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Initializes the component, loads user data and tasks,\ncalculates statistics, and controls the welcome greeting display.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        awaitingFeedbackCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doneCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greeting\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greetingState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inProgressCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showGreeting\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todoCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        totalTaskCount\n                    \n                \n\n                \n                    \n                        gettotalTaskCount()\n                    \n                \n                            \n                                \n                                    Defined in src/app/summary/summary.component.ts:83\n                                \n                            \n                    \n                        \n                                Returns the total number of all tasks.\n\n\n                                \n                                \n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showGreeting = true;\n        this.greetingState = 'start';\n        setTimeout(() => {\n          this.greetingState = 'moved';\n          setTimeout(() => {\n            this.showGreeting = false;\n            sessionStorage.setItem('greetingShown', 'true');\n          }, 2000);\n        }, 500);\n      } else {\n        this.showGreeting = false;\n      }\n    });\n\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n\n      this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n      this.doneCount = this.countTasksByStatus(tasks, 'done');\n      this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n      this.awaitingFeedbackCount = this.countTasksByStatus(\n        tasks,\n        'await-feedback'\n      );\n\n      const now = new Date();\n      const futureTasks = tasks\n        .filter((t) => t.date && t.status !== 'done')\n        .map((t) => {\n          let dateObj: Date | null = null;\n          if (t.date instanceof Date) {\n            dateObj = t.date;\n          } else if (this.isFirestoreTimestamp(t.date)) {\n            dateObj = t.date.toDate();\n          } else if (typeof t.date === 'string' || typeof t.date === 'number') {\n            dateObj = new Date(t.date);\n          }\n          return { ...t, dateObj };\n        })\n        .filter((t) => t.dateObj && t.dateObj > now);\n\n      if (futureTasks.length > 0) {\n        futureTasks.sort((a, b) => a.dateObj!.getTime() - b.dateObj!.getTime());\n        const nextDate = futureTasks[0].dateObj!;\n        this.nextDeadlineDate = nextDate;\n        this.nextDeadlineCount = futureTasks.filter(\n          (t) => t.dateObj!.getTime() === nextDate.getTime()\n        ).length;\n      } else {\n        this.nextDeadlineDate = null;\n        this.nextDeadlineCount = 0;\n      }\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    Join 360\n    \n    Key Metrics at a Glance\n    \n  \n\n  \n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n  \n    \n      \n        \n          \n            \n            \n              \n            \n            \n              \n            \n          \n\n          \n            {{ todoCount }}\n            To-do\n          \n        \n\n        \n          \n            \n            \n          \n          \n            {{ doneCount }}\n            Done\n          \n        \n      \n\n      \n        \n          \n            \n            \n          \n        \n\n        \n          {{ nextDeadlineCount }}\n          Urgent\n        \n        \n        \n          {{ nextDeadlineDate | date : \"MMMM d, y\" }}\n          Upcoming Deadline\n        \n      \n\n      \n        \n          \n            {{ totalTaskCount }}\n            Tasks inBoard\n          \n        \n        \n          \n            {{ inProgressCount }}\n            Tasks in Progress\n          \n        \n        \n          \n            {{ awaitingFeedbackCount }}\n            Awaiting Feedback\n          \n        \n      \n    \n\n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Join 360        Key Metrics at a Glance                  {{ greeting }}      {{ userName }}                                                                                                                                                            {{ todoCount }}            To-do                                                                                            {{ doneCount }}            Done                                                                                                            {{ nextDeadlineCount }}          Urgent                                  {{ nextDeadlineDate | date : \"MMMM d, y\" }}          Upcoming Deadline                                                  {{ totalTaskCount }}            Tasks inBoard                                                {{ inProgressCount }}            Tasks in Progress                                                {{ awaitingFeedbackCount }}            Awaiting Feedback                                      {{ greeting }}      {{ userName }}      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SummaryComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Task.html":{"url":"interfaces/Task.html","title":"interface - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a task in the system.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            assignedTo\n                                        \n                                \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            priority\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subtask\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        assignedTo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assignedTo:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional list of user IDs assigned to the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:     \"technical\" | \"user story\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"technical\" | \"user story\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Task category\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:     Date | Timestamp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | Timestamp\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Date of the task; may be a native Date object or Firestore Timestamp.\nFirestore stores it as a Timestamp and it needs conversion after reading.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating a task)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:     \"low\" | \"medium\" | \"urgent\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"low\" | \"medium\" | \"urgent\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Priority level of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current status of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtask\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtask:     Subtask[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Subtask[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional array of subtasks (retrieved separately as subcollection)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title of the task\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskComponent.html":{"url":"components/TaskComponent.html","title":"component - TaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task/task.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeStatus\n                            \n                            \n                                getCompletedSubtasksCount\n                            \n                            \n                                    Async\n                                getContactList\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                openDotsMenuHandler\n                            \n                            \n                                openTaskDetails\n                            \n                            \n                                percentageCompleted\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                openedMenuTaskId\n                            \n                            \n                                subtaskList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                closeDotsMenu\n                            \n                            \n                                contacts\n                            \n                            \n                                openDotsMenu\n                            \n                            \n                                taskSelected\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isDotsMenuOpen\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task/task.component.ts:94\n                            \n                        \n\n                \n                    \n                            Injects services required for task and contact operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for task data handling.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contact information.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        openedMenuTaskId\n                    \n                \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:76\n                            \n                        \n                \n                    \n                        The ID of the task for which the contextual \"dots\" menu is currently open.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskList\n                    \n                \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:56\n                            \n                        \n                \n                    \n                        The list of subtasks associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:51\n                            \n                        \n                \n                    \n                        /**\nThe task to be displayed in this component.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changeTaskStatus\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:91\n                            \n                        \n                \n                    \n                        Emits a status change for the task, along with its ID.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:86\n                            \n                        \n                \n                    \n                        Emits an event when the \"dots\" menu should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        contacts\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:66\n                            \n                        \n                \n                    \n                        Emits the list of resolved contacts associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        openDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:81\n                            \n                        \n                \n                    \n                        Emits the ID of the task when the \"dots\" menu is opened.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        taskSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:61\n                            \n                        \n                \n                    \n                        Emits the selected task when the user opens the task detail view.\n\n                    \n                \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeStatus\n                        \n                    \n                \n            \n            \n                \nchangeStatus(status: string, event: MouseEvent | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:152\n                        \n                    \n\n\n            \n                \n                        Emits a task status change and closes the dots menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new status to assign to the task.\n\n                                            \n                                        \n                                        \n                                                event\n                                            \n                                                        MouseEvent | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Optional mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCompletedSubtasksCount\n                        \n                    \n                \n            \n            \n                \ngetCompletedSubtasksCount(subtaskList: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:168\n                        \n                    \n\n\n            \n                \n                        Returns the number of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of completed subtasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:223\n                        \n                    \n\n\n            \n                \n                        Loads the full contact details for each assigned contact in the task\nand emits the resolved contact list.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames(remainingContacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:239\n                        \n                    \n\n\n            \n                \n                        Joins the names of remaining contacts into a comma-separated string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                remainingContacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of remaining Contact objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:139\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when any data-bound @Input properties change.\nThis method checks whether the task input has changed (excluding the first change),\nand if so, resets and reloads the contact list based on the updated task data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An object of changed properties with current and previous values.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that loads the contact list for the task on component init.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDotsMenuHandler\n                        \n                    \n                \n            \n            \n                \nopenDotsMenuHandler(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:210\n                        \n                    \n\n\n            \n                \n                        Toggles the dots menu open or closed for this task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetails\n                        \n                    \n                \n            \n            \n                \nopenTaskDetails(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:191\n                        \n                    \n\n\n            \n                \n                        Emits the selected task to open its detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The task to open.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        percentageCompleted\n                        \n                    \n                \n            \n            \n                \npercentageCompleted(subtaskList: Subtask[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:180\n                        \n                    \n\n\n            \n                \n                        Calculates the percentage of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        Subtask[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The completion percentage as a number between 0 and 100.\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:44\n                        \n                    \n\n            \n                \n                    The full list of contacts assigned to the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:104\n                        \n                    \n\n            \n                \n                    Service for fetching contact information.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:71\n                        \n                    \n\n            \n                \n                    Holds the task currently selected to open its detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:103\n                        \n                    \n\n            \n                \n                    Service for task data handling.\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isDotsMenuOpen\n                    \n                \n\n                \n                    \n                        getisDotsMenuOpen()\n                    \n                \n                            \n                                \n                                    Defined in src/app/board/task/task.component.ts:201\n                                \n                            \n                    \n                        \n                                Checks if the dots menu is currently open for this task.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n} from '@angular/core';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { TaskService } from '../../services/task.service';\nimport { Task } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { SimpleChanges, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-task',\n  imports: [CommonModule],\n  templateUrl: './task.component.html',\n  styleUrl: './task.component.scss',\n})\nexport class TaskComponent {\n\n  /**\n   * The full list of contacts assigned to the task.\n   */\n  contactList: Contact[] = [];\n\n  /**\n\n  /**\n   * The task to be displayed in this component.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  @Input() subtaskList: Subtask[] = [];\n\n  /**\n   * Emits the selected task when the user opens the task detail view.\n   */\n  @Output() taskSelected = new EventEmitter();\n\n  /**\n   * Emits the list of resolved contacts associated with the task.\n   */\n  @Output() contacts = new EventEmitter();\n\n  /**\n   * Holds the task currently selected to open its detail view.\n   */\n  selectedTask?: Task;\n\n  /**\n   * The ID of the task for which the contextual \"dots\" menu is currently open.\n   */\n  @Input() openedMenuTaskId: string | null = null;\n\n  /**\n   * Emits the ID of the task when the \"dots\" menu is opened.\n   */\n  @Output() openDotsMenu = new EventEmitter();\n\n  /**\n   * Emits an event when the \"dots\" menu should be closed.\n   */\n  @Output() closeDotsMenu = new EventEmitter();\n\n  /**\n   * Emits a status change for the task, along with its ID.\n   */\n  @Output() changeTaskStatus = new EventEmitter();\n\n  /**\n   * Injects services required for task and contact operations.\n   * \n   * @param taskService Service for task data handling.\n   * @param contactService Service for fetching contact information.\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService\n  ) {}\n\n  /**\n   * Detects clicks outside the \"dots\" menu and closes it if open.\n   * \n   * @param event Mouse click event on the document.\n   */\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (\n      !target.closest('.dots-menu-btn') &&\n      !target.closest('.dots-menu-overlay')\n    ) {\n      if (this.isDotsMenuOpen) {\n        this.closeDotsMenu.emit();\n      }\n    }\n  }\n\n  /**\n   * Lifecycle hook that loads the contact list for the task on component init.\n   */\n  ngOnInit(): void {\n    this.getContactList();\n  }\n\n  /**\n   * Lifecycle hook that is called when any data-bound @Input properties change.\n   * This method checks whether the `task` input has changed (excluding the first change),\n   * and if so, resets and reloads the contact list based on the updated task data.\n   *\n   * @param changes An object of changed properties with current and previous values.\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['task'] && !changes['task'].firstChange) {\n      this.contactList = [];\n      this.getContactList();\n    }\n  }\n\n  /**\n   * Emits a task status change and closes the dots menu.\n   * \n   * @param status The new status to assign to the task.\n   * @param event Optional mouse event to stop propagation.\n   */\n  changeStatus(status: string, event: MouseEvent | undefined) {\n    if (event) {\n      event.stopPropagation();\n    }\n    if (this.task.id) {\n      this.changeTaskStatus.emit({ taskId: this.task.id, status });\n      this.closeDotsMenu.emit();\n    }\n  }\n\n  /**\n   * Returns the number of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The number of completed subtasks.\n   */\n  getCompletedSubtasksCount(subtaskList: any[]): number {\n    return Array.isArray(subtaskList)\n      ? subtaskList.filter((el) => el.isCompleted).length\n      : 0;\n  }\n\n  /**\n   * Calculates the percentage of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The completion percentage as a number between 0 and 100.\n   */\n  percentageCompleted(subtaskList: Subtask[]): number {\n    if (!subtaskList || subtaskList.length === 0) return 0;\n    let completed = this.getCompletedSubtasksCount(subtaskList);\n    return Math.round((completed / subtaskList.length) * 100);\n  }\n\n  /**\n   * Emits the selected task to open its detail view.\n   * \n   * @param task The task to open.\n   */\n  openTaskDetails(task: Task) {\n    this.selectedTask = task;\n    this.taskSelected.emit(this.selectedTask);\n  }\n\n  /**\n   * Checks if the dots menu is currently open for this task.\n   * \n   * @returns A boolean indicating if the dots menu is open.\n   */\n  get isDotsMenuOpen() {\n    return this.openedMenuTaskId === this.task.id;\n  }\n\n  /**\n   * Toggles the dots menu open or closed for this task.\n   * \n   * @param event Mouse event to stop propagation.\n   */\n  openDotsMenuHandler(event: MouseEvent) {\n    event.stopPropagation();\n    if (this.isDotsMenuOpen) {\n      this.closeDotsMenu.emit();\n    } else {\n      this.openDotsMenu.emit(this.task.id);\n    }\n  }\n\n  /**\n   * Loads the full contact details for each assigned contact in the task\n   * and emits the resolved contact list.\n   */\n  async getContactList() {\n    if (this.task?.assignedTo?.length) {\n      for (let contactId of this.task.assignedTo) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) this.contactList.push(contact);\n      }\n      this.contacts.emit(this.contactList);\n    }\n  }\n\n  /**\n   * Joins the names of remaining contacts into a comma-separated string.\n   * \n   * @param remainingContacts Array of remaining Contact objects.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(remainingContacts: Contact[]): string {\n    return remainingContacts.map((contact) => contact.name).join(', ');\n  }\n}\n    \n\n    \n        \n  \n    \n      {{ taskService.capitalize(task.category) }}\n    \n\n    \n      \n      \n      \n    \n\n    \n      To Do\n      In Progress\n      Awaiting Feedback\n      Done\n    \n  \n  \n    {{ taskService.capitalize(task.title) }}\n    \n      {{ taskService.capitalize(task.description) }}\n      …\n    \n     0 ? 'visible' : 'hidden'\n      \"\n    >\n      \n        \n      \n      \n        {{ getCompletedSubtasksCount(subtaskList) }} /\n        {{ subtaskList.length }} Subtasks\n      \n    \n    \n      \n        \n          @for (contact of contactList.slice(0, 4); track $index) {\n          \n            \n              {{ contactService.getInitials(contact.name) }}\n            \n          \n          }\n           4\"\n            [title]=\"getRemainingContactNames(contactList.slice(4))\"\n          >\n            +{{ contactList.length - 4 }}\n          \n        \n      \n      \n      \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ taskService.capitalize(task.category) }}                                        To Do      In Progress      Awaiting Feedback      Done            {{ taskService.capitalize(task.title) }}          {{ taskService.capitalize(task.description) }}      …         0 ? \\'visible\\' : \\'hidden\\'      \"    >                                  {{ getCompletedSubtasksCount(subtaskList) }} /        {{ subtaskList.length }} Subtasks                                      @for (contact of contactList.slice(0, 4); track $index) {                                    {{ contactService.getInitials(contact.name) }}                                }           4\"            [title]=\"getRemainingContactNames(contactList.slice(4))\"          >            +{{ contactList.length - 4 }}                                                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskDetailsComponent.html":{"url":"components/TaskDetailsComponent.html","title":"component - TaskDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task-details/task-details.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task-details\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-details.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-details.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                showContent\n                            \n                            \n                                subtasks\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertDate\n                            \n                            \n                                deleteTask\n                            \n                            \n                                    Async\n                                loadAssignedContacts\n                            \n                            \n                                loadSubtasks\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                onSubtaskToggle\n                            \n                            \n                                openEditTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                closeTaskDetails\n                            \n                            \n                                editTask\n                            \n                            \n                                subtaskChanged\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-details/task-details.component.ts:70\n                            \n                        \n\n                \n                    \n                            Constructor injects task and contact services, and the Angular Router.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tasks and subtasks.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contacts.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation (currently unused).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        contactList\n                    \n                \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:60\n                            \n                        \n                \n                    \n                        The list of contacts assigned to this task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:55\n                            \n                        \n                \n                    \n                        The task whose details are being displayed.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        closeTaskDetails\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:40\n                            \n                        \n                \n                    \n                        Emits an event when the task detail view should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editTask\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:45\n                            \n                        \n                \n                    \n                        Emits an event when the user wants to edit the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:50\n                            \n                        \n                \n                    \n                        Emits the updated subtask list when a subtask is toggled.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Converts a Firebase Timestamp or Date to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The date or timestamp to convert.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the date.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n            \n                \ndeleteTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Deletes the task (if it has a valid ID), and closes the detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loadAssignedContacts\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadAssignedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Fetches detailed contact information for all assigned contact IDs\nand updates the contactList accordingly.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \nloadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:162\n                        \n                    \n\n\n            \n                \n                        Loads subtasks associated with the current task from the database.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:88\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook to load assigned contacts and subtasks on component initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:96\n                        \n                    \n\n\n            \n                \n                        Closes the task detail view and emits the close event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskToggle\n                        \n                    \n                \n            \n            \n                \nonSubtaskToggle(subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Toggles a subtask's completion status and updates it in the backend.\nEmits the updated list of subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The subtask to toggle.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openEditTask\n                        \n                    \n                \n            \n            \n                \nopenEditTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Prepares the task for editing and emits the edit event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:81\n                        \n                    \n\n            \n                \n                    Service for fetching contacts.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:65\n                        \n                    \n\n            \n                \n                    Controls whether the detail view content is shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:70\n                        \n                    \n\n            \n                \n                    The list of subtasks associated with the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:80\n                        \n                    \n\n            \n                \n                    Service for handling tasks and subtasks.\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { Task, TaskService } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-task-details',\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  templateUrl: './task-details.component.html',\n  styleUrl: './task-details.component.scss'\n})\nexport class TaskDetailsComponent {\n  /**\n   * Emits an event when the task detail view should be closed.\n   */\n  @Output() closeTaskDetails = new EventEmitter();\n\n  /**\n   * Emits an event when the user wants to edit the task.\n   */\n  @Output() editTask = new EventEmitter();\n\n  /**\n   * Emits the updated subtask list when a subtask is toggled.\n   */\n  @Output() subtaskChanged = new EventEmitter();\n\n  /**\n   * The task whose details are being displayed.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of contacts assigned to this task.\n   */\n  @Input() contactList: Contact[] = [];\n\n  /**\n   * Controls whether the detail view content is shown.\n   */\n  showContent = true;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  subtasks: Subtask[] = [];\n\n  /**\n   * Constructor injects task and contact services, and the Angular Router.\n   * \n   * @param taskService Service for handling tasks and subtasks.\n   * @param contactService Service for fetching contacts.\n   * @param router Angular Router for navigation (currently unused).\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService,\n    private router: Router\n  ) {}\n\n  /**\n   * Lifecycle hook to load assigned contacts and subtasks on component initialization.\n   */\n  ngOnInit(): void {\n    this.loadAssignedContacts();\n    this.loadSubtasks();\n  }\n\n  /**\n   * Closes the task detail view and emits the close event.\n   */\n  onClose() {\n    this.showContent = false;\n    this.closeTaskDetails.emit('close');\n  }\n\n  /**\n   * Converts a Firebase Timestamp or Date to a formatted string.\n   * \n   * @param date The date or timestamp to convert.\n   * @returns A string representation of the date.\n   */\n  convertDate(date: Timestamp | Date): string {\n    return this.taskService.convertDate(date);\n  }\n\n  /**\n   * Prepares the task for editing and emits the edit event.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  openEditTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    this.taskService.setEditingTask(this.task);\n    this.editTask.emit(\"edit\");\n  }\n\n  /**\n   * Deletes the task (if it has a valid ID), and closes the detail view.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  deleteTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    if (this.task.id) {\n      this.taskService.deleteTask(this.task.id);\n      this.onClose();\n    }\n  }\n\n  /**\n   * Toggles a subtask's completion status and updates it in the backend.\n   * Emits the updated list of subtasks.\n   * \n   * @param subtask The subtask to toggle.\n   */\n  onSubtaskToggle(subtask: Subtask) {\n    if (!this.task.id || !subtask.id) return;\n\n    this.taskService.updateSubtask(this.task.id, subtask.id, subtask)\n      .then(() => {\n        this.subtaskChanged.emit(this.subtasks);\n      })\n      .catch(error => {\n        console.error('Error updating subtask:', error);\n      });\n  }\n\n  /**\n   * Loads subtasks associated with the current task from the database.\n   */\n  loadSubtasks() {\n    if (this.task?.id) {\n      this.taskService.getSubtasks(this.task.id).subscribe((subtasks: Subtask[]) => {\n        this.subtasks = subtasks;\n      });\n    }\n  }\n\n  /**\n   * Fetches detailed contact information for all assigned contact IDs\n   * and updates the contactList accordingly.\n   */\n  async loadAssignedContacts() {\n    this.contactList = [];\n    if (this.task?.assignedTo?.length) {\n      for (let contactId of this.task.assignedTo) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) {\n          this.contactList.push(contact);\n        }\n      }\n    }\n  }\n}\n    \n\n    \n        \n    \n        {{taskService.capitalize(task.category)}}\n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n    \n        {{ taskService.capitalize(task.title) }}\n        {{ taskService.capitalize(task.description) }}\n        \n            Due date:\n            {{ convertDate(task.date) }}\n        \n        \n            Priority:\n            {{ task.priority }}\n            \n                \n                \n                \n            \n        \n        \n            Assigned To:\n            No contact selected\n            \n                @for (contact of contactList; track $index) {\n                    \n                        \n                            \n                                {{ contactService.getInitials(contact.name) }}\n                            \n                            {{ contact.name }}\n                        \n                    \n                }\n            \n        \n       \n            Subtasks:\n            No subtasks defined\n            \n                @for (subtask of subtasks; track $index) {\n                    \n                        \n                        \n                        {{ subtask.title }}\n                    \n                }\n            \n        \n        \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Delete\n            \n            \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Edit\n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{taskService.capitalize(task.category)}}                                                                                                                                                                {{ taskService.capitalize(task.title) }}        {{ taskService.capitalize(task.description) }}                    Due date:            {{ convertDate(task.date) }}                            Priority:            {{ task.priority }}                                                                                                    Assigned To:            No contact selected                            @for (contact of contactList; track $index) {                                                                                                        {{ contactService.getInitials(contact.name) }}                                                        {{ contact.name }}                                                            }                                       Subtasks:            No subtasks defined                            @for (subtask of subtasks; track $index) {                                                                                            {{ subtask.title }}                                    }                                                                                                                                                                                                                Delete                                                                                                                                                                                                            Edit                        '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskListManager.html":{"url":"injectables/TaskListManager.html","title":"injectable - TaskListManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskListManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/task-list-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                TaskListManager handles all task list operations for the BoardComponent.\nThis includes loading, filtering, sorting, and managing task lists by status.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                awaitfeedback\n                            \n                            \n                                    Private\n                                done\n                            \n                            \n                                    Private\n                                inprogress\n                            \n                            \n                                    Private\n                                subtasksByTaskId\n                            \n                            \n                                    Private\n                                taskList\n                            \n                            \n                                    Private\n                                todo\n                            \n                            \n                                    Private\n                                unsubTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                destroy\n                            \n                            \n                                    Private\n                                emptyArrays\n                            \n                            \n                                getAwaitFeedbackTasks\n                            \n                            \n                                    Private\n                                getDateValue\n                            \n                            \n                                getDoneTasks\n                            \n                            \n                                getFilteredTasks\n                            \n                            \n                                getInProgressTasks\n                            \n                            \n                                getSubtasksByTaskId\n                            \n                            \n                                getSubtasksForSelectedTask\n                            \n                            \n                                getSubtasksForTask\n                            \n                            \n                                getTaskList\n                            \n                            \n                                getTodoTasks\n                            \n                            \n                                    Private\n                                loadSubtasks\n                            \n                            \n                                loadTasks\n                            \n                            \n                                sortTasksByDueDate\n                            \n                            \n                                trackByTaskId\n                            \n                            \n                                updateTaskLists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-list-manager.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        destroy\n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:229\n                        \n                    \n\n\n            \n                \n                        Clears all data and unsubscribes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emptyArrays\n                        \n                    \n                \n            \n            \n                \n                        \n                    emptyArrays()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:170\n                        \n                    \n\n\n            \n                \n                        Empties all task lists (to-do, in-progress, await-feedback, done).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAwaitFeedbackTasks\n                        \n                    \n                \n            \n            \n                \ngetAwaitFeedbackTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getDateValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDateValue(date: Date | any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Date | any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDate input to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDoneTasks\n                        \n                    \n                \n            \n            \n                \ngetDoneTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFilteredTasks\n                        \n                    \n                \n            \n            \n                \ngetFilteredTasks(status: string, searchTerm: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:65\n                        \n                    \n\n\n            \n                \n                        Filters tasks by given status and search term (case-insensitive).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTask status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n\n\n                                            \n                                        \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nSearch term to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Filtered list of tasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInProgressTasks\n                        \n                    \n                \n            \n            \n                \ngetInProgressTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksByTaskId\n                        \n                    \n                \n            \n            \n                \ngetSubtasksByTaskId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:54\n                        \n                    \n\n\n            \n                \n                        Gets subtasks by task ID\n\n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForSelectedTask(selectedTask: Task | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:209\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks assigned to the currently selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently selected task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none are found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForTask(taskId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:196\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks for a given task ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to retrieve subtasks for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none exist.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTaskList\n                        \n                    \n                \n            \n            \n                \ngetTaskList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:28\n                        \n                    \n\n\n            \n                \n                        Gets all tasks\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTodoTasks\n                        \n                    \n                \n            \n            \n                \ngetTodoTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:35\n                        \n                    \n\n\n            \n                \n                        Gets task lists by status\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:180\n                        \n                    \n\n\n            \n                \n                        Loads subtasks for each task and stores them in a lookup table by task ID.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadTasks\n                        \n                    \n                \n            \n            \n                \nloadTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:133\n                        \n                    \n\n\n            \n                \n                        Loads tasks from the task service and distributes them into status-based lists.\nAlso sorts tasks by due date and loads their subtasks.\n\n\n                        \n                            Returns :         function\n\n                        \n                            \n                                A function to unsubscribe from the task observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortTasksByDueDate\n                        \n                    \n                \n            \n            \n                \nsortTasksByDueDate(tasks: Task[], ascending: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:91\n                        \n                    \n\n\n            \n                \n                        Sorts a list of tasks by their due date.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nArray of tasks to be sorted.\n\n\n                                            \n                                        \n                                        \n                                                ascending\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether to sort in ascending order (default: true).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Sorted task array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trackByTaskId\n                        \n                    \n                \n            \n            \n                \ntrackByTaskId(index: number, task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:123\n                        \n                    \n\n\n            \n                \n                        TrackBy function for use with ngFor to optimize rendering of tasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the item in the array.\n\n\n                                            \n                                        \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                The unique task ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTaskLists\n                        \n                    \n                \n            \n            \n                \nupdateTaskLists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:219\n                        \n                    \n\n\n            \n                \n                        Updates task lists after status changes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        awaitfeedback\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inprogress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtasksByTaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        unsubTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Task, TaskService, Subtask } from '../services/task.service';\nimport { Subscription } from 'rxjs';\n\n/**\n * TaskListManager handles all task list operations for the BoardComponent.\n * This includes loading, filtering, sorting, and managing task lists by status.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskListManager {\n  private taskList: Task[] = [];\n  private subtasksByTaskId: { [taskId: string]: Subtask[] } = {};\n  private unsubTask!: Subscription;\n  \n  // Task status arrays\n  private todo: Task[] = [];\n  private inprogress: Task[] = [];\n  private awaitfeedback: Task[] = [];\n  private done: Task[] = [];\n\n  constructor(private taskService: TaskService) {}\n\n  /**\n   * Gets all tasks\n   */\n  getTaskList(): Task[] {\n    return this.taskList;\n  }\n\n  /**\n   * Gets task lists by status\n   */\n  getTodoTasks(): Task[] {\n    return this.todo;\n  }\n\n  getInProgressTasks(): Task[] {\n    return this.inprogress;\n  }\n\n  getAwaitFeedbackTasks(): Task[] {\n    return this.awaitfeedback;\n  }\n\n  getDoneTasks(): Task[] {\n    return this.done;\n  }\n\n  /**\n   * Gets subtasks by task ID\n   */\n  getSubtasksByTaskId(): { [taskId: string]: Subtask[] } {\n    return this.subtasksByTaskId;\n  }\n\n  /**\n   * Filters tasks by given status and search term (case-insensitive).\n   *\n   * @param status - Task status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n   * @param searchTerm - Search term to filter by.\n   * @returns Filtered list of tasks.\n   */\n  getFilteredTasks(status: string, searchTerm: string): Task[] {\n    const statusArrayMap: { [key: string]: Task[] } = {\n      'to-do': this.todo,\n      'in-progress': this.inprogress,\n      'await-feedback': this.awaitfeedback,\n      done: this.done,\n    };\n    const tasksForStatus = statusArrayMap[status] || [];\n    if (!searchTerm.trim()) {\n      return tasksForStatus;\n    }\n    const searchLower = searchTerm.toLowerCase();\n    return tasksForStatus.filter(\n      (task) =>\n        task.title.toLowerCase().includes(searchLower) ||\n        task.description?.toLowerCase().includes(searchLower)\n    );\n  }\n\n  /**\n   * Sorts a list of tasks by their due date.\n   *\n   * @param tasks - Array of tasks to be sorted.\n   * @param ascending - Whether to sort in ascending order (default: true).\n   * @returns Sorted task array.\n   */\n  sortTasksByDueDate(tasks: Task[], ascending: boolean = true): Task[] {\n    return [...tasks].sort((a, b) => {\n      const dateA = this.getDateValue(a.date);\n      const dateB = this.getDateValue(b.date);\n      return ascending ? dateA - dateB : dateB - dateA;\n    });\n  }\n\n  /**\n   * Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n   *\n   * @param date - Date input to convert.\n   * @returns Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n   */\n  private getDateValue(date: Date | any): number {\n    if (date && typeof date.toDate === 'function') {\n      return date.toDate().getTime();\n    } else if (date instanceof Date) {\n      return date.getTime();\n    } else if (typeof date === 'string') {\n      return new Date(date).getTime();\n    }\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * TrackBy function for use with ngFor to optimize rendering of tasks.\n   *\n   * @param index - The index of the item in the array.\n   * @param task - The task object.\n   * @returns The unique task ID.\n   */\n  trackByTaskId(index: number, task: Task): string | undefined {\n    return task.id;\n  }\n\n  /**\n   * Loads tasks from the task service and distributes them into status-based lists.\n   * Also sorts tasks by due date and loads their subtasks.\n   *\n   * @returns A function to unsubscribe from the task observable.\n   */\n  loadTasks(): (() => void) {\n    this.unsubTask = this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n      this.emptyArrays();\n      for (const task of tasks) {\n        switch (task.status) {\n          case 'to-do':\n            this.todo.push(task);\n            break;\n          case 'in-progress':\n            this.inprogress.push(task);\n            break;\n          case 'await-feedback':\n            this.awaitfeedback.push(task);\n            break;\n          case 'done':\n            this.done.push(task);\n            break;\n          default:\n            console.warn(\n              `Unbekannter Status bei Task ${task.title}:`,\n              task.status\n            );\n        }\n      }\n      this.todo = this.sortTasksByDueDate(this.todo);\n      this.inprogress = this.sortTasksByDueDate(this.inprogress);\n      this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n      this.done = this.sortTasksByDueDate(this.done);\n      this.loadSubtasks();\n    });\n    return () => this.unsubTask.unsubscribe();\n  }\n\n  /**\n   * Empties all task lists (to-do, in-progress, await-feedback, done).\n   */\n  private emptyArrays(): void {\n    this.todo = [];\n    this.inprogress = [];\n    this.awaitfeedback = [];\n    this.done = [];\n  }\n\n  /**\n   * Loads subtasks for each task and stores them in a lookup table by task ID.\n   */\n  private loadSubtasks(): void {\n    for (const task of this.taskList) {\n      if (task.id) {\n        this.taskService.getSubtasks(task.id).subscribe((subtasks) => {\n          this.subtasksByTaskId[task.id!] = subtasks;\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns the subtasks for a given task ID.\n   *\n   * @param taskId - The ID of the task to retrieve subtasks for.\n   * @returns Array of subtasks, or an empty array if none exist.\n   */\n  getSubtasksForTask(taskId: string | undefined): Subtask[] {\n    if (!taskId) {\n      return [];\n    }\n    return this.subtasksByTaskId[taskId] || [];\n  }\n\n  /**\n   * Returns the subtasks assigned to the currently selected task.\n   *\n   * @param selectedTask - The currently selected task.\n   * @returns Array of subtasks, or an empty array if none are found.\n   */\n  getSubtasksForSelectedTask(selectedTask: Task | undefined): Subtask[] {\n    if (selectedTask?.id) {\n      return this.subtasksByTaskId[selectedTask.id] || [];\n    }\n    return [];\n  }\n\n  /**\n   * Updates task lists after status changes\n   */\n  updateTaskLists(): void {\n    this.todo = this.sortTasksByDueDate(this.todo);\n    this.inprogress = this.sortTasksByDueDate(this.inprogress);\n    this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n    this.done = this.sortTasksByDueDate(this.done);\n  }\n\n  /**\n   * Clears all data and unsubscribes\n   */\n  destroy(): void {\n    if (this.unsubTask) {\n      this.unsubTask.unsubscribe();\n    }\n    this.emptyArrays();\n    this.taskList = [];\n    this.subtasksByTaskId = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing tasks and subtasks\nstored in Firestore.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editingTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSubtask\n                            \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                capitalize\n                            \n                            \n                                clearEditingTask\n                            \n                            \n                                convertDate\n                            \n                            \n                                    Async\n                                deleteSubtask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                formatDate\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                getEditingTask\n                            \n                            \n                                getSingleTaskRef\n                            \n                            \n                                getSubtasks\n                            \n                            \n                                getSubtasksRef\n                            \n                            \n                                getTasks\n                            \n                            \n                                getTasksRef\n                            \n                            \n                                setEditingTask\n                            \n                            \n                                    Async\n                                updateSubtask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/task.service.ts:71\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addSubtask(ColId: string, subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Adds a subtask to a specific task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created subtask with ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addTask(newTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Adds a new task to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task to be added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created task including its generated ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(text: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:297\n                        \n                    \n\n\n            \n                \n                        Capitalizes the first letter of a string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe string to capitalize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Capitalized string or empty string if undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearEditingTask\n                        \n                    \n                \n            \n            \n                \nclearEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:287\n                        \n                    \n\n\n            \n                \n                        Clears the currently edited task.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:247\n                        \n                    \n\n\n            \n                \n                        Converts a Firestore Timestamp or Date object to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Timestamp or Date to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted date string (dd/mm/yyyy).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSubtask(taskId: string, subtaskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Deletes a subtask from a task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask ID to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:212\n                        \n                    \n\n\n            \n                \n                        Deletes a task from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatDate\n                        \n                    \n                \n            \n            \n                \nformatDate(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:261\n                        \n                    \n\n\n            \n                \n                        Formats a Date object into a dd/mm/yyyy string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Date to format.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updated: Task | Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Returns a plain object representation of a Task or Subtask for Firestore updates.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updated\n                                            \n                                                        Task | Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to clean.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { title: string; description: string; date: any; priority: \"low\" | \"medium\" | \"urgent\"; status: string; assignedTo: {}; category: \"technical\" | \"user story\"; isCompleted?: undefined; } | { ...; } | { ...; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingTask\n                        \n                    \n                \n            \n            \n                \ngetEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:280\n                        \n                    \n\n\n            \n                \n                        Returns the task currently being edited.\n\n\n                        \n                            Returns :         Task | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleTaskRef\n                        \n                    \n                \n            \n            \n                \ngetSingleTaskRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns a document reference for a specific task by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasks\n                        \n                    \n                \n            \n            \n                \ngetSubtasks(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Observes the subtasks of a given task in real-time.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksRef\n                        \n                    \n                \n            \n            \n                \ngetSubtasksRef(subColId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'subtasks' subcollection for a given task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasks\n                        \n                    \n                \n            \n            \n                \ngetTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Observes all tasks in Firestore and emits updates in real-time.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasksRef\n                        \n                    \n                \n            \n            \n                \ngetTasksRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'tasks' Firestore collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditingTask\n                        \n                    \n                \n            \n            \n                \nsetEditingTask(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:273\n                        \n                    \n\n\n            \n                \n                        Sets the currently edited task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task being edited.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:191\n                        \n                    \n\n\n            \n                \n                        Updates a subtask document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask document ID.\n\n\n                                            \n                                        \n                                        \n                                                updatedSubtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated subtask data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(docId: string, updatedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Updates a task document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task.\n\n\n                                            \n                                        \n                                        \n                                                updatedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated task data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/services/task.service.ts:71\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserData.html":{"url":"interfaces/UserData.html","title":"interface - UserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for user data stored in Firestore.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            uid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/add-task/add-task.component.ts\n            \n            component\n            AddTaskComponent\n            \n                59 %\n                (25/42)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            injectable\n            CategoryManager\n            \n                80 %\n                (12/15)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/add-task/contact-manager.ts\n            \n            injectable\n            ContactManager\n            \n                81 %\n                (13/16)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            injectable\n            SubtaskManager\n            \n                79 %\n                (23/29)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            interface\n            Subtask\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/board.component.ts\n            \n            component\n            BoardComponent\n            \n                71 %\n                (25/35)\n            \n        \n        \n            \n                \n                src/app/board/drag-drop-manager.ts\n            \n            injectable\n            DragDropManager\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/board/overlay-manager.ts\n            \n            injectable\n            OverlayManager\n            \n                66 %\n                (14/21)\n            \n        \n        \n            \n                \n                src/app/board/task-details/task-details.component.ts\n            \n            component\n            TaskDetailsComponent\n            \n                94 %\n                (18/19)\n            \n        \n        \n            \n                \n                src/app/board/task-list-manager.ts\n            \n            injectable\n            TaskListManager\n            \n                57 %\n                (15/26)\n            \n        \n        \n            \n                \n                src/app/board/task/task.component.ts\n            \n            component\n            TaskComponent\n            \n                96 %\n                (24/25)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-details/contact-details.component.ts\n            \n            component\n            ContactDetailsComponent\n            \n                50 %\n                (13/26)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-form/contact-form.component.ts\n            \n            component\n            ContactFormComponent\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-list/contact-list.component.ts\n            \n            component\n            ContactListComponent\n            \n                85 %\n                (17/20)\n            \n        \n        \n            \n                \n                src/app/contacts/contacts.component.ts\n            \n            component\n            ContactsComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/app/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/app/login-signup/footer/footer.component.ts\n            \n            component\n            FooterComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/login-signup/login-header/login-header.component.ts\n            \n            component\n            LoginHeaderComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/login-signup/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/app/login-signup/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                92 %\n                (13/14)\n            \n        \n        \n            \n                \n                src/app/services/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            interface\n            UserData\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            injectable\n            ContactService\n            \n                95 %\n                (23/24)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            interface\n            Contact\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/app/services/contact.service.ts\n            \n            function\n            notOnlyWhitespace\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/navigation-history.service.ts\n            \n            injectable\n            NavigationHistoryService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            injectable\n            TaskService\n            \n                90 %\n                (19/21)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Subtask\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Task\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/shared/help/help.component.ts\n            \n            component\n            HelpComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/legal-notice/legal-notice.component.ts\n            \n            component\n            LegalNoticeComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/privacy-policy/privacy-policy.component.ts\n            \n            component\n            PrivacyPolicyComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/sidebar/sidebar.component.ts\n            \n            component\n            SidebarComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            component\n            SummaryComponent\n            \n                26 %\n                (5/19)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            interface\n            FirestoreTimestamp\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.14\n        \n            @angular/cdk : ^19.2.14\n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/fire : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            notOnlyWhitespace   (src/.../contact.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/services/contact.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        notOnlyWhitespace\n                        \n                    \n                \n            \n            \n                \nnotOnlyWhitespace(control: AbstractControl)\n                \n            \n\n\n\n\n            \n                \n                        Custom validator to check that a form input contains more than just whitespace.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form control to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                A validation error object if invalid, otherwise null.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nJoin\nThis project was generated using Angular CLI version 19.2.12.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideFirebaseApp(() =>\n      initializeApp({\n        projectId: 'join-6125f',\n        appId: '1:703986298510:web:8cb9707daf583f2153a3df',\n        storageBucket: 'join-6125f.firebasestorage.app',\n        apiKey: 'AIzaSyAWyoU260eXmo3445mLTsqCjzRhEG6aq9A',\n        authDomain: 'join-6125f.firebaseapp.com',\n        messagingSenderId: '703986298510',\n      })\n    ),\n    provideFirestore(() => getFirestore()),\n    provideAnimations(),\n    provideAuth(() => getAuth()),\n    {\n      provide: CDK_DRAG_CONFIG,\n      useValue: {\n        dragStartThreshold: 5,\n        pointerDirectionChangeThreshold: 5,\n        zIndex: 1000,\n        scrollSpeed: 30,          \n        scrollProximity: 100,     // Distance to border\n      },\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
