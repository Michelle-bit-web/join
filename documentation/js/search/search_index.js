var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.197,1,0.867]],["body/components/AppComponent.html",[0,0.338,1,1.566,2,1.354,3,0.278,4,0.242,5,1.21,6,1.21,7,1.21,8,0.242,9,3.595,10,1.21,11,1.792,12,1.91,13,1.354,14,3.033,15,1.122,16,1.443,17,5.921,18,1.566,19,1.566,20,2.18,21,1.443,22,5.387,23,1.638,24,5.387,25,0.207,26,0.66,27,5.921,28,3.94,29,0.66,30,2.852,31,3.242,32,2.733,33,0.789,34,5.387,35,2.424,36,4.027,37,5.387,38,1.113,39,3.507,40,4.567,41,4.567,42,4.19,43,5.281,44,2.117,45,2.617,46,3.623,47,0.612,48,0.025,49,0.606,50,0.308,51,0.434,52,0.434,53,3.982,54,0.97,55,3.623,56,3.033,57,4.567,58,5.387,59,3.033,60,0.777,61,0.839,62,4.241,63,3.301,64,1.354,65,3.301,66,3.301,67,2.803,68,4.567,69,1.468,70,4.027,71,0.565,72,2.424,73,3.301,74,0.438,75,0.242,76,5.019,77,0.999,78,4.241,79,4.241,80,1.464,81,2.852,82,2.852,83,2.599,84,3.595,85,0.278,86,0.278,87,0.5,88,0.903,89,3.595,90,4.241,91,1.561,92,2.049,93,3.595,94,4.241,95,4.241,96,4.241,97,1.21,98,1.538,99,1.443,100,1.21,101,1.778,102,1.21,103,0.819,104,0.819,105,1.538,106,1.21,107,0.936,108,1.21,109,1.136,110,1.223,111,1.21,112,1.066,113,1.21,114,1.066,115,1.21,116,1.066,117,1.21,118,1.066,119,1.21,120,1.538,121,1.066,122,1.21,123,1.066,124,1.21,125,1.21,126,1.066,127,1.21,128,1.066,129,1.066,130,1.21,131,1.21,132,1.21,133,1.066,134,1.21,135,0.999,136,1.21,137,1.066,138,1.066,139,0.476,140,0.999,141,1.136,142,1.21,143,0.019,144,0.019]],["title/guards/AuthGuard.html",[145,2.32,146,2.579]],["body/guards/AuthGuard.html",[3,0.309,4,0.269,8,0.269,13,1.182,15,1.117,25,0.23,29,0.704,32,2.745,33,0.765,39,3.638,45,2.413,47,0.678,48,0.025,49,0.481,50,0.269,51,0.481,52,0.588,54,1.034,64,1.444,68,4.87,69,1.354,74,0.424,75,0.269,77,1.108,83,2.881,85,0.309,86,0.309,87,0.533,88,0.963,143,0.02,144,0.02,145,3.864,146,4.83,147,4.701,148,3.985,149,4.87,150,3.864,151,4.87,152,4.87,153,1.609,154,3.638,155,0.829,156,6.742,157,3.514,158,2.211,159,4.701,160,4.87,161,2.413,162,3.234,163,2.989,164,1.861,165,2.585,166,2.413,167,4.701,168,2.989,169,5.744,170,3.864,171,2.989,172,5.744,173,3.52,174,3.864,175,5.744,176,3.52,177,4.87,178,5.744,179,0.427,180,2.784,181,5.744,182,2.989,183,0.704,184,3.514,185,5.744,186,4.701,187,3.985,188,1.623,189,1.259,190,2.647,191,0.895,192,4.701,193,4.701,194,4.701,195,4.701,196,6.203,197,4.701,198,4.701,199,3.162,200,1.182]],["title/injectables/AuthService.html",[158,1.118,183,0.423]],["body/injectables/AuthService.htmltitle/interfaces/Category.html",[301,0.713,366,1.552]],["body/interfaces/Category.html",[3,0.278,4,0.242,8,0.242,13,1.065,15,0.763,25,0.207,26,0.66,48,0.026,50,0.338,60,0.777,61,1.039,71,0.934,74,0.278,75,0.242,85,0.353,86,0.278,87,0.393,88,0.992,103,0.818,139,0.665,143,0.019,144,0.019,153,1.269,179,0.478,183,0.66,189,1.135,191,0.975,200,1.651,211,1.668,231,1.112,234,1.289,237,2.663,254,1.56,255,1.515,257,1.666,273,1.637,301,0.875,312,0.903,366,3.242,367,2.047,368,2.386,369,3.168,370,1.907,371,3.549,372,3.474,373,3.032,374,1.859,375,2.205,376,1.666,377,1.907,378,3.622,379,4.911,380,2.386,381,3.593,382,3.593,383,3.593,384,4.565,385,3.3,386,3.593,387,3.3,388,3.593,389,2.458,390,3.593,391,5.782,392,1.744,393,3.593,394,0.927,395,2.663,396,3.593,397,5.57,398,3.593,399,2.597,400,3.593,401,3.593,402,2.205,403,3.593,404,2.85,405,2.205,406,3.332,407,3.593,408,3.593,409,2.262,410,3.593,411,4.565,412,4.565,413,3.593,414,3.593,415,3.622,416,3.593,417,3.593,418,1.744,419,2.047,420,2.85,421,3.593,422,3.593,423,3.593]],["title/injectables/CategoryManager.html",[183,0.423,373,1.942]],["body/injectables/CategoryManager.html",[3,0.231,4,0.201,8,0.201,13,0.886,15,0.859,25,0.172,26,0.585,33,0.92,47,0.78,48,0.026,49,0.554,50,0.365,51,0.554,52,0.488,60,0.937,61,1.046,71,0.912,74,0.231,75,0.201,85,0.313,86,0.231,87,0.327,88,1.103,103,0.921,139,0.651,143,0.017,144,0.017,153,1.366,155,0.688,179,0.519,183,0.585,189,0.945,191,0.937,200,1.654,201,1.386,211,1.74,231,1.197,234,1.451,237,2.81,254,1.757,255,1.582,257,1.876,273,1.763,301,0.728,312,0.8,366,3.253,368,3.905,369,5.185,370,1.586,371,3.494,372,3.323,373,3.264,374,2.001,375,2.483,376,1.876,377,2.147,378,3.899,379,5.057,380,2.687,381,4.586,382,4.586,383,4.586,384,5.135,385,3.553,386,4.046,387,3.553,388,4.046,389,2.521,390,4.915,391,5.58,392,1.878,393,4.046,394,0.969,395,2.81,396,4.915,397,5.294,398,4.046,399,2.925,400,4.915,401,2.989,402,2.483,403,4.915,404,3.21,405,2.483,406,3.264,407,4.046,408,2.989,409,2.436,410,4.915,411,4.046,412,4.046,413,2.989,414,4.915,415,3.21,416,2.989,417,4.915,418,1.878,419,2.305,420,3.899,421,4.915,422,2.989,423,2.989,424,4.772,425,4.772,426,4.772,427,2.989,428,3.526,429,3.526,430,3.526,431,3.526,432,3.526,433,3.526,434,2.989,435,3.526,436,3.526,437,3.526,438,2.635,439,3.526,440,2.371,441,2.635,442,2.635]],["title/interfaces/Contact.html",[110,0.713,301,0.713]],["body/interfaces/Contact.html",[3,0.217,4,0.189,8,0.189,13,0.831,15,0.595,25,0.162,26,0.641,29,0.405,48,0.026,49,0.673,50,0.322,51,0.627,52,0.339,54,0.595,61,0.711,64,0.831,65,2.027,71,0.924,74,0.389,75,0.189,85,0.343,86,0.217,87,0.61,88,1.027,104,0.882,110,1.49,140,0.779,143,0.016,144,0.016,158,1.695,161,1.389,166,2.199,179,0.483,180,2.688,183,0.641,184,2.472,188,1.142,189,0.886,191,0.966,208,1.071,211,1.224,213,1.807,216,1.695,226,2.681,230,1.389,231,1.081,232,1.927,234,1.389,238,1.748,241,1.076,257,1.3,262,2.688,272,1.143,273,1.389,275,2.377,276,2.224,279,1.3,286,3.073,295,1.721,297,2.224,299,1.598,300,1.721,301,1.081,311,1.721,312,1.072,314,1.233,322,1.721,349,1.721,360,1.862,367,1.598,371,2.377,389,2.255,394,0.854,395,2.055,406,1.862,418,1.48,443,2.224,444,3.873,445,2.609,446,4.303,447,2.799,448,3.073,449,2.572,450,2.055,451,2.799,452,1.682,453,2.572,454,2.799,455,2.027,456,2.027,457,2.027,458,2.804,459,3.073,460,3.073,461,1.721,462,2.224,463,2.224,464,2.688,465,1.142,466,2.224,467,2.027,468,3.415,469,2.572,470,2.472,471,2.027,472,1.512,473,1.721,474,2.472,475,2.804,476,1.721,477,2.804,478,1.494,479,1.389,480,2.472,481,2.027,482,2.804,483,1.862,484,1.3,485,2.472,486,2.804,487,2.804,488,2.472,489,2.804,490,2.804,491,2.472,492,2.804,493,2.377,494,2.804,495,1.598,496,2.472,497,2.804,498,2.804,499,3.415,500,2.804,501,2.472,502,2.804,503,3.873,504,2.804,505,2.804,506,2.804,507,2.804,508,2.804,509,2.804,510,2.804,511,2.804,512,2.804,513,2.804,514,2.804,515,2.804,516,2.804,517,2.804,518,2.804,519,2.804,520,2.804,521,2.804,522,2.804,523,2.804,524,2.804,525,2.804,526,2.804,527,2.804,528,2.207,529,2.218,530,2.804,531,2.027,532,2.804,533,2.937,534,3.459,535,2.804,536,2.804,537,2.804,538,1.577,539,2.804,540,2.804,541,4.436,542,3.873,543,2.572,544,2.027,545,2.804,546,2.804,547,2.027,548,2.027,549,2.804,550,2.027,551,1.721,552,3.207,553,1.488,554,1.721,555,2.804,556,2.799,557,2.804,558,3.873,559,2.027,560,2.027,561,2.799,562,2.472,563,1.862,564,4.436,565,1.598,566,2.804,567,2.804,568,2.027,569,2.804,570,1.862,571,3.873,572,2.472,573,2.027,574,2.224,575,1.488,576,1.3,577,2.804,578,2.224,579,2.804,580,1.721,581,2.804,582,2.804,583,2.804,584,2.804,585,2.804,586,2.804,587,2.472,588,2.472,589,2.804,590,2.804,591,2.804,592,2.055,593,2.804,594,3.873,595,2.946,596,2.804,597,2.804,598,2.804,599,2.027,600,2.804,601,2.804,602,2.804,603,1.389,604,2.804,605,2.804,606,2.804,607,2.804,608,2.224,609,1.389,610,2.804,611,2.804,612,2.804,613,3.873,614,2.804,615,2.804,616,2.804,617,2.804,618,2.804,619,2.804,620,2.804,621,2.804]],["title/components/ContactFormComponent.html",[0,0.197,112,0.867]],["body/components/ContactFormComponent.html",[0,0.316,1,0.695,2,1.011,3,0.181,4,0.158,5,0.789,6,0.789,7,0.789,8,0.158,10,0.789,11,1.719,12,1.832,15,0.724,16,1.078,18,0.695,19,0.695,20,1.746,21,1.078,23,1.223,25,0.135,26,0.493,29,0.581,33,0.904,35,1.81,44,1.581,47,0.751,48,0.025,49,0.663,50,0.356,51,0.61,52,0.533,54,0.996,57,3.41,60,0.399,61,0.43,64,1.011,69,0.651,71,0.536,74,0.363,75,0.158,80,0.954,85,0.181,86,0.181,87,0.513,88,1.132,91,1.481,97,0.789,98,1.148,99,1.078,100,0.789,101,1.486,102,0.789,103,0.534,104,1.068,105,1.148,106,0.789,107,0.61,108,0.789,109,0.741,110,1.493,111,0.789,112,1.309,113,0.789,114,0.695,115,0.789,116,0.695,117,0.789,118,0.695,119,0.789,120,1.148,121,0.695,122,0.789,123,0.695,124,0.789,125,0.789,126,0.695,127,0.789,128,0.695,129,0.695,130,0.789,131,0.789,132,0.789,133,0.695,134,0.789,135,0.651,136,0.789,137,0.695,138,0.695,139,0.31,140,0.651,141,0.741,142,0.789,143,0.014,144,0.014,155,0.58,168,2.093,179,0.487,188,0.954,190,2.265,191,0.684,200,1.011,208,1.687,211,1.078,213,1.637,216,1.871,230,1.69,232,1.917,238,1.354,241,1.439,255,0.948,262,2.426,265,1.943,272,1.221,279,2.547,312,0.795,314,0.948,349,2.093,355,2.093,374,1.389,376,1.864,394,0.935,405,3.178,418,1.303,419,2.516,446,3.884,448,2.706,452,1.481,461,1.439,464,2.986,465,1.798,472,1.547,481,2.465,483,3.251,484,2.667,493,3.005,495,1.943,496,3.007,551,2.093,552,2.465,553,1.81,562,4.317,573,2.465,576,1.086,595,3.251,603,1.69,609,1.69,622,5.093,623,5.093,624,2.344,625,2.67,626,4.02,627,3.545,628,4.02,629,4.023,630,4.023,631,4.742,632,4.742,633,4.742,634,4.742,635,4.023,636,5.208,637,5.208,638,4.415,639,5.208,640,5.208,641,3.893,642,2.343,643,4.415,644,4.415,645,3.41,646,2.706,647,4.742,648,4.742,649,2.344,650,4.317,651,4.023,652,3.41,653,4.023,654,2.71,655,3.545,656,4.742,657,3.722,658,2.764,659,3.41,660,4.415,661,4.896,662,2.764,663,3.503,664,3.191,665,2.093,666,5.208,667,4.023,668,4.023,669,2.764,670,2.79,671,2.764,672,4.023,673,3.41,674,2.706,675,2.764,676,3.41,677,5.208,678,2.764,679,2.764,680,3.007,681,2.764,682,4.415,683,2.465,684,2.764,685,4.023,686,2.465,687,4.455,688,4.023,689,2.093,690,3.41,691,3.41,692,2.764,693,3.41,694,3.007,695,2.764,696,2.764,697,3.007,698,2.465,699,3.007,700,4.023,701,2.764,702,3.41,703,3.545,704,2.764,705,2.265,706,2.764,707,2.764,708,3.41,709,4.023,710,2.706,711,2.764,712,4.023,713,4.023,714,4.023,715,3.41,716,3.19,717,2.066,718,3.007,719,1.439,720,1.018,721,2.764,722,2.344,723,3.545,724,2.066,725,2.764,726,2.764,727,4.023,728,2.764,729,4.742,730,2.764,731,2.764,732,2.764,733,2.764,734,2.764,735,2.764,736,4.023,737,2.764,738,2.764,739,2.764,740,2.764,741,2.764,742,2.764,743,2.764,744,2.764,745,2.764,746,2.764,747,2.764,748,4.023,749,2.764,750,2.764,751,2.764,752,2.764,753,2.764,754,3.41,755,2.764,756,1.581,757,4.023,758,3.41,759,4.023,760,5.208,761,4.023,762,4.023,763,4.023,764,4.023,765,4.023,766,3.41,767,4.023]],["title/components/ContactListComponent.html",[0,0.197,114,0.867]],["body/components/ContactListComponent.html",[0,0.28,1,0.527,2,0.821,3,0.322,4,0.12,5,0.599,6,0.599,7,0.599,8,0.12,10,0.599,11,1.657,12,1.766,14,1.84,15,0.936,16,0.876,18,0.527,19,0.527,20,1.478,21,0.876,25,0.16,26,0.401,29,0.555,33,0.882,35,1.471,38,1.26,44,1.284,47,0.81,48,0.026,49,0.684,50,0.37,51,0.575,52,0.575,60,0.851,61,0.845,66,2.003,69,0.495,71,0.842,74,0.341,75,0.12,80,0.725,83,1.286,85,0.138,86,0.138,87,0.535,88,1.069,91,1.203,97,0.599,98,0.933,99,0.876,100,0.599,101,1.683,102,0.599,103,0.405,104,1.048,105,0.933,106,0.599,107,0.463,108,0.599,109,0.562,110,1.481,111,0.599,112,0.527,113,0.599,114,1.139,115,0.599,116,0.527,117,0.599,118,0.527,119,0.599,120,0.933,121,0.527,122,0.599,123,0.527,124,0.599,125,0.599,126,0.527,127,0.599,128,0.527,129,0.527,130,0.599,131,0.599,132,0.599,133,0.527,134,0.599,135,0.495,136,0.599,137,0.527,138,0.527,139,0.236,140,0.495,141,0.562,142,0.599,143,0.011,144,0.011,153,1.503,154,2.551,155,0.471,158,1.819,161,1.373,162,2.928,168,1.701,179,0.482,182,2.358,188,0.725,190,1.84,191,0.708,203,1.579,213,1.386,214,3,218,3.387,231,1.218,234,1.793,238,1.786,241,0.946,254,1.203,255,1.068,262,2.281,272,1.048,273,1.827,279,1.284,312,0.76,364,2.198,371,3.392,374,1.564,378,3.652,389,2.124,394,0.912,399,2.003,404,2.198,406,2.551,409,1.903,415,1.412,451,2.003,464,1.373,472,1.214,476,1.092,478,1.647,480,2.443,484,2.459,488,3,499,2.443,529,2.577,538,1.128,574,2.198,576,1.578,592,1.471,622,4.974,625,2.26,626,3.403,641,3.387,642,2.039,646,2.198,652,2.771,655,3,657,2.7,670,1.579,674,2.198,687,4.491,690,2.771,691,2.771,694,2.443,705,1.84,708,2.771,710,2.198,716,2.198,719,1.092,768,1.779,769,4.974,770,1.779,771,1.946,772,2.771,773,4.014,774,3.268,775,4.014,776,4.014,777,4.014,778,4.014,779,4.014,780,2.771,781,3.268,782,3.268,783,3.268,784,3.268,785,3.268,786,4.531,787,3.268,788,4.531,789,4.014,790,1.569,791,3.268,792,1.84,793,1.84,794,2.099,795,4.531,796,3.268,797,2.771,798,2.099,799,3.887,800,1.781,801,3.268,802,2.099,803,4.91,804,3.268,805,2.189,806,3.268,807,2.198,808,4.531,809,2.771,810,3.268,811,2.099,812,3.009,813,2.443,814,3.268,815,2.099,816,2.443,817,2.771,818,4.531,819,3.268,820,3.268,821,2.198,822,3.268,823,2.099,824,4.531,825,3.268,826,2.771,827,3.268,828,2.099,829,2.099,830,2.771,831,3.268,832,2.099,833,3.67,834,3.268,835,2.099,836,3.268,837,2.099,838,2.099,839,2.777,840,3.268,841,2.099,842,2.099,843,2.099,844,2.099,845,2.099,846,2.443,847,3.268,848,2.099,849,2.771,850,2.771,851,3.268,852,2.099,853,2.099,854,1.092,855,2.099,856,2.099,857,2.099,858,2.099,859,1.569,860,2.099,861,2.099,862,2.099,863,2.099,864,4.531,865,3.268,866,2.099,867,2.099,868,2.099,869,1.182,870,1.779,871,2.099,872,1.779,873,1.779,874,2.099,875,2.099,876,2.099,877,2.7,878,2.099,879,2.099,880,3.268,881,2.099,882,2.099,883,2.099,884,1.569,885,2.099,886,2.099,887,2.099,888,1.779,889,2.099,890,2.099,891,3.268,892,2.099,893,2.099,894,2.198,895,2.099,896,2.099,897,2.099,898,3.268,899,3.268,900,3.268,901,3.268,902,3.268,903,3.268,904,3.268,905,3.268,906,1.779,907,3.712,908,1.903,909,4.761,910,2.099,911,5,912,3.268,913,3.268,914,4.198,915,4.163,916,1.569,917,1.569,918,4.761,919,3.387,920,2.099,921,3.841,922,3.187,923,2.771,924,4.41,925,2.771,926,4.531,927,4.163,928,3.403,929,2.198,930,3,931,2.443,932,2.099,933,4.163,934,4.531,935,4.163,936,3.268,937,2.099,938,2.099,939,4.91,940,2.099,941,4.409,942,3.841,943,3.841,944,4.761,945,3.403,946,3.047,947,3.403,948,3.268,949,3.841,950,2.189,951,3.403,952,1.939,953,3.268,954,3.268,955,1.779,956,2.099,957,2.099,958,4.163,959,1.569,960,2.443,961,3.387,962,3.268,963,4.531,964,3.403,965,5.173,966,3.841,967,3.841,968,4.531,969,4.531,970,3.841,971,4.531,972,3.268,973,3.841,974,3.268,975,3.268,976,2.099,977,1.779,978,4.163,979,5.173,980,1.779,981,3.841,982,3.268,983,3.268,984,1.779,985,3.268,986,1.779,987,2.771,988,2.443,989,4.163,990,3.268,991,2.771,992,2.099,993,3.268,994,4.014,995,3.841,996,1.779,997,1.779,998,1.779,999,2.551,1000,1.286,1001,3.841,1002,2.771,1003,2.099,1004,2.771,1005,0.638,1006,1.779,1007,3.268,1008,2.771,1009,3.268,1010,3.268,1011,2.099,1012,1.779,1013,2.099,1014,2.099,1015,1.779,1016,2.099,1017,3.403,1018,1.286,1019,2.099,1020,4.531,1021,2.771,1022,1.779,1023,3.403,1024,2.771,1025,3.268,1026,3.268,1027,2.099,1028,2.099,1029,1.779,1030,2.099,1031,2.771,1032,2.771,1033,2.771,1034,2.099,1035,2.099,1036,1.779,1037,1.779,1038,2.099,1039,2.198,1040,2.099,1041,2.099,1042,2.099,1043,2.099]],["title/injectables/ContactManager.html",[183,0.423,1044,2.579]],["body/injectables/ContactManager.html",[3,0.226,4,0.196,8,0.196,11,1.179,13,0.864,15,0.845,25,0.293,26,0.575,29,0.575,33,0.918,47,0.931,48,0.026,49,0.661,50,0.382,51,0.661,52,0.634,60,0.677,61,0.893,71,0.898,74,0.351,75,0.196,85,0.226,86,0.226,87,0.557,88,1.063,103,0.906,110,1.498,143,0.016,144,0.016,155,0.677,161,1.971,179,0.525,183,0.575,189,0.921,191,0.915,200,1.509,201,1.351,211,1.73,213,1.844,231,0.969,237,2.582,254,1.727,255,1.543,257,1.844,273,1.963,312,0.786,366,1.547,368,3.894,370,1.547,371,3.225,373,3.729,374,1.62,375,2.442,376,1.844,377,2.111,378,3.859,379,4.951,380,2.642,389,2.481,392,1.859,394,0.955,395,2.789,402,2.986,406,3.007,409,2.41,418,1.52,419,2.267,420,3.859,434,2.915,438,2.57,440,2.313,484,2.436,529,2.648,538,1.62,588,3.507,719,1.789,790,2.57,799,4.633,826,4.864,884,3.992,1005,1.427,1044,4.289,1045,5.863,1046,5.341,1047,5.341,1048,3.978,1049,4.692,1050,3.978,1051,5.737,1052,5.737,1053,5.737,1054,4.692,1055,3.978,1056,4.692,1057,4.692,1058,5.737,1059,3.507,1060,4.692,1061,3.438,1062,4.692,1063,3.438,1064,4.692,1065,3.438,1066,4.864,1067,4.864,1068,4.864,1069,4.864,1070,3.978,1071,3.438,1072,3.438,1073,2.915,1074,4.692,1075,3.438,1076,4.692,1077,4.692,1078,3.438,1079,4.692,1080,3.438,1081,3.438,1082,2.915,1083,2.57,1084,5.341,1085,4.692,1086,3.438,1087,2.915,1088,2.915,1089,4.528,1090,6.005,1091,3.438,1092,3.438,1093,3.438,1094,3.438,1095,2.313,1096,3.438,1097,3.438,1098,3.438,1099,3.438]],["title/injectables/ContactService.html",[183,0.423,484,1.356]],["body/injectables/ContactService.html",[3,0.17,4,0.148,8,0.148,13,0.653,15,0.467,25,0.127,26,0.619,29,0.471,33,0.91,47,0.912,48,0.026,49,0.702,50,0.366,51,0.655,52,0.647,54,0.692,60,0.843,61,0.954,64,0.966,65,2.354,71,0.921,74,0.354,75,0.148,85,0.3,86,0.17,87,0.578,88,1.094,104,0.975,110,1.496,140,0.905,143,0.013,144,0.013,155,0.554,158,1.893,161,1.091,166,2.373,179,0.515,180,2.762,183,0.619,184,1.941,188,0.896,189,0.696,191,0.923,201,1.02,208,1.244,211,1.354,213,2.115,216,2.048,226,2.728,230,1.614,231,1.167,232,2.209,234,1.168,238,1.713,241,1.191,242,1.462,257,1.02,262,2.266,272,1.183,273,1.537,275,1.351,276,2.584,279,1.51,286,3.399,295,1.351,297,1.746,299,1.254,300,1.351,301,0.794,311,1.351,312,1.006,314,1.078,322,1.351,349,1.999,360,2.163,371,2.63,389,2.356,394,0.899,395,2.274,406,2.163,418,1.637,443,1.746,444,2.201,445,2.564,446,3.628,447,1.591,448,1.746,449,1.462,450,1.168,451,2.354,452,0.956,453,2.575,454,2.354,455,1.591,456,1.591,457,1.591,458,2.201,459,2.584,460,2.584,461,1.351,462,1.746,463,1.746,464,2.741,465,0.896,466,1.746,467,1.591,468,2.872,469,2.163,470,1.941,471,1.591,472,1.607,473,1.351,474,1.941,475,2.201,476,1.351,477,2.201,478,1.305,479,1.614,480,2.872,481,2.354,482,3.257,483,2.163,484,1.51,485,2.872,486,3.257,487,3.877,488,3.418,489,3.257,490,3.877,491,3.418,492,3.257,493,2.63,494,3.877,495,1.856,496,3.418,497,3.257,498,3.257,499,3.778,500,3.257,501,2.872,502,3.257,503,4.573,504,3.257,505,3.257,506,3.257,507,3.257,508,3.257,509,3.257,510,3.257,511,3.257,512,3.257,513,3.257,514,3.257,515,3.257,516,3.257,517,3.257,518,3.257,519,3.257,520,3.257,521,3.257,522,3.257,523,3.257,524,3.257,525,3.257,526,3.257,527,3.257,528,2.441,529,2.22,530,4.284,531,1.591,532,3.877,533,3.244,534,3.581,535,3.257,536,2.201,537,3.257,538,1.745,539,4.284,540,2.201,541,3.877,542,3.257,543,2.163,544,1.591,545,2.201,546,2.201,547,1.591,548,1.591,549,2.201,550,1.591,551,1.999,552,3.097,553,1.729,554,1.999,555,3.257,556,2.354,557,2.201,558,3.257,559,1.591,560,1.591,561,2.354,562,2.872,563,2.163,564,4.788,565,1.856,566,3.257,567,2.201,568,1.591,569,2.201,570,2.163,571,4.284,572,2.872,573,2.354,574,2.584,575,1.729,576,1.51,577,3.257,578,2.584,579,3.257,580,1.999,581,3.257,582,3.257,583,2.201,584,2.201,585,2.201,586,3.257,587,2.872,588,2.872,589,2.201,590,4.284,591,2.201,592,2.274,593,4.284,594,3.257,595,3.18,596,3.257,597,3.257,598,2.201,599,2.354,600,4.284,601,2.201,602,2.201,603,1.614,604,3.257,605,2.201,606,2.201,607,3.257,608,2.584,609,1.614,610,3.257,611,3.257,612,3.257,613,3.877,614,3.257,615,3.257,616,2.201,617,2.201,618,2.201,619,2.201,620,2.201,621,2.201,638,3.257,645,3.257,683,1.591,780,3.257,797,2.201,799,2.872,1048,3.257,1055,3.257,1100,3.842,1101,3.257,1102,3.842,1103,3.842,1104,3.842,1105,2.201,1106,2.596,1107,2.596,1108,2.596,1109,2.596,1110,2.596,1111,2.596,1112,2.596,1113,2.201,1114,1.941,1115,2.596,1116,2.596,1117,2.596,1118,2.596,1119,2.596,1120,2.596,1121,2.201,1122,2.596,1123,2.201,1124,2.596,1125,2.596,1126,2.596,1127,2.596,1128,2.596,1129,2.596,1130,2.596,1131,2.596,1132,2.596,1133,2.596,1134,2.596,1135,2.596,1136,2.596]],["title/components/ContactsComponent.html",[0,0.197,116,0.867]],["body/components/ContactsComponent.html",[0,0.362,1,0.748,2,1.066,3,0.195,4,0.17,5,0.849,6,0.849,7,0.849,8,0.17,10,0.849,11,1.733,12,1.847,14,2.388,15,0.97,16,1.136,18,0.748,19,0.748,20,1.819,21,1.136,23,1.289,25,0.145,26,0.52,29,0.365,33,0.9,35,1.908,38,1.223,41,3.595,44,1.667,47,0.821,48,0.026,49,0.624,50,0.356,51,0.583,52,0.583,54,0.764,60,0.821,61,0.887,63,3.301,64,1.566,69,0.701,71,0.759,74,0.409,75,0.17,80,1.027,85,0.195,86,0.195,87,0.528,91,2.395,97,0.849,98,1.21,99,1.136,100,0.849,101,1.538,102,0.849,103,0.574,104,0.574,105,1.21,106,0.849,107,0.657,108,0.849,109,1.443,110,1.465,111,0.849,112,1.354,113,0.849,114,1.354,115,0.849,116,1.354,117,0.849,118,0.748,119,0.849,120,1.21,121,0.748,122,0.849,123,0.748,124,0.849,125,0.849,126,0.748,127,0.849,128,0.748,129,0.748,130,0.849,131,0.849,132,0.849,133,0.748,134,0.849,135,0.701,136,0.849,137,0.748,138,0.748,139,0.334,140,0.701,141,0.797,142,0.849,143,0.015,144,0.015,155,0.612,168,2.803,179,0.472,180,2.56,188,1.027,200,1.593,211,1.586,231,0.876,235,3.028,241,0.999,265,2.049,267,2.424,272,1.04,273,1.289,374,1.86,389,1.561,392,1.745,394,0.975,395,1.908,404,2.852,449,1.675,452,1.819,464,2.701,478,1.538,484,2.395,491,3.694,529,1.667,552,2.599,553,2.424,587,3.17,592,2.424,599,3.028,609,1.782,623,2.224,642,2.424,655,3.17,659,3.595,663,4.19,664,3.49,665,2.207,686,2.599,689,2.207,719,1.548,720,1.095,769,2.224,790,2.224,833,3.17,907,3.431,922,3.817,924,3.623,929,2.852,950,2.387,952,2.602,999,3.62,1000,1.823,1005,1.289,1039,3.982,1137,2.522,1138,4.241,1139,4.241,1140,4.19,1141,4.19,1142,4.942,1143,4.942,1144,4.942,1145,5.387,1146,4.241,1147,5.387,1148,5.387,1149,3.595,1150,3.595,1151,3.595,1152,4.942,1153,4.241,1154,4.567,1155,5.387,1156,4.241,1157,4.241,1158,3.496,1159,4.656,1160,2.975,1161,2.388,1162,2.388,1163,4.241,1164,2.975,1165,2.388,1166,3.033,1167,3.94,1168,4.42,1169,4.241,1170,2.975,1171,4.567,1172,3.17,1173,6.093,1174,2.975,1175,2.975,1176,3.623,1177,2.852,1178,3.595,1179,4.567,1180,2.975,1181,3.595,1182,2.852,1183,3.595,1184,4.241,1185,4.241,1186,3.595,1187,2.975,1188,4.241,1189,3.17,1190,2.599,1191,3.595,1192,2.975,1193,3.17,1194,2.975,1195,2.522,1196,2.001,1197,2.975,1198,2.975,1199,4.241,1200,4.241,1201,3.17,1202,3.595,1203,4.241,1204,2.975,1205,3.628,1206,4.241,1207,2.975,1208,2.388,1209,2.975,1210,2.975,1211,2.975,1212,2.522,1213,2.975,1214,2.975,1215,1.675,1216,3.431,1217,1.675,1218,1.437,1219,1.675,1220,2.522,1221,4.241,1222,3.595,1223,3.081,1224,5.387,1225,2.522,1226,2.975,1227,4.241,1228,2.975,1229,2.975,1230,2.975,1231,2.975,1232,4.241,1233,2.975,1234,2.522,1235,2.975,1236,2.975,1237,2.522,1238,2.975,1239,2.975,1240,2.975,1241,3.595,1242,4.241,1243,1.548,1244,4.241,1245,2.001,1246,4.241]],["title/injectables/DragDropManager.html",[183,0.423,1247,2.579]],["body/injectables/DragDropManager.html",[3,0.227,4,0.197,8,0.197,13,0.868,25,0.169,29,0.423,33,0.861,38,0.714,47,0.916,48,0.025,49,0.65,50,0.363,51,0.65,52,0.65,54,0.622,71,0.801,74,0.351,75,0.197,85,0.227,86,0.227,87,0.576,88,1.099,91,2.441,99,1.261,107,1.039,139,0.808,143,0.016,144,0.016,149,3.99,155,0.679,164,2.256,165,1.554,168,2.449,179,0.498,183,0.577,189,0.925,191,0.868,201,1.358,203,2.274,208,2.01,234,1.05,241,0.814,242,2.65,272,1.161,312,1.13,314,0.814,370,1.554,374,2.076,376,1.85,377,2.118,394,0.985,445,2.364,452,1.733,472,1.54,473,2.991,528,2.274,563,3.386,576,2.259,578,2.323,580,2.786,609,2.415,670,1.669,710,2.323,720,1.272,756,2.259,771,1.119,800,1.85,869,1.945,907,2.65,908,1.451,917,3.518,919,4.002,922,3.281,961,3.518,988,3.518,1021,4.873,1095,3.166,1176,3.166,1177,3.166,1183,3.99,1245,2.323,1247,4.297,1248,5.557,1249,5.905,1250,6.554,1251,5.748,1252,3.99,1253,5.748,1254,4.706,1255,4.706,1256,4.706,1257,4.706,1258,4.706,1259,2.117,1260,2.143,1261,2.929,1262,3.454,1263,3.166,1264,4.706,1265,3.454,1266,5.353,1267,4.002,1268,2.449,1269,2.929,1270,3.99,1271,2.929,1272,3.454,1273,4.873,1274,4.706,1275,3.166,1276,4.706,1277,4.706,1278,3.99,1279,4.706,1280,4.706,1281,2.929,1282,4.706,1283,4.706,1284,3.99,1285,4.706,1286,6.206,1287,5.748,1288,4.873,1289,3.454,1290,4.706,1291,3.99,1292,4.706,1293,4.706,1294,5.748,1295,4.639,1296,3.454,1297,6.554,1298,5.748,1299,3.454,1300,3.454,1301,3.454,1302,2.323,1303,5.353,1304,3.518,1305,2.929,1306,3.454,1307,4.706,1308,3.454,1309,3.99,1310,3.99,1311,4.706,1312,4.706,1313,6.554,1314,2.929,1315,4.706,1316,4.706,1317,3.454,1318,1.669,1319,3.454,1320,3.454,1321,3.454,1322,2.929,1323,3.99,1324,3.454,1325,4.706,1326,3.454,1327,2.929,1328,3.454,1329,3.454,1330,1.669,1331,3.454,1332,1.945,1333,3.454,1334,1.945,1335,3.454,1336,4.706,1337,3.454,1338,3.454,1339,4.706,1340,4.706,1341,4.706,1342,3.454,1343,3.166,1344,3.454,1345,3.454,1346,4.706,1347,3.454,1348,3.454,1349,3.454,1350,3.454,1351,3.454,1352,2.929,1353,3.454,1354,3.454,1355,3.454,1356,3.454]],["title/interfaces/FirestoreTimestamp.html",[301,0.713,1357,2.32]],["body/interfaces/FirestoreTimestamp.html",[0,0.278,3,0.238,4,0.207,8,0.207,11,0.913,12,0.973,15,1.057,16,0.973,20,1.793,21,0.973,23,1.105,25,0.177,29,0.445,32,2.159,33,0.484,35,1.635,38,0.75,48,0.026,61,0.566,67,2.534,71,0.871,74,0.413,75,0.207,77,0.856,80,1.254,85,0.238,86,0.238,87,0.584,88,1.14,92,1.755,135,0.856,139,0.751,143,0.017,144,0.017,155,0.702,158,1.779,161,1.526,164,1.982,168,1.89,179,0.486,190,2.045,191,0.943,200,1.381,211,1.305,226,1.428,238,1.798,241,0.856,254,1.337,267,1.635,272,1.06,273,1.105,274,1.337,301,0.75,306,2.553,312,1.026,314,0.856,367,1.755,392,1.177,394,0.846,452,2.485,465,1.254,472,1.639,473,1.89,476,2.858,478,1.836,538,1.681,580,1.89,599,2.226,625,2.742,665,1.89,756,2.672,771,1.577,800,1.914,816,2.716,821,3.275,854,1.89,859,2.716,894,2.443,950,1.755,952,1.755,1005,1.105,1158,1.89,1166,2.045,1215,2.045,1216,3.093,1217,2.045,1218,1.755,1219,2.045,1223,2.534,1243,2.534,1260,1.896,1263,2.443,1318,1.755,1330,1.755,1332,2.045,1334,2.742,1357,4.237,1358,2.716,1359,4.975,1360,3.633,1361,2.443,1362,3.08,1363,3.08,1364,3.08,1365,2.443,1366,2.716,1367,2.443,1368,4.106,1369,3.08,1370,3.08,1371,3.08,1372,3.08,1373,3.093,1374,3.08,1375,2.716,1376,3.08,1377,3.08,1378,5.188,1379,3.08,1380,3.08,1381,3.08,1382,3.08,1383,3.08,1384,4.128,1385,3.08,1386,4.128,1387,4.128,1388,3.08,1389,4.975,1390,3.08,1391,3.08,1392,4.128,1393,3.08,1394,3.08,1395,4.128,1396,4.128,1397,4.128,1398,4.128,1399,3.08,1400,1.89,1401,3.08,1402,3.08,1403,3.08,1404,5.188,1405,3.08,1406,2.226,1407,3.08,1408,3.08,1409,3.08,1410,3.08,1411,3.08,1412,3.08,1413,3.08,1414,3.08,1415,3.08,1416,4.128,1417,3.08,1418,3.08,1419,3.08,1420,4.657,1421,3.08,1422,3.08,1423,2.443,1424,2.716,1425,3.08,1426,4.128,1427,3.08,1428,2.716,1429,3.08,1430,2.716,1431,4.128,1432,1.755,1433,3.08,1434,2.716,1435,2.716,1436,3.08,1437,3.08,1438,3.08,1439,3.08,1440,3.08,1441,3.08,1442,4.975,1443,3.08,1444,3.08,1445,3.08,1446,3.08,1447,3.08,1448,3.08,1449,3.64,1450,3.08,1451,4.128,1452,3.08,1453,3.08,1454,4.128,1455,3.08,1456,3.08,1457,4.128,1458,3.08,1459,3.08,1460,3.08,1461,3.08,1462,4.128,1463,3.08,1464,1.89,1465,3.08,1466,3.275,1467,2.045,1468,3.08,1469,1.89,1470,2.226,1471,2.226,1472,3.08,1473,3.08,1474,3.08,1475,3.08]],["title/components/FooterComponent.html",[0,0.197,118,0.867]],["body/components/FooterComponent.html",[0,0.36,1,1.229,2,1.479,3,0.321,4,0.279,5,1.396,6,1.396,7,1.396,8,0.279,10,1.396,11,1.812,12,1.931,16,1.576,18,1.229,19,1.229,21,1.576,23,1.789,48,0.025,49,0.602,69,1.152,74,0.386,75,0.279,77,1.152,85,0.321,86,0.321,97,1.396,98,1.679,99,1.576,100,1.396,101,1.869,102,1.396,103,0.944,104,0.944,105,1.679,106,1.396,107,1.079,108,1.396,109,1.31,110,1.303,111,1.396,112,1.229,113,1.396,114,1.229,115,1.396,116,1.229,117,1.396,118,1.646,119,1.396,120,1.679,121,1.229,122,1.396,123,1.229,124,1.801,125,1.396,126,1.229,127,1.396,128,1.229,129,1.229,130,1.801,131,1.396,132,1.396,133,1.229,134,1.396,135,1.152,136,1.396,137,1.229,138,1.229,139,0.549,140,1.152,141,1.31,142,1.396,143,0.021,144,0.021,1476,2.996,1477,4.145,1478,5.883,1479,2.839,1480,5.883,1481,5.883,1482,3.605,1483,3.605]],["title/components/HeaderComponent.html",[0,0.197,19,0.867]],["body/components/HeaderComponent.html",[0,0.331,1,0.885,2,1.198,3,0.231,4,0.201,5,1.005,6,1.361,7,1.005,8,0.201,10,1.005,11,1.763,12,1.88,14,2.685,15,1.043,16,1.277,18,0.885,19,1.456,20,1.991,21,1.277,23,1.45,25,0.172,26,0.584,29,0.432,33,0.901,38,0.985,42,3.637,44,1.384,47,0.9,48,0.025,49,0.692,50,0.346,51,0.639,52,0.639,54,0.973,60,0.836,61,0.742,64,1.456,69,0.83,71,0.772,74,0.397,75,0.201,77,0.83,80,1.216,85,0.231,86,0.231,91,2.57,97,1.005,98,1.361,99,1.448,100,1.005,101,1.654,102,1.005,103,0.68,104,0.68,105,1.361,106,1.005,107,0.777,108,1.005,109,0.943,110,1.117,111,1.005,112,0.885,113,1.005,114,0.885,115,1.005,116,0.885,117,1.005,118,0.885,119,1.005,120,1.361,121,0.885,122,1.005,123,0.885,124,1.543,125,1.005,126,0.885,127,1.005,128,0.885,129,0.885,130,1.543,131,1.005,132,1.005,133,0.885,134,1.005,135,0.83,136,1.005,137,0.885,138,0.885,139,0.395,140,0.83,141,0.943,142,1.005,143,0.017,144,0.017,153,1.628,154,3.262,155,0.688,157,2.632,158,1.877,163,2.814,166,1.479,179,0.503,182,2.481,191,0.688,200,1.522,205,4.041,208,1.545,216,1.545,221,3.897,231,1.289,232,1.296,242,2.685,254,1.756,255,1.124,257,1.874,262,2.434,267,2.607,272,0.92,273,1.762,312,0.59,314,0.83,372,2.481,380,2.685,394,0.78,395,1.584,402,1.833,405,2.814,418,1.141,449,2.685,478,1.361,528,1.701,533,2.481,689,1.833,854,1.833,870,2.985,872,2.985,873,2.985,907,3.262,929,2.369,950,1.701,952,2.304,1005,1.071,1039,3.637,1154,4.912,1166,3.409,1167,2.922,1190,2.922,1193,4.331,1202,4.043,1215,1.983,1216,3.262,1217,3.044,1218,1.701,1219,1.983,1220,2.985,1222,4.043,1223,2.814,1225,2.985,1245,2.369,1288,4.043,1375,4.331,1479,2.433,1482,2.922,1483,2.922,1484,2.985,1485,4.043,1486,4.043,1487,5.407,1488,4.768,1489,5.794,1490,4.043,1491,4.768,1492,4.768,1493,4.043,1494,4.043,1495,4.768,1496,4.768,1497,2.158,1498,2.158,1499,4.043,1500,2.985,1501,4.584,1502,4.768,1503,3.564,1504,5.133,1505,4.331,1506,4.919,1507,3.897,1508,4.768,1509,4.043,1510,3.897,1511,3.521,1512,4.768,1513,3.564,1514,4.768,1515,3.521,1516,4.043,1517,3.521,1518,3.521,1519,2.985,1520,3.521,1521,2.158,1522,2.632,1523,2.985,1524,4.584,1525,2.985,1526,3.521,1527,3.521,1528,3.521,1529,3.521,1530,3.521,1531,2.632,1532,2.985,1533,3.521,1534,2.632,1535,3.521,1536,2.922,1537,4.768,1538,4.768,1539,3.521,1540,4.043,1541,3.521,1542,3.521,1543,2.985,1544,3.521,1545,3.521,1546,4.768,1547,3.521,1548,3.521,1549,3.521,1550,3.521,1551,2.985,1552,3.564,1553,2.922,1554,4.043,1555,4.768,1556,3.564,1557,3.207]],["title/components/HelpComponent.html",[0,0.197,121,0.867]],["body/components/HelpComponent.html",[0,0.297,1,0.821,2,1.139,3,0.214,4,0.187,5,0.933,6,0.933,7,0.933,8,0.187,10,0.933,11,1.751,12,1.866,16,1.214,18,0.821,19,0.821,21,1.214,23,1.377,25,0.16,29,0.4,30,2.198,31,3.175,33,0.603,38,0.936,39,2.551,40,3.84,47,0.471,48,0.025,49,0.604,50,0.187,51,0.334,52,0.532,53,3.497,54,0.816,56,2.551,60,0.81,67,2.357,69,0.77,72,3.142,74,0.341,75,0.187,77,0.77,81,2.198,82,2.198,85,0.214,86,0.214,87,0.303,97,0.933,98,1.293,99,1.214,100,0.933,101,1.603,102,0.933,103,0.631,104,1.004,105,1.293,106,0.933,107,0.721,108,0.933,109,0.875,110,1.368,111,0.933,112,0.821,113,0.933,114,0.821,115,0.933,116,0.821,117,0.933,118,0.821,119,0.933,120,1.293,121,1.534,122,0.933,123,0.821,124,0.933,125,0.933,126,0.821,127,0.933,128,0.821,129,0.821,130,0.933,131,0.933,132,0.933,133,0.821,134,0.933,135,0.77,136,0.933,137,0.821,138,0.821,139,0.727,140,1.225,141,0.875,142,0.933,143,0.016,144,0.016,153,1.067,155,0.653,166,1.903,171,2.357,179,0.243,182,2.357,206,3.047,208,1.467,209,3.777,211,1.214,228,2.357,272,1.178,280,4.197,301,0.936,306,1.668,314,1.067,321,2.551,345,3.319,355,2.357,380,3.161,394,0.653,450,2.038,466,3.047,501,3.386,529,2.577,553,2.526,603,1.903,608,3.777,609,1.903,654,2.357,670,3.081,683,3.441,698,2.776,705,2.551,720,1.203,756,2.577,758,3.84,766,3.84,771,2.066,792,2.551,805,2.188,929,3.777,1005,1.377,1023,3.84,1095,3.047,1165,3.161,1166,2.551,1182,3.047,1196,3.047,1269,4.76,1275,3.047,1291,3.84,1295,3.386,1304,3.386,1330,2.712,1332,2.551,1334,3.161,1373,2.551,1406,2.776,1423,3.047,1432,2.188,1449,3.386,1466,3.047,1479,2.34,1506,3.386,1510,3.777,1552,4.768,1553,3.909,1554,4.76,1556,4.901,1557,4.104,1558,2.77,1559,4.53,1560,4.53,1561,4.197,1562,3.267,1563,3.386,1564,3.84,1565,3.267,1566,2.188,1567,2.551,1568,2.442,1569,4.53,1570,4.53,1571,5.615,1572,2.77,1573,3.386,1574,3.047,1575,4.53,1576,5.615,1577,4.53,1578,4.53,1579,3.84,1580,3.84,1581,3.386,1582,3.386,1583,3.84,1584,3.84,1585,3.84,1586,4.53,1587,3.84,1588,3.84,1589,4.53,1590,4.53,1591,4.53,1592,3.84,1593,4.53,1594,5.615,1595,3.84,1596,4.53,1597,4.53,1598,4.53,1599,4.53,1600,4.53,1601,3.84,1602,5.615,1603,4.53,1604,3.84,1605,3.84,1606,5.615,1607,3.84,1608,3.84,1609,3.386,1610,3.386,1611,3.84,1612,4.197,1613,4.53,1614,4.53,1615,3.386,1616,3.84,1617,3.84,1618,3.84,1619,4.53,1620,3.84,1621,3.84,1622,4.53,1623,4.641,1624,3.84,1625,4.53,1626,4.53,1627,3.267,1628,3.047,1629,4.53,1630,3.386,1631,4.53,1632,3.84,1633,5.615,1634,3.84,1635,3.386,1636,4.53,1637,3.84,1638,2.922,1639,6.681,1640,3.267,1641,4.53,1642,3.84,1643,3.84,1644,3.84,1645,6.378,1646,3.047,1647,4.53,1648,3.386,1649,3.386,1650,4.53,1651,4.53,1652,4.53,1653,4.76,1654,4.53,1655,4.53,1656,3.386,1657,3.84,1658,4.53,1659,4.53,1660,4.53,1661,3.739,1662,4.53,1663,4.53,1664,3.84,1665,4.53,1666,4.53,1667,3.84,1668,4.53,1669,4.53,1670,3.84,1671,3.84,1672,4.53,1673,4.53,1674,2.442,1675,3.386,1676,3.267,1677,4.53,1678,2.77,1679,3.267,1680,3.267,1681,2.442,1682,3.267]],["title/components/LegalNoticeComponent.html",[0,0.197,123,0.867]],["body/components/LegalNoticeComponent.html",[0,0.301,1,0.843,2,1.159,3,0.22,4,0.192,5,0.957,6,0.957,7,0.957,8,0.192,10,0.957,11,1.755,12,1.871,16,1.236,18,0.843,19,0.843,21,1.236,23,1.402,25,0.164,29,0.411,30,2.256,31,3.201,33,0.614,39,2.597,47,0.484,48,0.025,49,0.54,50,0.192,51,0.343,52,0.343,53,3.546,54,0.83,56,2.597,64,1.159,69,0.79,72,3.134,74,0.346,75,0.192,77,0.79,81,2.256,82,2.256,85,0.22,86,0.22,87,0.311,91,1.698,97,0.957,98,1.316,99,1.236,100,0.957,101,1.621,102,0.957,103,0.647,104,0.647,105,1.316,106,0.957,107,0.74,108,0.957,109,0.898,110,1.089,111,0.957,112,0.843,113,0.957,114,0.843,115,0.957,116,0.843,117,0.957,118,0.843,119,0.957,120,1.316,121,0.843,122,0.957,123,1.546,124,1.929,125,0.957,126,0.843,127,0.957,128,0.843,129,0.843,130,0.957,131,0.957,132,0.957,133,0.843,134,0.957,135,0.79,136,0.957,137,0.843,138,0.843,139,0.377,140,0.79,141,0.898,142,0.957,143,0.016,144,0.016,155,0.665,166,2.385,179,0.249,228,2.4,241,1.087,267,2.555,306,1.698,321,2.597,345,3.492,363,3.448,394,0.665,563,2.597,575,2.888,608,3.102,670,2.743,676,4.813,698,2.826,699,3.448,705,2.597,720,1.235,999,2.597,1165,3.197,1267,3.448,1400,3.34,1432,2.228,1479,2.372,1483,3.933,1498,2.826,1553,2.826,1561,4.244,1563,3.448,1564,3.91,1566,2.228,1567,2.597,1568,2.507,1579,5.442,1580,3.91,1581,3.448,1582,3.448,1583,3.91,1584,5.588,1585,5.588,1605,3.91,1607,4.813,1608,3.91,1609,3.448,1610,3.448,1615,3.448,1616,3.91,1617,3.91,1618,3.91,1620,3.91,1621,3.91,1635,3.448,1653,3.91,1674,2.507,1675,3.448,1681,2.507,1683,4.469,1684,4.469,1685,2.843,1686,4.612,1687,4.612,1688,3.354,1689,3.354,1690,4.612,1691,4.612,1692,4.612,1693,4.612,1694,4.612,1695,3.91,1696,4.612,1697,4.612,1698,4.612,1699,4.612,1700,4.612,1701,4.612,1702,4.612,1703,4.612,1704,4.612,1705,3.91,1706,5.215,1707,3.91,1708,6.419,1709,4.612,1710,4.813,1711,3.448,1712,4.813,1713,3.91,1714,4.612,1715,4.612,1716,4.612,1717,4.612,1718,6.419,1719,4.612,1720,4.612,1721,4.612,1722,4.612,1723,6.151,1724,5.677,1725,3.354,1726,4.244,1727,4.612,1728,6.151,1729,5.677,1730,4.612,1731,4.612,1732,4.612,1733,4.612,1734,4.612,1735,5.677,1736,5.677,1737,6.151,1738,4.612,1739,3.91,1740,3.91,1741,3.448,1742,4.612,1743,4.612,1744,4.612,1745,4.612,1746,3.91,1747,3.91,1748,4.612,1749,4.612,1750,4.612,1751,4.612,1752,4.612,1753,4.612,1754,4.612,1755,4.612,1756,3.91,1757,4.612,1758,4.612,1759,3.91,1760,5.677,1761,4.612,1762,5.677,1763,3.102,1764,4.612,1765,4.612,1766,4.612,1767,5.677,1768,5.677,1769,4.612,1770,4.612,1771,4.612,1772,4.612,1773,4.612,1774,4.612,1775,4.612,1776,4.612,1777,4.612,1778,3.91,1779,4.612,1780,4.612,1781,6.151,1782,5.677,1783,4.612,1784,4.612,1785,4.612,1786,4.612,1787,4.612,1788,4.612,1789,4.612,1790,5.677,1791,3.91,1792,4.612,1793,4.612,1794,4.612,1795,4.612,1796,4.612,1797,3.91,1798,3.91,1799,4.612,1800,4.612,1801,4.612,1802,4.612,1803,3.91,1804,4.612,1805,4.612,1806,4.612,1807,4.612,1808,4.612,1809,4.612,1810,3.91,1811,4.612,1812,4.612,1813,3.91,1814,3.91,1815,3.91]],["title/components/LoginComponent.html",[0,0.197,126,0.867]],["body/components/LoginComponent.html",[0,0.309,1,0.658,2,0.971,3,0.172,4,0.15,5,0.747,6,0.747,7,0.747,8,0.15,10,0.747,11,1.708,12,1.82,14,2.176,15,0.975,16,1.035,18,0.658,19,0.658,20,1.692,21,1.035,23,1.175,25,0.128,26,0.474,29,0.474,32,2.455,33,0.897,38,0.798,44,2.226,45,1.624,47,0.663,48,0.026,49,0.6,50,0.357,51,0.47,52,0.47,54,0.914,60,0.817,61,0.882,64,1.512,69,1.607,71,0.863,72,1.739,74,0.395,75,0.15,77,0.617,80,0.904,85,0.172,86,0.172,87,0.525,88,1.139,97,0.747,98,1.103,99,1.035,100,0.747,101,1.448,102,0.747,103,0.505,104,0.505,105,1.103,106,0.747,107,0.578,108,0.747,109,0.701,110,0.949,111,0.747,112,0.658,113,0.747,114,0.658,115,0.747,116,0.658,117,0.747,118,1.275,119,0.747,120,1.103,121,0.658,122,0.747,123,0.658,124,0.747,125,0.747,126,1.424,127,0.747,128,1.275,129,0.658,130,0.747,131,0.747,132,0.747,133,0.658,134,0.747,135,0.617,136,0.747,137,0.658,138,0.658,139,0.294,140,0.617,141,0.701,142,0.747,143,0.013,144,0.013,153,1.417,155,0.558,158,2.023,162,2.176,163,2.64,166,1.624,171,2.64,174,2.6,176,2.369,179,0.486,191,0.817,200,1.57,203,1.867,206,3.64,211,1.57,216,1.835,228,2.011,231,0.798,232,1.868,233,3.941,234,1.949,235,4.087,252,2.889,254,1.423,255,1.275,259,4.201,262,2.462,267,1.178,274,1.423,275,1.362,281,2.6,312,0.851,314,0.911,344,2.6,355,1.362,359,2.369,360,2.176,364,2.6,374,1.752,392,1.252,394,0.956,409,1.624,419,2.451,461,1.362,464,2.785,465,1.752,469,2.857,471,3.109,472,1.035,478,1.103,481,3.109,570,2.176,573,2.369,592,2.283,627,3.435,641,3.793,642,2.283,650,4.234,654,2.011,665,2.011,670,2.451,686,2.369,689,2.011,697,2.889,703,3.435,705,2.587,717,3.435,723,2.889,724,1.957,792,2.587,793,2.176,800,1.519,805,1.867,807,2.6,812,3.928,813,2.889,854,1.362,908,1.1,950,1.265,952,1.265,960,2.889,1005,0.796,1158,3.4,1161,2.857,1162,2.857,1172,4.234,1193,1.957,1195,3.277,1208,2.176,1215,1.474,1216,2.587,1217,1.474,1218,1.265,1219,1.474,1223,2.011,1243,1.362,1330,1.867,1361,2.6,1365,1.761,1366,1.957,1367,1.761,1368,4.38,1373,3.189,1470,1.604,1476,4.147,1479,2.067,1497,2.369,1503,2.889,1513,3.793,1516,4.302,1519,3.277,1521,3.109,1522,2.889,1532,3.277,1536,3.109,1557,3.81,1566,2.736,1763,2.6,1816,2.219,1817,3.865,1818,3.865,1819,4.589,1820,4.967,1821,3.895,1822,4.595,1823,3.895,1824,4.595,1825,3.895,1826,5.074,1827,3.277,1828,4.595,1829,4.302,1830,5.074,1831,5.074,1832,5.074,1833,5.074,1834,4.302,1835,2.618,1836,3.865,1837,4.595,1838,2.618,1839,3.81,1840,4.802,1841,3.865,1842,3.277,1843,2.618,1844,3.277,1845,4.589,1846,3.865,1847,2.618,1848,5.412,1849,2.618,1850,5.206,1851,3.277,1852,4.234,1853,2.618,1854,5.074,1855,4.496,1856,3.277,1857,2.618,1858,2.618,1859,3.865,1860,2.618,1861,3.865,1862,2.889,1863,2.618,1864,2.618,1865,3.865,1866,3.865,1867,2.618,1868,3.865,1869,2.618,1870,2.618,1871,3.865,1872,2.618,1873,3.277,1874,2.618,1875,2.618,1876,2.618,1877,2.618,1878,2.219,1879,1.957,1880,2.618,1881,2.618,1882,2.618,1883,2.219,1884,2.618,1885,2.618,1886,2.219,1887,2.618,1888,2.618,1889,2.618,1890,2.618,1891,2.618,1892,2.618,1893,2.618,1894,2.618,1895,3.277,1896,2.618,1897,2.618,1898,2.618,1899,2.618,1900,3.277,1901,2.618,1902,2.618,1903,3.865,1904,2.618,1905,3.895,1906,3.277,1907,2.219,1908,2.219,1909,2.219,1910,2.618,1911,2.219,1912,2.219,1913,2.618,1914,2.618,1915,1.957,1916,2.618,1917,2.219,1918,2.219,1919,2.219,1920,2.219,1921,2.219,1922,2.889,1923,2.219,1924,2.219]],["title/components/LoginHeaderComponent.html",[0,0.197,128,0.867]],["body/components/LoginHeaderComponent.html",[0,0.362,1,1.02,2,1.317,3,0.266,4,0.232,5,1.159,6,1.159,7,1.159,8,0.232,10,1.159,11,1.786,12,1.904,15,0.731,16,1.403,18,1.02,19,1.02,21,1.403,23,1.593,25,0.198,26,0.642,33,0.816,38,1.266,42,3.523,44,2.059,48,0.025,49,0.536,50,0.299,60,0.756,61,0.816,64,1.317,66,3.21,69,1.558,72,2.357,74,0.381,75,0.232,77,0.957,85,0.266,86,0.266,97,1.159,98,1.495,99,1.403,100,1.159,101,1.749,102,1.159,103,0.784,104,0.784,105,1.495,106,1.159,107,0.896,108,1.159,109,1.088,110,1.198,111,1.159,112,1.02,113,1.159,114,1.02,115,1.159,116,1.02,117,1.159,118,1.02,119,1.159,120,1.495,121,1.02,122,1.159,123,1.02,124,1.159,125,1.159,126,1.02,127,1.159,128,1.54,129,1.02,130,1.159,131,1.159,132,1.159,133,1.02,134,1.159,135,0.957,136,1.159,137,1.02,138,1.02,139,0.456,140,0.957,141,1.088,142,1.159,143,0.018,144,0.018,153,1.234,155,0.756,179,0.39,200,1.317,211,1.813,231,1.082,255,1.234,267,1.827,274,1.929,344,3.523,394,0.884,465,1.808,478,1.656,592,2.357,625,2.286,642,2.757,686,3.21,689,2.726,908,1.705,950,1.961,952,1.961,1005,1.764,1158,3.485,1161,2.949,1162,2.949,1205,3.21,1215,2.286,1216,3.266,1217,2.286,1218,1.961,1219,2.286,1223,3.381,1243,2.113,1365,2.73,1367,2.73,1373,3.658,1424,3.916,1476,3.888,1479,2.61,1485,4.441,1486,4.441,1513,3.916,1521,3.21,1536,3.21,1821,4.917,1823,4.917,1829,5.196,1839,3.523,1840,4.441,1855,4.581,1873,4.441,1879,4.742,1883,3.442,1886,3.442,1895,4.441,1922,3.916,1925,5.378,1926,3.442,1927,4.059,1928,5.238,1929,5.238,1930,5.238,1931,4.441,1932,5.238,1933,4.059,1934,2.949,1935,4.059,1936,4.441,1937,5.238,1938,5.238,1939,5.238,1940,5.603,1941,4.059,1942,4.059,1943,4.059,1944,4.059,1945,4.059,1946,4.059]],["title/injectables/NavigationHistoryService.html",[31,1.795,183,0.423]],["body/injectables/NavigationHistoryService.html",[3,0.272,4,0.237,8,0.237,13,1.473,25,0.203,26,0.651,29,0.509,31,2.765,32,2.71,33,0.851,35,2.391,36,4.619,38,1.35,45,2.877,47,0.599,48,0.025,49,0.425,50,0.303,51,0.425,52,0.544,54,0.957,56,3.826,60,0.599,61,0.646,71,0.87,73,3.256,74,0.385,75,0.237,76,4.968,77,0.978,83,2.543,84,3.518,85,0.272,86,0.272,87,0.385,88,0.982,89,3.518,91,1.528,92,2.005,93,3.518,143,0.019,144,0.019,155,0.766,165,2.94,166,2.232,176,3.256,179,0.494,183,0.651,189,1.112,191,0.845,201,1.631,213,2.346,237,2.391,238,1.823,274,1.956,302,2.765,312,0.696,394,0.766,399,3.787,538,2.133,575,2.78,683,4.004,694,3.971,720,1.528,1005,1.262,1018,3.256,1165,3.479,1196,4.57,1540,4.504,1566,2.985,1567,3.788,1595,4.504,1630,3.102,1637,4.504,1664,3.518,1947,5.539,1948,3.518,1949,4.504,1950,5.313,1951,5.703,1952,5.806,1953,6.727,1954,5.313,1955,6.894,1956,6.179,1957,6.179,1958,6.179,1959,3.518,1960,5.313,1961,5.313,1962,5.313,1963,5.861,1964,5.313,1965,5.313,1966,4.15,1967,5.313,1968,5.313,1969,4.15,1970,4.15,1971,5.313,1972,4.504,1973,5.313,1974,4.15,1975,5.313,1976,4.15,1977,4.15,1978,4.15,1979,4.15,1980,5.313,1981,4.15,1982,4.15,1983,3.518]],["title/injectables/OverlayManager.html",[183,0.423,1984,2.579]],["body/injectables/OverlayManager.html",[3,0.225,4,0.196,8,0.196,13,0.861,15,0.617,25,0.167,26,0.573,29,0.573,32,2.433,33,0.932,38,1.183,39,2.634,47,0.914,48,0.025,49,0.649,50,0.385,51,0.67,52,0.649,60,0.893,61,0.934,71,0.897,74,0.376,75,0.196,77,0.807,85,0.225,86,0.225,87,0.494,88,1.17,91,2.279,107,1.033,139,0.786,140,1.35,143,0.016,144,0.016,155,0.675,164,2.005,165,1.541,166,1.966,176,2.099,177,2.903,179,0.507,183,0.573,189,0.917,191,0.893,200,1.621,201,1.346,203,2.26,211,1.773,231,0.966,237,3.03,241,0.807,255,1.559,257,1.839,273,1.041,281,2.303,312,0.574,370,1.541,374,1.84,375,2.435,376,1.839,377,2.105,389,1.962,392,1.516,394,0.955,395,2.902,405,1.782,418,1.109,419,2.26,427,2.903,440,2.303,441,3.497,442,2.56,452,1.962,464,2.239,472,0.917,479,1.966,483,3.001,485,2.56,495,1.654,553,1.541,576,1.839,592,1.541,595,2.634,609,1.966,663,4.61,664,2.867,665,1.782,674,2.303,907,3.568,922,3.51,924,4.033,999,3.485,1000,2.099,1059,2.56,1140,4.518,1141,4.518,1149,3.967,1150,3.967,1151,3.967,1158,3.297,1159,4.282,1168,2.303,1176,3.853,1177,3.147,1178,2.903,1179,4.856,1181,4.518,1186,2.903,1189,3.984,1190,2.099,1191,3.967,1205,2.099,1218,1.654,1237,3.967,1241,3.967,1245,2.303,1260,2.188,1270,2.903,1273,2.903,1275,3.147,1278,3.967,1318,1.654,1507,3.147,1536,2.099,1566,2.26,1638,2.435,1959,2.903,1984,4.282,1985,5.946,1986,4.679,1987,5.728,1988,5.329,1989,5.728,1990,3.967,1991,5.329,1992,4.282,1993,5.329,1994,5.329,1995,4.679,1996,5.728,1997,5.728,1998,5.728,1999,5.728,2000,5.728,2001,5.728,2002,4.679,2003,4.679,2004,5.329,2005,5.329,2006,3.425,2007,3.425,2008,2.903,2009,2.56,2010,3.425,2011,3.425,2012,3.425,2013,3.425,2014,3.425,2015,5.728,2016,3.425,2017,3.425,2018,3.425,2019,3.425,2020,3.425,2021,4.679,2022,4.482,2023,4.679,2024,3.967,2025,4.679,2026,3.425,2027,3.425,2028,3.425,2029,4.679,2030,3.425,2031,3.425,2032,3.425,2033,3.425,2034,3.425,2035,2.903,2036,2.56,2037,2.903,2038,3.425,2039,3.425,2040,3.425,2041,2.903,2042,3.425]],["title/injectables/PriorityManager.html",[183,0.423,2043,2.579]],["body/injectables/PriorityManager.html",[3,0.309,4,0.269,8,0.269,13,1.182,25,0.23,26,0.704,29,0.704,33,0.883,47,0.895,48,0.025,49,0.635,50,0.379,51,0.635,52,0.635,60,0.679,61,0.733,71,0.883,74,0.377,75,0.269,85,0.309,86,0.309,87,0.533,103,1.109,139,0.757,143,0.02,144,0.02,155,0.829,179,0.428,183,0.704,189,1.26,201,1.849,213,2.328,366,2.792,368,3.797,370,2.117,373,3.909,374,1.984,375,2.991,376,2.259,377,2.586,380,3.236,389,2.116,392,2.094,394,0.895,472,1.54,1083,3.517,1261,4.872,2036,3.517,2043,4.831,2044,5.717,2045,4.334,2046,5.747,2047,6.205,2048,5.747,2049,5.747,2050,4.705,2051,5.747,2052,4.705,2053,3.866,2054,5.747,2055,3.866,2056,4.062,2057,3.522,2058,5.747,2059,4.705,2060,5.747,2061,5.747,2062,5.747,2063,3.989,2064,4.705]],["title/components/PrivacyPolicyComponent.html",[0,0.197,129,0.867]],["body/components/PrivacyPolicyComponent.html",[0,0.234,1,0.544,2,0.841,3,0.269,4,0.124,5,0.618,6,0.618,7,0.618,8,0.124,10,1.168,11,1.665,12,1.804,16,0.897,18,0.544,19,0.544,21,0.897,23,1.018,25,0.106,29,0.265,30,1.456,31,2.741,33,0.614,36,3.937,39,2.594,45,1.407,46,3.543,47,0.312,48,0.024,49,0.51,50,0.314,51,0.222,52,0.222,53,2.753,54,1.257,55,2.252,56,2.594,59,2.965,63,2.052,64,0.841,69,0.965,72,2.677,73,3.228,74,0.269,75,0.124,77,0.51,81,1.456,82,1.456,85,0.142,86,0.142,87,0.201,97,0.618,98,0.956,99,0.897,100,0.618,101,1.315,102,0.618,103,0.418,104,0.418,105,0.956,106,0.618,107,0.478,108,0.618,109,0.58,110,1.314,111,0.618,112,0.544,113,0.618,114,0.544,115,0.618,116,0.544,117,0.618,118,0.544,119,0.618,120,0.956,121,0.544,122,0.618,123,0.544,124,1.729,125,0.618,126,0.544,127,0.618,128,0.544,129,1.324,130,1.935,131,0.618,132,0.618,133,0.544,134,0.618,135,0.51,136,0.618,137,0.544,138,0.544,139,0.559,140,1.372,141,0.58,142,0.618,143,0.012,144,0.012,150,3.543,151,2.838,152,2.838,153,1.086,155,0.76,163,2.397,166,1.935,171,1.742,173,3.477,176,2.052,179,0.161,187,4.465,204,2.252,208,1.085,209,4.001,210,3.444,213,1.156,226,1.811,228,1.742,241,1.68,251,2.252,262,2.583,265,2.225,275,2.952,302,2.397,306,1.696,321,2.965,345,3.339,353,2.503,355,3.199,359,2.052,362,3.444,375,2.741,376,1.316,394,0.483,445,1.316,446,3.099,447,3.228,449,2.594,452,1.233,453,2.594,467,2.823,469,1.885,479,1.407,529,1.316,554,1.742,563,2.594,565,2.225,575,1.506,580,1.742,592,1.506,603,1.407,665,2.952,670,2.97,689,1.742,698,2.052,699,2.503,710,3.816,720,0.797,756,1.811,792,2.594,793,3.194,805,1.617,833,2.503,839,2.052,908,1.407,930,2.503,946,2.252,959,2.503,999,1.885,1005,1.018,1018,2.052,1165,2.594,1166,2.594,1177,3.099,1190,2.052,1196,2.252,1205,2.052,1275,2.252,1295,3.444,1309,3.905,1400,3.199,1406,2.823,1423,2.252,1430,2.503,1432,3.264,1466,2.252,1479,1.842,1482,4.14,1483,3.228,1505,2.503,1521,3.228,1522,3.444,1552,2.503,1553,2.052,1556,2.503,1561,3.444,1566,1.617,1567,2.594,1568,1.618,1572,1.835,1573,4.447,1581,2.503,1588,3.905,1601,4.465,1604,3.905,1609,4.241,1610,4.708,1611,2.838,1612,3.444,1615,2.503,1623,2.252,1630,2.503,1632,2.838,1634,2.838,1635,4.925,1642,3.905,1643,3.905,1646,2.252,1648,2.503,1649,2.503,1667,3.905,1670,2.838,1671,2.838,1674,1.618,1675,2.503,1678,1.835,1681,1.618,1695,2.838,1705,3.905,1706,2.838,1707,3.905,1710,2.838,1711,3.937,1712,2.838,1713,4.465,1726,4.241,1739,2.838,1740,3.905,1746,4.465,1747,3.905,1756,2.838,1759,2.838,1763,3.543,1797,2.838,1798,2.838,1803,2.838,1810,2.838,1813,2.838,1814,2.838,1815,2.838,1839,4.316,1862,3.937,1917,2.838,1919,2.838,1940,2.838,1949,2.838,1951,4.465,1952,2.838,2008,2.838,2022,2.503,2065,3.47,2066,3.47,2067,1.835,2068,3.348,2069,3.348,2070,2.165,2071,3.348,2072,2.165,2073,3.348,2074,3.348,2075,3.348,2076,3.348,2077,3.348,2078,2.838,2079,3.348,2080,3.348,2081,4.607,2082,3.348,2083,5.267,2084,3.348,2085,5.267,2086,3.348,2087,3.348,2088,4.607,2089,4.607,2090,6.298,2091,3.348,2092,2.838,2093,3.348,2094,4.607,2095,4.607,2096,3.905,2097,5.267,2098,3.348,2099,3.348,2100,2.252,2101,3.348,2102,3.348,2103,3.348,2104,3.348,2105,3.348,2106,3.348,2107,4.607,2108,3.348,2109,3.348,2110,6.148,2111,3.905,2112,6.654,2113,4.465,2114,3.348,2115,4.607,2116,3.348,2117,3.348,2118,3.348,2119,3.348,2120,3.348,2121,4.607,2122,3.348,2123,3.348,2124,4.607,2125,3.348,2126,3.348,2127,5.267,2128,4.607,2129,4.135,2130,3.348,2131,3.348,2132,3.348,2133,3.348,2134,3.348,2135,3.348,2136,3.348,2137,3.348,2138,3.348,2139,3.348,2140,3.348,2141,2.503,2142,4.607,2143,3.348,2144,4.607,2145,3.348,2146,4.607,2147,3.348,2148,5.267,2149,3.348,2150,3.348,2151,3.348,2152,4.607,2153,4.607,2154,3.348,2155,3.348,2156,3.348,2157,3.348,2158,4.607,2159,3.348,2160,3.348,2161,2.838,2162,5.267,2163,3.348,2164,3.348,2165,3.348,2166,3.348,2167,3.905,2168,3.348,2169,3.348,2170,3.348,2171,4.607,2172,3.348,2173,3.348,2174,3.348,2175,3.348,2176,3.348,2177,3.348,2178,4.607,2179,3.348,2180,3.348,2181,3.348,2182,3.348,2183,3.348,2184,3.348,2185,3.348,2186,3.348,2187,3.348,2188,4.607,2189,4.607,2190,5.267,2191,3.348,2192,5.267,2193,3.348,2194,3.348,2195,3.348,2196,3.348,2197,3.348,2198,3.348,2199,4.607,2200,3.348,2201,3.348,2202,3.348,2203,3.348,2204,4.607,2205,3.348,2206,3.348,2207,4.607,2208,3.348,2209,3.348,2210,3.348,2211,3.348,2212,3.348,2213,3.348,2214,3.348,2215,3.348,2216,4.607,2217,3.348,2218,3.348,2219,3.348,2220,3.348,2221,3.348,2222,3.348,2223,3.348,2224,3.348,2225,3.348,2226,4.607,2227,3.348,2228,3.348,2229,3.348,2230,4.607,2231,3.348,2232,3.348,2233,3.348,2234,3.348,2235,3.348,2236,3.348,2237,3.905,2238,3.348,2239,3.348,2240,3.348,2241,3.348,2242,3.348,2243,4.607,2244,2.838,2245,3.348,2246,3.348,2247,3.348,2248,2.838,2249,3.348,2250,3.348,2251,3.348,2252,3.348,2253,3.348,2254,3.348,2255,2.838,2256,3.348,2257,2.052,2258,3.348,2259,3.348,2260,4.607,2261,3.905,2262,3.348,2263,3.348,2264,3.348,2265,2.838,2266,4.607,2267,3.099,2268,2.838,2269,2.252,2270,2.503,2271,3.348,2272,2.838,2273,3.348,2274,3.348,2275,3.348,2276,3.348,2277,3.348,2278,3.348,2279,3.348,2280,3.348,2281,3.348,2282,5.267,2283,3.348,2284,4.607,2285,3.348,2286,3.348,2287,3.348,2288,3.348,2289,3.348,2290,3.348]],["title/components/SidebarComponent.html",[0,0.197,18,0.867]],["body/components/SidebarComponent.html",[0,0.371,1,1.106,2,1.386,3,0.289,4,0.251,5,1.256,6,1.256,7,1.256,8,0.251,10,1.256,11,1.798,12,1.916,15,0.993,16,1.477,18,1.667,19,1.106,20,2.217,21,1.477,23,1.677,25,0.215,29,0.539,33,0.734,43,5.352,45,2.652,47,0.635,48,0.025,49,0.616,50,0.251,51,0.45,52,0.564,54,0.993,64,1.386,69,1.037,73,3.379,74,0.414,75,0.251,77,1.037,80,1.519,85,0.289,86,0.289,87,0.408,97,1.256,98,1.574,99,1.477,100,1.256,101,1.802,102,1.256,103,0.849,104,1.162,105,1.574,106,1.256,107,0.971,108,1.256,109,1.179,110,1.244,111,1.256,112,1.106,113,1.256,114,1.106,115,1.256,116,1.106,117,1.256,118,1.106,119,1.256,120,1.574,121,1.106,122,1.256,123,1.106,124,1.856,125,1.256,126,1.106,127,1.256,128,1.106,129,1.106,130,1.856,131,1.256,132,1.256,133,1.106,134,1.256,135,1.037,136,1.256,137,1.106,138,1.106,139,0.676,140,1.037,141,1.179,142,1.256,143,0.019,144,0.019,153,1.563,154,3.104,155,0.795,157,3.289,158,2.18,160,4.674,162,3.104,163,3.285,164,1.786,179,0.41,182,2.869,191,0.635,200,1.386,221,4.246,231,1.139,254,2.324,255,1.299,257,2.167,479,2.316,529,2.167,720,1.62,854,2.29,1361,3.709,1479,2.71,1482,3.869,1483,3.869,1551,3.73,1557,3.709,1623,3.709,1852,4.122,2237,4.674,2291,3.73,2292,5.514,2293,5.514,2294,4.4,2295,4.4]],["title/components/SignupComponent.html",[0,0.197,133,0.867]],["body/components/SignupComponent.html",[0,0.216,1,0.481,2,0.764,3,0.126,4,0.109,5,0.546,6,0.546,7,0.546,8,0.109,10,0.546,11,1.633,12,1.741,14,1.712,15,0.846,16,0.814,18,0.481,19,0.481,20,1.392,21,0.814,25,0.093,26,0.373,29,0.373,32,2.257,33,0.842,38,0.628,42,1.287,44,1.195,45,1.277,47,0.721,48,0.026,49,0.652,50,0.35,51,0.512,52,0.512,54,0.775,55,2.045,56,1.712,60,0.678,61,0.732,63,2.639,64,0.764,66,1.863,69,1.015,70,4.583,71,0.886,74,0.357,75,0.109,77,0.451,80,0.661,85,0.126,86,0.126,87,0.533,88,1.05,97,0.546,98,0.868,99,0.814,100,0.546,101,1.819,102,0.546,103,0.369,104,0.369,105,0.868,106,0.546,107,0.422,108,0.546,109,0.513,110,1.157,111,0.546,112,0.481,113,0.546,114,0.481,115,0.546,116,0.481,117,0.546,118,1.082,119,0.546,120,0.868,121,0.481,122,0.546,123,0.481,124,0.546,125,0.546,126,0.481,127,0.546,128,0.481,129,0.481,130,1.229,131,0.546,132,0.546,133,1.082,134,0.546,135,0.451,136,0.546,137,0.481,138,0.481,139,0.215,140,0.451,141,0.513,142,0.546,143,0.011,144,0.011,153,1.353,155,0.438,158,1.762,165,1.368,170,2.045,179,0.481,190,1.712,191,0.873,199,1.287,200,1.408,204,4.285,211,0.814,216,1.225,228,1.582,231,0.628,232,1.119,233,3.942,234,1.864,235,4.024,238,1.341,249,2.272,255,1.235,259,4.437,262,2.354,272,0.965,273,1.704,274,1.119,275,1.968,312,0.982,314,0.451,321,1.712,350,1.431,354,2.272,355,0.996,359,1.863,360,1.078,371,3.497,372,0.996,374,1.487,392,0.985,394,0.828,395,1.938,409,2.576,415,1.287,418,0.985,459,3.526,460,2.543,461,0.996,462,2.045,463,2.045,464,2.805,465,2.089,469,3.063,471,3.654,472,1.154,478,1.728,481,2.639,484,2.138,529,1.195,552,1.173,572,1.431,573,3.065,574,2.045,580,1.582,609,1.277,625,2.129,627,2.827,642,1.938,644,3.651,649,1.623,650,3.738,654,1.582,660,3.206,661,2.577,686,3.065,697,2.272,698,2.639,703,2.827,705,2.952,717,3.219,719,0.996,722,1.623,723,3.219,724,1.431,768,1.623,772,2.577,792,2.425,793,1.712,800,1.692,807,2.045,812,1.863,813,2.272,846,3.219,850,2.577,854,0.996,906,1.623,907,3.825,908,2.101,909,5.198,911,5.358,914,3.512,915,2.577,916,1.431,917,3.512,918,5.257,919,4.066,921,4.445,922,1.863,923,1.623,924,4.124,925,3.206,927,2.577,928,2.577,930,4.457,931,3.512,933,1.623,935,3.651,941,4.868,942,3.983,943,3.206,944,4.968,945,3.206,946,3.16,947,3.651,949,4.445,950,0.925,951,1.623,952,0.925,955,2.577,958,4.612,959,2.272,960,2.272,961,4.189,964,1.623,965,4.968,966,2.577,967,2.577,970,2.577,973,4.612,977,2.577,978,3.651,979,5.055,980,1.623,981,3.651,984,1.623,986,4.24,987,4.24,988,3.512,989,3.651,991,2.577,995,3.206,996,3.983,997,3.206,998,2.577,999,2.645,1000,2.879,1001,4.24,1002,2.577,1004,3.983,1005,0.582,1006,2.577,1008,1.623,1012,2.577,1015,4.751,1017,1.623,1022,3.206,1024,2.577,1031,3.651,1032,2.577,1033,2.577,1036,1.623,1037,1.623,1039,2.543,1123,1.623,1158,0.996,1159,2.827,1161,1.712,1162,1.712,1165,2.129,1172,2.272,1176,2.045,1201,1.431,1208,2.425,1223,1.968,1234,1.623,1243,0.996,1284,2.577,1330,1.469,1428,1.431,1470,1.173,1476,3.904,1479,1.701,1482,2.317,1497,1.863,1536,1.863,1566,2.08,1567,1.712,1612,2.272,1638,1.582,1648,2.272,1778,1.623,1819,3.983,1820,3.206,1825,3.206,1827,2.577,1834,3.651,1842,2.577,1844,2.577,1845,5.055,1850,4.612,1851,2.577,1852,2.272,1855,1.431,1878,1.623,1900,1.623,1905,3.206,1906,2.577,1907,1.623,1908,1.623,1909,1.623,1911,1.623,1912,1.623,1915,1.431,1918,2.577,1920,1.623,1921,1.623,1922,3.219,1923,1.623,1924,1.623,1931,3.651,1983,1.623,2024,1.623,2056,1.863,2078,2.577,2096,2.577,2129,2.045,2167,2.577,2248,2.577,2255,3.206,2267,2.045,2268,3.651,2296,1.623,2297,3.781,2298,3.04,2299,3.781,2300,3.781,2301,4.698,2302,3.04,2303,4.306,2304,3.781,2305,4.306,2306,3.04,2307,3.04,2308,3.04,2309,3.04,2310,1.914,2311,3.04,2312,2.577,2313,3.065,2314,1.914,2315,2.577,2316,5.243,2317,4.306,2318,2.577,2319,4.306,2320,1.914,2321,3.04,2322,3.04,2323,3.04,2324,1.914,2325,1.914,2326,1.914,2327,1.914,2328,3.781,2329,3.04,2330,1.914,2331,2.577,2332,3.04,2333,1.914,2334,5.001,2335,3.04,2336,4.698,2337,1.914,2338,3.781,2339,4.306,2340,1.914,2341,1.914,2342,2.045,2343,1.914,2344,1.914,2345,1.914,2346,1.914,2347,1.914,2348,1.914,2349,1.914,2350,1.914,2351,1.914,2352,3.04,2353,1.914,2354,1.914,2355,1.914,2356,1.914,2357,1.914,2358,1.914,2359,1.914,2360,1.914,2361,1.914,2362,1.914,2363,1.914,2364,1.914,2365,3.04,2366,1.914,2367,1.914,2368,1.914,2369,1.914,2370,1.914,2371,1.914,2372,1.914,2373,1.914,2374,1.914,2375,1.914,2376,1.914,2377,1.914,2378,3.04,2379,1.914,2380,1.914,2381,1.914,2382,1.914,2383,1.914,2384,1.914,2385,1.914,2386,1.914,2387,1.914,2388,1.914,2389,3.781,2390,1.914,2391,1.914,2392,3.04,2393,1.914,2394,1.914,2395,3.781,2396,3.781,2397,1.914,2398,4.698,2399,1.914,2400,3.04,2401,5.001,2402,1.914,2403,1.914,2404,1.914,2405,1.914,2406,1.914,2407,1.914,2408,3.781,2409,1.914,2410,1.914,2411,1.914,2412,1.914,2413,1.914,2414,1.914,2415,1.914,2416,1.914,2417,1.914,2418,1.914,2419,1.914,2420,1.914,2421,1.914,2422,1.914,2423,1.914,2424,1.914,2425,1.914,2426,1.914,2427,1.914,2428,1.914,2429,1.914,2430,1.914,2431,3.04,2432,3.04,2433,3.781,2434,3.04,2435,3.04,2436,1.914,2437,1.914,2438,1.914,2439,1.914,2440,1.914,2441,1.914,2442,3.04,2443,3.781,2444,3.04,2445,3.04,2446,3.781,2447,1.914,2448,1.914,2449,1.914,2450,3.04,2451,1.914,2452,1.914,2453,1.914,2454,1.914,2455,1.914,2456,1.914,2457,3.781,2458,1.914,2459,3.04,2460,1.914,2461,1.914,2462,1.914,2463,1.914,2464,1.914,2465,1.914,2466,1.914,2467,1.914,2468,1.914,2469,1.914,2470,1.914,2471,3.04,2472,1.914,2473,1.914,2474,1.914,2475,1.914,2476,1.914,2477,1.914,2478,1.914,2479,1.914,2480,1.914]],["title/interfaces/Subtask.html",[301,0.713,2481,1.449]],["body/interfaces/Subtask.html",[3,0.202,4,0.176,8,0.176,13,0.773,25,0.15,26,0.532,28,2.661,29,0.377,38,1.191,48,0.026,50,0.287,60,0.444,61,0.898,71,0.935,74,0.285,75,0.176,85,0.285,86,0.202,87,0.633,88,1.031,91,2.352,103,0.594,104,0.971,139,0.717,143,0.015,144,0.015,179,0.229,183,0.532,189,0.824,191,0.863,200,1.504,211,1.545,213,1.991,216,1.63,230,1.824,232,1.853,237,2.595,238,1.709,241,0.725,255,1.411,272,0.838,301,0.635,312,1.071,314,1.289,367,1.486,368,1.732,370,1.384,374,1.888,375,1.601,376,1.209,377,1.384,392,1.868,394,0.988,402,1.601,409,2.778,418,1.407,419,1.486,420,2.069,445,2.753,452,2.384,464,1.824,465,2.124,476,2.619,478,1.239,479,1.292,483,3.464,493,1.601,538,1.062,551,2.26,563,1.732,595,2.834,603,1.824,682,3.681,702,2.608,715,2.608,771,1.771,800,1.978,817,2.608,877,2.069,908,1.292,1005,1.53,1083,2.299,1182,4.026,1208,1.732,1243,1.601,1260,1.738,1268,2.846,1318,1.486,1510,2.069,1534,2.299,1638,1.601,1661,1.885,1915,3.246,1934,1.732,2161,2.608,2265,2.608,2270,2.299,2315,4.636,2331,3.681,2481,3.006,2482,2.608,2483,3.681,2484,3.63,2485,3.076,2486,3.076,2487,3.076,2488,3.076,2489,3.076,2490,3.076,2491,2.608,2492,4.636,2493,3.076,2494,5.033,2495,3.076,2496,3.076,2497,6.283,2498,3.076,2499,3.076,2500,6.152,2501,3.076,2502,3.076,2503,5.767,2504,3.076,2505,6.152,2506,3.076,2507,3.076,2508,3.076,2509,5.033,2510,3.076,2511,4.636,2512,5.033,2513,4.342,2514,3.076,2515,3.076,2516,3.076,2517,2.299,2518,4.342,2519,3.076,2520,2.608,2521,3.076,2522,3.076,2523,3.076,2524,3.076,2525,5.075,2526,3.076,2527,4.342,2528,3.076,2529,4.342,2530,4.342,2531,5.033,2532,3.076,2533,3.076,2534,5.033,2535,3.076,2536,4.342,2537,3.076,2538,3.076,2539,3.076,2540,3.076,2541,3.076,2542,3.076,2543,3.076,2544,4.342,2545,3.076,2546,4.342,2547,3.076,2548,3.076,2549,3.076,2550,3.076,2551,4.342,2552,3.076,2553,3.076,2554,1.732,2555,3.076,2556,5.468,2557,4.342,2558,3.076,2559,4.342,2560,2.921,2561,3.076,2562,3.076,2563,3.076,2564,3.076,2565,4.342,2566,3.076,2567,3.076,2568,3.076,2569,3.076,2570,3.076,2571,3.076,2572,3.076,2573,3.076,2574,5.033,2575,3.076,2576,3.076,2577,2.608,2578,3.076,2579,3.076,2580,4.342,2581,3.076,2582,2.608,2583,3.076,2584,3.076,2585,3.076]],["title/interfaces/Subtask-1.html",[301,0.596,1005,0.877,2481,1.212]],["body/interfaces/Subtask-1.html",[3,0.202,4,0.175,8,0.175,13,0.772,25,0.15,26,0.532,28,3.968,38,0.635,48,0.026,50,0.287,51,0.643,52,0.559,54,0.553,67,2.258,71,0.942,74,0.33,75,0.175,85,0.33,86,0.202,87,0.638,88,0.515,92,2.096,104,0.593,139,0.803,143,0.015,144,0.015,153,1.023,164,1.868,179,0.475,180,2.113,183,0.532,188,1.061,189,0.823,191,0.998,208,1.771,216,1.938,226,2.68,230,1.823,231,1.039,232,1.598,234,1.662,238,1.793,241,1.023,255,1.185,265,2.096,272,0.971,274,1.131,279,1.208,295,1.599,299,1.484,300,1.599,301,0.896,302,1.599,306,2.511,311,2.258,312,1.125,314,1.41,322,2.258,366,2.459,367,1.484,372,2.258,385,1.883,387,1.883,392,0.995,409,1.823,418,0.995,445,2.747,450,1.383,453,2.443,454,1.883,455,1.883,456,1.883,457,1.883,472,1.545,478,1.239,479,1.291,493,2.844,495,2.096,528,2.43,531,1.883,533,3.114,534,3.35,538,1.061,543,3.077,544,2.659,547,2.659,548,2.659,550,2.659,551,2.258,553,1.383,554,2.844,556,3.533,559,2.659,560,2.659,561,1.883,565,2.785,568,2.659,570,1.73,575,1.383,576,1.705,603,1.823,654,2.618,720,1.131,756,2.352,771,0.995,800,1.705,805,1.484,839,1.883,869,2.443,1260,1.061,1268,2.618,1302,2.919,1343,2.919,1400,2.258,1464,1.599,1467,1.73,1469,3.269,1471,1.883,1498,1.883,1628,3.384,1638,1.599,1661,1.883,2045,3.083,2053,2.067,2055,2.067,2056,1.883,2057,1.883,2100,2.067,2257,1.883,2269,2.919,2313,1.883,2342,2.919,2481,2.954,2484,3.114,2554,2.443,2560,4.025,2586,2.067,2587,3.244,2588,2.297,2589,2.297,2590,2.297,2591,2.067,2592,3.244,2593,2.297,2594,2.297,2595,4.086,2596,2.297,2597,2.297,2598,3.244,2599,4.31,2600,2.297,2601,2.297,2602,2.297,2603,2.297,2604,3.244,2605,2.297,2606,3.244,2607,2.297,2608,3.244,2609,2.297,2610,2.297,2611,2.297,2612,2.297,2613,2.297,2614,2.297,2615,3.76,2616,2.297,2617,2.297,2618,2.297,2619,2.297,2620,2.297,2621,2.297,2622,2.297,2623,2.297,2624,2.297,2625,2.297,2626,2.297,2627,2.297,2628,4.086,2629,3.244,2630,2.297,2631,3.244,2632,3.244,2633,2.297,2634,2.297,2635,2.297,2636,2.297,2637,2.297,2638,2.067,2639,2.297,2640,2.297,2641,3.244,2642,2.297,2643,2.297,2644,2.297,2645,2.297,2646,2.297,2647,2.297,2648,2.297,2649,2.919,2650,1.883,2651,3.244,2652,2.067,2653,2.297,2654,2.297,2655,2.297,2656,2.297,2657,2.297,2658,2.297,2659,2.297,2660,2.297,2661,2.297,2662,2.297,2663,2.297,2664,2.297,2665,2.297,2666,3.76,2667,2.297,2668,2.297,2669,2.297,2670,2.297,2671,2.297,2672,2.297,2673,2.297]],["title/components/SummaryComponent.html",[0,0.197,135,0.813]],["body/components/SummaryComponent.html",[0,0.288,1,0.651,2,0.963,3,0.17,4,0.148,5,0.739,6,0.739,7,0.739,8,0.148,10,0.739,11,1.705,12,1.817,15,1.016,16,1.027,18,0.651,19,0.651,20,1.681,21,1.027,23,1.165,25,0.126,26,0.47,29,0.47,32,2.294,33,0.916,35,1.725,38,0.943,44,1.017,47,0.814,48,0.026,49,0.614,50,0.38,51,0.577,52,0.551,60,0.923,61,1.015,67,2.626,69,0.61,71,0.869,72,1.725,74,0.37,75,0.148,77,0.61,80,0.894,85,0.17,86,0.17,87,0.523,88,1.161,92,1.25,97,0.739,98,1.094,99,1.027,100,0.739,101,1.44,102,0.739,103,0.5,104,0.5,105,1.094,106,0.739,107,0.571,108,0.739,109,0.693,110,0.943,111,0.739,112,0.651,113,0.739,114,0.651,115,0.739,116,0.651,117,0.739,118,0.651,119,0.739,120,1.094,121,0.651,122,0.739,123,0.651,124,0.739,125,0.739,126,0.651,127,0.739,128,0.651,129,0.651,130,0.739,131,0.739,132,0.739,133,0.651,134,0.739,135,1.189,136,0.739,137,0.651,138,0.651,139,0.762,140,0.61,141,0.693,142,0.739,143,0.013,144,0.013,153,0.903,155,0.553,158,1.891,161,1.61,164,2.018,168,1.995,179,0.505,190,2.158,191,0.865,200,1.268,211,1.223,226,1.506,238,1.778,241,1.076,254,1.411,267,1.165,272,0.881,273,1.388,274,1.411,301,0.535,306,2.531,312,0.903,314,0.61,392,1.479,394,0.911,452,2.507,465,1.323,472,1.669,473,1.347,476,2.375,478,1.825,538,1.742,580,1.995,592,1.165,599,2.349,625,2.57,642,2.054,665,1.995,756,2.709,771,1.635,800,1.983,812,2.349,816,2.865,821,3.394,854,1.347,859,2.865,877,2.578,894,1.741,916,2.865,950,1.25,952,1.25,1005,0.787,1158,1.995,1166,2.57,1167,1.586,1208,1.457,1215,1.457,1216,2.57,1217,1.457,1218,1.25,1219,1.457,1223,1.995,1243,1.995,1259,1.586,1260,1.948,1263,3.07,1318,1.25,1330,2.205,1332,2.57,1334,2.841,1357,4.032,1358,1.935,1359,2.194,1361,2.578,1362,3.25,1363,3.25,1364,2.194,1365,1.741,1366,1.935,1367,1.741,1368,3.772,1369,2.194,1370,2.194,1371,4.949,1372,3.87,1373,3.033,1374,3.87,1375,3.412,1376,4.567,1377,4.567,1378,5.703,1379,4.567,1380,4.567,1381,4.567,1382,4.567,1383,3.25,1384,4.278,1385,3.25,1386,3.25,1387,3.25,1388,2.194,1389,4.567,1390,3.25,1391,2.194,1392,3.87,1393,2.194,1394,4.567,1395,3.25,1396,3.25,1397,3.25,1398,3.25,1399,3.25,1400,1.995,1401,3.25,1402,3.25,1403,4.278,1404,4.567,1405,2.194,1406,1.586,1407,2.194,1408,2.194,1409,2.194,1410,2.194,1411,2.194,1412,2.194,1413,2.194,1414,2.194,1415,2.194,1416,3.25,1417,2.194,1418,2.194,1419,2.194,1420,3.87,1421,3.25,1422,3.25,1423,2.578,1424,2.865,1425,4.278,1426,3.25,1427,2.194,1428,1.935,1429,2.194,1430,3.412,1431,4.782,1432,1.852,1433,4.278,1434,1.935,1435,1.935,1436,2.194,1437,2.194,1438,3.25,1439,3.25,1440,3.25,1441,3.25,1442,4.278,1443,2.194,1444,2.194,1445,2.194,1446,4.278,1447,3.25,1448,3.25,1449,2.865,1450,2.194,1451,3.25,1452,2.194,1453,2.194,1454,3.25,1455,2.194,1456,2.194,1457,3.25,1458,2.194,1459,2.194,1460,2.194,1461,2.194,1462,3.25,1463,2.194,1464,1.995,1465,3.25,1466,3.394,1467,2.158,1468,3.25,1469,1.995,1470,2.349,1471,2.349,1472,3.25,1473,2.194,1474,2.194,1475,2.194,1521,1.586,1566,1.25,1623,1.741,1839,1.741,1856,2.194,1934,1.457,2057,2.349,2674,3.833,2675,4.565,2676,3.833,2677,4.565,2678,3.833,2679,3.833,2680,3.833,2681,3.25,2682,3.833,2683,2.588,2684,2.588,2685,2.588,2686,2.588,2687,2.588,2688,2.588,2689,2.588,2690,2.588,2691,2.588,2692,2.588,2693,2.588,2694,2.588,2695,2.588,2696,2.588,2697,2.588,2698,2.588,2699,2.588,2700,2.588,2701,2.588,2702,2.588,2703,2.588,2704,2.588,2705,2.588,2706,2.588,2707,2.588,2708,2.588,2709,2.588,2710,3.833,2711,3.833,2712,3.833,2713,3.833,2714,3.833,2715,3.833,2716,3.25]],["title/interfaces/Task.html",[139,0.387,301,0.713]],["body/interfaces/Task.html",[3,0.192,4,0.167,8,0.167,13,0.735,25,0.143,26,0.514,28,3.926,38,0.866,48,0.026,50,0.361,51,0.693,52,0.635,54,0.527,67,2.181,71,0.946,74,0.321,75,0.167,85,0.321,86,0.192,87,0.634,88,0.49,92,2.024,104,0.565,139,0.805,143,0.015,144,0.015,153,1.333,164,2.009,179,0.47,180,2.057,183,0.514,188,1.01,189,0.784,191,0.993,208,1.732,216,1.907,226,2.686,230,1.76,231,1.011,232,1.543,234,1.626,238,1.77,241,0.987,255,0.689,265,2.024,272,0.945,274,1.543,279,1.15,295,1.522,299,1.413,300,1.522,301,0.866,302,1.522,306,2.556,311,2.181,312,1.116,314,1.387,322,2.181,366,2.79,367,1.413,372,1.522,385,3,387,3,392,0.948,409,1.76,418,0.948,445,2.735,450,1.885,453,2.359,454,1.793,455,1.793,456,1.793,457,1.793,472,1.577,478,1.196,479,1.229,493,2.782,495,2.024,528,2.365,531,1.793,533,3.064,534,3.276,538,1.447,543,3.01,544,2.568,547,2.568,548,2.568,550,2.568,551,2.181,553,1.316,554,2.782,556,3.468,559,2.568,560,2.568,561,1.793,565,2.733,568,2.568,570,1.647,575,1.316,576,1.647,603,1.76,654,2.548,720,1.077,756,2.314,771,1.357,800,1.647,805,1.413,839,1.793,869,2.359,1260,1.01,1268,2.548,1302,2.818,1343,2.818,1400,2.181,1464,1.522,1467,1.647,1469,3.409,1471,2.568,1498,1.793,1628,3.293,1638,1.522,1661,1.793,2045,3.715,2053,2.818,2055,3.293,2056,3,2057,3,2100,1.968,2257,2.568,2269,2.818,2313,1.793,2342,2.818,2481,2.952,2484,3.155,2554,1.647,2560,3.293,2586,1.968,2587,2.187,2588,3.132,2589,3.132,2590,3.132,2591,2.818,2592,4.23,2593,3.132,2594,3.132,2595,4.23,2596,2.187,2597,2.187,2598,3.132,2599,4.23,2600,2.187,2601,2.187,2602,2.187,2603,2.187,2604,3.132,2605,2.187,2606,3.132,2607,2.187,2608,3.132,2609,2.187,2610,2.187,2611,2.187,2612,2.187,2613,2.187,2614,2.187,2615,3.66,2616,2.187,2617,2.187,2618,2.187,2619,2.187,2620,2.187,2621,2.187,2622,2.187,2623,2.187,2624,2.187,2625,2.187,2626,2.187,2627,2.187,2628,3.996,2629,3.132,2630,2.187,2631,3.132,2632,3.132,2633,2.187,2634,2.187,2635,2.187,2636,2.187,2637,2.187,2638,1.968,2639,2.187,2640,2.187,2641,3.132,2642,2.187,2643,2.187,2644,2.187,2645,2.187,2646,2.187,2647,2.187,2648,2.187,2649,2.818,2650,1.793,2651,3.132,2652,1.968,2653,2.187,2654,2.187,2655,2.187,2656,2.187,2657,2.187,2658,2.187,2659,2.187,2660,2.187,2661,2.187,2662,2.187,2663,2.187,2664,2.187,2665,2.187,2666,3.66,2667,2.187,2668,2.187,2669,2.187,2670,2.187,2671,2.187,2672,2.187,2673,2.187]],["title/components/TaskComponent.html",[0,0.197,137,0.867]],["body/components/TaskComponent.html",[0,0.324,1,0.598,2,0.904,3,0.156,4,0.136,5,0.679,6,0.679,7,0.679,8,0.136,10,0.679,11,1.686,12,1.798,16,0.964,18,0.598,19,0.598,20,1.597,21,0.964,23,1.094,25,0.212,26,0.67,29,0.441,33,0.912,38,0.743,47,0.863,48,0.026,49,0.634,50,0.382,51,0.65,52,0.612,54,0.984,59,2.025,60,0.626,61,0.676,64,0.904,65,2.204,66,2.204,69,0.56,71,0.825,74,0.384,75,0.205,80,0.821,85,0.156,86,0.156,87,0.575,91,2.481,97,0.679,98,1.027,99,0.964,100,0.679,101,1.381,102,0.679,103,0.459,104,0.459,105,1.027,106,0.679,107,0.525,108,0.679,109,0.637,110,1.431,111,0.679,112,0.598,113,0.679,114,0.598,115,0.679,116,0.598,117,0.679,118,0.598,119,0.679,120,1.027,121,0.598,122,0.679,123,0.598,124,0.679,125,0.679,126,0.598,127,0.679,128,0.598,129,0.598,130,0.679,131,0.679,132,0.679,133,0.598,134,0.679,135,0.56,136,0.679,137,1.216,138,0.598,139,0.802,140,1.022,141,0.637,142,0.679,143,0.013,144,0.013,153,0.848,155,0.519,164,1.938,179,0.501,191,0.843,203,2.096,213,1.887,216,1.405,231,1.129,238,1.381,241,1.337,254,1.781,255,0.56,272,1.128,273,1.094,279,2.564,312,0.871,314,0.56,376,1.414,389,2.012,394,0.843,402,1.872,405,2.704,419,1.738,445,2.297,447,2.204,450,2.176,451,2.964,452,2.245,465,2.018,472,0.964,478,1.668,484,2.435,529,2.497,533,2.258,538,0.821,565,1.738,576,1.705,609,2.032,642,2.176,646,2.419,657,4.168,663,1.599,664,2.964,674,2.419,680,2.689,716,3.676,719,1.872,771,2.141,792,2.025,793,2.025,805,2.337,821,1.599,846,2.689,884,3.243,908,1.823,931,1.777,1018,2.204,1050,4.101,1066,4.101,1067,4.101,1068,4.101,1069,4.101,1070,2.016,1087,2.016,1088,2.016,1089,2.016,1095,2.419,1114,1.777,1161,2.723,1162,2.723,1167,3.349,1168,3.676,1171,3.049,1182,3.818,1189,1.777,1201,2.689,1205,2.204,1252,3.678,1259,1.457,1260,2.105,1267,4.369,1268,1.237,1318,2.096,1330,1.738,1332,2.025,1334,2.025,1432,2.096,1490,3.049,1493,3.049,1494,3.049,1497,2.204,1499,2.016,1500,2.016,1501,5.17,1503,3.243,1504,3.678,1505,3.243,1506,4.941,1507,4.388,1509,4.812,1510,2.918,1523,3.049,1524,2.016,1525,3.049,1531,3.616,1543,2.016,1567,2.025,1592,3.049,1649,4.243,1656,2.689,1741,3.616,1934,2.723,1992,3.243,2022,2.689,2041,2.016,2312,4.101,2318,4.101,2481,2.296,2484,3.34,2517,2.689,2554,2.025,2681,3.049,2716,3.049,2717,2.016,2718,3.597,2719,3.597,2720,3.678,2721,3.597,2722,4.837,2723,3.597,2724,4.837,2725,5.465,2726,3.597,2727,3.597,2728,3.597,2729,3.597,2730,4.338,2731,5.845,2732,4.338,2733,4.338,2734,4.338,2735,4.338,2736,2.377,2737,3.678,2738,2.377,2739,3.597,2740,6.524,2741,2.377,2742,2.377,2743,2.377,2744,3.597,2745,2.377,2746,2.377,2747,4.837,2748,2.377,2749,3.597,2750,2.377,2751,3.597,2752,3.597,2753,2.377,2754,4.101,2755,2.377,2756,3.597,2757,3.597,2758,4.837,2759,2.377,2760,2.377,2761,2.377,2762,3.597,2763,2.377,2764,3.597,2765,4.837,2766,2.377,2767,3.597,2768,3.597,2769,3.597,2770,2.377,2771,3.597,2772,3.597,2773,2.377,2774,3.597,2775,2.377,2776,3.597,2777,2.377,2778,3.597,2779,4.837,2780,2.377,2781,2.377,2782,2.377,2783,2.377,2784,2.377,2785,2.377,2786,2.377,2787,2.377,2788,2.377,2789,2.377,2790,3.597,2791,3.597,2792,4.338,2793,3.597,2794,2.377,2795,2.377,2796,3.678,2797,3.678,2798,2.377,2799,2.377,2800,2.377,2801,2.377,2802,4.837,2803,2.377,2804,2.377,2805,2.377,2806,2.377,2807,2.377,2808,2.016,2809,3.597,2810,2.377,2811,2.016,2812,2.016,2813,2.377,2814,2.377,2815,2.377,2816,2.377,2817,2.377,2818,2.377,2819,2.377,2820,2.377,2821,3.049,2822,3.049,2823,3.049,2824,3.049,2825,3.597,2826,3.597]],["title/components/TaskDetailsComponent.html",[0,0.197,138,0.867]],["body/components/TaskDetailsComponent.html",[0,0.319,1,0.712,2,1.029,3,0.186,4,0.162,5,0.808,6,0.808,7,0.808,8,0.162,10,0.808,11,1.724,12,1.837,15,0.737,16,1.097,18,0.712,19,0.712,20,1.77,21,1.097,23,1.245,25,0.273,26,0.502,29,0.646,32,2.559,33,0.91,38,0.846,45,1.72,47,0.806,48,0.026,49,0.615,50,0.375,51,0.641,52,0.572,54,1.049,60,0.866,61,0.749,63,2.509,64,1.029,65,2.509,69,0.667,71,0.776,74,0.411,75,0.162,77,0.667,80,0.978,85,0.186,86,0.186,87,0.557,88,0.475,91,2.548,97,0.808,98,1.169,99,1.097,100,0.808,101,1.503,102,0.808,103,0.547,104,0.547,105,1.169,106,0.808,107,0.625,108,0.808,109,0.759,110,1.4,111,0.808,112,0.712,113,0.808,114,0.712,115,0.808,116,0.712,117,0.808,118,0.712,119,0.808,120,1.169,121,0.712,122,0.808,123,0.712,124,0.808,125,0.808,126,0.712,127,0.808,128,0.712,129,0.712,130,0.808,131,0.808,132,0.808,133,0.712,134,0.808,135,0.667,136,0.808,137,0.712,138,1.324,139,0.791,140,1.317,141,0.759,142,0.808,143,0.014,144,0.014,153,0.965,155,0.591,164,1.326,165,2.37,173,2.509,179,0.466,191,0.591,200,0.712,203,2.323,208,1.706,213,2.01,216,1.558,230,1.72,231,0.846,234,0.861,272,0.928,279,2.559,299,1.368,306,2.419,312,0.475,314,0.667,389,1.507,394,0.866,402,2.131,405,2.741,445,1.609,450,2.766,461,1.474,465,1.66,483,2.305,484,2.532,495,1.978,529,2.36,565,2.545,578,1.905,595,3.279,603,1.72,628,4.076,642,2.37,643,4.465,646,2.754,657,4.039,664,2.509,680,3.06,689,2.741,693,3.471,716,3.543,719,2.131,754,2.401,756,1.89,771,1.992,793,2.305,869,1.595,888,3.471,946,2.754,1018,3.228,1113,3.471,1114,2.117,1121,3.471,1161,2.305,1162,2.305,1167,3.768,1168,4.135,1190,2.509,1208,2.305,1259,1.736,1260,2.196,1305,3.471,1318,1.978,1432,1.978,1464,2.131,1469,3.199,1470,2.509,1497,2.509,1531,3.937,1534,3.06,1646,2.754,1741,3.937,1934,2.305,1936,3.471,1990,4.465,2045,2.509,2063,3.471,2261,3.471,2270,3.06,2481,2.86,2484,3.569,2492,2.401,2511,3.471,2517,3.06,2525,3.471,2554,2.305,2577,3.471,2582,3.471,2591,2.754,2638,2.754,2649,2.754,2650,2.509,2652,2.754,2720,5.091,2737,4.076,2754,4.465,2796,2.401,2797,3.471,2808,2.401,2811,2.401,2812,2.401,2821,3.471,2822,3.471,2823,3.471,2824,3.471,2827,5.088,2828,5.771,2829,2.401,2830,4.094,2831,4.094,2832,4.808,2833,3.471,2834,3.471,2835,5.267,2836,4.465,2837,4.094,2838,4.094,2839,4.808,2840,4.808,2841,4.808,2842,4.094,2843,2.832,2844,2.832,2845,2.832,2846,2.832,2847,2.832,2848,4.094,2849,2.832,2850,4.094,2851,2.832,2852,2.832,2853,3.471,2854,2.832,2855,2.832,2856,4.094,2857,2.832,2858,4.094,2859,2.832,2860,4.094,2861,4.094,2862,2.832,2863,4.094,2864,2.832,2865,2.832,2866,2.832,2867,2.832,2868,2.401,2869,2.832,2870,2.832,2871,2.832,2872,2.832,2873,2.832,2874,2.832,2875,2.832,2876,2.832,2877,2.832,2878,2.832,2879,2.832,2880,2.832,2881,4.094]],["title/injectables/TaskListManager.html",[183,0.423,2882,2.579]],["body/injectables/TaskListManager.html",[3,0.158,4,0.137,8,0.137,13,0.604,15,0.875,25,0.255,26,0.444,29,0.294,33,0.918,47,0.882,48,0.026,49,0.626,50,0.38,51,0.626,52,0.626,54,0.653,59,2.041,60,0.882,61,0.887,64,0.911,71,0.899,74,0.287,75,0.137,83,3.593,85,0.158,86,0.158,87,0.59,88,1.179,92,1.751,107,0.8,139,0.81,143,0.013,144,0.017,155,0.523,164,2.232,179,0.519,180,1.523,183,0.444,188,0.829,189,0.644,191,0.969,201,0.944,208,1.174,226,1.425,231,1.004,237,2.469,241,0.854,242,2.041,255,1.029,264,2.71,272,0.464,274,1.335,306,2.463,312,0.875,314,1.293,338,1.796,339,4.383,345,1.886,349,1.886,370,1.081,374,1.251,376,1.425,377,1.631,389,1.79,394,0.928,418,1.575,438,1.796,440,1.616,441,2.71,442,1.796,445,2.403,447,2.221,450,1.631,451,2.221,452,1.921,465,1.251,472,0.971,473,2.716,476,1.25,479,1.523,538,2.309,543,2.041,576,2.304,609,2.305,673,3.073,687,3.263,720,0.884,756,2.755,771,2.274,800,2.156,807,2.438,809,4.652,812,2.221,830,3.073,849,3.073,877,3.271,894,1.616,914,3.635,1059,1.796,1073,2.037,1082,2.037,1259,1.472,1260,1.894,1263,2.936,1268,2.716,1281,2.037,1304,4.706,1310,3.073,1314,2.037,1318,1.161,1322,3.073,1323,3.073,1327,2.037,1330,2.651,1332,3.089,1334,3.378,1434,1.796,1435,3.635,1464,1.886,1467,2.041,1469,2.855,1587,4.971,1624,3.073,1644,3.073,1646,3.69,1656,2.71,1763,2.438,1934,3.089,1972,3.073,1992,2.71,2035,2.037,2036,1.796,2037,2.037,2313,2.98,2481,2.393,2484,3.424,2650,2.221,2827,5.162,2836,4.122,2868,2.037,2882,3.635,2883,3.625,2884,4.366,2885,4.366,2886,4.366,2887,4.366,2888,4.366,2889,4.862,2890,3.625,2891,4.862,2892,3.625,2893,4.862,2894,3.625,2895,4.862,2896,3.625,2897,4.862,2898,4.862,2899,3.625,2900,3.625,2901,4.862,2902,3.625,2903,4.862,2904,4.862,2905,4.862,2906,3.625,2907,3.625,2908,4.862,2909,2.402,2910,3.625,2911,2.402,2912,4.862,2913,3.625,2914,2.402,2915,3.625,2916,3.625,2917,6,2918,4.862,2919,5.487,2920,4.862,2921,4.862,2922,3.625,2923,2.402,2924,3.625,2925,4.366,2926,2.402,2927,3.625,2928,2.402,2929,3.625,2930,2.402,2931,3.625,2932,2.402,2933,3.625,2934,2.402,2935,3.625,2936,2.402,2937,2.402,2938,3.625,2939,3.073,2940,2.402,2941,5.487,2942,2.402,2943,3.625,2944,5.696,2945,2.402,2946,4.862,2947,3.625,2948,3.625,2949,2.402,2950,3.625,2951,3.625,2952,3.625,2953,3.625,2954,3.625,2955,2.402,2956,5.219,2957,5.219,2958,5.219,2959,5.219,2960,3.625,2961,2.402,2962,2.402,2963,2.402,2964,2.402,2965,2.402,2966,2.402,2967,2.402,2968,2.402,2969,2.402,2970,2.402,2971,3.625,2972,3.625,2973,2.402,2974,2.402,2975,2.402,2976,2.402,2977,3.625,2978,2.402,2979,2.402,2980,3.625,2981,3.625,2982,2.402,2983,4.862,2984,2.402,2985,2.402,2986,2.402,2987,2.402,2988,2.402,2989,3.625,2990,3.625,2991,3.625,2992,3.625,2993,2.402,2994,2.402,2995,2.402,2996,2.402,2997,2.402]],["title/injectables/TaskService.html",[183,0.423,1260,1.191]],["body/injectables/TaskService.html",[3,0.16,4,0.139,8,0.139,13,0.614,25,0.119,26,0.45,28,3.51,29,0.299,33,0.893,38,0.504,47,0.938,48,0.026,49,0.666,50,0.374,51,0.686,52,0.683,54,0.661,60,0.352,61,0.38,67,2.551,71,0.953,74,0.289,75,0.139,85,0.289,86,0.16,87,0.619,88,0.739,92,1.773,104,0.708,139,0.807,143,0.013,144,0.013,153,1.039,155,0.529,164,1.702,179,0.517,180,2.208,183,0.45,188,0.843,189,0.654,191,0.971,201,0.96,208,1.909,216,2.15,226,2.706,230,2.06,231,1.14,232,1.805,234,1.491,238,1.823,241,1.155,255,0.575,265,2.368,272,0.946,274,0.899,279,1.442,295,1.271,299,1.179,300,1.271,301,0.758,302,1.91,306,2.541,311,1.91,312,1.081,314,1.301,322,1.91,366,2.365,372,1.271,385,2.249,387,2.249,392,1.189,394,0.529,409,1.852,418,1.189,445,2.738,450,1.099,453,2.482,454,1.496,455,1.496,456,1.496,457,1.496,472,1.615,478,1.047,479,1.542,493,3.066,495,2.368,528,2.667,531,1.496,533,3.287,534,3.51,538,0.843,543,2.76,544,2.249,547,2.249,548,2.249,550,2.249,551,2.551,553,1.651,554,2.551,556,3.221,559,2.249,560,2.249,561,1.496,565,2.846,568,2.249,570,2.066,575,1.651,576,2.17,603,2.06,654,1.91,720,0.899,756,2.369,771,0.791,800,1.927,805,1.773,839,2.249,869,2.066,1101,3.111,1105,2.07,1260,1.267,1268,2.873,1302,3.297,1343,3.297,1400,2.551,1464,1.91,1467,2.066,1469,3.287,1471,1.496,1498,2.249,1628,2.468,1638,1.271,1661,1.496,2045,3.004,2053,1.642,2055,2.468,2056,2.249,2057,2.249,2100,2.468,2257,1.496,2269,3.297,2313,2.249,2342,3.297,2481,2.959,2484,3.137,2491,3.111,2520,3.111,2554,1.375,2560,3.297,2586,1.642,2587,1.825,2588,1.825,2589,1.825,2590,1.825,2591,1.642,2592,3.295,2593,1.825,2594,1.825,2595,4.281,2596,3.295,2597,3.665,2598,3.295,2599,4.59,2600,2.743,2601,1.825,2602,2.743,2603,1.825,2604,3.665,2605,3.665,2606,2.743,2607,1.825,2608,2.743,2609,1.825,2610,1.825,2611,2.743,2612,1.825,2613,1.825,2614,1.825,2615,3.665,2616,2.743,2617,1.825,2618,1.825,2619,1.825,2620,2.743,2621,2.743,2622,1.825,2623,1.825,2624,1.825,2625,2.743,2626,1.825,2627,1.825,2628,4.404,2629,3.665,2630,2.743,2631,2.743,2632,2.743,2633,1.825,2634,2.743,2635,1.825,2636,2.743,2637,1.825,2638,2.468,2639,2.743,2640,2.743,2641,2.743,2642,1.825,2643,1.825,2644,1.825,2645,1.825,2646,1.825,2647,1.825,2648,1.825,2649,3.297,2650,2.249,2651,3.665,2652,2.468,2653,1.825,2654,1.825,2655,2.743,2656,2.743,2657,1.825,2658,1.825,2659,1.825,2660,1.825,2661,1.825,2662,1.825,2663,1.825,2664,1.825,2665,2.743,2666,3.295,2667,3.665,2668,3.665,2669,2.743,2670,3.665,2671,2.743,2672,1.825,2673,1.825,2833,3.111,2834,3.111,2998,3.669,2999,3.669,3000,3.669,3001,3.669,3002,3.669,3003,3.669,3004,3.669,3005,3.669,3006,3.669,3007,2.442,3008,2.442,3009,2.442,3010,2.442,3011,2.442,3012,2.442,3013,2.442,3014,2.442,3015,2.442,3016,2.442,3017,2.442,3018,2.442,3019,2.442,3020,2.442,3021,2.442,3022,2.442,3023,2.442,3024,2.442]],["title/interfaces/UserData.html",[301,0.713,303,2.32]],["body/interfaces/UserData.html",[3,0.217,4,0.189,8,0.189,13,0.831,15,1.13,25,0.162,26,0.56,29,0.405,32,2.328,35,1.488,38,1.166,44,1.3,45,1.389,46,2.224,48,0.026,49,0.468,50,0.322,51,0.578,52,0.339,54,0.595,59,1.862,60,0.477,64,0.831,69,1.233,71,0.917,74,0.389,75,0.189,77,0.779,85,0.3,86,0.217,87,0.602,88,1.027,143,0.016,144,0.016,150,2.224,153,1.664,154,3.335,158,1.48,161,1.389,162,3.534,163,2.377,164,1.828,165,1.488,170,2.224,171,1.721,173,3.847,174,4.303,179,0.476,180,2.488,182,1.721,183,0.56,188,1.142,189,0.886,191,1.011,199,2.224,200,1.539,202,2.472,203,1.598,204,2.224,205,2.472,206,3.984,207,2.804,208,1.071,209,3.52,210,2.472,211,1.224,212,3.873,213,1.577,214,3.912,215,2.804,216,1.984,217,2.804,218,2.472,219,2.804,221,2.224,223,2.804,224,2.804,226,2.583,228,2.377,230,1.389,231,1.166,232,2.255,233,4.564,234,2.063,235,3.979,237,1.488,238,1.748,240,2.804,241,1.396,242,2.946,243,2.804,245,2.804,246,2.804,247,2.804,248,2.804,249,2.472,250,3.873,251,2.224,252,2.472,254,1.218,255,0.779,256,3.873,257,1.3,258,2.804,259,4.564,261,4.436,262,2.892,264,2.472,265,1.598,267,1.488,268,2.804,269,5.628,271,2.804,272,1.143,273,1.389,274,1.218,275,2.723,276,2.224,278,2.804,279,1.3,280,2.472,281,2.224,282,2.804,283,2.804,285,2.804,286,2.224,288,2.804,289,2.804,290,2.804,291,2.804,292,2.804,293,2.804,294,2.804,295,1.721,296,2.804,297,2.224,298,2.804,299,1.598,300,1.721,301,1.081,302,2.377,303,4.368,304,5.192,305,5.192,306,2.181,307,2.804,308,2.804,309,2.804,310,2.804,311,3.267,312,1.113,313,3.873,314,1.564,315,3.873,316,3.873,317,3.873,318,4.785,319,3.873,320,3.873,321,2.946,322,3.082,323,4.436,324,3.873,325,3.873,326,3.873,327,3.873,328,3.873,329,2.804,330,2.804,331,2.804,332,4.785,333,2.804,334,2.804,335,2.804,336,2.804,337,2.804,338,2.472,339,4.782,340,3.873,341,2.804,342,2.804,343,2.804,344,3.073,345,2.377,346,2.804,347,2.804,348,2.804,349,1.721,350,3.415,351,2.804,352,3.873,353,2.472,354,2.472,355,2.723,356,3.873,357,2.804,358,2.804,359,2.027,360,1.862,361,2.804,362,2.472,363,2.472,364,2.224,365,2.804,367,1.598]],["title/coverage.html",[3025,3.986]],["body/coverage.html",[0,0.407,1,1.117,8,0.254,9,3.766,18,1.117,19,1.117,31,2.312,48,0.025,50,0.254,103,0.857,107,0.981,109,1.19,110,0.918,112,1.117,114,1.117,116,1.117,118,1.117,121,1.117,123,1.117,126,1.117,128,1.117,129,1.117,133,1.117,135,1.047,137,1.117,138,1.117,139,0.499,143,0.019,144,0.019,145,2.988,146,3.321,148,3.766,158,1.439,183,0.854,202,4.146,272,0.857,301,1.393,303,2.988,366,1.999,368,3.798,369,4.146,370,3.094,373,2.501,443,4.068,448,2.988,473,2.312,478,1.861,484,1.746,622,4.521,623,3.321,624,3.766,718,3.321,769,3.321,770,3.766,771,1.439,908,2.834,1000,2.722,1044,3.321,1045,3.766,1137,3.766,1212,3.766,1247,3.321,1248,3.766,1249,3.766,1260,1.534,1357,2.988,1358,4.146,1476,3.882,1477,3.766,1484,3.766,1558,3.766,1683,3.766,1684,3.766,1685,3.766,1816,3.766,1879,3.321,1925,3.766,1926,3.766,1947,3.766,1948,3.766,1984,3.321,1985,3.766,2043,3.321,2044,3.766,2065,3.766,2066,3.766,2067,3.766,2291,3.766,2296,3.766,2481,2.33,2482,4.703,2483,3.766,2586,4.068,2717,3.766,2827,4.146,2828,3.766,2829,4.703,2882,3.321,2939,3.766,3025,3.766,3026,4.443,3027,4.443,3028,4.443,3029,4.443,3030,4.443,3031,4.443,3032,5.547,3033,5.547,3034,5.547,3035,4.443,3036,4.443,3037,4.443,3038,4.443,3039,4.443,3040,3.766,3041,4.443,3042,3.766,3043,5.547,3044,4.443,3045,4.443,3046,4.443,3047,4.443,3048,4.443,3049,4.443,3050,4.443,3051,6.048,3052,4.443,3053,4.443,3054,4.443,3055,4.443,3056,4.443,3057,4.443,3058,4.443,3059,6.048,3060,5.547,3061,5.547,3062,4.443,3063,4.443,3064,4.443,3065,4.443,3066,4.443,3067,4.443,3068,4.443,3069,5.547,3070,4.443,3071,4.443,3072,4.443,3073,4.443,3074,4.443,3075,4.443,3076,4.443,3077,4.443,3078,4.443,3079,4.443,3080,4.443,3081,6.048,3082,6.048,3083,4.443,3084,4.443,3085,4.443,3086,4.443]],["title/dependencies.html",[3087,2.445,3088,3.516]],["body/dependencies.html",[48,0.025,75,0.31,77,1.279,80,1.873,143,0.022,144,0.022,188,1.873,461,2.824,1218,2.621,2129,4.207,2272,4.6,3088,4.6,3089,6.255,3090,5.426,3091,7.064,3092,5.426,3093,5.426,3094,6.255,3095,5.426,3096,5.426,3097,5.426,3098,5.426,3099,5.426]],["title/miscellaneous/functions.html",[2267,2.79,3100,1.94]],["body/miscellaneous/functions.html",[25,0.266,47,0.786,48,0.024,49,0.557,50,0.311,51,0.557,52,0.557,143,0.022,144,0.022,161,2.288,179,0.405,234,1.656,238,1.789,257,2.14,349,2.834,443,3.663,459,4.216,460,3.663,462,3.663,463,3.663,464,2.633,465,1.88,466,3.663,467,3.337,468,4.071,469,3.529,470,4.071,471,3.337,472,1.459,474,4.071,718,4.686,2267,3.663,3100,3.663,3101,5.446]],["title/index.html",[25,0.141,3102,2.884,3103,2.884]],["body/index.html",[0,0.364,2,1.256,4,0.285,48,0.021,55,3.36,60,0.86,72,2.248,73,3.652,141,1.338,143,0.021,144,0.021,165,2.967,171,2.6,251,4.008,272,0.964,345,2.6,377,2.248,399,3.061,449,2.813,467,3.061,528,2.413,554,2.6,575,2.248,670,2.879,683,3.061,771,1.618,1271,4.235,1373,2.813,1432,2.413,1507,3.36,1553,3.903,1563,3.734,1574,3.36,1582,4.454,1657,4.235,1711,3.734,1726,3.734,1791,4.235,1862,3.734,2092,4.235,2113,4.235,2129,3.36,2141,3.734,2257,3.061,2853,4.235,3104,6.739,3105,4.996,3106,6.368,3107,4.996,3108,6.739,3109,6.838,3110,6.838,3111,4.996,3112,5.959,3113,4.996,3114,4.996,3115,4.996,3116,5.959,3117,4.996,3118,4.996,3119,6.368,3120,4.996,3121,4.996,3122,4.996,3123,4.996,3124,6.368,3125,4.996,3126,4.996,3127,4.996,3128,4.996,3129,4.996,3130,4.996,3131,4.996,3132,4.996,3133,5.959,3134,6.368,3135,4.996,3136,4.996,3137,4.996,3138,4.996,3139,6.368,3140,4.996,3141,6.838,3142,4.996,3143,5.959,3144,4.996,3145,4.996,3146,4.996,3147,4.996,3148,4.996,3149,4.996,3150,4.996]],["title/modules.html",[3151,3.986]],["body/modules.html",[48,0.022,143,0.022,144,0.022,3151,4.783]],["title/overview.html",[1574,3.163]],["body/overview.html",[2,1.407,48,0.022,143,0.022,144,0.022,145,3.766,201,2.201,367,2.705,1005,1.703,1574,3.766,2244,4.747,3152,5.599,3153,5.599]],["title/properties.html",[26,0.508,3087,2.445]],["body/properties.html",[26,0.689,48,0.023,143,0.022,144,0.022,2141,4.205,3154,5.626]],["title/miscellaneous/variables.html",[2009,3.1,3100,1.94]],["body/miscellaneous/variables.html",[15,0.955,25,0.259,48,0.025,50,0.303,60,0.765,61,0.826,72,2.938,143,0.022,144,0.022,908,2.229,1029,4.498,1352,4.498,1406,3.784,1573,3.966,2009,3.966,2111,4.498,3040,4.498,3042,5.234,3100,3.569,3155,5.306,3156,5.306,3157,5.306,3158,5.306,3159,5.306,3160,5.306,3161,5.306,3162,5.306,3163,5.306,3164,5.306,3165,5.306,3166,5.306,3167,5.306,3168,5.306,3169,5.306,3170,5.306,3171,5.306,3172,5.306,3173,5.306,3174,5.306,3175,5.306,3176,5.306,3177,5.306,3178,5.306,3179,5.306,3180,5.306,3181,5.306,3182,5.306,3183,5.306,3184,5.306,3185,5.306,3186,5.306]]],"invertedIndex":[["",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":478,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":3154,"title":{},"body":{"properties.html":{}}}],["0.05",{"_index":2409,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.15.0",{"_index":3099,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":2461,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.2s",{"_index":951,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["0.3",{"_index":1034,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.3s",{"_index":1035,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.4",{"_index":1038,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.5s",{"_index":1370,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["0.6",{"_index":2445,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.7s",{"_index":1883,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["0.8s",{"_index":2472,"title":{},"body":{"components/SignupComponent.html":{}}}],["0/1",{"_index":3043,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3085,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3034,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":974,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0038ff",{"_index":388,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["007cee",{"_index":1011,"title":{},"body":{"components/ContactListComponent.html":{}}}],["00bcd4",{"_index":509,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0118acff",{"_index":521,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0288d1",{"_index":522,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["049484ff",{"_index":524,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["084c6bff",{"_index":526,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0px",{"_index":2408,"title":{},"body":{"components/SignupComponent.html":{}}}],["1",{"_index":1005,"title":{"interfaces/Subtask-1.html":{}},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":2661,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["1.1",{"_index":2077,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.2",{"_index":2087,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.5vw",{"_index":975,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1/1",{"_index":3075,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":3072,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2290,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["10/10",{"_index":3080,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":908,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":1029,"title":{},"body":{"components/ContactListComponent.html":{},"miscellaneous/variables.html":{}}}],["1000px",{"_index":1013,"title":{},"body":{"components/ContactListComponent.html":{}}}],["100dvh",{"_index":2394,"title":{},"body":{"components/SignupComponent.html":{}}}],["100px",{"_index":913,"title":{},"body":{"components/ContactListComponent.html":{}}}],["10px",{"_index":990,"title":{},"body":{"components/ContactListComponent.html":{}}}],["11",{"_index":3153,"title":{},"body":{"overview.html":{}}}],["11/25",{"_index":3084,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":1407,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["12/13",{"_index":3065,"title":{},"body":{"coverage.html":{}}}],["120px",{"_index":2460,"title":{},"body":{"components/SignupComponent.html":{}}}],["12px",{"_index":1004,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["12vw",{"_index":938,"title":{},"body":{"components/ContactListComponent.html":{}}}],["13/15",{"_index":3070,"title":{},"body":{"coverage.html":{}}}],["13/17",{"_index":3033,"title":{},"body":{"coverage.html":{}}}],["13px",{"_index":2465,"title":{},"body":{"components/SignupComponent.html":{}}}],["1440px",{"_index":2393,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":2446,"title":{},"body":{"components/SignupComponent.html":{}}}],["15/22",{"_index":3050,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":984,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["16/17",{"_index":3063,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":949,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["17",{"_index":1814,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["17/18",{"_index":3068,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":976,"title":{},"body":{"components/ContactListComponent.html":{}}}],["18",{"_index":1408,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["18/19",{"_index":3052,"title":{},"body":{"coverage.html":{}}}],["18/31",{"_index":3058,"title":{},"body":{"coverage.html":{}}}],["180px",{"_index":2404,"title":{},"body":{"components/SignupComponent.html":{}}}],["18px",{"_index":2443,"title":{},"body":{"components/SignupComponent.html":{}}}],["19",{"_index":3152,"title":{},"body":{"overview.html":{}}}],["19.2.0",{"_index":3091,"title":{},"body":{"dependencies.html":{}}}],["19.2.12",{"_index":3105,"title":{},"body":{"index.html":{}}}],["19.2.14",{"_index":3089,"title":{},"body":{"dependencies.html":{}}}],["19/20",{"_index":3060,"title":{},"body":{"coverage.html":{}}}],["19/21",{"_index":3078,"title":{},"body":{"coverage.html":{}}}],["19/30",{"_index":3054,"title":{},"body":{"coverage.html":{}}}],["190px",{"_index":1014,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1976d2",{"_index":517,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["1:703986298510:web:8cb9707daf583f2153a3df",{"_index":3166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1fd7c1",{"_index":386,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["1px",{"_index":980,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["1rem",{"_index":2417,"title":{},"body":{"components/SignupComponent.html":{}}}],["1vw",{"_index":983,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2",{"_index":1630,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["2.1",{"_index":2098,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.2",{"_index":2106,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.3.0",{"_index":3097,"title":{},"body":{"dependencies.html":{}}}],["2.5vh",{"_index":2416,"title":{},"body":{"components/SignupComponent.html":{}}}],["2.5vw",{"_index":948,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2/3",{"_index":3082,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3071,"title":{},"body":{"coverage.html":{}}}],["20/23",{"_index":3062,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":1428,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["200ms",{"_index":1546,"title":{},"body":{"components/HeaderComponent.html":{}}}],["2025",{"_index":1815,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["20px",{"_index":973,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2196f3",{"_index":505,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["21px",{"_index":1026,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22.5px",{"_index":940,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22391",{"_index":1696,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["23/24",{"_index":3073,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":935,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["25/35",{"_index":3046,"title":{},"body":{"coverage.html":{}}}],["26/27",{"_index":3056,"title":{},"body":{"coverage.html":{}}}],["26px",{"_index":2436,"title":{},"body":{"components/SignupComponent.html":{}}}],["28/36",{"_index":3037,"title":{},"body":{"coverage.html":{}}}],["28px",{"_index":2438,"title":{},"body":{"components/SignupComponent.html":{}}}],["29abe2",{"_index":1036,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2a3647",{"_index":993,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2px",{"_index":995,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2rem",{"_index":2426,"title":{},"body":{"components/SignupComponent.html":{}}}],["2vw",{"_index":964,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["3",{"_index":1196,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["3.1",{"_index":2132,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.1",{"_index":2134,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.2",{"_index":2140,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.3",{"_index":2151,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3/3",{"_index":3069,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3039,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":3035,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1352,"title":{},"body":{"injectables/DragDropManager.html":{},"miscellaneous/variables.html":{}}}],["3000",{"_index":1240,"title":{},"body":{"components/ContactsComponent.html":{}}}],["30px",{"_index":1025,"title":{},"body":{"components/ContactListComponent.html":{}}}],["32px",{"_index":1002,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["33px",{"_index":2437,"title":{},"body":{"components/SignupComponent.html":{}}}],["352px",{"_index":936,"title":{},"body":{"components/ContactListComponent.html":{}}}],["360",{"_index":2710,"title":{},"body":{"components/SummaryComponent.html":{}}}],["36px",{"_index":977,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["388e3c",{"_index":516,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3f51b5",{"_index":513,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3px",{"_index":2432,"title":{},"body":{"components/SignupComponent.html":{}}}],["3vw",{"_index":934,"title":{},"body":{"components/ContactListComponent.html":{}}}],["4",{"_index":1649,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["4.1",{"_index":2195,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.2",{"_index":2205,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.3",{"_index":2212,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4",{"_index":2220,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.1",{"_index":2221,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.2",{"_index":2227,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4/4",{"_index":3079,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3067,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":971,"title":{},"body":{"components/ContactListComponent.html":{}}}],["400px",{"_index":2422,"title":{},"body":{"components/SignupComponent.html":{}}}],["406px",{"_index":2401,"title":{},"body":{"components/SignupComponent.html":{}}}],["40px",{"_index":2397,"title":{},"body":{"components/SignupComponent.html":{}}}],["44",{"_index":3083,"title":{},"body":{"coverage.html":{}}}],["44/59",{"_index":3031,"title":{},"body":{"coverage.html":{}}}],["440px",{"_index":2412,"title":{},"body":{"components/SignupComponent.html":{}}}],["44px",{"_index":2458,"title":{},"body":{"components/SignupComponent.html":{}}}],["456px",{"_index":910,"title":{},"body":{"components/ContactListComponent.html":{}}}],["45px",{"_index":1003,"title":{},"body":{"components/ContactListComponent.html":{}}}],["46px",{"_index":1030,"title":{},"body":{"components/ContactListComponent.html":{}}}],["48px",{"_index":2402,"title":{},"body":{"components/SignupComponent.html":{}}}],["4caf50",{"_index":507,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["4px",{"_index":1001,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["4vw",{"_index":954,"title":{},"body":{"components/ContactListComponent.html":{}}}],["5",{"_index":1406,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"miscellaneous/variables.html":{}}}],["5/5",{"_index":3074,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1000,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["500",{"_index":1429,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["500px",{"_index":2414,"title":{},"body":{"components/SignupComponent.html":{}}}],["5191daff",{"_index":511,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["536px",{"_index":2425,"title":{},"body":{"components/SignupComponent.html":{}}}],["560px",{"_index":2413,"title":{},"body":{"components/SignupComponent.html":{}}}],["56px",{"_index":939,"title":{},"body":{"components/ContactListComponent.html":{}}}],["58",{"_index":3057,"title":{},"body":{"coverage.html":{}}}],["5c0582ff",{"_index":518,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["5vw",{"_index":2411,"title":{},"body":{"components/SignupComponent.html":{}}}],["6",{"_index":1695,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["6/6",{"_index":3076,"title":{},"body":{"coverage.html":{}}}],["600px",{"_index":2420,"title":{},"body":{"components/SignupComponent.html":{}}}],["6125f",{"_index":3164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebaseapp.com",{"_index":3172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebasestorage.app",{"_index":3168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["63",{"_index":3053,"title":{},"body":{"coverage.html":{}}}],["64px",{"_index":2400,"title":{},"body":{"components/SignupComponent.html":{}}}],["650px",{"_index":2419,"title":{},"body":{"components/SignupComponent.html":{}}}],["65dvh",{"_index":2418,"title":{},"body":{"components/SignupComponent.html":{}}}],["66",{"_index":3081,"title":{},"body":{"coverage.html":{}}}],["666",{"_index":2462,"title":{},"body":{"components/SignupComponent.html":{}}}],["68",{"_index":3049,"title":{},"body":{"coverage.html":{}}}],["6bb604ff",{"_index":527,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["6px",{"_index":1037,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["7",{"_index":2244,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"overview.html":{}}}],["7.8.0",{"_index":3095,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":2435,"title":{},"body":{"components/SignupComponent.html":{}}}],["703986298510",{"_index":3174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["71",{"_index":3045,"title":{},"body":{"coverage.html":{}}}],["72px",{"_index":2399,"title":{},"body":{"components/SignupComponent.html":{}}}],["74",{"_index":3030,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3038,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":3032,"title":{},"body":{"coverage.html":{}}}],["768px",{"_index":2398,"title":{},"body":{"components/SignupComponent.html":{}}}],["77",{"_index":3036,"title":{},"body":{"coverage.html":{}}}],["780px",{"_index":1016,"title":{},"body":{"components/ContactListComponent.html":{}}}],["8",{"_index":1917,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["8/9",{"_index":3048,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3066,"title":{},"body":{"coverage.html":{}}}],["80px",{"_index":923,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["86",{"_index":3061,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":3047,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":978,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["9",{"_index":2280,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["90",{"_index":3077,"title":{},"body":{"coverage.html":{}}}],["90vw",{"_index":2421,"title":{},"body":{"components/SignupComponent.html":{}}}],["92",{"_index":3064,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":3051,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":3059,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":3055,"title":{},"body":{"coverage.html":{}}}],["96px",{"_index":2463,"title":{},"body":{"components/SignupComponent.html":{}}}],["9c27b0",{"_index":504,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["9px",{"_index":920,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.dateobj!.gettime",{"_index":1460,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["a.key.localecompare(b.key",{"_index":896,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.name.localecompare(b.name",{"_index":895,"title":{},"body":{"components/ContactListComponent.html":{}}}],["absolute",{"_index":998,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["abstractcontrol",{"_index":459,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["abuses",{"_index":2289,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accent",{"_index":2433,"title":{},"body":{"components/SignupComponent.html":{}}}],["accept",{"_index":2389,"title":{},"body":{"components/SignupComponent.html":{}}}],["acceptable",{"_index":2235,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["acceptance",{"_index":1705,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["access",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["accessing",{"_index":1707,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accessors",{"_index":2681,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["accidental",{"_index":1276,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["accordance",{"_index":1747,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accordingly",{"_index":1305,"title":{},"body":{"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["account",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["accounts",{"_index":2258,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accuracy",{"_index":1618,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["acknowledge",{"_index":1709,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["acquisition",{"_index":2199,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["act",{"_index":2075,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["action",{"_index":1275,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["actions",{"_index":1300,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["activated",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{}}}],["active",{"_index":708,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["activities",{"_index":1751,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["activity",{"_index":2156,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["actual_component",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["add",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["add/edit",{"_index":2015,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["addcontact",{"_index":1100,"title":{},"body":{"injectables/ContactService.html":{}}}],["addcontact(newcontact",{"_index":555,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc",{"_index":455,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(contactsref",{"_index":557,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc(subtasksref",{"_index":2624,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(tasksref",{"_index":2619,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["added",{"_index":553,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addedcontact",{"_index":647,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["adding",{"_index":1638,"title":{},"body":{"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["additional",{"_index":1657,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["addnewcontact",{"_index":635,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["addnewcontact(contact",{"_index":668,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["address",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["addresses",{"_index":2253,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adds",{"_index":551,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addsubtask",{"_index":2520,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/TaskService.html":{}}}],["addsubtask(colid",{"_index":2621,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtask",{"_index":2998,"title":{},"body":{"injectables/TaskService.html":{}}}],["addtask(newtask",{"_index":2616,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtaskcomponent",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["adequate",{"_index":2210,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adjust",{"_index":1157,"title":{},"body":{"components/ContactsComponent.html":{}}}],["advertising",{"_index":2284,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["advised",{"_index":1788,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["affiliates",{"_index":1797,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["again",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["against",{"_index":1803,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["agents",{"_index":1801,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["agree",{"_index":1710,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["aizasyawyou260exmo3445mltsqcjzrheg6aq9a",{"_index":3170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["akademie",{"_index":1585,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["align",{"_index":942,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["all.slice(4",{"_index":2818,"title":{},"body":{"components/TaskComponent.html":{}}}],["allowed",{"_index":572,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["allows",{"_index":1954,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["along",{"_index":2744,"title":{},"body":{"components/TaskComponent.html":{}}}],["alphabetical",{"_index":851,"title":{},"body":{"components/ContactListComponent.html":{}}}],["alphabetically",{"_index":804,"title":{},"body":{"components/ContactListComponent.html":{}}}],["already",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"interfaces/UserData.html":{}}}],["amendments",{"_index":1715,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["amp",{"_index":1725,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["analysis",{"_index":2197,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["analytics",{"_index":2192,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["analyzed",{"_index":1440,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["and/or",{"_index":1811,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["angular",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["angular's",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{}}}],["angular/animations",{"_index":1218,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SummaryComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":3090,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/drag",{"_index":1317,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["angular/common",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":3092,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":3093,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/auth",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["angular/fire/firestore",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["angular/forms",{"_index":461,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":3094,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["animate",{"_index":1217,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["animate('1.1s",{"_index":1944,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["animate('1.5s",{"_index":1369,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["animate('250ms",{"_index":1224,"title":{},"body":{"components/ContactsComponent.html":{}}}],["animate('2s",{"_index":1882,"title":{},"body":{"components/LoginComponent.html":{}}}],["animated",{"_index":2690,"title":{},"body":{"components/SummaryComponent.html":{}}}],["animates",{"_index":1421,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["animation",{"_index":1158,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["animationdirection",{"_index":1140,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animationevent",{"_index":1179,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animations",{"_index":1219,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["anonymized",{"_index":2262,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["another",{"_index":1653,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["apikey",{"_index":3169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["app.component.html",{"_index":22,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":3042,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appear",{"_index":1940,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["appearance",{"_index":2450,"title":{},"body":{"components/SignupComponent.html":{}}}],["appid",{"_index":3165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applicable",{"_index":699,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["application",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"index.html":{}}}],["applicationconfig",{"_index":3156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":1644,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["arguments",{"_index":1499,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["arising",{"_index":1790,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["array",{"_index":538,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["array.isarray(subtasklist",{"_index":2799,"title":{},"body":{"components/TaskComponent.html":{}}}],["arrays",{"_index":809,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["artifacts",{"_index":3127,"title":{},"body":{"index.html":{}}}],["ascending",{"_index":2944,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["aside",{"_index":1738,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ask",{"_index":2135,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["aspect",{"_index":1727,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["aspects",{"_index":1619,"title":{},"body":{"components/HelpComponent.html":{}}}],["asset",{"_index":2224,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["assign",{"_index":1095,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["assigned",{"_index":450,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["assignedto",{"_index":2592,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["assignees",{"_index":1647,"title":{},"body":{"components/HelpComponent.html":{}}}],["associated",{"_index":1741,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["assume",{"_index":2241,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["async",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["attaches",{"_index":1163,"title":{},"body":{"components/ContactsComponent.html":{}}}],["attempt",{"_index":1851,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["attempts",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["auth",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["auth.service",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["auth/email",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/invalid",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/network",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/too",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/user",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/weak",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/wrong",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["authdomain",{"_index":3171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":2169,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["authenticated",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["authentication",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["authguard",{"_index":146,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["authinitialized",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["authservice",{"_index":158,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["auto",{"_index":917,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["automatic",{"_index":1290,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["automatically",{"_index":449,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["availability",{"_index":1616,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["available",{"_index":399,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"index.html":{}}}],["avatar",{"_index":499,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["avatarcolors",{"_index":503,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["avoid",{"_index":574,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["await",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["awaitfeedback",{"_index":2884,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["awaitfeedbacklist",{"_index":1331,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["awaiting",{"_index":2716,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["awaitingfeedbackcount",{"_index":1382,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b",{"_index":894,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["b.dateobj!.gettime",{"_index":1461,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b3c511ff",{"_index":514,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["back",{"_index":1165,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["backend",{"_index":2270,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["background",{"_index":924,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["backgroundvisible",{"_index":1141,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["based",{"_index":609,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["beacons",{"_index":2153,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["before",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["behalf",{"_index":2125,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["behavior",{"_index":1990,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskDetailsComponent.html":{}}}],["behaviorsubject",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["behaviorsubject(false",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["behaviorsubject(null",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["behind",{"_index":1206,"title":{},"body":{"components/ContactsComponent.html":{}}}],["being",{"_index":495,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["belonging",{"_index":2587,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["benefit",{"_index":1575,"title":{},"body":{"components/HelpComponent.html":{}}}],["best",{"_index":1613,"title":{},"body":{"components/HelpComponent.html":{}}}],["better",{"_index":757,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["between",{"_index":1201,"title":{},"body":{"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["billboard",{"_index":1589,"title":{},"body":{"components/HelpComponent.html":{}}}],["block",{"_index":1022,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["board",{"_index":1623,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{}}}],["board'},{'name",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["boardcomponent",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["boolean",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["bootcamp",{"_index":1583,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["border",{"_index":979,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["both",{"_index":2122,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["bottom",{"_index":922,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["bound",{"_index":2767,"title":{},"body":{"components/TaskComponent.html":{}}}],["box",{"_index":1031,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["breach",{"_index":1812,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["break",{"_index":2983,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["brightness(0",{"_index":1042,"title":{},"body":{"components/ContactListComponent.html":{}}}],["browser",{"_index":2129,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"dependencies.html":{},"index.html":{}}}],["browsing",{"_index":2116,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["btn",{"_index":931,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["build",{"_index":3124,"title":{},"body":{"index.html":{}}}],["buildcontactfromform",{"_index":636,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["builder",{"_index":653,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["builds",{"_index":672,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["buildthis",{"_index":3125,"title":{},"body":{"index.html":{}}}],["built",{"_index":1577,"title":{},"body":{"components/HelpComponent.html":{}}}],["business",{"_index":1609,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["button",{"_index":929,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["c.email",{"_index":867,"title":{},"body":{"components/ContactListComponent.html":{}}}],["c.id",{"_index":1089,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["c.name).join",{"_index":2820,"title":{},"body":{"components/TaskComponent.html":{}}}],["c.value",{"_index":412,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["c2185b",{"_index":523,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c303aaff",{"_index":520,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c44314ff",{"_index":510,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c90d0dff",{"_index":519,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calc(1.8vw",{"_index":2407,"title":{},"body":{"components/SignupComponent.html":{}}}],["calc(100",{"_index":932,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calc(100dvh",{"_index":912,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calculate",{"_index":612,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calculates",{"_index":2778,"title":{},"body":{"components/TaskComponent.html":{}}}],["callback",{"_index":1270,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["called",{"_index":1171,"title":{},"body":{"components/ContactsComponent.html":{},"components/TaskComponent.html":{}}}],["calling",{"_index":1520,"title":{},"body":{"components/HeaderComponent.html":{}}}],["campaigns",{"_index":2194,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["canactivate",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cancel",{"_index":666,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["cancels",{"_index":2518,"title":{},"body":{"interfaces/Subtask.html":{}}}],["cancelsubtask",{"_index":2519,"title":{},"body":{"interfaces/Subtask.html":{}}}],["cancelsubtaskedit",{"_index":2547,"title":{},"body":{"interfaces/Subtask.html":{}}}],["capitalize",{"_index":2670,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalize(text",{"_index":2671,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalized",{"_index":2100,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalizes",{"_index":2669,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["card",{"_index":1645,"title":{},"body":{"components/HelpComponent.html":{}}}],["cards",{"_index":1639,"title":{},"body":{"components/HelpComponent.html":{}}}],["case",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["catch",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["catch(error",{"_index":2877,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["categories",{"_index":384,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category",{"_index":366,"title":{"interfaces/Category.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["category.color",{"_index":416,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.label",{"_index":413,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.value",{"_index":408,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["categorymanager",{"_index":373,"title":{"injectables/CategoryManager.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/PriorityManager.html":{},"coverage.html":{}}}],["caution",{"_index":1665,"title":{},"body":{"components/HelpComponent.html":{}}}],["ccc",{"_index":415,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["cdk",{"_index":1301,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdk_drag_config",{"_index":3180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cdkdragdrop",{"_index":1297,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdkdragmove",{"_index":1286,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cellphone",{"_index":2118,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["center",{"_index":944,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["certain",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["change",{"_index":1267,"title":{},"body":{"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{}}}],["changed",{"_index":2318,"title":{},"body":{"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["changes",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["changes['task",{"_index":2794,"title":{},"body":{"components/TaskComponent.html":{}}}],["changes['task'].firstchange",{"_index":2795,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus",{"_index":2721,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus(status",{"_index":2752,"title":{},"body":{"components/TaskComponent.html":{}}}],["changetaskstatus",{"_index":1252,"title":{},"body":{"injectables/DragDropManager.html":{},"components/TaskComponent.html":{}}}],["changetaskstatus(taskid",{"_index":1262,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["character",{"_index":806,"title":{},"body":{"components/ContactListComponent.html":{}}}],["characters",{"_index":1918,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["check",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["checkbox",{"_index":2447,"title":{},"body":{"components/SignupComponent.html":{}}}],["checked.png",{"_index":2455,"title":{},"body":{"components/SignupComponent.html":{}}}],["checkiftouchdevice",{"_index":1826,"title":{},"body":{"components/LoginComponent.html":{}}}],["checks",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"interfaces/UserData.html":{}}}],["choices",{"_index":2175,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["choose",{"_index":3147,"title":{},"body":{"index.html":{}}}],["city",{"_index":2137,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["claim",{"_index":1804,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["clamp(12px",{"_index":933,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["clamp(14px",{"_index":972,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(20px",{"_index":953,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(24px",{"_index":2415,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(32px",{"_index":2406,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(440px",{"_index":2410,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(48px",{"_index":937,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(4px",{"_index":982,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(8px",{"_index":963,"title":{},"body":{"components/ContactListComponent.html":{}}}],["class",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["clean",{"_index":2639,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["cleans",{"_index":685,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clear",{"_index":715,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{}}}],["clearall",{"_index":420,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/Subtask.html":{}}}],["cleareditingtask",{"_index":2668,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["clearinputs",{"_index":637,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clears",{"_index":418,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["clearselection",{"_index":590,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["cli",{"_index":3104,"title":{},"body":{"index.html":{}}}],["click",{"_index":1510,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{}}}],["clicking",{"_index":1660,"title":{},"body":{"components/HelpComponent.html":{}}}],["clicks",{"_index":1504,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["close",{"_index":1190,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closed",{"_index":664,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closedetailsoverlay",{"_index":1995,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedetailsoverlay(event",{"_index":2006,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedotsmenu",{"_index":2732,"title":{},"body":{"components/TaskComponent.html":{}}}],["closeoverlay",{"_index":648,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closes",{"_index":405,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closetaskdetails",{"_index":2839,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["closing",{"_index":677,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closure",{"_index":2030,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["cloud",{"_index":2266,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["code",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["codes",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["colid",{"_index":2620,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collaborate",{"_index":1631,"title":{},"body":{"components/HelpComponent.html":{}}}],["collect",{"_index":2146,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collected",{"_index":2127,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collecting",{"_index":2131,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collection",{"_index":453,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.firestore",{"_index":531,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.gettasksref",{"_index":2601,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["color",{"_index":371,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["colorerror",{"_index":2464,"title":{},"body":{"components/SignupComponent.html":{}}}],["colors",{"_index":500,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["column",{"_index":2395,"title":{},"body":{"components/SignupComponent.html":{}}}],["combinelatest",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{}}}],["come",{"_index":3145,"title":{},"body":{"index.html":{}}}],["comes",{"_index":2150,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["comma",{"_index":1066,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["command",{"_index":3139,"title":{},"body":{"index.html":{}}}],["commercially",{"_index":2234,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["commonmodule",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["company",{"_index":2110,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["compare",{"_index":825,"title":{},"body":{"components/ContactListComponent.html":{}}}],["compile",{"_index":3126,"title":{},"body":{"index.html":{}}}],["complete",{"_index":2092,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["completed",{"_index":1182,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{}}}],["completion",{"_index":2554,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["compliance",{"_index":2181,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{},"overview.html":{}}}],["computer",{"_index":2117,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["conditions",{"_index":1712,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["confirm",{"_index":2334,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmation",{"_index":2315,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask.html":{}}}],["confirmcontrol",{"_index":2371,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmcontrol?.dirty",{"_index":2379,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmcontrol?.touched",{"_index":2376,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmpassword",{"_index":2352,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirms",{"_index":2514,"title":{},"body":{"interfaces/Subtask.html":{}}}],["confirmsubtask(event",{"_index":2516,"title":{},"body":{"interfaces/Subtask.html":{}}}],["connection",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"components/LegalNoticeComponent.html":{},"interfaces/UserData.html":{}}}],["consent",{"_index":2204,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["consequential",{"_index":1779,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["considered",{"_index":1538,"title":{},"body":{"components/HeaderComponent.html":{}}}],["consistent",{"_index":608,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["console.error('error",{"_index":869,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["console.error(err",{"_index":561,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["console.log(err",{"_index":606,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["console.warn(`unknown",{"_index":2987,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["const",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["constructor",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["constructor(auth",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["constructor(categorymanager",{"_index":2050,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["constructor(contactservice",{"_index":790,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{}}}],["constructor(fb",{"_index":1835,"title":{},"body":{"components/LoginComponent.html":{}}}],["constructor(firestore",{"_index":1105,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["constructor(form",{"_index":649,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(navigationservice",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["constructor(private",{"_index":720,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["constructor(router",{"_index":1959,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{}}}],["constructor(taskservice",{"_index":1259,"title":{},"body":{"injectables/DragDropManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["constructs",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"components/SidebarComponent.html":{}}}],["contact",{"_index":110,"title":{"interfaces/Contact.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contact's",{"_index":826,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["contact.email",{"_index":880,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact.id",{"_index":884,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["contact.name",{"_index":888,"title":{},"body":{"components/ContactListComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contact.name).join",{"_index":1099,"title":{},"body":{"injectables/ContactManager.html":{}}}],["contact.name.charat(0).touppercase",{"_index":890,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact?.email",{"_index":902,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact?.name",{"_index":900,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactdetailscomponent",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactform",{"_index":631,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactformcomponent",{"_index":112,"title":{"components/ContactFormComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactid",{"_index":1114,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacting",{"_index":2218,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["contactlist",{"_index":2720,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactlistcomponent",{"_index":114,"title":{"components/ContactListComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactmanager",{"_index":1044,"title":{"injectables/ContactManager.html":{}},"body":{"injectables/ContactManager.html":{},"coverage.html":{}}}],["contactname",{"_index":610,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactref",{"_index":616,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contacts",{"_index":529,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacts'},{'name",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacts.component.html",{"_index":1138,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.component.scss",{"_index":1139,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.filter((contact",{"_index":1086,"title":{},"body":{"injectables/ContactManager.html":{}}}],["contacts.filter(contact",{"_index":887,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.find(c",{"_index":866,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.push",{"_index":546,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactscomponent",{"_index":116,"title":{"components/ContactsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactselected",{"_index":789,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice",{"_index":484,"title":{"injectables/ContactService.html":{}},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactservice.getinitials(contact.name",{"_index":2824,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactservice.getinitials(contact?.name",{"_index":899,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice.getinitials(contacttoedit.name",{"_index":759,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactsref",{"_index":541,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactssubscription",{"_index":775,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacttoedit",{"_index":632,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contact’s",{"_index":611,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contain",{"_index":959,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["container",{"_index":1021,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{}}}],["containerid",{"_index":1282,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["containers",{"_index":1311,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["containing",{"_index":580,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["contains",{"_index":466,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":946,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["context",{"_index":1306,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["contextual",{"_index":2739,"title":{},"body":{"components/TaskComponent.html":{}}}],["contracts",{"_index":2179,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["control",{"_index":469,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["control.errors",{"_index":1912,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors?.['email",{"_index":2382,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors?.['minlength",{"_index":2383,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors?.['pattern",{"_index":2386,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors?.['required",{"_index":2381,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors?.['requiredtrue",{"_index":2388,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['email",{"_index":1914,"title":{},"body":{"components/LoginComponent.html":{}}}],["control.errors['minlength",{"_index":1916,"title":{},"body":{"components/LoginComponent.html":{}}}],["control.errors['minlength'].requiredlength",{"_index":2385,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['required",{"_index":1913,"title":{},"body":{"components/LoginComponent.html":{}}}],["control.touched",{"_index":1911,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.value",{"_index":475,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["controls",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["conversion",{"_index":1471,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["convert",{"_index":2650,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["convertdate",{"_index":2833,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(date",{"_index":2652,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(task.date",{"_index":2881,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["converts",{"_index":1464,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["cookie",{"_index":2171,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["cookies",{"_index":2112,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["copy",{"_index":1967,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["copyrighted",{"_index":1742,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["corresponding",{"_index":1284,"title":{},"body":{"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["corresponds",{"_index":1514,"title":{},"body":{"components/HeaderComponent.html":{}}}],["cost",{"_index":1807,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["count",{"_index":1384,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counts",{"_index":1383,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counttasksbystatus",{"_index":2674,"title":{},"body":{"components/SummaryComponent.html":{}}}],["counttasksbystatus(tasks",{"_index":1385,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["coverage",{"_index":3025,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":766,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{}}}],["created",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["createdat",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createerror",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creates",{"_index":698,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["createuserwithemailandpassword",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createuserwithemailandpassword(this.auth",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creating",{"_index":654,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["creation",{"_index":2265,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{}}}],["credentials",{"_index":1865,"title":{},"body":{"components/LoginComponent.html":{}}}],["crud",{"_index":656,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["current",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["current.id",{"_index":2568,"title":{},"body":{"interfaces/Subtask.html":{}}}],["currently",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["currentsubtasks",{"_index":2562,"title":{},"body":{"interfaces/Subtask.html":{}}}],["currentsubtasks.some(current",{"_index":2567,"title":{},"body":{"interfaces/Subtask.html":{}}}],["currenttext",{"_index":2534,"title":{},"body":{"interfaces/Subtask.html":{}}}],["currentuser",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["currentuser.uid",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["currentuseremail",{"_index":776,"title":{},"body":{"components/ContactListComponent.html":{}}}],["currentusersubject",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["cursor",{"_index":987,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["custom",{"_index":462,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["d",{"_index":2714,"title":{},"body":{"components/SummaryComponent.html":{}}}],["damage",{"_index":1806,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["damages",{"_index":1781,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["dark",{"_index":927,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["data",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["database",{"_index":2261,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["date",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["date().gethours",{"_index":1405,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date(date",{"_index":1475,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date(date).gettime",{"_index":2976,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date.getfullyear",{"_index":2663,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["date.gettime",{"_index":2975,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date.todate",{"_index":1474,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date.todate().gettime",{"_index":2974,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date?.todate",{"_index":2973,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["dateobj",{"_index":1454,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["dates",{"_index":1447,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["day",{"_index":2657,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["day}/${month}/${year",{"_index":2664,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["dd/mm/yyyy",{"_index":2651,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["ddg",{"_index":2076,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["deadline",{"_index":1431,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["decision",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{}}}],["decoration",{"_index":2457,"title":{},"body":{"components/SignupComponent.html":{}}}],["decorators",{"_index":1524,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["dedicated",{"_index":1578,"title":{},"body":{"components/HelpComponent.html":{}}}],["default",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":1794,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["defined",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["definitions",{"_index":2097,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["delay",{"_index":1273,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["delayed",{"_index":1854,"title":{},"body":{"components/LoginComponent.html":{}}}],["delays",{"_index":1183,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{}}}],["delegates",{"_index":2321,"title":{},"body":{"components/SignupComponent.html":{}}}],["delete",{"_index":603,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deleteaccount",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deletecontact",{"_index":638,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["deletecontact(docid",{"_index":604,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deleted",{"_index":2161,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{}}}],["deletedoc",{"_index":457,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(docref).catch(err",{"_index":2635,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(this.getsinglecontactsref(docid)).catch((err",{"_index":605,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deletedoc(this.getsingletaskref(docid)).catch(console.error",{"_index":2637,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletes",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["deletesubtask",{"_index":2999,"title":{},"body":{"injectables/TaskService.html":{}}}],["deletesubtask(id",{"_index":2523,"title":{},"body":{"interfaces/Subtask.html":{}}}],["deletesubtask(taskid",{"_index":2634,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletesubtasks(taskid",{"_index":2569,"title":{},"body":{"interfaces/Subtask.html":{}}}],["deletetask",{"_index":2834,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deletetask(docid",{"_index":2636,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletetask(event",{"_index":2850,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["deleteuser",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleteuser(user",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleting",{"_index":1661,"title":{},"body":{"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletion",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["demand",{"_index":1805,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["dependencies",{"_index":3088,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":1399,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["describes",{"_index":2079,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["describing",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["description",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["descriptive",{"_index":2323,"title":{},"body":{"components/SignupComponent.html":{}}}],["deselect",{"_index":1076,"title":{},"body":{"injectables/ContactManager.html":{}}}],["design",{"_index":1728,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["designed",{"_index":1576,"title":{},"body":{"components/HelpComponent.html":{}}}],["desktop",{"_index":1202,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["destroy",{"_index":2889,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["destroyed",{"_index":1859,"title":{},"body":{"components/LoginComponent.html":{}}}],["destruction",{"_index":688,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["detail",{"_index":1168,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["detailed",{"_index":2853,"title":{},"body":{"components/TaskDetailsComponent.html":{},"index.html":{}}}],["details",{"_index":140,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details'},{'name",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component",{"_index":1213,"title":{},"body":{"components/ContactsComponent.html":{}}}],["details.component.html",{"_index":2830,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.scss",{"_index":2831,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts",{"_index":2829,"title":{},"body":{"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["details.component.ts:108",{"_index":2849,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:117",{"_index":2862,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:131",{"_index":2851,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:148",{"_index":2859,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:162",{"_index":2854,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:174",{"_index":2852,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:41",{"_index":2845,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:46",{"_index":2846,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:51",{"_index":2847,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:56",{"_index":2844,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:61",{"_index":2843,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:66",{"_index":2865,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:71",{"_index":2842,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:81",{"_index":2866,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:82",{"_index":2864,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:89",{"_index":2855,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:97",{"_index":2857,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details/contact",{"_index":1212,"title":{},"body":{"components/ContactsComponent.html":{},"coverage.html":{}}}],["details/task",{"_index":2828,"title":{},"body":{"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["detecting",{"_index":1542,"title":{},"body":{"components/HeaderComponent.html":{}}}],["detection",{"_index":1861,"title":{},"body":{"components/LoginComponent.html":{}}}],["detects",{"_index":1503,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/TaskComponent.html":{}}}],["determine",{"_index":37,"title":{},"body":{"components/AppComponent.html":{}}}],["determines",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["determining",{"_index":2692,"title":{},"body":{"components/SummaryComponent.html":{}}}],["developed",{"_index":1721,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["developer",{"_index":1584,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["development",{"_index":1582,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["device",{"_index":1839,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["devices",{"_index":1423,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["diagnostic",{"_index":2145,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["diagnostics",{"_index":2149,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["different",{"_index":1310,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["digital",{"_index":2074,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["direct",{"_index":1775,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["direction",{"_index":1159,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["directive",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["directives",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["directly",{"_index":796,"title":{},"body":{"components/ContactListComponent.html":{}}}],["directors",{"_index":1800,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["directory",{"_index":3129,"title":{},"body":{"index.html":{}}}],["dirty",{"_index":2378,"title":{},"body":{"components/SignupComponent.html":{}}}],["disabled",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["disclaimer",{"_index":1759,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["disclose",{"_index":2229,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["disclosure",{"_index":2081,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["display",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"interfaces/UserData.html":{}}}],["displayed",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["displayname",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["displays",{"_index":1852,"title":{},"body":{"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["disputes",{"_index":2215,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["dist",{"_index":3128,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":2913,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distributes",{"_index":2912,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distributetasksbystatus",{"_index":2890,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distributetasksbystatus(tasks",{"_index":2910,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distribution",{"_index":1733,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["doc",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["doc(collection(this.firestore",{"_index":2603,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.firestore",{"_index":2631,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.getcontactsref",{"_index":536,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["doc.data",{"_index":548,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc.id",{"_index":547,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docid",{"_index":534,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref",{"_index":556,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref.id",{"_index":559,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["document",{"_index":533,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{}}}],["document.queryselector('.subtask",{"_index":2537,"title":{},"body":{"interfaces/Subtask.html":{}}}],["document:click",{"_index":1494,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["document:click(event",{"_index":1500,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["documentation",{"_index":3026,"title":{},"body":{"coverage.html":{}}}],["documentdata",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["domsgen",{"_index":1704,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["done",{"_index":1334,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["donecount",{"_index":1380,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["donelist",{"_index":1333,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["don´t",{"_index":764,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["dots",{"_index":2740,"title":{},"body":{"components/TaskComponent.html":{}}}],["dr",{"_index":1691,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["drag",{"_index":1250,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dragdropmanager",{"_index":1247,"title":{"injectables/DragDropManager.html":{}},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["dragging",{"_index":1291,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["drags",{"_index":1277,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dragstartthreshold",{"_index":3182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drop",{"_index":1249,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["dropdown",{"_index":379,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{}}}],["dropped",{"_index":1283,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dropping",{"_index":1655,"title":{},"body":{"components/HelpComponent.html":{}}}],["due",{"_index":1646,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["duplicates",{"_index":2757,"title":{},"body":{"components/TaskComponent.html":{}}}],["duration",{"_index":2264,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["during",{"_index":1931,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["dynamic",{"_index":2272,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1156,"title":{},"body":{"components/ContactsComponent.html":{}}}],["e",{"_index":904,"title":{},"body":{"components/ContactListComponent.html":{}}}],["e.g",{"_index":665,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["e2e",{"_index":3142,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":3144,"title":{},"body":{"index.html":{}}}],["e91e63",{"_index":512,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["each",{"_index":1656,"title":{},"body":{"components/HelpComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["ease",{"_index":952,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["edge",{"_index":1293,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["edit",{"_index":595,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["editcontact",{"_index":496,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["editcontactsubject",{"_index":494,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["editcontactsubscription",{"_index":633,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["edited",{"_index":493,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["editing",{"_index":483,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["editingsubtaskid",{"_index":2486,"title":{},"body":{"interfaces/Subtask.html":{}}}],["editingsubtasktext",{"_index":2487,"title":{},"body":{"interfaces/Subtask.html":{}}}],["editingtask",{"_index":2596,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["edits",{"_index":2526,"title":{},"body":{"interfaces/Subtask.html":{}}}],["editsubtask(id",{"_index":2528,"title":{},"body":{"interfaces/Subtask.html":{}}}],["editsubtaskprompt(id",{"_index":2535,"title":{},"body":{"interfaces/Subtask.html":{}}}],["edittask",{"_index":2840,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["educational",{"_index":1605,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["effect",{"_index":2245,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["effective",{"_index":1591,"title":{},"body":{"components/HelpComponent.html":{}}}],["effectively",{"_index":1668,"title":{},"body":{"components/HelpComponent.html":{}}}],["efficiency",{"_index":1597,"title":{},"body":{"components/HelpComponent.html":{}}}],["el.iscompleted).length",{"_index":2801,"title":{},"body":{"components/TaskComponent.html":{}}}],["electronic",{"_index":2236,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["element",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["elementref",{"_index":1288,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{}}}],["ellipsis",{"_index":1010,"title":{},"body":{"components/ContactListComponent.html":{}}}],["elsewhere",{"_index":1508,"title":{},"body":{"components/HeaderComponent.html":{}}}],["email",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["email.trim",{"_index":746,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["emits",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["emitted",{"_index":1188,"title":{},"body":{"components/ContactsComponent.html":{}}}],["emitting",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["employees",{"_index":1802,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["empties",{"_index":2915,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["empty",{"_index":2313,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["emptyarrays",{"_index":2891,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["enabled",{"_index":1841,"title":{},"body":{"components/LoginComponent.html":{}}}],["encrypted",{"_index":2254,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["end",{"_index":3141,"title":{},"body":{"index.html":{}}}],["enforcement",{"_index":2216,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["enhancements",{"_index":1939,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["enjoy",{"_index":1677,"title":{},"body":{"components/HelpComponent.html":{}}}],["ensure",{"_index":1612,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["enter",{"_index":1915,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{}}}],["entered",{"_index":2339,"title":{},"body":{"components/SignupComponent.html":{}}}],["entity",{"_index":2130,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["entry",{"_index":694,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["err",{"_index":560,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["error",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["errorcode",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["errormessage",{"_index":1819,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["errors",{"_index":834,"title":{},"body":{"components/ContactListComponent.html":{}}}],["escape",{"_index":2553,"title":{},"body":{"interfaces/Subtask.html":{}}}],["essential",{"_index":2168,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["etc",{"_index":1648,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["evaluate",{"_index":2312,"title":{},"body":{"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["even",{"_index":1787,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["event",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.container",{"_index":1338,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.container.data",{"_index":1339,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.currentindex",{"_index":1341,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.item.data",{"_index":1319,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.key",{"_index":2551,"title":{},"body":{"interfaces/Subtask.html":{}}}],["event.pointerposition.y",{"_index":1347,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.preventdefault",{"_index":2511,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["event.previouscontainer",{"_index":1337,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previouscontainer.data",{"_index":1342,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previousindex",{"_index":1340,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.stoppropagation",{"_index":2517,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.target",{"_index":2788,"title":{},"body":{"components/TaskComponent.html":{}}}],["event.tostate",{"_index":1242,"title":{},"body":{"components/ContactsComponent.html":{}}}],["event.urlafterredirects",{"_index":96,"title":{},"body":{"components/AppComponent.html":{}}}],["eventcoalescing",{"_index":3158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":657,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["events",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["example",{"_index":3109,"title":{},"body":{"index.html":{}}}],["examples",{"_index":2166,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["excluding",{"_index":2768,"title":{},"body":{"components/TaskComponent.html":{}}}],["execute",{"_index":3135,"title":{},"body":{"index.html":{}}}],["exemplary",{"_index":1780,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["exercise",{"_index":1606,"title":{},"body":{"components/HelpComponent.html":{}}}],["exist",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["existing",{"_index":562,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["expected",{"_index":2031,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["experience",{"_index":1614,"title":{},"body":{"components/HelpComponent.html":{}}}],["expiry",{"_index":2165,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["exploring",{"_index":1622,"title":{},"body":{"components/HelpComponent.html":{}}}],["export",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["express",{"_index":1766,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["extensive",{"_index":1608,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["extra",{"_index":577,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["extracts",{"_index":1120,"title":{},"body":{"injectables/ContactService.html":{}}}],["eye",{"_index":2478,"title":{},"body":{"components/SignupComponent.html":{}}}],["f44336",{"_index":508,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["f5f5f5",{"_index":992,"title":{},"body":{"components/ContactListComponent.html":{}}}],["fab",{"_index":1020,"title":{},"body":{"components/ContactListComponent.html":{}}}],["facilitate",{"_index":2126,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["fade",{"_index":1928,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["failed",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["fails",{"_index":1871,"title":{},"body":{"components/LoginComponent.html":{}}}],["failure",{"_index":2342,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["fallback",{"_index":1516,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["fallbackerror",{"_index":1848,"title":{},"body":{"components/LoginComponent.html":{}}}],["false",{"_index":200,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["family",{"_index":966,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["fb",{"_index":1837,"title":{},"body":{"components/LoginComponent.html":{}}}],["features",{"_index":2273,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["feedback",{"_index":1332,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["feel",{"_index":1672,"title":{},"body":{"components/HelpComponent.html":{}}}],["fees",{"_index":1809,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fetches",{"_index":1113,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskDetailsComponent.html":{}}}],["fetching",{"_index":2737,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["ff5722",{"_index":515,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ff9800",{"_index":506,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ffa000",{"_index":525,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["fff",{"_index":2470,"title":{},"body":{"components/SignupComponent.html":{}}}],["ffffff",{"_index":994,"title":{},"body":{"components/ContactListComponent.html":{}}}],["field",{"_index":1845,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["fields",{"_index":573,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["files",{"_index":2113,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["fill",{"_index":1633,"title":{},"body":{"components/HelpComponent.html":{}}}],["fills",{"_index":714,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["filter",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/TaskListManager.html":{}}}],["filter(([user",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{}}}],["filter((t",{"_index":1451,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["filtered",{"_index":2921,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filtering",{"_index":2883,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filters",{"_index":2918,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filtertasksbysearchterm",{"_index":2892,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filtertasksbysearchterm(tasks",{"_index":2916,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["finalizesubmission",{"_index":639,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["find",{"_index":1269,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["finished",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/UserData.html":{}}}],["firebase",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["firebase’s",{"_index":2279,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["firestore",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["firestoretimestamp",{"_index":1357,"title":{"interfaces/FirestoreTimestamp.html":{}},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["first",{"_index":805,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{}}}],["fitness",{"_index":1770,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fixed",{"_index":1027,"title":{},"body":{"components/ContactListComponent.html":{}}}],["flag",{"_index":1513,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["flex",{"_index":941,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["flickering",{"_index":1185,"title":{},"body":{"components/ContactsComponent.html":{}}}],["flow",{"_index":1598,"title":{},"body":{"components/HelpComponent.html":{}}}],["following",{"_index":1711,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["font",{"_index":965,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["footer",{"_index":1478,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer'},{'name",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["footer.component.html",{"_index":1480,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.component.scss",{"_index":1481,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer/footer.component",{"_index":1878,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["footercomponent",{"_index":118,"title":{"components/FooterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["forget",{"_index":765,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form",{"_index":464,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"miscellaneous/functions.html":{}}}],["form'},{'name",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["form.component",{"_index":1214,"title":{},"body":{"components/ContactsComponent.html":{}}}],["form.component.html",{"_index":629,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.scss",{"_index":630,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts",{"_index":624,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{}}}],["form.component.ts:103",{"_index":695,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:114",{"_index":696,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:133",{"_index":671,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:147",{"_index":681,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:156",{"_index":701,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:167",{"_index":669,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:177",{"_index":679,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:185",{"_index":675,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:192",{"_index":678,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:33",{"_index":658,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:39",{"_index":662,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:44",{"_index":704,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:49",{"_index":707,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:54",{"_index":651,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:61",{"_index":706,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:67",{"_index":692,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:80",{"_index":711,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:94",{"_index":684,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form/contact",{"_index":623,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["format",{"_index":2655,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["formatdate",{"_index":3000,"title":{},"body":{"injectables/TaskService.html":{}}}],["formatdate(date",{"_index":2656,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["formats",{"_index":1467,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["formatted",{"_index":2649,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["formbuilder",{"_index":650,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formcontrol",{"_index":2311,"title":{},"body":{"components/SignupComponent.html":{}}}],["formgroup",{"_index":703,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formsmodule",{"_index":628,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["found",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["four",{"_index":1629,"title":{},"body":{"components/HelpComponent.html":{}}}],["frame",{"_index":2405,"title":{},"body":{"components/SignupComponent.html":{}}}],["framework",{"_index":3146,"title":{},"body":{"index.html":{}}}],["fraud",{"_index":2170,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["free",{"_index":1673,"title":{},"body":{"components/HelpComponent.html":{}}}],["friendly",{"_index":1844,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["fs12",{"_index":997,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["fs14",{"_index":2448,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs20",{"_index":2439,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs47",{"_index":2430,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":451,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["fullcontact",{"_index":558,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["function",{"_index":473,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["functionality",{"_index":2172,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["functions",{"_index":2267,"title":{"miscellaneous/functions.html":{}},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["future",{"_index":1938,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["futuretasks",{"_index":1450,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.length",{"_index":1458,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.sort((a",{"_index":1459,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks[0].dateobj",{"_index":1463,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["gap",{"_index":947,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["general",{"_index":2078,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["generate",{"_index":3119,"title":{},"body":{"index.html":{}}}],["generated",{"_index":554,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["generates",{"_index":607,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["generator",{"_index":2086,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["german",{"_index":2073,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["getalluniquecontacts",{"_index":2722,"title":{},"body":{"components/TaskComponent.html":{}}}],["getalluniquecontacts().length",{"_index":2826,"title":{},"body":{"components/TaskComponent.html":{}}}],["getanimationdirection",{"_index":1996,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getauth",{"_index":3179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getawaitfeedbacktasks",{"_index":2893,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getbackgroundvisible",{"_index":1997,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getcategories",{"_index":400,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorycolor",{"_index":414,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorytext",{"_index":410,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcleanjson",{"_index":1101,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updated",{"_index":2640,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updatedcontact",{"_index":581,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcompletedsubtaskscount",{"_index":2723,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcompletedsubtaskscount(subtasklist",{"_index":2758,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontactbyid",{"_index":1102,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactbyid(contactid",{"_index":1111,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactcolor",{"_index":1048,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["getcontactcolor(contact",{"_index":1060,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactcolor(contactname",{"_index":615,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactinitials",{"_index":1049,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactinitials(contact",{"_index":1062,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactlist",{"_index":2724,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontacts",{"_index":539,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactsref",{"_index":530,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcurrentuser",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["getcurrentuserdata",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getcurrentusername",{"_index":1489,"title":{},"body":{"components/HeaderComponent.html":{}}}],["getcurrentusername().charat(0).touppercase",{"_index":1555,"title":{},"body":{"components/HeaderComponent.html":{}}}],["getdatatoedit",{"_index":634,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["getdatevalue",{"_index":2894,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdatevalue(date",{"_index":2922,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdeletedsubtasks(currentsubtasks",{"_index":2563,"title":{},"body":{"interfaces/Subtask.html":{}}}],["getdoc",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["getdoc(contactref).then(snapshot",{"_index":618,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdoc(doc(this.firestore",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getdocs",{"_index":458,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdonetasks",{"_index":2895,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdragdelay",{"_index":1253,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["getdroptargetstatus",{"_index":1254,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["getdroptargetstatus(containerid",{"_index":1280,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["geteditingsubtaskid",{"_index":2502,"title":{},"body":{"interfaces/Subtask.html":{}}}],["geteditingsubtasktext",{"_index":2504,"title":{},"body":{"interfaces/Subtask.html":{}}}],["geteditingtask",{"_index":2667,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["geterrormessage",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["geterrormessage(errorcode",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getfielderrormessage",{"_index":2302,"title":{},"body":{"components/SignupComponent.html":{}}}],["getfielderrormessage(control",{"_index":2309,"title":{},"body":{"components/SignupComponent.html":{}}}],["getfilteredtasks",{"_index":2896,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfilteredtasks(status",{"_index":2927,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfirestore",{"_index":3176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getgreeting",{"_index":1403,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["gethistory",{"_index":1956,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getinitials",{"_index":780,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinitials(name",{"_index":797,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinprogresstasks",{"_index":2897,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getisdotsmenuopen",{"_index":2784,"title":{},"body":{"components/TaskComponent.html":{}}}],["getoverlayvisible",{"_index":1998,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getpasswordmismatchmessage",{"_index":2303,"title":{},"body":{"components/SignupComponent.html":{}}}],["getpreviousurl",{"_index":1957,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getremainingcontactnames",{"_index":1050,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["getremainingcontactnames(remainingcontacts",{"_index":1064,"title":{},"body":{"injectables/ContactManager.html":{}}}],["gets",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["getselectedcategory",{"_index":390,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getselectedcontacts",{"_index":1051,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedcontactstext",{"_index":1052,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedtask",{"_index":1999,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowaddoredittask",{"_index":2000,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowcategorydropdown",{"_index":396,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getshowcontactdropdown",{"_index":1053,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getshowsubtaskconfirmation",{"_index":2499,"title":{},"body":{"interfaces/Subtask.html":{}}}],["getshowtaskdetails",{"_index":2001,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getsinglecontactsref",{"_index":1103,"title":{},"body":{"injectables/ContactService.html":{}}}],["getsinglecontactsref(docid",{"_index":535,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getsingletaskref",{"_index":3001,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskref(docid",{"_index":2602,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtaskinput",{"_index":2496,"title":{},"body":{"interfaces/Subtask.html":{}}}],["getsubtasks",{"_index":2491,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/TaskService.html":{}}}],["getsubtasks(taskid",{"_index":2611,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtasksbytaskid",{"_index":2898,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask",{"_index":2899,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask(selectedtask",{"_index":2929,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask",{"_index":2900,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask(taskid",{"_index":2931,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksref",{"_index":3002,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsubtasksref(subcolid",{"_index":2600,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasklist",{"_index":2901,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettasks",{"_index":2605,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasksbystatus",{"_index":2902,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettasksbystatus(status",{"_index":2935,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettasksref",{"_index":2597,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getting",{"_index":3102,"title":{"index.html":{}},"body":{}}],["gettodotasks",{"_index":2903,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettotaltaskcount",{"_index":2708,"title":{},"body":{"components/SummaryComponent.html":{}}}],["getuniquecontacts",{"_index":2725,"title":{},"body":{"components/TaskComponent.html":{}}}],["getvalidationmessage",{"_index":1827,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('confirmpassword",{"_index":2391,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('email",{"_index":1920,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('name",{"_index":2390,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('password",{"_index":1921,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'confirmpassword",{"_index":2480,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'email",{"_index":1923,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'name",{"_index":2479,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'password",{"_index":1924,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(field",{"_index":1842,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["given",{"_index":800,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["glance",{"_index":2712,"title":{},"body":{"components/SummaryComponent.html":{}}}],["gmbh",{"_index":1723,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["go",{"_index":1632,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["goback",{"_index":1561,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["good",{"_index":1401,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["goodwill",{"_index":1784,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["google",{"_index":2249,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google´s",{"_index":2278,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google’s",{"_index":2274,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["gotoboard",{"_index":2675,"title":{},"body":{"components/SummaryComponent.html":{}}}],["greeting",{"_index":1378,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingshown",{"_index":1416,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingstate",{"_index":1372,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["group",{"_index":705,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["group.get('confirmpassword')?.value",{"_index":2357,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.get('password')?.value",{"_index":2356,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.key",{"_index":898,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial",{"_index":781,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial(contacts",{"_index":801,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouped",{"_index":847,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupedcontacts",{"_index":777,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouping",{"_index":818,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups",{"_index":803,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial",{"_index":891,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].push(contact",{"_index":892,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].sort((a",{"_index":893,"title":{},"body":{"components/ContactListComponent.html":{}}}],["guarantee",{"_index":1615,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["guard",{"_index":145,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guest",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["guest123",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guest@join.com",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guestemail",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guestpassword",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guide",{"_index":1570,"title":{},"body":{"components/HelpComponent.html":{}}}],["guidelines",{"_index":1714,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["h2",{"_index":2428,"title":{},"body":{"components/SignupComponent.html":{}}}],["h4",{"_index":962,"title":{},"body":{"components/ContactListComponent.html":{}}}],["hamburg",{"_index":1697,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["handle",{"_index":2071,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["handleauthresult",{"_index":1828,"title":{},"body":{"components/LoginComponent.html":{}}}],["handleauthresult(result",{"_index":1847,"title":{},"body":{"components/LoginComponent.html":{}}}],["handlecontactserror",{"_index":782,"title":{},"body":{"components/ContactListComponent.html":{}}}],["handlecontactserror(error",{"_index":810,"title":{},"body":{"components/ContactListComponent.html":{}}}],["handlecontactsloaded",{"_index":783,"title":{},"body":{"components/ContactListComponent.html":{}}}],["handlecontactsloaded(contacts",{"_index":814,"title":{},"body":{"components/ContactListComponent.html":{}}}],["handledragmove",{"_index":1255,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledragmove(event",{"_index":1285,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop",{"_index":1256,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop(event",{"_index":1296,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handler",{"_index":1533,"title":{},"body":{"components/HeaderComponent.html":{}}}],["handleregistrationresult",{"_index":2304,"title":{},"body":{"components/SignupComponent.html":{}}}],["handleregistrationresult(result",{"_index":2324,"title":{},"body":{"components/SignupComponent.html":{}}}],["handles",{"_index":374,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/TaskListManager.html":{}}}],["handling",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["harass",{"_index":1752,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harm",{"_index":1753,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harmless",{"_index":1796,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["hash",{"_index":613,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hasn't",{"_index":1856,"title":{},"body":{"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["hasn’t",{"_index":1929,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["hasselectedcategory",{"_index":417,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["header",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["header'},{'name",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["header.component",{"_index":1880,"title":{},"body":{"components/LoginComponent.html":{}}}],["header.component.html",{"_index":1485,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.scss",{"_index":1486,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.ts",{"_index":1926,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["header.component.ts:48",{"_index":1941,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:54",{"_index":1935,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:59",{"_index":1933,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:67",{"_index":1927,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header/header.component",{"_index":79,"title":{},"body":{"components/AppComponent.html":{}}}],["header/login",{"_index":1879,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["headercomponent",{"_index":19,"title":{"components/HeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["height",{"_index":911,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["help",{"_index":1556,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["help'},{'name",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["help.component.html",{"_index":1559,"title":{},"body":{"components/HelpComponent.html":{}}}],["help.component.scss",{"_index":1560,"title":{},"body":{"components/HelpComponent.html":{}}}],["helpbuilding",{"_index":3123,"title":{},"body":{"index.html":{}}}],["helpcomponent",{"_index":121,"title":{"components/HelpComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["helper",{"_index":850,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["here",{"_index":1571,"title":{},"body":{"components/HelpComponent.html":{}}}],["hexadecimal",{"_index":614,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hidden",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hideform",{"_index":600,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hides",{"_index":599,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["hiding",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/ContactsComponent.html":{}}}],["highlight",{"_index":2456,"title":{},"body":{"components/SignupComponent.html":{}}}],["highly",{"_index":1590,"title":{},"body":{"components/HelpComponent.html":{}}}],["history",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["history.service",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["history.service.ts",{"_index":1948,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["history.service.ts:17",{"_index":1960,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:43",{"_index":1966,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:52",{"_index":1969,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:64",{"_index":1970,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["hold",{"_index":1795,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["holding",{"_index":1973,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["holds",{"_index":846,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hook",{"_index":1162,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["hostlistener",{"_index":1543,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('document:click",{"_index":1525,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('window:resize",{"_index":1527,"title":{},"body":{"components/HeaderComponent.html":{}}}],["hostlisteners",{"_index":1493,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hour",{"_index":1404,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["hover",{"_index":991,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["html",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["htmlelement",{"_index":2789,"title":{},"body":{"components/TaskComponent.html":{}}}],["htmlinputelement",{"_index":2538,"title":{},"body":{"interfaces/Subtask.html":{}}}],["http://localhost:4200",{"_index":3113,"title":{},"body":{"index.html":{}}}],["human",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["icon",{"_index":2442,"title":{},"body":{"components/SignupComponent.html":{}}}],["icon.toggle",{"_index":2477,"title":{},"body":{"components/SignupComponent.html":{}}}],["id",{"_index":445,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["identifiable",{"_index":2121,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identification",{"_index":502,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["identified",{"_index":2120,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifier",{"_index":448,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"coverage.html":{}}}],["identifiers",{"_index":2144,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifying",{"_index":795,"title":{},"body":{"components/ContactListComponent.html":{}}}],["ids",{"_index":2591,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["illegal",{"_index":1750,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["image",{"_index":955,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["img",{"_index":1024,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["implements",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["implied",{"_index":1767,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["important",{"_index":1023,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{}}}],["imports",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["imprint",{"_index":1690,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["improve",{"_index":2085,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["inboard",{"_index":2715,"title":{},"body":{"components/SummaryComponent.html":{}}}],["incidental",{"_index":1777,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["include",{"_index":930,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["includes",{"_index":377,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["including",{"_index":575,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["indemnify",{"_index":1793,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["indemnity",{"_index":1792,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1536,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["indicating",{"_index":1189,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["indicator",{"_index":1866,"title":{},"body":{"components/LoginComponent.html":{}}}],["indirect",{"_index":1776,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["individual",{"_index":1642,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["infinite",{"_index":2474,"title":{},"body":{"components/SignupComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["info&#64;michelle",{"_index":1674,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["info@michelle",{"_index":1681,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["information",{"_index":1432,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["infrastructure",{"_index":2275,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["infringement",{"_index":1773,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["init",{"_index":2771,"title":{},"body":{"components/TaskComponent.html":{}}}],["initial",{"_index":833,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["initialization",{"_index":2856,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["initialize",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{}}}],["initializeanimation",{"_index":1829,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["initializeapp",{"_index":3162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialized",{"_index":196,"title":{},"body":{"guards/AuthGuard.html":{}}}],["initializeform",{"_index":1830,"title":{},"body":{"components/LoginComponent.html":{}}}],["initializes",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["initializing",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["initials",{"_index":799,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["initiates",{"_index":2533,"title":{},"body":{"interfaces/Subtask.html":{}}}],["injectable",{"_index":183,"title":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["injectables",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"overview.html":{}}}],["injecting",{"_index":652,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["injects",{"_index":1497,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["inline",{"_index":2024,"title":{},"body":{"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["inprogress",{"_index":2885,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["inprogresscount",{"_index":1381,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["inprogresslist",{"_index":1329,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["input",{"_index":465,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"miscellaneous/functions.html":{}}}],["input.invalid",{"_index":2441,"title":{},"body":{"components/SignupComponent.html":{}}}],["input::placeholder",{"_index":2440,"title":{},"body":{"components/SignupComponent.html":{}}}],["input:focus",{"_index":2468,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox",{"_index":2449,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox\"]:checked",{"_index":2453,"title":{},"body":{"components/SignupComponent.html":{}}}],["inputelement",{"_index":2536,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputelement.focus",{"_index":2540,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputelement.setselectionrange(inputelement.value.length",{"_index":2541,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputelement.value",{"_index":2539,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputelement.value.length",{"_index":2542,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputs",{"_index":680,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["insensitive",{"_index":2920,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["instance",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["instanceof",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["intangible",{"_index":1785,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intended",{"_index":1607,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["inter",{"_index":967,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["inter400",{"_index":996,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["inter700",{"_index":2429,"title":{},"body":{"components/SignupComponent.html":{}}}],["interact",{"_index":1634,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["interaction",{"_index":486,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["interactions",{"_index":1758,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["interface",{"_index":301,"title":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["interfaces",{"_index":367,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{},"overview.html":{}}}],["internal",{"_index":1972,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"injectables/TaskListManager.html":{}}}],["internet",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["interpretation",{"_index":2096,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["intimidate",{"_index":1755,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intuitive",{"_index":1603,"title":{},"body":{"components/HelpComponent.html":{}}}],["invalid",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["invert(1",{"_index":1043,"title":{},"body":{"components/ContactListComponent.html":{}}}],["investigate",{"_index":2231,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["ip",{"_index":2128,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["irreversible",{"_index":1666,"title":{},"body":{"components/HelpComponent.html":{}}}],["iscompleted",{"_index":2560,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["iscontactselected",{"_index":1054,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscontactselected(contact",{"_index":1074,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscurrentuser",{"_index":784,"title":{},"body":{"components/ContactListComponent.html":{}}}],["iscurrentuser(contact",{"_index":822,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isdotsmenuopen",{"_index":2735,"title":{},"body":{"components/TaskComponent.html":{}}}],["iseditmode",{"_index":640,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["isfirestoretimestamp",{"_index":2676,"title":{},"body":{"components/SummaryComponent.html":{}}}],["isfirestoretimestamp(obj",{"_index":1390,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["isloading",{"_index":1820,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["isloggedin",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["ismobile",{"_index":1375,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["isselected",{"_index":785,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isselected(contact",{"_index":827,"title":{},"body":{"components/ContactListComponent.html":{}}}],["issmallscreen",{"_index":2042,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["issue",{"_index":1846,"title":{},"body":{"components/LoginComponent.html":{}}}],["istouchdevice",{"_index":1821,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["item",{"_index":2954,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["items",{"_index":943,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["japanese",{"_index":1586,"title":{},"body":{"components/HelpComponent.html":{}}}],["javascript",{"_index":1468,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["jenny",{"_index":1703,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["join",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["joins",{"_index":2762,"title":{},"body":{"components/TaskComponent.html":{}}}],["json",{"_index":571,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["july",{"_index":1813,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["jurisdiction",{"_index":2208,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["justify",{"_index":945,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["kanban",{"_index":1552,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["karma",{"_index":3136,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1949,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["keeps",{"_index":1961,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["keine",{"_index":903,"title":{},"body":{"components/ContactListComponent.html":{}}}],["key",{"_index":877,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["keyasc",{"_index":778,"title":{},"body":{"components/ContactListComponent.html":{}}}],["keyboard",{"_index":2509,"title":{},"body":{"interfaces/Subtask.html":{}}}],["keyboardevent",{"_index":2550,"title":{},"body":{"interfaces/Subtask.html":{}}}],["keyframes",{"_index":2475,"title":{},"body":{"components/SignupComponent.html":{}}}],["keys",{"_index":808,"title":{},"body":{"components/ContactListComponent.html":{}}}],["kind",{"_index":1765,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["label",{"_index":372,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["language",{"_index":2173,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["last",{"_index":1951,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["later",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["law",{"_index":2083,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["lawful",{"_index":1745,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["laws",{"_index":1748,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["leaks",{"_index":691,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["left",{"_index":2427,"title":{},"body":{"components/SignupComponent.html":{}}}],["legal",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["legally",{"_index":2219,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["legalnoticecomponent",{"_index":123,"title":{"components/LegalNoticeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["legend",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["letter",{"_index":839,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["level",{"_index":2053,"title":{},"body":{"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["leverages",{"_index":1599,"title":{},"body":{"components/HelpComponent.html":{}}}],["liability",{"_index":1762,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["liable",{"_index":1774,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["lifecycle",{"_index":1161,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["light",{"_index":925,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["limit",{"_index":1595,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["limitation",{"_index":1761,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["limited",{"_index":1768,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["linear",{"_index":2473,"title":{},"body":{"components/SignupComponent.html":{}}}],["link",{"_index":2466,"title":{},"body":{"components/SignupComponent.html":{}}}],["links",{"_index":2237,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["list",{"_index":771,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{},"index.html":{}}}],["list'},{'name",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["list.component",{"_index":1211,"title":{},"body":{"components/ContactsComponent.html":{}}}],["list.component.html",{"_index":774,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.scss",{"_index":773,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts",{"_index":770,"title":{},"body":{"components/ContactListComponent.html":{},"coverage.html":{}}}],["list.component.ts:102",{"_index":843,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:104",{"_index":842,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:105",{"_index":853,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:110",{"_index":791,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:118",{"_index":841,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:125",{"_index":829,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:135",{"_index":823,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:143",{"_index":837,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:153",{"_index":828,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:160",{"_index":835,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:169",{"_index":802,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:183",{"_index":848,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:190",{"_index":798,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:29",{"_index":832,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:38",{"_index":838,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:51",{"_index":815,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:67",{"_index":811,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:74",{"_index":794,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:87",{"_index":845,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:92",{"_index":852,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:97",{"_index":844,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list/contact",{"_index":769,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["listed",{"_index":1718,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["listen",{"_index":1965,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["listener",{"_index":1155,"title":{},"body":{"components/ContactsComponent.html":{}}}],["lists",{"_index":1304,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["literal",{"_index":807,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"injectables/TaskListManager.html":{}}}],["llc",{"_index":2250,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["load",{"_index":693,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["loadandprocesstasks",{"_index":1433,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["loadandsetsubtasks(taskid",{"_index":2578,"title":{},"body":{"interfaces/Subtask.html":{}}}],["loadassignedcontacts",{"_index":2835,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["loaded",{"_index":817,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/Subtask.html":{}}}],["loading",{"_index":812,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["loads",{"_index":1934,"title":{},"body":{"components/LoginHeaderComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadsubtasks",{"_index":2836,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadtasks",{"_index":2904,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["loadusergreeting",{"_index":2677,"title":{},"body":{"components/SummaryComponent.html":{}}}],["local",{"_index":3107,"title":{},"body":{"index.html":{}}}],["log",{"_index":1557,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{}}}],["logged",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["login",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["login'},{'name",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["login.component.html",{"_index":1817,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":1818,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":126,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["loginform",{"_index":1822,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginheadercomponent",{"_index":128,"title":{"components/LoginHeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["logins",{"_index":2259,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["logo",{"_index":1855,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["logostate",{"_index":1823,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["logout",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"interfaces/UserData.html":{}}}],["logs",{"_index":1519,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["long",{"_index":1919,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["lookup",{"_index":2938,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["loss",{"_index":1782,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["losses",{"_index":1786,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["low",{"_index":2055,"title":{},"body":{"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["mail",{"_index":905,"title":{},"body":{"components/ContactListComponent.html":{}}}],["main",{"_index":2431,"title":{},"body":{"components/SignupComponent.html":{}}}],["maintain",{"_index":2176,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["making",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/OverlayManager.html":{}}}],["manage",{"_index":1601,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["management",{"_index":380,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"injectables/PriorityManager.html":{}}}],["manager",{"_index":1083,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{}}}],["manager.ts",{"_index":370,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["manager.ts:104",{"_index":1061,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:105",{"_index":433,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:106",{"_index":1289,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:108",{"_index":2945,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:112",{"_index":427,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{}}}],["manager.ts:113",{"_index":1065,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:120",{"_index":434,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{}}}],["manager.ts:122",{"_index":2923,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:129",{"_index":2032,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:13",{"_index":1261,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/PriorityManager.html":{}}}],["manager.ts:130",{"_index":1265,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:14",{"_index":1082,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:140",{"_index":2949,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:141",{"_index":2027,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:15",{"_index":1059,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:150",{"_index":2940,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:154",{"_index":2007,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:16",{"_index":2036,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:165",{"_index":2911,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:168",{"_index":2034,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:17",{"_index":2037,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:18",{"_index":442,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:182",{"_index":2942,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:19",{"_index":440,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:193",{"_index":2914,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:20",{"_index":441,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:203",{"_index":2937,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:21",{"_index":439,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:219",{"_index":2932,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:22",{"_index":1272,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:23",{"_index":2052,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["manager.ts:232",{"_index":2930,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:242",{"_index":2955,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:25",{"_index":1071,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:252",{"_index":2909,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:27",{"_index":2934,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:29",{"_index":431,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:30",{"_index":2010,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:31",{"_index":2059,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["manager.ts:32",{"_index":1078,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:33",{"_index":1299,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:34",{"_index":2936,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:36",{"_index":436,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:37",{"_index":2011,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:38",{"_index":2928,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:42",{"_index":1073,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:43",{"_index":432,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:44",{"_index":2012,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:46",{"_index":2926,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:49",{"_index":1080,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:50",{"_index":437,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:51",{"_index":2016,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:53",{"_index":1281,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:56",{"_index":1081,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:57",{"_index":428,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:58",{"_index":2014,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:64",{"_index":438,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:65",{"_index":2013,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:68",{"_index":1308,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:72",{"_index":435,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:75",{"_index":2035,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:78",{"_index":1075,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:81",{"_index":430,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:84",{"_index":2028,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:86",{"_index":1072,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:92",{"_index":1314,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:93",{"_index":429,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:95",{"_index":1063,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:97",{"_index":2017,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["managers",{"_index":2061,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["manages",{"_index":655,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["managing",{"_index":479,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["many",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["map",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{}}}],["map(([user",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{}}}],["map((t",{"_index":1453,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["mappedsubtasks",{"_index":2580,"title":{},"body":{"interfaces/Subtask.html":{}}}],["maps",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["marco",{"_index":1699,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["margin",{"_index":918,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["match",{"_index":2316,"title":{},"body":{"components/SignupComponent.html":{}}}],["matchedcontact",{"_index":865,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matches",{"_index":824,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matching",{"_index":144,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1743,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["math.round((completed",{"_index":2804,"title":{},"body":{"components/TaskComponent.html":{}}}],["max",{"_index":909,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["maximize",{"_index":1596,"title":{},"body":{"components/HelpComponent.html":{}}}],["maximum",{"_index":1968,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["meaning",{"_index":1588,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["meanings",{"_index":2101,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["media",{"_index":1015,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["media(max",{"_index":1012,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["media(min",{"_index":2403,"title":{},"body":{"components/SignupComponent.html":{}}}],["medium",{"_index":2056,"title":{},"body":{"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["memory",{"_index":690,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["menu",{"_index":1506,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["menuopen",{"_index":1487,"title":{},"body":{"components/HeaderComponent.html":{}}}],["menuref",{"_index":1488,"title":{},"body":{"components/HeaderComponent.html":{}}}],["merchantability",{"_index":1769,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["merger",{"_index":2189,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["message",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["messages",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["messagingsenderid",{"_index":3173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["method",{"_index":1592,"title":{},"body":{"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["methods",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["metrics",{"_index":2711,"title":{},"body":{"components/SummaryComponent.html":{}}}],["michelle",{"_index":1692,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["milliseconds",{"_index":1279,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["min",{"_index":1006,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["minimum",{"_index":2384,"title":{},"body":{"components/SignupComponent.html":{}}}],["miscellaneous",{"_index":3100,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":2319,"title":{},"body":{"components/SignupComponent.html":{}}}],["missing",{"_index":762,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["mmmm",{"_index":2713,"title":{},"body":{"components/SummaryComponent.html":{}}}],["mobile",{"_index":1166,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["mode",{"_index":682,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{}}}],["modification",{"_index":1732,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["modify",{"_index":3115,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3151,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monitor",{"_index":2177,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["month",{"_index":2659,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["more",{"_index":467,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["morning",{"_index":1402,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["mouse",{"_index":1509,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mouseevent",{"_index":1501,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mousey",{"_index":1346,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["move",{"_index":1662,"title":{},"body":{"components/HelpComponent.html":{}}}],["moved",{"_index":1368,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["moveiteminarray",{"_index":1315,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["moves",{"_index":1651,"title":{},"body":{"components/HelpComponent.html":{}}}],["moving",{"_index":1650,"title":{},"body":{"components/HelpComponent.html":{}}}],["name",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["name.trim",{"_index":745,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["namefor",{"_index":3120,"title":{},"body":{"index.html":{}}}],["names",{"_index":1069,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["native",{"_index":2589,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["naumann",{"_index":1702,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["navigate",{"_index":1563,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["navigateback",{"_index":1958,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["navigates",{"_index":1566,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["navigation",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["navigationend",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["navigationhistoryservice",{"_index":31,"title":{"injectables/NavigationHistoryService.html":{}},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["navigationservice",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["navigator.maxtouchpoints",{"_index":1889,"title":{},"body":{"components/LoginComponent.html":{}}}],["near",{"_index":1292,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["necessary",{"_index":2167,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["need",{"_index":1625,"title":{},"body":{"components/HelpComponent.html":{}}}],["needs",{"_index":2257,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["network",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["new",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"index.html":{}}}],["newcontact",{"_index":552,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["newemail",{"_index":2336,"title":{},"body":{"components/SignupComponent.html":{}}}],["newly",{"_index":659,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{}}}],["newname",{"_index":2338,"title":{},"body":{"components/SignupComponent.html":{}}}],["news",{"_index":2185,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["newstatus",{"_index":1313,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["newsubtask",{"_index":2521,"title":{},"body":{"interfaces/Subtask.html":{}}}],["newtask",{"_index":2615,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["newtext",{"_index":2527,"title":{},"body":{"interfaces/Subtask.html":{}}}],["newtext.trim",{"_index":2532,"title":{},"body":{"interfaces/Subtask.html":{}}}],["next",{"_index":859,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdeadlinecount",{"_index":1377,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdeadlinedate",{"_index":1376,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextsubtaskid",{"_index":2485,"title":{},"body":{"interfaces/Subtask.html":{}}}],["ng",{"_index":3110,"title":{},"body":{"index.html":{}}}],["ngfor",{"_index":2951,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["ngonchanges",{"_index":2726,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngonchanges(changes",{"_index":2764,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngondestroy",{"_index":641,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{}}}],["ngoninit",{"_index":642,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["nice",{"_index":1412,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["non",{"_index":1772,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["none",{"_index":914,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"injectables/TaskListManager.html":{}}}],["note",{"_index":1604,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["notice",{"_index":1483,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["notice'},{'name",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["notice.component.html",{"_index":1686,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.scss",{"_index":1687,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts",{"_index":1685,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notice.component.ts:20",{"_index":1688,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts:32",{"_index":1689,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice/legal",{"_index":1684,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notifications",{"_index":2184,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notify",{"_index":2226,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notonlywhitespace",{"_index":718,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["notonlywhitespace(control",{"_index":474,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["now",{"_index":1449,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{}}}],["nowrap",{"_index":1009,"title":{},"body":{"components/ContactListComponent.html":{}}}],["null",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":452,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["number.max_safe_integer",{"_index":2925,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["numbers",{"_index":2387,"title":{},"body":{"components/SignupComponent.html":{}}}],["numeric",{"_index":2924,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["obj",{"_index":1389,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["obj.todate",{"_index":1391,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["object",{"_index":472,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["objects",{"_index":821,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["obligations",{"_index":2214,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["observable",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["observable((observer",{"_index":540,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observable(observer",{"_index":2606,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.error(error",{"_index":550,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(contacts",{"_index":549,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observer.next(subtasks",{"_index":2614,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(tasks",{"_index":2610,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observes",{"_index":2604,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["occurred",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["offers",{"_index":2186,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["officers",{"_index":1799,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["oh",{"_index":763,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["oldest",{"_index":1963,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["onaddnewcontact",{"_index":786,"title":{},"body":{"components/ContactListComponent.html":{}}}],["onauthstatechanged",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onauthstatechanged(this.auth",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onbacktolist",{"_index":1145,"title":{},"body":{"components/ContactsComponent.html":{}}}],["onbacktologin",{"_index":2305,"title":{},"body":{"components/SignupComponent.html":{}}}],["oncategoryselect",{"_index":421,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["once",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"interfaces/UserData.html":{}}}],["onchanges",{"_index":2786,"title":{},"body":{"components/TaskComponent.html":{}}}],["onclose",{"_index":643,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["oncontactadded",{"_index":1146,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactadded(newcontact",{"_index":1169,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactselect",{"_index":787,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselect(contact",{"_index":836,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselected",{"_index":1147,"title":{},"body":{"components/ContactsComponent.html":{}}}],["ondestroy",{"_index":626,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["ondocumentclick",{"_index":1490,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["ondocumentclick(event",{"_index":1523,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["one",{"_index":683,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"index.html":{}}}],["onguestlogin",{"_index":1831,"title":{},"body":{"components/LoginComponent.html":{}}}],["oninit",{"_index":625,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["onlogin",{"_index":1832,"title":{},"body":{"components/LoginComponent.html":{}}}],["onnocontactvisible",{"_index":1148,"title":{},"body":{"components/ContactsComponent.html":{}}}],["onoverlayanimationdone",{"_index":1149,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onoverlayanimationdone(event",{"_index":1178,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onresize",{"_index":1491,"title":{},"body":{"components/HeaderComponent.html":{}}}],["onresize(event",{"_index":1526,"title":{},"body":{"components/HeaderComponent.html":{}}}],["onsnapshot",{"_index":454,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.getsubtasksref(taskid",{"_index":2612,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.gettasksref",{"_index":2607,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsubmit",{"_index":644,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["onsubtaskeditkeydown(event",{"_index":2549,"title":{},"body":{"interfaces/Subtask.html":{}}}],["onsubtaskenter(event",{"_index":2510,"title":{},"body":{"interfaces/Subtask.html":{}}}],["onsubtaskinputclick",{"_index":2507,"title":{},"body":{"interfaces/Subtask.html":{}}}],["onsubtasktoggle",{"_index":2837,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["onsubtasktoggle(subtask",{"_index":2858,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["ontouchstart",{"_index":1888,"title":{},"body":{"components/LoginComponent.html":{}}}],["oops",{"_index":760,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["opacity",{"_index":1223,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["open",{"_index":1507,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"index.html":{}}}],["openaddoreditoverlay",{"_index":2002,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["openaddoreditoverlay(event",{"_index":2021,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opendotsmenu",{"_index":2733,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler",{"_index":2727,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler(event",{"_index":2772,"title":{},"body":{"components/TaskComponent.html":{}}}],["opened",{"_index":2749,"title":{},"body":{"components/TaskComponent.html":{}}}],["openedittask",{"_index":2838,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedittask(event",{"_index":2861,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedmenutaskid",{"_index":2730,"title":{},"body":{"components/TaskComponent.html":{}}}],["opening/closing",{"_index":1986,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opens",{"_index":2022,"title":{},"body":{"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["opentaskdetail",{"_index":2003,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetail(selectedtask",{"_index":2026,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetails",{"_index":2728,"title":{},"body":{"components/TaskComponent.html":{}}}],["opentaskdetails(task",{"_index":2774,"title":{},"body":{"components/TaskComponent.html":{}}}],["operational",{"_index":2276,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["operations",{"_index":376,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["operator",{"_index":2286,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["optimize",{"_index":2952,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["optimizes",{"_index":3131,"title":{},"body":{"index.html":{}}}],["option",{"_index":1658,"title":{},"body":{"components/HelpComponent.html":{}}}],["optional",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":1624,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["orders",{"_index":2180,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["original",{"_index":2561,"title":{},"body":{"interfaces/Subtask.html":{}}}],["original.id",{"_index":2565,"title":{},"body":{"interfaces/Subtask.html":{}}}],["original.id.length",{"_index":2566,"title":{},"body":{"interfaces/Subtask.html":{}}}],["originalsubtasks",{"_index":2490,"title":{},"body":{"interfaces/Subtask.html":{}}}],["os",{"_index":2147,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["otherwise",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["output",{"_index":716,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outputs",{"_index":646,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outside",{"_index":1505,"title":{},"body":{"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["over",{"_index":2089,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["overflow",{"_index":915,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["overlay",{"_index":663,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["overlaymanager",{"_index":1984,"title":{"injectables/OverlayManager.html":{}},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["overlays",{"_index":1987,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overlayvisible",{"_index":1991,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overview",{"_index":1574,"title":{"overview.html":{}},"body":{"components/HelpComponent.html":{},"index.html":{},"overview.html":{}}}],["owned",{"_index":1729,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ownership",{"_index":1720,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["package",{"_index":3087,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":921,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["page",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["pageloaded",{"_index":1824,"title":{},"body":{"components/LoginComponent.html":{}}}],["pages",{"_index":2142,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["palummieri",{"_index":1700,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["param",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":2599,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["parsedate",{"_index":2678,"title":{},"body":{"components/SummaryComponent.html":{}}}],["parsedate(date",{"_index":1472,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["part",{"_index":1580,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["partial",{"_index":582,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["particular",{"_index":1771,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["partners",{"_index":1798,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["party",{"_index":2095,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["password",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["passwordcontrol",{"_index":2373,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordcontrol?.dirty",{"_index":2380,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordcontrol?.touched",{"_index":2377,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwords",{"_index":2255,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["passwordsdontmatch",{"_index":2358,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator",{"_index":2306,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator(group",{"_index":2332,"title":{},"body":{"components/SignupComponent.html":{}}}],["path",{"_index":1971,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["percentage",{"_index":2779,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted",{"_index":2729,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted(subtasklist",{"_index":2776,"title":{},"body":{"components/TaskComponent.html":{}}}],["perform",{"_index":2178,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["performance",{"_index":1791,"title":{},"body":{"components/LegalNoticeComponent.html":{},"index.html":{}}}],["performs",{"_index":1868,"title":{},"body":{"components/LoginComponent.html":{}}}],["periodically",{"_index":2247,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["permanently",{"_index":1663,"title":{},"body":{"components/HelpComponent.html":{}}}],["permitted",{"_index":2285,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persistent",{"_index":2162,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persists",{"_index":1266,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["person",{"_index":1756,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["person.svg",{"_index":957,"title":{},"body":{"components/ContactListComponent.html":{}}}],["personal",{"_index":1635,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["personalized",{"_index":2689,"title":{},"body":{"components/SummaryComponent.html":{}}}],["personally",{"_index":2136,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["phone",{"_index":446,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["phone.trim",{"_index":747,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["pipe",{"_index":194,"title":{},"body":{"guards/AuthGuard.html":{}}}],["pipe(filter((event",{"_index":90,"title":{},"body":{"components/AppComponent.html":{}}}],["pipe(filter(event",{"_index":1974,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["pipes",{"_index":3122,"title":{},"body":{"index.html":{}}}],["pixel",{"_index":2159,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["place",{"_index":2211,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["placed",{"_index":2114,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["plain",{"_index":570,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["played",{"_index":1930,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["please",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["plural",{"_index":2105,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["pointer",{"_index":988,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["pointerdirectionchangethreshold",{"_index":3183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["policies",{"_index":1713,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["policy",{"_index":1482,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["policy'},{'name",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["policy.component.html",{"_index":2068,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.scss",{"_index":2069,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts",{"_index":2067,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["policy.component.ts:20",{"_index":2070,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts:32",{"_index":2072,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy/privacy",{"_index":2066,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["popularity",{"_index":2160,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["position",{"_index":961,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["possibility",{"_index":1789,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["possible",{"_index":1466,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["posted",{"_index":2246,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["powerful",{"_index":3117,"title":{},"body":{"index.html":{}}}],["pre",{"_index":713,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["preferences",{"_index":2174,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["prefill",{"_index":2025,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["prefilled",{"_index":596,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["prepares",{"_index":2863,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["present",{"_index":820,"title":{},"body":{"components/ContactListComponent.html":{}}}],["presented",{"_index":1717,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["preset",{"_index":498,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["press",{"_index":2508,"title":{},"body":{"interfaces/Subtask.html":{}}}],["prevent",{"_index":689,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["prevents",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/DragDropManager.html":{}}}],["previous",{"_index":1567,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["previousurl",{"_index":1980,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["primary",{"_index":2434,"title":{},"body":{"components/SignupComponent.html":{}}}],["principles",{"_index":1600,"title":{},"body":{"components/HelpComponent.html":{}}}],["priority",{"_index":2045,"title":{},"body":{"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["prioritymanager",{"_index":2043,"title":{"injectables/PriorityManager.html":{}},"body":{"injectables/PriorityManager.html":{},"coverage.html":{}}}],["privacy",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["privacypolicy",{"_index":2353,"title":{},"body":{"components/SignupComponent.html":{}}}],["privacypolicycomponent",{"_index":129,"title":{"components/PrivacyPolicyComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["private",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["procedures",{"_index":2080,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["process",{"_index":2268,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["processed",{"_index":2207,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["processes",{"_index":816,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["processing",{"_index":2124,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["product",{"_index":1708,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["production",{"_index":3130,"title":{},"body":{"index.html":{}}}],["products",{"_index":2200,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["profile",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["profits",{"_index":1783,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["program",{"_index":2109,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["progress",{"_index":1330,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["prohibited",{"_index":1736,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["prohibition",{"_index":2281,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["project",{"_index":1553,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["projectid",{"_index":3163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects",{"_index":1602,"title":{},"body":{"components/HelpComponent.html":{}}}],["promise",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["promotions",{"_index":2201,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["propagation",{"_index":1531,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["properties",{"_index":26,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"properties.html":{}}}],["proprietary",{"_index":1737,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["protect",{"_index":2230,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protection",{"_index":2093,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protects",{"_index":2084,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["provide",{"_index":1573,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":3177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":3178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":1763,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{}}}],["providedin",{"_index":189,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["providefirebaseapp",{"_index":3161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":3175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":2123,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["providerouter(routes",{"_index":3159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":2111,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":480,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["providezonechangedetection",{"_index":3157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/NavigationHistoryService.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["publicly",{"_index":2203,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["purpose",{"_index":1724,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["purposes",{"_index":1746,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["puschkarow",{"_index":1693,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["puschkarow.de",{"_index":1675,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["push",{"_index":2183,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["quality",{"_index":1620,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["questions",{"_index":1671,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["radius",{"_index":989,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["reached",{"_index":1964,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["reactive",{"_index":481,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["reactiveformsmodule",{"_index":627,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["readable",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["reading",{"_index":2590,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["readonly",{"_index":1393,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["real",{"_index":2269,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["reasonable",{"_index":1808,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["receive",{"_index":709,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["receives",{"_index":712,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["recent",{"_index":1950,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["record",{"_index":1327,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["redirect",{"_index":2329,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirected",{"_index":2366,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirects",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["refer",{"_index":2277,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reference",{"_index":528,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["references",{"_index":3150,"title":{},"body":{"index.html":{}}}],["refers",{"_index":2107,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reflect",{"_index":1654,"title":{},"body":{"components/HelpComponent.html":{}}}],["reflects",{"_index":1669,"title":{},"body":{"components/HelpComponent.html":{}}}],["regarding",{"_index":1621,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["regardless",{"_index":2103,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["register",{"_index":1626,"title":{},"body":{"components/HelpComponent.html":{}}}],["registers",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["registration",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["regulations",{"_index":1749,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["reject",{"_index":2157,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["related",{"_index":375,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{}}}],["relating",{"_index":1810,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["relative",{"_index":986,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["relevant",{"_index":2008,"title":{},"body":{"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["reliability",{"_index":1617,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["reload",{"_index":1271,"title":{},"body":{"injectables/DragDropManager.html":{},"index.html":{}}}],["reloadcallback",{"_index":1264,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["reloads",{"_index":2769,"title":{},"body":{"components/TaskComponent.html":{}}}],["remain",{"_index":2163,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["remaining",{"_index":1068,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remaining.map((c",{"_index":2819,"title":{},"body":{"components/TaskComponent.html":{}}}],["remainingcontacts",{"_index":1070,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remainingcontacts.map((contact",{"_index":1098,"title":{},"body":{"injectables/ContactManager.html":{}}}],["remember",{"_index":1667,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["removal",{"_index":2029,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["remove",{"_index":1664,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["removebackground",{"_index":1150,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["removebackground(event",{"_index":1186,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["removes",{"_index":2756,"title":{},"body":{"components/TaskComponent.html":{}}}],["rendering",{"_index":2953,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["reorders",{"_index":1303,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["reordertasks",{"_index":1257,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["reordertasks(event",{"_index":1307,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["repeat",{"_index":960,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["repeating",{"_index":1932,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["replication",{"_index":1734,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["represent",{"_index":1641,"title":{},"body":{"components/HelpComponent.html":{}}}],["representation",{"_index":2638,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["represented",{"_index":1698,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["representing",{"_index":444,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["represents",{"_index":1628,"title":{},"body":{"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["reproduction",{"_index":1731,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["request",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["requests",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["required",{"_index":792,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["requirements",{"_index":2228,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["requires",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{}}}],["reserved",{"_index":1937,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["reserves",{"_index":2287,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reset",{"_index":2033,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["resetoverlaystate",{"_index":2004,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["resetoverlaystates",{"_index":2005,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["resets",{"_index":419,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{}}}],["resize",{"_index":1154,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["resolved",{"_index":2747,"title":{},"body":{"components/TaskComponent.html":{}}}],["resolves",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{}}}],["resolving",{"_index":1115,"title":{},"body":{"injectables/ContactService.html":{}}}],["resources",{"_index":3149,"title":{},"body":{"index.html":{}}}],["respective",{"_index":2060,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["responsibility",{"_index":2242,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["responsible",{"_index":1498,"title":{},"body":{"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["responsive",{"_index":1989,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["restructuring",{"_index":2191,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["result",{"_index":1850,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.message",{"_index":1909,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.success",{"_index":1907,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["results",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1739,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["retained",{"_index":2217,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retention",{"_index":2213,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retrieve",{"_index":2933,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["retrieved",{"_index":2593,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["retrieves",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["return",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["returned",{"_index":813,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["returns",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":2243,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["rgba(0",{"_index":1033,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["right",{"_index":999,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["rights",{"_index":1740,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["root",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["root'},{'name",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["rotate(360deg",{"_index":2476,"title":{},"body":{"components/SignupComponent.html":{}}}],["route",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["router",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["routermodule",{"_index":1479,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["routeroutlet",{"_index":17,"title":{},"body":{"components/AppComponent.html":{}}}],["routes",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{}}}],["routing",{"_index":1564,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["run",{"_index":3108,"title":{},"body":{"index.html":{}}}],["runlogoanimationwithdelay",{"_index":1833,"title":{},"body":{"components/LoginComponent.html":{}}}],["runner",{"_index":3138,"title":{},"body":{"index.html":{}}}],["running",{"_index":3112,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":188,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["s.id",{"_index":2530,"title":{},"body":{"interfaces/Subtask.html":{}}}],["safety",{"_index":2233,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sale",{"_index":2190,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["same",{"_index":1309,"title":{},"body":{"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["samecontainer",{"_index":1336,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["sanitize",{"_index":579,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["sans",{"_index":968,"title":{},"body":{"components/ContactListComponent.html":{}}}],["save",{"_index":767,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["saveallsubtasks(taskid",{"_index":2558,"title":{},"body":{"interfaces/Subtask.html":{}}}],["saved",{"_index":702,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{}}}],["savenewcontact",{"_index":2307,"title":{},"body":{"components/SignupComponent.html":{}}}],["savenewcontact(newname",{"_index":2335,"title":{},"body":{"components/SignupComponent.html":{}}}],["saves",{"_index":2331,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask.html":{}}}],["savesubtaskedit",{"_index":2543,"title":{},"body":{"interfaces/Subtask.html":{}}}],["scaffolding",{"_index":3116,"title":{},"body":{"index.html":{}}}],["scale(0.95",{"_index":1041,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scale(1.1",{"_index":1040,"title":{},"body":{"components/ContactListComponent.html":{}}}],["schematics",{"_index":3121,"title":{},"body":{"index.html":{}}}],["scope",{"_index":1719,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["screen",{"_index":1176,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["screens",{"_index":1278,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["scripts",{"_index":2155,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["scrollable",{"_index":1294,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollbar",{"_index":926,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scrolling",{"_index":1251,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollproximity",{"_index":3186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollsection",{"_index":1287,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollsection?.nativeelement",{"_index":1348,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollspeed",{"_index":3185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollstep",{"_index":1351,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["search",{"_index":2919,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm",{"_index":2917,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm.trim().tolowercase",{"_index":2966,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["seconds",{"_index":1197,"title":{},"body":{"components/ContactsComponent.html":{}}}],["section",{"_index":1295,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["section.getboundingclientrect",{"_index":1349,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["securely",{"_index":2260,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["security",{"_index":2090,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["see",{"_index":1413,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["seems",{"_index":761,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["select",{"_index":406,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcategory",{"_index":424,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["selectcategory(category",{"_index":407,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectcontact",{"_index":1055,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcontact(contact",{"_index":588,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selected",{"_index":389,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedcategory",{"_index":382,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectedcontact",{"_index":488,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["selectedcontacts",{"_index":1046,"title":{},"body":{"injectables/ContactManager.html":{}}}],["selectedcontactsubject",{"_index":487,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["selectedpriority",{"_index":2047,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["selectedtask",{"_index":1992,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedtask?.id",{"_index":2996,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["selecting",{"_index":819,"title":{},"body":{"components/ContactListComponent.html":{}}}],["selection",{"_index":378,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["selectionsubscription",{"_index":779,"title":{},"body":{"components/ContactListComponent.html":{}}}],["selector",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["selects",{"_index":404,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["self",{"_index":1087,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["self.findindex(c",{"_index":1088,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["sending",{"_index":2283,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["separate",{"_index":2023,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["separated",{"_index":1067,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["separately",{"_index":2594,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["sequence",{"_index":1422,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["serif",{"_index":969,"title":{},"body":{"components/ContactListComponent.html":{}}}],["serveonce",{"_index":3111,"title":{},"body":{"index.html":{}}}],["server",{"_index":3106,"title":{},"body":{"index.html":{}}}],["service",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["services",{"_index":793,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["services/auth.service",{"_index":854,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["services/contact.service",{"_index":719,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["services/navigation",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["services/task.service",{"_index":1318,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["session",{"_index":1521,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage",{"_index":1424,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.getitem('greetingshown",{"_index":1417,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.getitem('logoappeared",{"_index":1945,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.getitem('logomoved",{"_index":1893,"title":{},"body":{"components/LoginComponent.html":{}}}],["sessionstorage.removeitem('greetingshown",{"_index":1549,"title":{},"body":{"components/HeaderComponent.html":{}}}],["sessionstorage.setitem('greetingshown",{"_index":1427,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.setitem('logoappeared",{"_index":1946,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.setitem('logomoved",{"_index":1897,"title":{},"body":{"components/LoginComponent.html":{}}}],["set",{"_index":2054,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["set(this.task.assignedto",{"_index":2810,"title":{},"body":{"components/TaskComponent.html":{}}}],["setanimationdirection",{"_index":1151,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setanimationdirection(width",{"_index":1191,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setdoc",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["setdoc(doc(this.firestore",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["seteditingsubtasktext(value",{"_index":2506,"title":{},"body":{"interfaces/Subtask.html":{}}}],["seteditingtask",{"_index":3003,"title":{},"body":{"injectables/TaskService.html":{}}}],["seteditingtask(task",{"_index":2665,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["setnextdeadline",{"_index":2679,"title":{},"body":{"components/SummaryComponent.html":{}}}],["setnextdeadline(tasks",{"_index":1448,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["setpriority",{"_index":2048,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["setpriority(priority",{"_index":2051,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["setpriorityandcategory",{"_index":2049,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["setpriorityandcategory(task",{"_index":2058,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["sets",{"_index":392,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["setselectedcategory",{"_index":425,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setselectedcategory(category",{"_index":393,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setselectedcontacts",{"_index":1056,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setselectedcontacts(contacts",{"_index":1077,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcategorydropdown",{"_index":426,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setshowcategorydropdown(value",{"_index":398,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setshowcontactdropdown",{"_index":1057,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcontactdropdown(value",{"_index":1079,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowsubtaskconfirmation(value",{"_index":2501,"title":{},"body":{"interfaces/Subtask.html":{}}}],["setsubtaskinput(value",{"_index":2498,"title":{},"body":{"interfaces/Subtask.html":{}}}],["setsubtasks(subtasks",{"_index":2493,"title":{},"body":{"interfaces/Subtask.html":{}}}],["settaskcounts",{"_index":2680,"title":{},"body":{"components/SummaryComponent.html":{}}}],["settaskcounts(tasks",{"_index":1441,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["settimeout",{"_index":1243,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{}}}],["setting",{"_index":2046,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["settings",{"_index":2158,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shadow",{"_index":1032,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["shall",{"_index":2102,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["share",{"_index":2202,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sharing",{"_index":2196,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shortcuts",{"_index":2548,"title":{},"body":{"interfaces/Subtask.html":{}}}],["show",{"_index":586,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddform",{"_index":593,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddoredittask",{"_index":1993,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["showanimatedgreeting",{"_index":1425,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["showcategorydropdown",{"_index":383,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["showcategoryerror",{"_index":381,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["showconfirmpassword",{"_index":2299,"title":{},"body":{"components/SignupComponent.html":{}}}],["showcontactdetails",{"_index":1142,"title":{},"body":{"components/ContactsComponent.html":{}}}],["showcontactdropdown",{"_index":1047,"title":{},"body":{"injectables/ContactManager.html":{}}}],["showcontent",{"_index":2832,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["showeditform",{"_index":1104,"title":{},"body":{"injectables/ContactService.html":{}}}],["showeditform(contact",{"_index":597,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showform",{"_index":491,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["showformsubject",{"_index":490,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showgreeting",{"_index":1374,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["showheaderandsidebar",{"_index":27,"title":{},"body":{"components/AppComponent.html":{}}}],["showing",{"_index":1184,"title":{},"body":{"components/ContactsComponent.html":{}}}],["shown",{"_index":1208,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["showpassword",{"_index":1825,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["shows",{"_index":1172,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["showsubtaskconfirmation",{"_index":2489,"title":{},"body":{"interfaces/Subtask.html":{}}}],["showtaskdetails",{"_index":1994,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["shrink",{"_index":2452,"title":{},"body":{"components/SignupComponent.html":{}}}],["sidebar",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/SidebarComponent.html":{}}}],["sidebar'},{'name",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["sidebar.component.html",{"_index":2292,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar.component.scss",{"_index":2293,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar/sidebar.component",{"_index":78,"title":{},"body":{"components/AppComponent.html":{}}}],["sidebarcomponent",{"_index":18,"title":{"components/SidebarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["sign",{"_index":1922,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["signed",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signin",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(email",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinasguest",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signing",{"_index":2392,"title":{},"body":{"components/SignupComponent.html":{}}}],["signinwithemailandpassword",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinwithemailandpassword(this.auth",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout(this.auth",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signoutuser",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signs",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{}}}],["signup'].includes",{"_index":95,"title":{},"body":{"components/AppComponent.html":{}}}],["signup'},{'name",{"_index":134,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["signup(email",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup.component.html",{"_index":2298,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.scss",{"_index":2297,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/footer/footer.component.ts",{"_index":1477,"title":{},"body":{"components/FooterComponent.html":{},"coverage.html":{}}}],["signup/login",{"_index":1925,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts",{"_index":1816,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts:114",{"_index":1860,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:123",{"_index":1838,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:130",{"_index":1857,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:141",{"_index":1853,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:152",{"_index":1867,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:165",{"_index":1864,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:181",{"_index":1863,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:190",{"_index":1869,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:202",{"_index":1849,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:220",{"_index":1843,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:232",{"_index":1858,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:65",{"_index":1875,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:70",{"_index":1876,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:75",{"_index":1874,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:80",{"_index":1870,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:85",{"_index":1872,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:90",{"_index":1877,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:95",{"_index":1836,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/signup/signup.component.ts",{"_index":2296,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["signup/signup/signup.component.ts:109",{"_index":2333,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:120",{"_index":2330,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:135",{"_index":2340,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:148",{"_index":2325,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:168",{"_index":2337,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:181",{"_index":2327,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:195",{"_index":2320,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:210",{"_index":2314,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:230",{"_index":2310,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:44",{"_index":2345,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:49",{"_index":2341,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:54",{"_index":2346,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:59",{"_index":2343,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:64",{"_index":2344,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:69",{"_index":2308,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:89",{"_index":2326,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":133,"title":{"components/SignupComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["signupform",{"_index":2300,"title":{},"body":{"components/SignupComponent.html":{}}}],["similar",{"_index":2148,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["simplechanges",{"_index":2765,"title":{},"body":{"components/TaskComponent.html":{}}}],["single",{"_index":532,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["singular",{"_index":2104,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sites",{"_index":2240,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["size",{"_index":958,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sizing",{"_index":2423,"title":{},"body":{"components/SignupComponent.html":{}}}],["skiplocationchange",{"_index":2328,"title":{},"body":{"components/SignupComponent.html":{}}}],["slide",{"_index":1181,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["slight",{"_index":2018,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["small",{"_index":1177,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["smooth",{"_index":2019,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["sms",{"_index":2182,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["snapshot",{"_index":544,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.data",{"_index":621,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.exists",{"_index":619,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach((doc",{"_index":545,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach(doc",{"_index":2608,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.id",{"_index":620,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["software",{"_index":2108,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["solely",{"_index":1757,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["solid",{"_index":981,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sort",{"_index":2947,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sortallstatusarrays",{"_index":2905,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorted",{"_index":2946,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorting",{"_index":849,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["sorts",{"_index":2941,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate",{"_index":2906,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate(tasks",{"_index":2943,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["space",{"_index":1008,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["spam",{"_index":2288,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["special",{"_index":1778,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/SignupComponent.html":{}}}],["specialized",{"_index":2322,"title":{},"body":{"components/SignupComponent.html":{}}}],["specific",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["specified",{"_index":2557,"title":{},"body":{"interfaces/Subtask.html":{}}}],["speed",{"_index":3132,"title":{},"body":{"index.html":{}}}],["spent",{"_index":2143,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["spin",{"_index":2471,"title":{},"body":{"components/SignupComponent.html":{}}}],["spinner",{"_index":2469,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/.../app.config.ts",{"_index":3155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contact.service.ts",{"_index":3101,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/add",{"_index":368,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"coverage.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:31",{"_index":62,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:36",{"_index":34,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":3040,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/board/board.component.ts",{"_index":3044,"title":{},"body":{"coverage.html":{}}}],["src/app/board/drag",{"_index":1248,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["src/app/board/overlay",{"_index":1985,"title":{},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["src/app/board/task",{"_index":2827,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts",{"_index":2717,"title":{},"body":{"components/TaskComponent.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts:102",{"_index":2783,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:103",{"_index":2781,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:112",{"_index":2751,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:127",{"_index":2770,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:138",{"_index":2766,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:151",{"_index":2753,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:167",{"_index":2759,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:179",{"_index":2777,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:190",{"_index":2775,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:200",{"_index":2785,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:209",{"_index":2773,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:222",{"_index":2760,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:237",{"_index":2755,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:249",{"_index":2763,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:259",{"_index":2761,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:45",{"_index":2780,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:50",{"_index":2742,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:55",{"_index":2741,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:60",{"_index":2750,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:65",{"_index":2746,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:70",{"_index":2782,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:75",{"_index":2738,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:80",{"_index":2748,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:85",{"_index":2745,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:90",{"_index":2743,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:93",{"_index":2736,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/contacts/contact",{"_index":622,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts",{"_index":1137,"title":{},"body":{"components/ContactsComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts:107",{"_index":1170,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:117",{"_index":1192,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:124",{"_index":1194,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:137",{"_index":1187,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:149",{"_index":1180,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:160",{"_index":1164,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:167",{"_index":1174,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:174",{"_index":1175,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:54",{"_index":1198,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:59",{"_index":1210,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:64",{"_index":1209,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:69",{"_index":1204,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:74",{"_index":1207,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:79",{"_index":1153,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:94",{"_index":1160,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/header/header.component.ts",{"_index":1484,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/header/header.component.ts:108",{"_index":1529,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:117",{"_index":1518,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:129",{"_index":1515,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:138",{"_index":1517,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:52",{"_index":1539,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:57",{"_index":1535,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:62",{"_index":1496,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:77",{"_index":1512,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:92",{"_index":1502,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/login",{"_index":1476,"title":{},"body":{"components/FooterComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts:14",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.guard.ts:33",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.service.ts",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts:105",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:118",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:148",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:157",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:169",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:177",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:186",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:213",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:41",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:42",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:47",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:52",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:81",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/contact.service.ts",{"_index":443,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/services/contact.service.ts:104",{"_index":1117,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:130",{"_index":1107,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:148",{"_index":1129,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:162",{"_index":1110,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:176",{"_index":1126,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:183",{"_index":1108,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:190",{"_index":1127,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:199",{"_index":1128,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:207",{"_index":1125,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:217",{"_index":1109,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:229",{"_index":1116,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:243",{"_index":1119,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:256",{"_index":1112,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:55",{"_index":1134,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:57",{"_index":1133,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:60",{"_index":1136,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:62",{"_index":1135,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:65",{"_index":1132,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:67",{"_index":1131,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:70",{"_index":1130,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:76",{"_index":1106,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:86",{"_index":1118,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:95",{"_index":1124,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/navigation",{"_index":1947,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts",{"_index":2586,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts:104",{"_index":3020,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:125",{"_index":3018,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:145",{"_index":3008,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:163",{"_index":3007,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:180",{"_index":3024,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:192",{"_index":3023,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:203",{"_index":3012,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:213",{"_index":3013,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:222",{"_index":3015,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:248",{"_index":3011,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:262",{"_index":3014,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:274",{"_index":3022,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:281",{"_index":3016,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:288",{"_index":3010,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:298",{"_index":3009,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:72",{"_index":3006,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:79",{"_index":3021,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:88",{"_index":3019,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:97",{"_index":3017,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/shared/help/help.component.ts",{"_index":1558,"title":{},"body":{"components/HelpComponent.html":{},"coverage.html":{}}}],["src/app/shared/help/help.component.ts:20",{"_index":1562,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/help/help.component.ts:32",{"_index":1565,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/legal",{"_index":1683,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["src/app/shared/privacy",{"_index":2065,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts",{"_index":2291,"title":{},"body":{"components/SidebarComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts:20",{"_index":2294,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/sidebar/sidebar.component.ts:31",{"_index":2295,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/summary/summary.component.ts",{"_index":1358,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["src/app/summary/summary.component.ts:114",{"_index":2685,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:122",{"_index":2691,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:134",{"_index":2688,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:15",{"_index":1360,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{}}}],["src/app/summary/summary.component.ts:154",{"_index":2696,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:169",{"_index":2687,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:182",{"_index":2695,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:195",{"_index":2694,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:219",{"_index":2693,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:33",{"_index":2705,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:34",{"_index":2707,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:36",{"_index":2699,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:37",{"_index":2704,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:38",{"_index":2701,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:40",{"_index":2703,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:41",{"_index":2702,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:42",{"_index":2698,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:44",{"_index":2706,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:45",{"_index":2697,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:46",{"_index":2700,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:47",{"_index":2682,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:63",{"_index":2683,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:74",{"_index":2686,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:84",{"_index":2709,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:98",{"_index":2684,"title":{},"body":{"components/SummaryComponent.html":{}}}],["stage",{"_index":1652,"title":{},"body":{"components/HelpComponent.html":{}}}],["stages",{"_index":1659,"title":{},"body":{"components/HelpComponent.html":{}}}],["standalone",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["start",{"_index":1373,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["started",{"_index":3103,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1274,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["startloading",{"_index":1834,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["startmessageanimation",{"_index":1152,"title":{},"body":{"components/ContactsComponent.html":{}}}],["starts",{"_index":1195,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{}}}],["state",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["state('appear",{"_index":1943,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["state('moved",{"_index":1366,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["state('start",{"_index":1365,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["state/province",{"_index":2138,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["statements",{"_index":3027,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1988,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["statistics",{"_index":1430,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["status",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["status).length",{"_index":1388,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["statusarraymap",{"_index":2964,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["statusarraymap[status",{"_index":2965,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["statuses",{"_index":1438,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["statusmap",{"_index":1326,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["statusmap[containerid",{"_index":1335,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["steps",{"_index":2209,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["still",{"_index":1670,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["stop",{"_index":2754,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["stops",{"_index":1530,"title":{},"body":{"components/HeaderComponent.html":{}}}],["storage",{"_index":1522,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["storagebucket",{"_index":3167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"index.html":{}}}],["stored",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["stores",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["storing",{"_index":2251,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["story",{"_index":387,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["stream",{"_index":537,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["streams",{"_index":482,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["strictly",{"_index":1735,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["string",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["string(date.getdate()).padstart(2",{"_index":2658,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["string(date.getmonth",{"_index":2660,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["strive",{"_index":1611,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["student",{"_index":1722,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["students",{"_index":1579,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["style",{"_index":1216,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["styles",{"_index":768,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styles.scss",{"_index":906,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styleurl",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["styleurls",{"_index":772,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["subcolid",{"_index":2598,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subcollection",{"_index":2595,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["submission",{"_index":661,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["submit",{"_index":667,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["subscribe((event",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["subscribes",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["subscribetocontacts",{"_index":788,"title":{},"body":{"components/ContactListComponent.html":{}}}],["subscribing",{"_index":58,"title":{},"body":{"components/AppComponent.html":{}}}],["subscription",{"_index":687,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["subscriptions",{"_index":831,"title":{},"body":{"components/ContactListComponent.html":{}}}],["subtask",{"_index":2481,"title":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{}},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["subtask's",{"_index":2860,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtask.completed",{"_index":2556,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtask.id",{"_index":2525,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["subtask.id.length",{"_index":2575,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtask.iscompleted",{"_index":2583,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtask.text",{"_index":2531,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtask.title",{"_index":2582,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["subtaskchanged",{"_index":2841,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtaskdata",{"_index":2574,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtaskid",{"_index":2628,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtaskinput",{"_index":2488,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtasklist",{"_index":2731,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.filter((el",{"_index":2800,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.length",{"_index":2802,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtaskmanager",{"_index":2483,"title":{},"body":{"interfaces/Subtask.html":{},"coverage.html":{}}}],["subtasks",{"_index":2484,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["subtasks.length",{"_index":2495,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtasks.map(subtask",{"_index":2581,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtasks.push",{"_index":2613,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtasksbytaskid",{"_index":2886,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["subtasksref",{"_index":2622,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["success",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["successful",{"_index":660,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["successfully",{"_index":1246,"title":{},"body":{"components/ContactsComponent.html":{}}}],["successmessage",{"_index":2301,"title":{},"body":{"components/SignupComponent.html":{}}}],["such",{"_index":1726,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["suits",{"_index":3148,"title":{},"body":{"index.html":{}}}],["summary",{"_index":1361,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{}}}],["summary'},{'name",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["summary.component.html",{"_index":1362,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summary.component.scss",{"_index":1363,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summarycomponent",{"_index":135,"title":{"components/SummaryComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["support",{"_index":2198,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["supports",{"_index":1873,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["switch",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["switches",{"_index":1200,"title":{},"body":{"components/ContactsComponent.html":{}}}],["sync",{"_index":2572,"title":{},"body":{"interfaces/Subtask.html":{}}}],["syncs",{"_index":2571,"title":{},"body":{"interfaces/Subtask.html":{}}}],["syncsubtasks(taskid",{"_index":2573,"title":{},"body":{"interfaces/Subtask.html":{}}}],["system",{"_index":2588,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["t",{"_index":1456,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.date",{"_index":1452,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.dateobj",{"_index":1457,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.id",{"_index":1354,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["t.priority",{"_index":1444,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.status",{"_index":1387,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["table",{"_index":2939,"title":{},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3086,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":2119,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tags",{"_index":2154,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["take",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["take(1",{"_index":197,"title":{},"body":{"guards/AuthGuard.html":{}}}],["target",{"_index":2787,"title":{},"body":{"components/TaskComponent.html":{}}}],["target.closest('.dots",{"_index":2790,"title":{},"body":{"components/TaskComponent.html":{}}}],["task",{"_index":139,"title":{"interfaces/Task.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["task's",{"_index":1302,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["task'},{'name",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["task.component.html",{"_index":2718,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.scss",{"_index":2719,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.ts",{"_index":3029,"title":{},"body":{"coverage.html":{}}}],["task.description?.tolowercase().includes(trimmed",{"_index":2969,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task.id",{"_index":1322,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["task.priority",{"_index":2063,"title":{},"body":{"injectables/PriorityManager.html":{},"components/TaskDetailsComponent.html":{}}}],["task.status",{"_index":1323,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["task.title",{"_index":2988,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task.title.tolowercase().includes(trimmed",{"_index":2968,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task/add",{"_index":3028,"title":{},"body":{"coverage.html":{}}}],["task/category",{"_index":369,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"coverage.html":{}}}],["task/contact",{"_index":1045,"title":{},"body":{"injectables/ContactManager.html":{},"coverage.html":{}}}],["task/priority",{"_index":2044,"title":{},"body":{"injectables/PriorityManager.html":{},"coverage.html":{}}}],["task/subtask",{"_index":2482,"title":{},"body":{"interfaces/Subtask.html":{},"coverage.html":{}}}],["task['status",{"_index":1325,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["taskcomponent",{"_index":137,"title":{"components/TaskComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskdetailscomponent",{"_index":138,"title":{"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskid",{"_index":1268,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["tasklist",{"_index":1263,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["tasklist.find((t",{"_index":1353,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["tasklistmanager",{"_index":2882,"title":{"injectables/TaskListManager.html":{}},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tasks",{"_index":756,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["tasks.filter((t",{"_index":1386,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["tasks.filter(task",{"_index":2967,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasks.push",{"_index":2609,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks/${taskid}/subtasks/${subtaskid",{"_index":2632,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks].sort((a",{"_index":2970,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["taskselected",{"_index":2734,"title":{},"body":{"components/TaskComponent.html":{}}}],["taskservice",{"_index":1260,"title":{"injectables/TaskService.html":{}},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskservice.capitalize(task.category",{"_index":2821,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.description",{"_index":2823,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.title",{"_index":2822,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["tasksforstatus",{"_index":2961,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasksref",{"_index":2617,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["team",{"_index":758,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{}}}],["technical",{"_index":385,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["technologies",{"_index":2152,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tells",{"_index":2082,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["term",{"_index":1587,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["terms",{"_index":1706,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["test",{"_index":3137,"title":{},"body":{"index.html":{}}}],["testing",{"_index":3143,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":3140,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3134,"title":{},"body":{"index.html":{}}}],["text",{"_index":409,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.charat(0).touppercase",{"_index":2672,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.slice(1",{"_index":2673,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["thereto",{"_index":1716,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["therfore",{"_index":2271,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third",{"_index":2094,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third‑party",{"_index":2239,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["this.addedcontact.emit(newcontact",{"_index":752,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.addnewcontact(contact",{"_index":742,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.addsubtask",{"_index":2513,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.animationdirection",{"_index":1237,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.auth.currentuser",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authinitialized.asobservable",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authinitialized.next(true",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authinitialized.value",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authservice.authinitialized",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authservice.currentuser",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authservice.getcurrentuser",{"_index":870,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["this.authservice.isloggedin",{"_index":1551,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["this.authservice.signin(email",{"_index":1902,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signinasguest",{"_index":1904,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signoutuser",{"_index":1548,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.authservice.signup(email",{"_index":2362,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.awaitfeedback",{"_index":2958,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitfeedback.push(task",{"_index":2985,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitingfeedbackcount",{"_index":1397,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.backgroundvisible",{"_index":1241,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.buildcontactfromform",{"_index":739,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.cancelsubtaskedit",{"_index":2546,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.categories",{"_index":401,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.categories.find(c",{"_index":411,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.categorymanager.setselectedcategory(task.category",{"_index":2064,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["this.changetaskstatus.emit",{"_index":2798,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.checkiftouchdevice",{"_index":1885,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.clearinputs",{"_index":753,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closedotsmenu.emit",{"_index":2792,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.closeoverlay.emit('closed",{"_index":737,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closetaskdetails.emit('close",{"_index":2870,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.contactform",{"_index":721,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.patchvalue",{"_index":730,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.reset",{"_index":736,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.valid",{"_index":738,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.value",{"_index":744,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactlist",{"_index":2796,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactlist.filter((contact",{"_index":2815,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.contactlist.length",{"_index":2814,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.contactlist.push(contact",{"_index":2812,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contacts.emit(this.contactlist",{"_index":2813,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.contactselected.emit",{"_index":882,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.addcontact(contact",{"_index":751,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.addcontact(newcontact",{"_index":2367,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.contactservice.deletecontact(this.contacttoedit.id",{"_index":755,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.editcontact$.subscribe(this.getdatatoedit",{"_index":728,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.getcontactbyid(contactid",{"_index":2811,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactservice.getcontactcolor(contact.name",{"_index":1097,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getcontacts().subscribe",{"_index":858,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.getinitials(contact.name",{"_index":1096,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getinitials(name",{"_index":897,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.hideform",{"_index":735,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.selectcontact(contact",{"_index":881,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.selectcontact(newcontact",{"_index":1234,"title":{},"body":{"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["this.contactservice.selectedcontact$.subscribe",{"_index":875,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showaddform",{"_index":885,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showform",{"_index":1231,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.contactservice.updatecontact(this.contacttoedit.id",{"_index":750,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactssubscription",{"_index":857,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactssubscription.unsubscribe",{"_index":878,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contacttoedit",{"_index":729,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.email",{"_index":732,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.id",{"_index":749,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.name",{"_index":731,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.phone",{"_index":733,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit?.id",{"_index":748,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.counttasksbystatus(tasks",{"_index":1442,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.currentuser",{"_index":871,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentuseremail",{"_index":864,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentusersubject.asobservable",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.currentusersubject.next(user",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.distributetasksbystatus(tasks",{"_index":2978,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.done",{"_index":2959,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.done.push(task",{"_index":2986,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.donecount",{"_index":1398,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.editcontactsubject.asobservable",{"_index":497,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(contact",{"_index":598,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(null",{"_index":602,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubscription",{"_index":727,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editcontactsubscription.unsubscribe",{"_index":734,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editingsubtaskid",{"_index":2503,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.editingsubtasktext",{"_index":2505,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.editingsubtasktext.trim",{"_index":2544,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.editingtask",{"_index":2666,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.editsubtask(this.editingsubtaskid",{"_index":2545,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.edittask.emit(\"edit",{"_index":2873,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.emptyarrays",{"_index":2981,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.errormessage",{"_index":1906,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.fb.group",{"_index":1891,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.filtertasksbysearchterm(tasksforstatus",{"_index":2963,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.finalizesubmission",{"_index":743,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.form.group",{"_index":722,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["this.formatdate(date",{"_index":2654,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.formatdate(date.todate",{"_index":2653,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getalluniquecontacts",{"_index":2817,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getalluniquecontacts().slice(0",{"_index":2816,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcleanjson(updatedcontact)).catch((err",{"_index":569,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcleanjson(updatedsubtask)).catch(console.error",{"_index":2633,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcleanjson(updatedtask)).catch(console.error",{"_index":2627,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcompletedsubtaskscount(subtasklist",{"_index":2803,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactlist",{"_index":2793,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactsref",{"_index":542,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcurrentuser",{"_index":856,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.getdatevalue(a.date",{"_index":2971,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.getdatevalue(b.date",{"_index":2972,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.getdroptargetstatus(event.container.id",{"_index":1320,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.geterrormessage(createerror.code",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.geterrormessage(error.code",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.getfielderrormessage(control",{"_index":2370,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.getgreeting",{"_index":1415,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.getpasswordmismatchmessage",{"_index":2368,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.getpreviousurl",{"_index":1981,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.getsinglecontactsref(contactid",{"_index":617,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsinglecontactsref(docid",{"_index":567,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsingletaskref(docid",{"_index":2626,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getsubtasksref(colid",{"_index":2623,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.gettasksbystatus(status",{"_index":2962,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.gettasksref",{"_index":2618,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.greeting",{"_index":1414,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.greetingstate",{"_index":1426,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.groupbyinitial(contacts",{"_index":863,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.groupedcontacts",{"_index":862,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.handleauthresult(result",{"_index":1903,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.handlecontactserror(error",{"_index":861,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.handlecontactsloaded(contacts",{"_index":860,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.handleregistrationresult(result",{"_index":2364,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.hasselectedcategory",{"_index":422,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.history",{"_index":1978,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.length",{"_index":1975,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.push(event.urlafterredirects",{"_index":1977,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.shift",{"_index":1976,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history[this.history.length",{"_index":1979,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.initializeanimation",{"_index":1886,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.initializeform",{"_index":1884,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.inprogress",{"_index":2957,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogress.push(task",{"_index":2984,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogresscount",{"_index":1396,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isdotsmenuopen",{"_index":2791,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.iseditmode",{"_index":740,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.isfirestoretimestamp(date",{"_index":1473,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isloading",{"_index":1905,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.ismobile",{"_index":1418,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.istouchdevice",{"_index":1887,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loadassignedcontacts",{"_index":2867,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.loadsubtasks",{"_index":2868,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.loginform",{"_index":1890,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.get(field",{"_index":1910,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.invalid",{"_index":1898,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.markallastouched",{"_index":1899,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.value",{"_index":1901,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.logostate",{"_index":1895,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.menuopen",{"_index":1550,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.navigationservice.navigateback",{"_index":1568,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["this.nextdeadlinecount",{"_index":1443,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextdeadlinedate",{"_index":1462,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextsubtaskid",{"_index":2494,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.onclose",{"_index":754,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.oncontactselect(matchedcontact",{"_index":868,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.oncontactselected",{"_index":1235,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.opendotsmenu.emit(this.task.id",{"_index":2807,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.openedmenutaskid",{"_index":2806,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.originalsubtasks",{"_index":2585,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.originalsubtasks.filter(original",{"_index":2564,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.overlayvisible",{"_index":2038,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.pageloaded",{"_index":1896,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.parsedate(t.date",{"_index":1455,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.passwordsmatchvalidator",{"_index":2355,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reordertasks(event",{"_index":1321,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.router.events",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["this.router.navigate(['/login",{"_index":199,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["this.router.navigate(['/summary",{"_index":1908,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl",{"_index":1983,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl(previousurl",{"_index":1982,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.runlogoanimationwithdelay",{"_index":1894,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.savenewcontact(name",{"_index":2363,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.savesubtaskedit",{"_index":2552,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.selectedcategory",{"_index":391,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.selectedcontact",{"_index":876,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontact?.id",{"_index":883,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontacts",{"_index":1084,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.findindex(c",{"_index":1091,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.push(contact",{"_index":1092,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.some(c",{"_index":1094,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.splice(index",{"_index":1093,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontactsubject.asobservable",{"_index":489,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(contact",{"_index":589,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(null",{"_index":591,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedpriority",{"_index":2062,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["this.selectedtask",{"_index":2041,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["this.selectionsubscription",{"_index":874,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectionsubscription.unsubscribe",{"_index":879,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.setanimationdirection(window.innerwidth",{"_index":1232,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.setnextdeadline(tasks",{"_index":1437,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.setsubtasks(mappedsubtasks",{"_index":2584,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.settaskcounts(tasks",{"_index":1436,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.showaddoredittask",{"_index":2040,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.showanimatedgreeting",{"_index":1419,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.showcategorydropdown",{"_index":397,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.showcategoryerror",{"_index":423,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.showcontactdetails",{"_index":1244,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showcontactdropdown",{"_index":1090,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.showcontent",{"_index":2869,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.showform",{"_index":1230,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showformsubject.asobservable",{"_index":492,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(false",{"_index":601,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(true",{"_index":594,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showgreeting",{"_index":1420,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.showheaderandsidebar",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["this.showsubtaskconfirmation",{"_index":2500,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.showtaskdetails",{"_index":2039,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.signupform",{"_index":2347,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.errors?.['passwordsdontmatch",{"_index":2375,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('confirmpassword",{"_index":2372,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('password",{"_index":2374,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get(field",{"_index":2369,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.invalid",{"_index":2359,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.markallastouched",{"_index":2360,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.value",{"_index":2361,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.sortallstatusarrays",{"_index":2979,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.awaitfeedback",{"_index":2991,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.done",{"_index":2992,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.inprogress",{"_index":2990,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.todo",{"_index":2989,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.startloading",{"_index":1900,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.startmessageanimation",{"_index":1236,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.subscribetocontacts",{"_index":855,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.subtaskchanged.emit(this.subtasks",{"_index":2876,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.subtaskinput",{"_index":2497,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtaskinput.trim",{"_index":2512,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtasks",{"_index":2492,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["this.subtasks.filter(subtask",{"_index":2524,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtasks.find(s",{"_index":2529,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtasks.push(newsubtask",{"_index":2522,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtasksbytaskid",{"_index":2960,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[selectedtask.id",{"_index":2997,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[task.id",{"_index":2994,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[taskid",{"_index":2995,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.successmessage",{"_index":2365,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.task.assignedto",{"_index":2880,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.task.id",{"_index":2797,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.assignedto?.length",{"_index":2808,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.id",{"_index":2878,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.tasklist",{"_index":1435,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskselected.emit(this.selectedtask",{"_index":2805,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.taskservice.addsubtask(taskid",{"_index":2559,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.taskservice.convertdate(date",{"_index":2871,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.deletesubtask(taskid",{"_index":2570,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.taskservice.deletetask(this.task.id",{"_index":2874,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.getsubtasks(task.id).subscribe((subtasks",{"_index":2993,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.taskservice.getsubtasks(taskid).subscribe(subtasks",{"_index":2579,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.taskservice.getsubtasks(this.task.id).subscribe((subtasks",{"_index":2879,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.gettasks().subscribe((tasks",{"_index":1434,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskservice.seteditingtask(this.task",{"_index":2872,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatesubtask(taskid",{"_index":2576,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.taskservice.updatesubtask(this.task.id",{"_index":2875,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatetask(task.id",{"_index":1344,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.taskservice.updatetask(taskid",{"_index":1355,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.toastanimationstate",{"_index":1239,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.toastmessagevisible",{"_index":1238,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.todo",{"_index":2956,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todo.push(task",{"_index":2982,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todocount",{"_index":1395,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.unsubtask",{"_index":2977,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.unsubtask.unsubscribe",{"_index":2980,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.updatecontact(contact",{"_index":741,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.updatetaskstatus(task",{"_index":1324,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.username",{"_index":1409,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["threaten",{"_index":1754,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["threshold",{"_index":1350,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["through",{"_index":2252,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["thumb",{"_index":1019,"title":{},"body":{"components/ContactListComponent.html":{}}}],["time",{"_index":1400,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["timestamp",{"_index":1469,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["title",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["title]=\"getremainingcontactnames",{"_index":2825,"title":{},"body":{"components/TaskComponent.html":{}}}],["toast",{"_index":1173,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastanimationstate",{"_index":1143,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastmessagevisible",{"_index":1144,"title":{},"body":{"components/ContactsComponent.html":{}}}],["todate",{"_index":1359,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["todo",{"_index":2887,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["todocount",{"_index":1379,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["todolist",{"_index":1328,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["toggle",{"_index":1534,"title":{},"body":{"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["togglecategorydropdown",{"_index":403,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["toggled",{"_index":2848,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["toggledropdown",{"_index":1058,"title":{},"body":{"injectables/ContactManager.html":{}}}],["togglemenu",{"_index":1492,"title":{},"body":{"components/HeaderComponent.html":{}}}],["togglemenu(event",{"_index":1528,"title":{},"body":{"components/HeaderComponent.html":{}}}],["toggles",{"_index":402,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["togglesubtaskcompletion(id",{"_index":2555,"title":{},"body":{"interfaces/Subtask.html":{}}}],["tokens",{"_index":2256,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tool",{"_index":1554,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["tools",{"_index":3118,"title":{},"body":{"index.html":{}}}],["top",{"_index":919,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["total",{"_index":1392,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["totaltaskcount",{"_index":1394,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["touch",{"_index":1840,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["touched",{"_index":2317,"title":{},"body":{"components/SignupComponent.html":{}}}],["track",{"_index":1018,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["trackby",{"_index":2950,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid",{"_index":2907,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid(index",{"_index":2948,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tracking",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["tracks",{"_index":1540,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["trademarks",{"_index":1744,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["transactions",{"_index":2222,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfer",{"_index":2206,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transferarrayitem",{"_index":1316,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["transferred",{"_index":2225,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfers",{"_index":2188,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transform",{"_index":1039,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{}}}],["transition",{"_index":950,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["transition(':enter",{"_index":1545,"title":{},"body":{"components/HeaderComponent.html":{}}}],["transition(':leave",{"_index":1547,"title":{},"body":{"components/HeaderComponent.html":{}}}],["transition('bottom",{"_index":1229,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('right",{"_index":1226,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('start",{"_index":1367,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["transition('void",{"_index":1221,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transitions",{"_index":1199,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatex(0",{"_index":1225,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatex(100",{"_index":1222,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatey",{"_index":2444,"title":{},"body":{"components/SignupComponent.html":{}}}],["translatey(0",{"_index":1228,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatey(100",{"_index":1227,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transmission",{"_index":2088,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transparent",{"_index":928,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["trends",{"_index":2193,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["trigger",{"_index":1215,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeout",{"_index":1942,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["trigger('fadeoutgreeting",{"_index":1364,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeoutwrapper",{"_index":1881,"title":{},"body":{"components/LoginComponent.html":{}}}],["trigger('slideinout",{"_index":1220,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["triggered",{"_index":2515,"title":{},"body":{"interfaces/Subtask.html":{}}}],["triggering",{"_index":1532,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["triggers",{"_index":592,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["trimmed",{"_index":673,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/TaskListManager.html":{}}}],["trimming",{"_index":1962,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["true",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["tslib",{"_index":3096,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1122,"title":{},"body":{"injectables/ContactService.html":{}}}],["type",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":476,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["types",{"_index":2133,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["ui",{"_index":587,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["uid",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["unauthorized",{"_index":1730,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["unbekannt",{"_index":901,"title":{},"body":{"components/ContactListComponent.html":{}}}],["undefined",{"_index":576,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["under",{"_index":1643,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["undergoes",{"_index":2223,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["underline",{"_index":2467,"title":{},"body":{"components/SignupComponent.html":{}}}],["understand",{"_index":2263,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unique",{"_index":447,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["uniquecontactids",{"_index":2809,"title":{},"body":{"components/TaskComponent.html":{}}}],["uniquecontacts",{"_index":1085,"title":{},"body":{"injectables/ContactManager.html":{}}}],["unit",{"_index":3133,"title":{},"body":{"index.html":{}}}],["unless",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["unset",{"_index":2459,"title":{},"body":{"components/SignupComponent.html":{}}}],["unsolicited",{"_index":2282,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribe",{"_index":543,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["unsubscribed",{"_index":2187,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribes",{"_index":830,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["unsubtask",{"_index":2888,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["until",{"_index":2164,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unused",{"_index":1936,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["up",{"_index":686,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["upcoming",{"_index":1446,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["update",{"_index":563,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{}}}],["updatecallback",{"_index":1298,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatecontact",{"_index":645,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["updatecontact(contact",{"_index":700,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["updatecontact(docid",{"_index":566,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updated",{"_index":565,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["updated.assignedto",{"_index":2646,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.category",{"_index":2647,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.date",{"_index":2643,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.description",{"_index":2642,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.iscompleted",{"_index":2648,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.priority",{"_index":2644,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.status",{"_index":2645,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.title",{"_index":2641,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedcontact",{"_index":564,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.email",{"_index":584,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.name",{"_index":583,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.phone",{"_index":585,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedoc",{"_index":456,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedoc(docref",{"_index":568,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedsubtask",{"_index":2629,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask",{"_index":1343,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask).catch((error",{"_index":1345,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatedtask).then(reloadcallback",{"_index":1356,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updateprofile",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updateprofile(user",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updates",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["updatesubtask",{"_index":3004,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatesubtask(taskid",{"_index":2630,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetask",{"_index":3005,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(docid",{"_index":2625,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetasklists",{"_index":2908,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["updatetaskstatus",{"_index":1258,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatetaskstatus(task",{"_index":1312,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updating",{"_index":578,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["uppercase",{"_index":1123,"title":{},"body":{"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["urgency",{"_index":1439,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["urgent",{"_index":2057,"title":{},"body":{"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["urgent').length",{"_index":1445,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["url",{"_index":1955,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["url(\"../../../../public/assets/img/svg/add",{"_index":956,"title":{},"body":{"components/ContactListComponent.html":{}}}],["url(\"./../../../../public/assets/img/icons/checkbox",{"_index":2454,"title":{},"body":{"components/SignupComponent.html":{}}}],["url(\"./../../../../public/assets/img/icons/checkbox.png",{"_index":2451,"title":{},"body":{"components/SignupComponent.html":{}}}],["urls",{"_index":1953,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["usage",{"_index":1610,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["use",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["used",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["user",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["user's",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["user.email",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user.uid",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user?.displayname",{"_index":872,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["user?.email",{"_index":873,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["usercredential",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["usercredential.user",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdata",{"_index":303,"title":{"interfaces/UserData.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["userdata.displayname",{"_index":1411,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdata?.displayname?.trim",{"_index":1410,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdoc",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.data",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.exists",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["username",{"_index":1371,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["users",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["user’s",{"_index":840,"title":{},"body":{"components/ContactListComponent.html":{}}}],["uses",{"_index":2248,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["usevalue",{"_index":3181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":670,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["ux",{"_index":2020,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["valid",{"_index":1470,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["validate",{"_index":470,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["validates",{"_index":697,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validation",{"_index":471,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validationerrors",{"_index":460,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":463,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validators",{"_index":717,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.email",{"_index":724,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.min(10",{"_index":725,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.minlength(2",{"_index":2348,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.minlength(6",{"_index":1892,"title":{},"body":{"components/LoginComponent.html":{}}}],["validators.minlength(8",{"_index":2349,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^(?=.*[a",{"_index":2350,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^\\d",{"_index":726,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.required",{"_index":723,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.requiredtrue",{"_index":2354,"title":{},"body":{"components/SignupComponent.html":{}}}],["validcontacts",{"_index":886,"title":{},"body":{"components/ContactListComponent.html":{}}}],["validcontacts.reduce((groups",{"_index":889,"title":{},"body":{"components/ContactListComponent.html":{}}}],["value",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/variables.html":{}}}],["value.trim().length",{"_index":477,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["values",{"_index":674,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["var",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["variable",{"_index":3041,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2009,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OverlayManager.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1465,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["version",{"_index":2141,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{},"properties.html":{}}}],["via",{"_index":710,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["view",{"_index":1167,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["viewchild",{"_index":1544,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild('menu",{"_index":1541,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewing",{"_index":485,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{}}}],["viewport",{"_index":1537,"title":{},"body":{"components/HeaderComponent.html":{}}}],["views",{"_index":1203,"title":{},"body":{"components/ContactsComponent.html":{}}}],["viktor",{"_index":1701,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["visibility",{"_index":395,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["visible",{"_index":1205,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["visit",{"_index":1862,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["visited",{"_index":1952,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["visual",{"_index":501,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{}}}],["visualize",{"_index":1593,"title":{},"body":{"components/HelpComponent.html":{}}}],["void",{"_index":394,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["vulnerabilities",{"_index":2091,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["waits",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{}}}],["waldingstraße",{"_index":1694,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranties",{"_index":1760,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranty",{"_index":1764,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["we'll",{"_index":1572,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we're",{"_index":1676,"title":{},"body":{"components/HelpComponent.html":{}}}],["we\\'ll",{"_index":1678,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we\\'re",{"_index":1682,"title":{},"body":{"components/HelpComponent.html":{}}}],["weak",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["web",{"_index":1581,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["webkit",{"_index":1017,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["website",{"_index":2115,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["websites",{"_index":2238,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["weight",{"_index":970,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["welcome",{"_index":1569,"title":{},"body":{"components/HelpComponent.html":{}}}],["whenever",{"_index":3114,"title":{},"body":{"index.html":{}}}],["whether",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["white",{"_index":1007,"title":{},"body":{"components/ContactListComponent.html":{}}}],["whitespace",{"_index":468,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["whose",{"_index":2577,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["width",{"_index":907,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["window",{"_index":1193,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["window.addeventlistener('resize",{"_index":1233,"title":{},"body":{"components/ContactsComponent.html":{}}}],["window.innerwidth",{"_index":1245,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{}}}],["window:resize",{"_index":1495,"title":{},"body":{"components/HeaderComponent.html":{}}}],["window:resize(event",{"_index":1511,"title":{},"body":{"components/HeaderComponent.html":{}}}],["withhashlocation",{"_index":3160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":1637,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["without",{"_index":676,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["words",{"_index":2099,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["work",{"_index":1594,"title":{},"body":{"components/HelpComponent.html":{}}}],["wrap",{"_index":985,"title":{},"body":{"components/ContactListComponent.html":{}}}],["wrapper",{"_index":2396,"title":{},"body":{"components/SignupComponent.html":{}}}],["wrong",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["wrongdoing",{"_index":2232,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["x",{"_index":2424,"title":{},"body":{"components/SignupComponent.html":{}}}],["y",{"_index":916,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["year",{"_index":2662,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["yes",{"_index":1121,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskDetailsComponent.html":{}}}],["you'll",{"_index":1627,"title":{},"body":{"components/HelpComponent.html":{}}}],["you've",{"_index":1640,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ll",{"_index":1679,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ve",{"_index":1680,"title":{},"body":{"components/HelpComponent.html":{}}}],["yourself",{"_index":1636,"title":{},"body":{"components/HelpComponent.html":{}}}],["z",{"_index":1028,"title":{},"body":{"components/ContactListComponent.html":{}}}],["z])(?=.*\\d)(?=.*[!@#$%^&*()_",{"_index":2351,"title":{},"body":{"components/SignupComponent.html":{}}}],["zindex",{"_index":3184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zip/postal",{"_index":2139,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["zone.js",{"_index":3098,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                SidebarComponent\n                                HeaderComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                showHeaderAndSidebar\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:36\n                            \n                        \n\n                \n                    \n                            Subscribes to router events to determine if the current route\nrequires hiding the header and sidebar. Also initializes navigation tracking.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to store navigation history.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's router for subscribing to route changes.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        showHeaderAndSidebar\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:31\n                        \n                    \n\n            \n                \n                    Controls whether the header and sidebar should be displayed.\nHidden on specific routes like login or signup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'join'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:36\n                        \n                    \n\n            \n                \n                    The title of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet, Router, NavigationEnd } from '@angular/router';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { HeaderComponent } from './header/header.component';\nimport { CommonModule } from '@angular/common';\nimport { NavigationHistoryService } from './services/navigation-history.service';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, SidebarComponent, HeaderComponent, CommonModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\n\nexport class AppComponent {\n\n  /**\n   * Controls whether the header and sidebar should be displayed.\n   * Hidden on specific routes like login or signup.\n   */\n  showHeaderAndSidebar = true;\n\n  /**\n   * The title of the application.\n   */\n  title = 'join';\n\n  /**\n   * Subscribes to router events to determine if the current route\n   * requires hiding the header and sidebar. Also initializes navigation tracking.\n   *\n   * @param navigationService - Service to store navigation history.\n   * @param router - Angular's router for subscribing to route changes.\n   */\n  constructor(\n    private navigationService: NavigationHistoryService,\n    private router: Router\n  ) {\n    this.router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        this.showHeaderAndSidebar = !['/login', '/', '/signup'].includes(\n          event.urlAfterRedirects\n        );\n      });\n  }\n}\n\n\n    \n\n    \n        \n  \n  \n    \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/services/auth.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Route guard that prevents access to certain routes\nunless the user is authenticated.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            Constructs the AuthGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to check the user's authentication status\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Determines whether a route can be activated.\nIf the user is not authenticated, redirects to the login page.\nWaits for Firebase Auth to initialize before making the decision.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable that resolves to true if user is logged in\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { Observable, combineLatest, map, filter, take } from 'rxjs';\n\n/**\n * Route guard that prevents access to certain routes\n * unless the user is authenticated.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthGuard implements CanActivate {\n\n  /**\n   * Constructs the AuthGuard.\n   * @param authService - Service to check the user's authentication status\n   * @param router - Angular Router used for navigation\n   */\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  /**\n   * Determines whether a route can be activated.\n   * If the user is not authenticated, redirects to the login page.\n   * Waits for Firebase Auth to initialize before making the decision.\n   *\n   * @returns Observable that resolves to true if user is logged in\n   */\n  canActivate(): Observable {\n    return combineLatest([\n      this.authService.currentUser$,\n      this.authService.authInitialized$\n    ]).pipe(\n      filter(([user, initialized]) => initialized),\n      take(1),\n      map(([user, initialized]) => {\n        if (user) {\n          return true;\n        } else {\n          this.router.navigate(['/login']);\n          return false;\n        }\n      })\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication service for handling user registration, login, logout,\nguest access, profile updates, account deletion, and state tracking.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authInitialized\n                            \n                            \n                                    Public\n                                authInitialized$\n                            \n                            \n                                    Public\n                                currentUser$\n                            \n                            \n                                    Private\n                                currentUserSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                getCurrentUser\n                            \n                            \n                                    Async\n                                getCurrentUserData\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInAsGuest\n                            \n                            \n                                    Async\n                                signOutUser\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: Auth, firestore: Firestore, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.service.ts:52\n                            \n                        \n\n                \n                    \n                            Initializes the AuthService and subscribes to authentication state changes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Auth instance\n\n\n                                                        \n                                                \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Firestore instance\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAccount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Deletes the currently authenticated user account.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Gets the current authenticated Firebase user.\n\n\n                        \n                            Returns :     User | null\n\n                        \n                            \n                                The current user or null if not logged in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCurrentUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:157\n                        \n                    \n\n\n            \n                \n                        Retrieves the current user's data from Firestore.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The user's Firestore data or null if not found\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(errorCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Maps Firebase Auth error codes to human-readable error messages.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                errorCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFirebase Auth error code\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string describing the error\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Checks whether a user is currently authenticated.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a user is signed in, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Signs in a user with email and password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInAsGuest()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Signs in as a guest user. If guest user does not exist, it will be created.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:148\n                        \n                    \n\n\n            \n                \n                        Signs out the currently authenticated user and redirects to the login page.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(email: string, password: string, displayName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Registers a new user with email, password, and display name.\nStores user data in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email address\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                        \n                                                displayName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's display name\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        authInitialized\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authInitialized$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authInitialized.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:52\n                        \n                    \n\n            \n                \n                    Observable that emits true once Firebase Auth has finished initializing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentUser$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentUserSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:47\n                        \n                    \n\n            \n                \n                    Observable emitting the current authenticated Firebase user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:41\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n  private authInitialized = new BehaviorSubject(false);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n  \n  /**\n   * Observable that emits true once Firebase Auth has finished initializing.\n   */\n  public authInitialized$: Observable = this.authInitialized.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n      if (!this.authInitialized.value) {\n        this.authInitialized.next(true);\n      }\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category.html":{"url":"interfaces/Category.html","title":"interface - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CategoryManager {\n  showCategoryError: boolean = false;\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n\n   /**\n   * Handles category selection and clears error state.\n   */\n  onCategorySelect() {\n    if (this.hasSelectedCategory()) {\n      this.showCategoryError = false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryManager.html":{"url":"injectables/CategoryManager.html","title":"injectable - CategoryManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                CategoryManager handles all category-related operations for the AddTaskComponent.\nThis includes category selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                categories\n                            \n                            \n                                    Private\n                                selectedCategory\n                            \n                            \n                                    Private\n                                showCategoryDropdown\n                            \n                            \n                                showCategoryError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getCategories\n                            \n                            \n                                getCategoryColor\n                            \n                            \n                                getCategoryText\n                            \n                            \n                                getSelectedCategory\n                            \n                            \n                                getShowCategoryDropdown\n                            \n                            \n                                hasSelectedCategory\n                            \n                            \n                                onCategorySelect\n                            \n                            \n                                selectCategory\n                            \n                            \n                                setSelectedCategory\n                            \n                            \n                                setShowCategoryDropdown\n                            \n                            \n                                toggleCategoryDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Clears the selected category and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategories\n                        \n                    \n                \n            \n            \n                \ngetCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:57\n                        \n                    \n\n\n            \n                \n                        Gets all available categories\n\n\n                        \n                            Returns :         Category[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryColor\n                        \n                    \n                \n            \n            \n                \ngetCategoryColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:93\n                        \n                    \n\n\n            \n                \n                        Returns the color for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category color or default color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryText\n                        \n                    \n                \n            \n            \n                \ngetCategoryText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:81\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category label or default text.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedCategory\n                        \n                    \n                \n            \n            \n                \ngetSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:29\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected category\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:43\n                        \n                    \n\n\n            \n                \n                        Gets the category dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSelectedCategory\n                        \n                    \n                \n            \n            \n                \nhasSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Checks if a category is currently selected.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a category is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCategorySelect\n                        \n                    \n                \n            \n            \n                \nonCategorySelect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:120\n                        \n                    \n\n\n            \n                \n                        Handles category selection and clears error state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectCategory\n                        \n                    \n                \n            \n            \n                \nselectCategory(category: Category)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:72\n                        \n                    \n\n\n            \n                \n                        Selects a category and closes the dropdown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            Category\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe category to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedCategory\n                        \n                    \n                \n            \n            \n                \nsetSelectedCategory(category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:36\n                        \n                    \n\n\n            \n                \n                        Sets the selected category\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowCategoryDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:50\n                        \n                    \n\n\n            \n                \n                        Sets the category dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Toggles the category dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showCategoryDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showCategoryError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CategoryManager {\n  showCategoryError: boolean = false;\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n\n   /**\n   * Handles category selection and clears error state.\n   */\n  onCategorySelect() {\n    if (this.hasSelectedCategory()) {\n      this.showCategoryError = false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact.html":{"url":"interfaces/Contact.html","title":"interface - Contact","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a contact.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email address of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Unique identifier (automatically assigned by Firestore)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Full name of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional phone number of the contact\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Updates an existing contact in Firestore.\n   *\n   * @param docId - The Firestore document ID of the contact to update.\n   * @param updatedContact - The updated contact data.\n   */\n  async updateContact(docId: string, updatedContact: Contact): Promise {\n    let docRef = this.getSingleContactsRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n      console.error(err);\n    });\n  }\n\n  /**\n   * Returns a plain JSON object with only the allowed contact fields.\n   * This is used to avoid including undefined or extra properties when updating Firestore.\n   *\n   * @param updatedContact - The contact object to sanitize.\n   * @returns A JSON object containing name, email, and phone.\n   */\n  getCleanJson(updatedContact: Contact): Partial {\n    return {\n      name: updatedContact.name,\n      email: updatedContact.email,\n      phone: updatedContact.phone,\n    };\n  }\n\n  /**\n   * Emits a contact to the selected contact observable.\n   * Used to show the contact details in the UI.\n   *\n   * @param contact - The contact to select.\n   */\n  selectContact(contact: Contact): void {\n    this.selectedContactSubject.next(contact);\n  }\n\n  /**\n   * Clears the currently selected contact.\n   */\n  clearSelection(): void {\n    this.selectedContactSubject.next(null);\n  }\n\n  /**\n   * Triggers the display of the add contact form.\n   */\n  showAddForm(): void {\n    this.showFormSubject.next(true);\n  }\n\n  /**\n   * Triggers the display of the edit contact form with a prefilled contact.\n   *\n   * @param contact - The contact to edit.\n   */\n  showEditForm(contact: Contact): void {\n    this.editContactSubject.next(contact);\n    this.showFormSubject.next(true);\n  }\n\n  /**\n   * Hides the contact form and clears the edit state.\n   */\n  hideForm(): void {\n    this.showFormSubject.next(false);\n    this.editContactSubject.next(null);\n  }\n\n  /**\n   * Deletes a contact from Firestore.\n   *\n   * @param docId - The Firestore document ID of the contact to delete.\n   */\n  async deleteContact(docId: string): Promise {\n    await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  /**\n   * Generates a consistent avatar color for a contact based on their name.\n   *\n   * @param contactName - The contact’s name used to calculate a hash.\n   * @returns A hexadecimal color string from the avatarColors array.\n   */\n  getContactColor(contactName: string): string {\n    let hash = 0;\n    for (let i = 0; i  {\n    const contactRef = this.getSingleContactsRef(contactId);\n    return getDoc(contactRef).then(snapshot => {\n      if (snapshot.exists()) {\n        return { id: snapshot.id, ...snapshot.data() } as Contact;\n      }\n      return null;\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactFormComponent.html":{"url":"components/ContactFormComponent.html","title":"component - ContactFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-form/contact-form.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-form\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contact-form.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contact-form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactForm\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                contactToEdit\n                            \n                            \n                                    Private\n                                    Optional\n                                editContactSubscription\n                            \n                            \n                                getDataToEdit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addNewContact\n                            \n                            \n                                    Private\n                                buildContactFromForm\n                            \n                            \n                                clearInputs\n                            \n                            \n                                deleteContact\n                            \n                            \n                                    Private\n                                finalizeSubmission\n                            \n                            \n                                    Private\n                                isEditMode\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                    Private\n                                updateContact\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                addedContact\n                            \n                            \n                                closeOverlay\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:54\n                            \n                        \n\n                \n                    \n                            Constructor injecting the form builder and contact service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's FormBuilder for creating the form.\n\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService that manages contact CRUD operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        addedContact\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:33\n                            \n                        \n                \n                    \n                        Emits a newly created contact after successful form submission.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeOverlay\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:39\n                            \n                        \n                \n                    \n                        Emits when the form overlay is closed (e.g., after cancel or submit).\nEmits the string 'closed' as an identifier.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addNewContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    addNewContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Adds a new contact using the ContactService and emits it if successful.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new contact data to be added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildContactFromForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildContactFromForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:133\n                        \n                    \n\n\n            \n                \n                        Builds a trimmed Contact object from form values.\n\n\n                        \n                            Returns :         Contact\n\n                        \n                            \n                                A Contact object based on form input.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearInputs\n                        \n                    \n                \n            \n            \n                \nclearInputs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:185\n                        \n                    \n\n\n            \n                \n                        Resets the form without closing the overlay.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteContact\n                        \n                    \n                \n            \n            \n                \ndeleteContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:192\n                        \n                    \n\n\n            \n                \n                        Deletes the contact being edited (if any) and closes the form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        finalizeSubmission\n                        \n                    \n                \n            \n            \n                \n                        \n                    finalizeSubmission()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:177\n                        \n                    \n\n\n            \n                \n                        Clears form inputs and closes the form after submission.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isEditMode\n                        \n                    \n                \n            \n            \n                \n                        \n                    isEditMode()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Determines whether the form is in edit mode.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if editing an existing contact, false if creating a new one.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:94\n                        \n                    \n\n\n            \n                \n                        Cleans up the subscription on component destruction to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Initializes the form and subscribes to editContact$ to load contact data\nwhen editing an existing entry.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:103\n                        \n                    \n\n\n            \n                \n                        Closes the contact form, resets its state, and emits a closing event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Handles form submission. Validates input, creates or updates the contact\nusing the ContactService, emits the new contact (if applicable),\nand closes the form.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:156\n                        \n                    \n\n\n            \n                \n                        Updates an existing contact using the ContactService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact data to be saved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:44\n                        \n                    \n\n            \n                \n                    The reactive form group for the contact form.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:61\n                        \n                    \n\n            \n                \n                    - Service that manages contact CRUD operations.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:49\n                        \n                    \n\n            \n                \n                    The contact to edit, if editing mode is active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        editContactSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:54\n                        \n                    \n\n            \n                \n                    Subscription to receive the contact data to be edited via the ContactService.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDataToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:80\n                        \n                    \n\n            \n                \n                    Receives a contact to be edited and pre-fills the form fields.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    contact\n                                                    \n                                                            \nThe contact object or null to clear the form.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact, notOnlyWhitespace } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-contact-form',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  templateUrl: './contact-form.component.html',\n  styleUrl: './contact-form.component.scss',\n})\n\nexport class ContactFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * Emits a newly created contact after successful form submission.\n   */\n  @Output() addedContact = new EventEmitter();\n\n  /**\n   * Emits when the form overlay is closed (e.g., after cancel or submit).\n   * Emits the string 'closed' as an identifier.\n   */\n  @Output() closeOverlay = new EventEmitter();\n\n  /**\n   * The reactive form group for the contact form.\n   */\n  contactForm!: FormGroup;\n\n  /**\n   * The contact to edit, if editing mode is active.\n   */\n  contactToEdit?: Contact;\n\n  /**\n   * Subscription to receive the contact data to be edited via the ContactService.\n   */\n  private editContactSubscription?: Subscription;\n\n  /**\n   * Constructor injecting the form builder and contact service.\n   * @param form - Angular's FormBuilder for creating the form.\n   * @param contactService - Service that manages contact CRUD operations.\n   */\n  constructor(private form: FormBuilder, public contactService: ContactService) { }\n\n  /**\n   * Initializes the form and subscribes to editContact$ to load contact data\n   * when editing an existing entry.\n   */\n  ngOnInit(): void {\n    this.contactForm = this.form.group({\n      name: ['', [Validators.required, notOnlyWhitespace]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.required, Validators.min(10), Validators.pattern(/^\\d+$/)]]\n    });\n    this.editContactSubscription = this.contactService.editContact$.subscribe(this.getDataToEdit);\n  }\n\n  /**\n   * Receives a contact to be edited and pre-fills the form fields.\n   * @param contact - The contact object or null to clear the form.\n   */\n  getDataToEdit = (contact: Contact | null) => {\n    this.contactToEdit = contact || undefined;\n    if (this.contactToEdit) {\n      this.contactForm.patchValue({\n        name: this.contactToEdit.name,\n        email: this.contactToEdit.email,\n        phone: this.contactToEdit.phone\n      });\n    }\n  }\n\n  /**\n   * Cleans up the subscription on component destruction to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    if (this.editContactSubscription) {\n      this.editContactSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Closes the contact form, resets its state, and emits a closing event.\n   */\n  onClose(): void {\n    this.contactService.hideForm();\n    this.contactForm.reset();\n    this.closeOverlay.emit('closed');\n  }\n\n  /**\n   * Handles form submission. Validates input, creates or updates the contact\n   * using the ContactService, emits the new contact (if applicable),\n   * and closes the form.\n   */\n  async onSubmit(): Promise {\n    if (!this.contactForm.valid) return;\n\n    const contact = this.buildContactFromForm();\n\n    if (this.isEditMode()) {\n      this.updateContact(contact);\n    } else {\n      await this.addNewContact(contact);\n    }\n\n    this.finalizeSubmission();\n  }\n\n  /**\n   * Builds a trimmed Contact object from form values.\n   * \n   * @returns A Contact object based on form input.\n   */\n  private buildContactFromForm(): Contact {\n    const { name, email, phone } = this.contactForm.value;\n    return {\n      name: name.trim(),\n      email: email.trim(),\n      phone: phone.trim(),\n    };\n  }\n\n  /**\n   * Determines whether the form is in edit mode.\n   * \n   * @returns True if editing an existing contact, false if creating a new one.\n   */\n  private isEditMode(): boolean {\n    return !!this.contactToEdit?.id;\n  }\n\n  /**\n   * Updates an existing contact using the ContactService.\n   * \n   * @param contact - The contact data to be saved.\n   */\n  private updateContact(contact: Contact): void {\n    if (this.contactToEdit && this.contactToEdit.id) {\n      this.contactService.updateContact(this.contactToEdit.id, contact);\n    }\n  }\n\n  /**\n   * Adds a new contact using the ContactService and emits it if successful.\n   * \n   * @param contact - The new contact data to be added.\n   */\n  private async addNewContact(contact: Contact): Promise {\n    const newContact = await this.contactService.addContact(contact);\n    if (newContact) {\n      this.addedContact.emit(newContact);\n    }\n  }\n\n  /**\n   * Clears form inputs and closes the form after submission.\n   */\n  private finalizeSubmission(): void {\n    this.clearInputs();\n    this.onClose();\n  }\n\n  /**\n   * Resets the form without closing the overlay.\n   */\n  clearInputs() {\n    this.contactForm.reset();\n  }\n\n  /**\n   * Deletes the contact being edited (if any) and closes the form.\n   */\n  deleteContact() {\n    if (this.contactToEdit?.id) {\n      this.contactService.deleteContact(this.contactToEdit.id);\n      this.onClose();\n    }\n  }\n}\n\n\n    \n\n    \n        \n    \n        \n          \n              \n              \n              \n              \n              \n               \n            \n        \n     \n    \n        \n        Add contact\n        Edit contact\n        Tasks are better with a team!\n        \n    \n    \n        \n            \n                \n                {{ contactService.getInitials(contactToEdit.name) }}\n            \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! Please add a name.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! This email seems invalid or missing.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oh! Don´t forget the phone number.\n                                \n                 \n                    \n                        Cancel\n                         \n                            \n                            \n                            \n                            \n                            \n                            \n                        \n                    \n                     \n                        Delete\n                    \n                    \n                        Create contact\n                        \n                    \n                    \n                        Save\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                        Add contact        Edit contact        Tasks are better with a team!                                                                    {{ contactService.getInitials(contactToEdit.name) }}                                                                                                                                                                            Oops! Please add a name.                                                                                                                                                                    Oops! This email seems invalid or missing.                                                                                                                                                                    Oh! Don´t forget the phone number.                                                                                             Cancel                                                                                                                                                                                                                                                                                          Delete                                                                Create contact                                                                                        Save                                                                                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactListComponent.html":{"url":"components/ContactListComponent.html","title":"component - ContactListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-list/contact-list.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-list\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./contact-list.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./contact-list.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Private\n                                contactsSubscription\n                            \n                            \n                                currentUser\n                            \n                            \n                                currentUserEmail\n                            \n                            \n                                groupedContacts\n                            \n                            \n                                keyAsc\n                            \n                            \n                                selectedContact\n                            \n                            \n                                    Private\n                                selectionSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUser\n                            \n                            \n                                getInitials\n                            \n                            \n                                groupByInitial\n                            \n                            \n                                    Private\n                                handleContactsError\n                            \n                            \n                                    Private\n                                handleContactsLoaded\n                            \n                            \n                                isCurrentUser\n                            \n                            \n                                isSelected\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAddNewContact\n                            \n                            \n                                onContactSelect\n                            \n                            \n                                    Private\n                                subscribeToContacts\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactSelected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:110\n                            \n                        \n\n                \n                    \n                            Constructor injecting required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nManages contact data and selection.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nProvides the currently logged-in user's info.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        contactSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-list/contact-list.component.ts:110\n                            \n                        \n                \n                    \n                        Emits an event when a contact is selected.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:74\n                        \n                    \n\n\n            \n                \n                        Identifying the current user to directly select this user in the contact list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:190\n                        \n                    \n\n\n            \n                \n                        Returns the initials of the given name using ContactService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Initials string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupByInitial\n                        \n                    \n                \n            \n            \n                \ngroupByInitial(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:169\n                        \n                    \n\n\n            \n                \n                        Groups contacts alphabetically by the first character of their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of contacts to group.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object with initials as keys and arrays of contacts as values.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleContactsError\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleContactsError(error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Handles an error that occurred while loading contacts.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object returned from the subscription.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleContactsLoaded\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleContactsLoaded(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:51\n                        \n                    \n\n\n            \n                \n                        Processes the loaded contacts by grouping them\nand selecting the current user's contact if present.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of contact objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCurrentUser\n                        \n                    \n                \n            \n            \n                \nisCurrentUser(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:135\n                        \n                    \n\n\n            \n                \n                        Checks if the given contact matches the current logged-in user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to compare with the current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact's email matches the user's email.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSelected\n                        \n                    \n                \n            \n            \n                \nisSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:153\n                        \n                    \n\n\n            \n                \n                        Determines if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:125\n                        \n                    \n\n\n            \n                \n                        Unsubscribes from all subscriptions to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Initializes the component by loading contacts,\ngrouping them by initial, identifying the current user,\nand handling errors and contact selection.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAddNewContact\n                        \n                    \n                \n            \n            \n                \nonAddNewContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the \"add contact\" form via the ContactService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelect\n                        \n                    \n                \n            \n            \n                \nonContactSelect(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Handles selection of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribeToContacts\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribeToContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:38\n                        \n                    \n\n\n            \n                \n                        Subscribes to the contact list, groups them by initial letter,\nand selects the current user’s contact if available.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:118\n                        \n                    \n\n            \n                \n                    - Manages contact data and selection.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        contactsSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:102\n                        \n                    \n\n            \n                \n                    The display name of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUserEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:97\n                        \n                    \n\n            \n                \n                    The email of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:87\n                        \n                    \n\n            \n                \n                    Holds the contacts grouped by the first letter of their name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyAsc\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:183\n                        \n                    \n\n            \n                \n                    Sorting helper for alphabetical keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedContact\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:92\n                        \n                    \n\n            \n                \n                    The currently selected contact (if any).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectionSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:105\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-contact-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './contact-list.component.html',\n  styleUrls: ['./contact-list.component.scss']\n})\n\nexport class ContactListComponent implements OnInit, OnDestroy {\n\n  /**\n  * Initializes the component by loading contacts,\n  * grouping them by initial, identifying the current user,\n  * and handling errors and contact selection.\n  */\n  ngOnInit(): void {\n    this.subscribeToContacts();\n    this.getCurrentUser();\n  }\n\n  /**\n   * Subscribes to the contact list, groups them by initial letter,\n   * and selects the current user’s contact if available.\n   */\n  private subscribeToContacts(): void {\n    this.contactsSubscription = this.contactService.getContacts().subscribe({\n      next: (contacts) => this.handleContactsLoaded(contacts),\n      error: (error) => this.handleContactsError(error),\n    });\n  }\n\n  /**\n   * Processes the loaded contacts by grouping them\n   * and selecting the current user's contact if present.\n   * \n   * @param contacts - The array of contact objects.\n   */\n  private handleContactsLoaded(contacts: Contact[]): void {\n    this.groupedContacts = this.groupByInitial(contacts);\n\n    if (this.currentUserEmail) {\n      const matchedContact = contacts.find(c => c.email === this.currentUserEmail);\n      if (matchedContact) {\n        this.onContactSelect(matchedContact);\n      }\n    }\n  }\n\n  /**\n   * Handles an error that occurred while loading contacts.\n   * \n   * @param error - The error object returned from the subscription.\n   */\n  private handleContactsError(error: any): void {\n    console.error('Error loading contacts:', error);\n  }\n\n  /**\n   * Identifying the current user to directly select this user in the contact list.\n   */\n  getCurrentUser() {\n    const user = this.authService.getCurrentUser();\n    this.currentUser = user?.displayName || null;\n    this.currentUserEmail = user?.email || null;\n\n    this.selectionSubscription = this.contactService.selectedContact$.subscribe(\n      contact => this.selectedContact = contact\n    );\n  }\n\n  /**\n   * Holds the contacts grouped by the first letter of their name.\n   */\n  groupedContacts: { [key: string]: Contact[] } = {};\n\n  /**\n   * The currently selected contact (if any).\n   */\n  selectedContact: Contact | null = null;\n\n  /**\n   * The email of the currently authenticated user.\n   */\n  currentUserEmail: string | null = null;\n\n  /**\n   * The display name of the currently authenticated user.\n   */\n  currentUser: string | null = null;\n\n  private contactsSubscription: Subscription = new Subscription();\n  private selectionSubscription: Subscription = new Subscription();\n\n  /**\n   * Emits an event when a contact is selected.\n   */\n  @Output() contactSelected = new EventEmitter();\n\n  /**\n   * Constructor injecting required services.\n   * @param contactService - Manages contact data and selection.\n   * @param authService - Provides the currently logged-in user's info.\n   */\n  constructor(\n    public contactService: ContactService,\n    private authService: AuthService\n  ) { }\n\n  /**\n   * Unsubscribes from all subscriptions to avoid memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.contactsSubscription.unsubscribe();\n    this.selectionSubscription.unsubscribe();\n  }\n\n  /**\n   * Checks if the given contact matches the current logged-in user.\n   * @param contact - The contact to compare with the current user.\n   * @returns True if the contact's email matches the user's email.\n   */\n  isCurrentUser(contact: Contact): boolean {\n    return typeof contact.email === 'string' && contact.email === this.currentUserEmail;\n  }\n\n  /**\n   * Handles selection of a contact.\n   * @param contact - The contact to select.\n   */\n  onContactSelect(contact: Contact): void {\n    this.contactService.selectContact(contact);\n    this.contactSelected.emit();\n  }\n\n  /**\n   * Determines if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected.\n   */\n  isSelected(contact: Contact): boolean {\n    return this.selectedContact?.id === contact.id;\n  }\n\n  /**\n   * Triggers the display of the \"add contact\" form via the ContactService.\n   */\n  onAddNewContact(): void {\n    this.contactService.showAddForm();\n  }\n\n  /**\n   * Groups contacts alphabetically by the first character of their name.\n   * @param contacts - The list of contacts to group.\n   * @returns An object with initials as keys and arrays of contacts as values.\n   */\n  groupByInitial(contacts: Contact[]): { [key: string]: Contact[] } {\n    const validContacts = contacts.filter(contact => contact && contact.name);\n    return validContacts.reduce((groups, contact) => {\n      const initial = contact.name.charAt(0).toUpperCase();\n      groups[initial] = groups[initial] || [];\n      groups[initial].push(contact);\n      groups[initial].sort((a, b) => a.name.localeCompare(b.name));\n      return groups;\n    }, {} as { [key: string]: Contact[] });\n  }\n\n  /**\n   * Sorting helper for alphabetical keys.\n   */\n  keyAsc = (a: any, b: any) => a.key.localeCompare(b.key);\n\n  /**\n   * Returns the initials of the given name using ContactService.\n   * @param name - The full name of the contact.\n   * @returns Initials string.\n   */\n  getInitials(name: string | undefined): string {\n    return this.contactService.getInitials(name);\n  }\n}\n\n    \n\n    \n        \n  \n    Add new contact\n  \n\n  \n    {{ group.key }}\n    \n      \n        {{ contactService.getInitials(contact?.name) }}\n      \n      Me\n      \n        \n          {{ contact?.name || \"Unbekannt\" }}\n        \n        {{ contact?.email || \"Keine E-Mail\" }}\n      \n    \n  \n\n\n\n  \n    \n  \n\n\n    \n\n    \n                \n                    ./contact-list.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.contact-list {\n  width: 100%;\n  max-width: 456px;\n  height: calc(100dvh - 100px);\n  max-height: none;\n  overflow-y: auto;\n  margin-top: -9px;\n  padding-bottom: 80px;\n  background-color: var(--background-light);\n  scrollbar-color: var(--background-default-dark) transparent;\n\n  .add-button {\n    @include btn;\n    @include btn-dark;\n    width: calc(100% - clamp(12px, 3vw, 24px));\n    max-width: 352px;\n    height: clamp(48px, 12vw, 56px);\n    margin-top: 22.5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: clamp(12px, 2.5vw, 16px);\n    transition: background-color 0.2s ease;\n\n    &::after {\n      content: \"\";\n      width: clamp(20px, 4vw, 24px);\n      height: clamp(20px, 4vw, 24px);\n      background-image: url(\"../../../../public/assets/img/svg/add-person.svg\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n  }\n\n  h4 {\n    margin-top: clamp(8px, 2vw, 16px);\n    font-family: \"Inter\", sans-serif;\n    font-weight: 400;\n    font-size: clamp(14px, 3vw, 20px);\n    color: #000000;\n    padding: clamp(8px, 1.5vw, 17px) clamp(12px, 3vw, 36px);\n    gap: 8px;\n    border-bottom: 1px solid var(--background-default-dark);\n    margin-bottom: clamp(4px, 1vw, 8px);\n    max-width: 352px;\n  }\n\n  .contact-entry {\n    display: flex;\n    align-items: center;\n    margin: clamp(4px, 1vw, 8px) 0;\n    padding: clamp(8px, 1.5vw, 15px) clamp(8px, 2vw, 24px);\n    gap: clamp(12px, 2vw, 24px);\n    flex-wrap: wrap;\n    position: relative;\n    cursor: pointer;\n    transition: background-color 0.2s;\n    border-radius: 10px;\n\n    &:hover {\n      background-color: #f5f5f5;\n    }\n\n    &.selected {\n      background-color: #2a3647;\n\n      .info .name {\n        color: #ffffff;\n      }\n\n      .avatar {\n        border: 2px solid #ffffff;\n      }\n    }\n\n    .active-user {\n      @include inter400-fs12;\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      color: var(--text-color-dark);\n      border-radius: 50%;\n      background-color: var(--background-light);\n      border: 2px solid var(--text-color-error);\n      padding: 4px;\n    }\n\n    .avatar {\n      width: 32px;\n      height: 32px;\n      border-radius: 45px;\n      background-color: #ccc;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-right: 10px;\n      font-family: \"Inter\", sans-serif;\n      font-weight: 400;\n      font-size: 12px;\n      color: #ffffff;\n      border: 2px solid transparent;\n      transition: border 0.2s ease;\n    }\n\n    .info {\n      flex: 1;\n      min-width: 0;\n      \n      .name {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(14px, 3vw, 20px);\n        color: #000000;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        margin-bottom: 2px;\n      }\n\n      .email {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(12px, 2.5vw, 16px);\n        color: #007cee;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n  }\n}\n\n@media(max-width: 1000px) {\n  .contact-list {\n    height: calc(100dvh - 190px);\n  }\n}\n\n@media (max-width: 780px) {\n  .contact-list {\n    width: 100%;\n    max-width: none;\n    margin: 0;\n    &::-webkit-scrollbar {\n      width: 4px;\n    }\n    &::-webkit-scrollbar-track {\n      background: transparent;\n    }\n    &::-webkit-scrollbar-thumb {\n      background-color: --background-default-dark;\n      border-radius: 4px;\n    }\n    \n    .add-button {\n      display: none;\n    }\n    \n    h4 {\n      max-width: none;\n      width: 100%;\n    }\n    \n    .contact-entry {\n      width: 100%;\n      max-width: none;\n    }\n  }\n  \n  .fab-container {\n    display: block !important;\n    bottom: 100px !important;\n    right: 20px !important;\n  }\n  \n  .fab {\n    width: 56px;\n    height: 56px;\n    \n    img {\n      width: 30px;\n      height: 21px;\n    }\n  }\n}\n\n.fab-container {\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n  z-index: 1000;\n  display: none;\n}\n\n.fab {\n  width: 56px;\n  height: 56px;\n  border-radius: 46px;\n  background-color: #2a3647;\n  border: none;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: #29ABE2;\n    border: none;\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);\n    transform: scale(1.1);\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  img {\n    width: 30px;\n    height: 21px;\n    filter: brightness(0) invert(1);\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Add new contact        {{ group.key }}                  {{ contactService.getInitials(contact?.name) }}            Me                        {{ contact?.name || \"Unbekannt\" }}                {{ contact?.email || \"Keine E-Mail\" }}                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactManager.html":{"url":"injectables/ContactManager.html","title":"injectable - ContactManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/contact-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                ContactManager handles all contact-related operations for the AddTaskComponent.\nThis includes contact selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                categoryManager\n                            \n                            \n                                    Private\n                                selectedContacts\n                            \n                            \n                                    Private\n                                showContactDropdown\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContactInitials\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                getSelectedContacts\n                            \n                            \n                                getSelectedContactsText\n                            \n                            \n                                getShowContactDropdown\n                            \n                            \n                                isContactSelected\n                            \n                            \n                                selectContact\n                            \n                            \n                                setSelectedContacts\n                            \n                            \n                                setShowContactDropdown\n                            \n                            \n                                toggleDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, categoryManager: CategoryManager)\n                    \n                \n                        \n                            \n                                Defined in src/app/add-task/contact-manager.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryManager\n                                                  \n                                                        \n                                                                        CategoryManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:120\n                        \n                    \n\n\n            \n                \n                        Clears all selected contacts and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:104\n                        \n                    \n\n\n            \n                \n                        Returns the color for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get color for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactInitials\n                        \n                    \n                \n            \n            \n                \ngetContactInitials(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:95\n                        \n                    \n\n\n            \n                \n                        Returns the initials for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get initials for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's initials.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames(remainingContacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:113\n                        \n                    \n\n\n            \n                \n                        Returns a comma-separated string of remaining contact names.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                remainingContacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe remaining contacts to display.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContacts\n                        \n                    \n                \n            \n            \n                \ngetSelectedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:25\n                        \n                    \n\n\n            \n                \n                        Gets all selected contacts\n\n\n                        \n                            Returns :         Contact[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContactsText\n                        \n                    \n                \n            \n            \n                \ngetSelectedContactsText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:86\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for selected contacts.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The text to display in the contact selector.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowContactDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowContactDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:42\n                        \n                    \n\n\n            \n                \n                        Gets the contact dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isContactSelected\n                        \n                    \n                \n            \n            \n                \nisContactSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Checks if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Toggles the selection state of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select or deselect.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedContacts\n                        \n                    \n                \n            \n            \n                \nsetSelectedContacts(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:32\n                        \n                    \n\n\n            \n                \n                        Sets the selected contacts array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowContactDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowContactDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:49\n                        \n                    \n\n\n            \n                \n                        Sets the contact dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Toggles the contact dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categoryManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryManager\n\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showContactDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Contact, ContactService } from '../services/contact.service';\nimport { CategoryManager } from './category-manager';\n\n/**\n * ContactManager handles all contact-related operations for the AddTaskComponent.\n * This includes contact selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ContactManager {\n  private selectedContacts: Contact[] = [];\n  private showContactDropdown: boolean = false;\n\n  constructor(\n    private contactService: ContactService,\n    public categoryManager: CategoryManager\n  ) {}\n\n  /**\n   * Gets all selected contacts\n   */\n  getSelectedContacts(): Contact[] {\n    return this.selectedContacts;\n  }\n\n  /**\n   * Sets the selected contacts array\n   */\n  setSelectedContacts(contacts: Contact[]): void {\n    const uniqueContacts = contacts.filter((contact, index, self) => \n      index === self.findIndex(c => c.id === contact.id)\n    );\n    this.selectedContacts = uniqueContacts;\n  }\n\n  /**\n   * Gets the contact dropdown visibility state\n   */\n  getShowContactDropdown(): boolean {\n    return this.showContactDropdown;\n  }\n\n  /**\n   * Sets the contact dropdown visibility state\n   */\n  setShowContactDropdown(value: boolean): void {\n    this.showContactDropdown = value;\n  }\n\n  /**\n   * Toggles the contact dropdown visibility.\n   */\n  toggleDropdown(): void {\n    this.showContactDropdown = !this.showContactDropdown;\n  }\n\n  /**\n   * Toggles the selection state of a contact.\n   * @param contact - The contact to select or deselect.\n   */\n  selectContact(contact: Contact): void {\n    const index = this.selectedContacts.findIndex(c => c.id === contact.id);\n    if (index === -1) {\n      this.selectedContacts.push(contact);\n    } else {\n      this.selectedContacts.splice(index, 1);\n    }\n  }\n\n  /**\n   * Checks if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected, false otherwise.\n   */\n  isContactSelected(contact: Contact): boolean {\n    return this.selectedContacts.some(c => c.id === contact.id);\n  }\n\n  /**\n   * Returns the text to display for selected contacts.\n   * @returns The text to display in the contact selector.\n   */\n  getSelectedContactsText(): string {\n    return 'Select contacts to assign';\n  }\n\n  /**\n   * Returns the initials for a contact.\n   * @param contact - The contact to get initials for.\n   * @returns The contact's initials.\n   */\n  getContactInitials(contact: Contact): string {\n    return this.contactService.getInitials(contact.name);\n  }\n\n  /**\n   * Returns the color for a contact.\n   * @param contact - The contact to get color for.\n   * @returns The contact's color.\n   */\n  getContactColor(contact: Contact): string {\n    return this.contactService.getContactColor(contact.name);\n  }\n\n  /**\n   * Returns a comma-separated string of remaining contact names.\n   * @param remainingContacts - The remaining contacts to display.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(remainingContacts: Contact[]): string {\n    return remainingContacts.map((contact) => contact.name).join(', ');\n  }\n\n  /**\n   * Clears all selected contacts and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedContacts = [];\n    this.showContactDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactService.html":{"url":"injectables/ContactService.html","title":"injectable - ContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable service for managing contact data in Firestore.\nProvides reactive streams for selected contact, form visibility, and editing state.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                avatarColors\n                            \n                            \n                                    Public\n                                editContact$\n                            \n                            \n                                    Private\n                                editContactSubject\n                            \n                            \n                                    Public\n                                selectedContact$\n                            \n                            \n                                    Private\n                                selectedContactSubject\n                            \n                            \n                                    Public\n                                showForm$\n                            \n                            \n                                    Private\n                                showFormSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addContact\n                            \n                            \n                                clearSelection\n                            \n                            \n                                    Async\n                                deleteContact\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                    Async\n                                getContactById\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContacts\n                            \n                            \n                                getContactsRef\n                            \n                            \n                                getInitials\n                            \n                            \n                                getSingleContactsRef\n                            \n                            \n                                hideForm\n                            \n                            \n                                selectContact\n                            \n                            \n                                showAddForm\n                            \n                            \n                                showEditForm\n                            \n                            \n                                    Async\n                                updateContact\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/contact.service.ts:76\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    addContact(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:130\n                        \n                    \n\n\n            \n                \n                        Adds a new contact to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The added contact with its generated ID or null if failed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearSelection\n                        \n                    \n                \n            \n            \n                \nclearSelection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:183\n                        \n                    \n\n\n            \n                \n                        Clears the currently selected contact.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteContact(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:217\n                        \n                    \n\n\n            \n                \n                        Deletes a contact from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Returns a plain JSON object with only the allowed contact fields.\nThis is used to avoid including undefined or extra properties when updating Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact object to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Partial\n\n                        \n                            \n                                A JSON object containing name, email, and phone.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactById(contactId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:256\n                        \n                    \n\n\n            \n                \n                        Fetches a single contact by its Firestore document ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise resolving to the contact object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contactName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:229\n                        \n                    \n\n\n            \n                \n                        Generates a consistent avatar color for a contact based on their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact’s name used to calculate a hash.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A hexadecimal color string from the avatarColors array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContacts\n                        \n                    \n                \n            \n            \n                \ngetContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:104\n                        \n                    \n\n\n            \n                \n                        Returns an observable stream of all contacts from Firestore.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable of Contact array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactsRef\n                        \n                    \n                \n            \n            \n                \ngetContactsRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to the contacts collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:243\n                        \n                    \n\n\n            \n                \n                        Extracts the initials from a contact name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string with one or two uppercase initials, or '?' if the name is invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleContactsRef\n                        \n                    \n                \n            \n            \n                \ngetSingleContactsRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to a single contact document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the contact document.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideForm\n                        \n                    \n                \n            \n            \n                \nhideForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Hides the contact form and clears the edit state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Emits a contact to the selected contact observable.\nUsed to show the contact details in the UI.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showAddForm\n                        \n                    \n                \n            \n            \n                \nshowAddForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:190\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the add contact form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEditForm\n                        \n                    \n                \n            \n            \n                \nshowEditForm(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the edit contact form with a prefilled contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to edit.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateContact(docId: string, updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:148\n                        \n                    \n\n\n            \n                \n                        Updates an existing contact in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to update.\n\n\n                                            \n                                        \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated contact data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        avatarColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:70\n                        \n                    \n\n            \n                \n                    Preset avatar colors for visual identification\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        editContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.editContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:67\n                        \n                    \n\n            \n                \n                    Observable for the contact being edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:65\n                        \n                    \n\n            \n                \n                    Currently selected contact to be edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectedContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.selectedContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:57\n                        \n                    \n\n            \n                \n                    Observable for the selected contact\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:55\n                        \n                    \n\n            \n                \n                    Currently selected contact (for viewing or interaction)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.showFormSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:62\n                        \n                    \n\n            \n                \n                    Observable for contact form visibility\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showFormSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:60\n                        \n                    \n\n            \n                \n                    Whether the contact form should be displayed\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Updates an existing contact in Firestore.\n   *\n   * @param docId - The Firestore document ID of the contact to update.\n   * @param updatedContact - The updated contact data.\n   */\n  async updateContact(docId: string, updatedContact: Contact): Promise {\n    let docRef = this.getSingleContactsRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n      console.error(err);\n    });\n  }\n\n  /**\n   * Returns a plain JSON object with only the allowed contact fields.\n   * This is used to avoid including undefined or extra properties when updating Firestore.\n   *\n   * @param updatedContact - The contact object to sanitize.\n   * @returns A JSON object containing name, email, and phone.\n   */\n  getCleanJson(updatedContact: Contact): Partial {\n    return {\n      name: updatedContact.name,\n      email: updatedContact.email,\n      phone: updatedContact.phone,\n    };\n  }\n\n  /**\n   * Emits a contact to the selected contact observable.\n   * Used to show the contact details in the UI.\n   *\n   * @param contact - The contact to select.\n   */\n  selectContact(contact: Contact): void {\n    this.selectedContactSubject.next(contact);\n  }\n\n  /**\n   * Clears the currently selected contact.\n   */\n  clearSelection(): void {\n    this.selectedContactSubject.next(null);\n  }\n\n  /**\n   * Triggers the display of the add contact form.\n   */\n  showAddForm(): void {\n    this.showFormSubject.next(true);\n  }\n\n  /**\n   * Triggers the display of the edit contact form with a prefilled contact.\n   *\n   * @param contact - The contact to edit.\n   */\n  showEditForm(contact: Contact): void {\n    this.editContactSubject.next(contact);\n    this.showFormSubject.next(true);\n  }\n\n  /**\n   * Hides the contact form and clears the edit state.\n   */\n  hideForm(): void {\n    this.showFormSubject.next(false);\n    this.editContactSubject.next(null);\n  }\n\n  /**\n   * Deletes a contact from Firestore.\n   *\n   * @param docId - The Firestore document ID of the contact to delete.\n   */\n  async deleteContact(docId: string): Promise {\n    await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  /**\n   * Generates a consistent avatar color for a contact based on their name.\n   *\n   * @param contactName - The contact’s name used to calculate a hash.\n   * @returns A hexadecimal color string from the avatarColors array.\n   */\n  getContactColor(contactName: string): string {\n    let hash = 0;\n    for (let i = 0; i  {\n    const contactRef = this.getSingleContactsRef(contactId);\n    return getDoc(contactRef).then(snapshot => {\n      if (snapshot.exists()) {\n        return { id: snapshot.id, ...snapshot.data() } as Contact;\n      }\n      return null;\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactsComponent.html":{"url":"components/ContactsComponent.html","title":"component - ContactsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contacts.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contacts\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                ContactListComponent\n                                ContactDetailsComponent\n                                ContactFormComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contacts.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contacts.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                animationDirection\n                            \n                            \n                                backgroundVisible\n                            \n                            \n                                showContactDetails\n                            \n                            \n                                showForm$\n                            \n                            \n                                toastAnimationState\n                            \n                            \n                                toastMessageVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToList\n                            \n                            \n                                onContactAdded\n                            \n                            \n                                onContactSelected\n                            \n                            \n                                onNoContactVisible\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                removeBackground\n                            \n                            \n                                setAnimationDirection\n                            \n                            \n                                startMessageAnimation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contacts.component.ts:79\n                            \n                        \n\n                \n                    \n                            Initializes the component and subscribes to the form visibility observable.\nAlso sets up the resize event listener to dynamically adjust the animation direction.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service that manages contact data and UI state.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:94\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: Sets initial animation direction and attaches resize listener.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToList\n                        \n                    \n                \n            \n            \n                \nonBackToList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Handles the back button in mobile view, hiding the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactAdded\n                        \n                    \n                \n            \n            \n                \nonContactAdded(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Called when a new contact is added from the form.\nIt selects the new contact, shows the contact detail view, and triggers a toast.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly added contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelected\n                        \n                    \n                \n            \n            \n                \nonContactSelected()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNoContactVisible\n                        \n                    \n                \n            \n            \n                \nonNoContactVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Hides the contact detail view if no contact is selected and the screen is small.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Called when the slide-in animation of an overlay is completed.\nDelays showing the background overlay to prevent flickering.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe animation transition event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Handles the event emitted by the contact form when it is closed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating the close state (e.g., 'closed').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Determines the animation direction based on screen width.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current window width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startMessageAnimation\n                        \n                    \n                \n            \n            \n                \nstartMessageAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:124\n                        \n                    \n\n\n            \n                \n                        Starts the toast message animation and automatically hides it after 3 seconds.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:54\n                        \n                    \n\n            \n                \n                    Current direction of the animation for overlay transitions.\nIt switches between 'right' for desktop and 'bottom' for mobile views.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:69\n                        \n                    \n\n            \n                \n                    Whether the background overlay is visible behind the form or detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContactDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:79\n                        \n                    \n\n            \n                \n                    Controls whether the contact detail view is visible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:74\n                        \n                    \n\n            \n                \n                    Observable that determines whether the contact form should be shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastAnimationState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\" | \"void\"\n\n                    \n                \n                \n                    \n                        Default value : 'void'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:64\n                        \n                    \n\n            \n                \n                    Controls the current animation state of the toast.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastMessageVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:59\n                        \n                    \n\n            \n                \n                    Whether the toast message is currently visible.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ContactListComponent } from './contact-list/contact-list.component';\nimport { ContactDetailsComponent } from './contact-details/contact-details.component';\nimport { ContactFormComponent } from './contact-form/contact-form.component';\nimport { ContactService, Contact } from './../services/contact.service';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { trigger, style, transition, animate, AnimationEvent } from '@angular/animations';\n\n@Component({\n  selector: 'app-contacts',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ContactListComponent,\n    ContactDetailsComponent,\n    ContactFormComponent,\n  ],\n  templateUrl: './contacts.component.html',\n  styleUrl: './contacts.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition('void => right', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateX(0)', opacity: 1 })),\n      ]),\n      transition('right => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateX(100%)', opacity: 0 })),\n      ]),\n      transition('void => bottom', [\n        style({ transform: 'translateY(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateY(0)', opacity: 1 })),\n      ]),\n      transition('bottom => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateY(100%)', opacity: 0 })),\n      ]),\n    ]),\n  ],\n})\n\nexport class ContactsComponent {\n\n  /**\n   * Current direction of the animation for overlay transitions.\n   * It switches between 'right' for desktop and 'bottom' for mobile views.\n   */\n  animationDirection: 'right' | 'bottom' = 'right';\n\n  /**\n   * Whether the toast message is currently visible.\n   */\n  toastMessageVisible = false;\n\n  /**\n   * Controls the current animation state of the toast.\n   */\n  toastAnimationState: 'right' | 'bottom' | 'void' = 'void';\n\n  /**\n   * Whether the background overlay is visible behind the form or detail view.\n   */\n  backgroundVisible = false;\n\n  /**\n   * Observable that determines whether the contact form should be shown.\n   */\n  showForm$: Observable;\n\n  /**\n   * Controls whether the contact detail view is visible.\n   */\n  showContactDetails = false;\n\n  /**\n   * Initializes the component and subscribes to the form visibility observable.\n   * Also sets up the resize event listener to dynamically adjust the animation direction.\n   * \n   * @param contactService - The service that manages contact data and UI state.\n   */\n  constructor(private contactService: ContactService) {\n    this.showForm$ = this.contactService.showForm$;\n  }\n\n  /**\n   * Lifecycle hook: Sets initial animation direction and attaches resize listener.\n   */\n  ngOnInit() {\n    this.setAnimationDirection(window.innerWidth);\n    window.addEventListener('resize', () => {\n      this.setAnimationDirection(window.innerWidth);\n    });\n  }\n\n  /**\n   * Called when a new contact is added from the form.\n   * It selects the new contact, shows the contact detail view, and triggers a toast.\n   * \n   * @param newContact - The newly added contact.\n   */\n  onContactAdded(newContact: Contact) {\n    this.contactService.selectContact(newContact);\n    this.onContactSelected();\n    this.startMessageAnimation();\n  }\n\n  /**\n   * Determines the animation direction based on screen width.\n   * @param width - The current window width.\n   */\n  setAnimationDirection(width: number) {\n    this.animationDirection = width  {\n      this.toastMessageVisible = false;\n      this.toastAnimationState = 'void';\n    }, 3000);\n  }\n\n  /**\n   * Handles the event emitted by the contact form when it is closed.\n   * @param event - A string indicating the close state (e.g., 'closed').\n   */\n  removeBackground(event: string) {\n    if (event === 'closed') {\n      this.backgroundVisible = false;\n    }\n  }\n\n  /**\n   * Called when the slide-in animation of an overlay is completed.\n   * Delays showing the background overlay to prevent flickering.\n   * \n   * @param event - The animation transition event.\n   */\n  onOverlayAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'right' || event.toState === 'bottom') {\n      setTimeout(() => {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Handles the back button in mobile view, hiding the contact detail component.\n   */\n  onBackToList() {\n    this.showContactDetails = false;\n  }\n\n  /**\n   * Triggers the display of the contact detail component.\n   */\n  onContactSelected() {\n    this.showContactDetails = true;\n  }\n\n  /**\n   * Hides the contact detail view if no contact is selected and the screen is small.\n   */\n  onNoContactVisible() {\n    if (window.innerWidth \n    \n\n    \n        \n    \n     \n    \n     \n      \n    \n\n\n\n  \n    \n  \n\n\n\n  Contact successfully created\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                      Contact successfully created'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DragDropManager.html":{"url":"injectables/DragDropManager.html","title":"injectable - DragDropManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DragDropManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/drag-drop-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                DragDropManager handles all drag-and-drop operations for the BoardComponent.\nThis includes drag delays, drop handling, auto-scrolling, and task status updates.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                getDragDelay\n                            \n                            \n                                    Private\n                                getDropTargetStatus\n                            \n                            \n                                handleDragMove\n                            \n                            \n                                handleDrop\n                            \n                            \n                                    Private\n                                reorderTasks\n                            \n                            \n                                    Private\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/drag-drop-manager.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeTaskStatus\n                        \n                    \n                \n            \n            \n                \nchangeTaskStatus(taskId: string, status: Task, taskList: Task[], reloadCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:130\n                        \n                    \n\n\n            \n                \n                        Updates the status of a task and persists the change via the task service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new status for the task.\n\n\n                                            \n                                        \n                                        \n                                                taskList\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current task list to find the task in.\n\n\n                                            \n                                        \n                                        \n                                                reloadCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to reload tasks after update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDragDelay\n                        \n                    \n                \n            \n            \n                \ngetDragDelay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:22\n                        \n                    \n\n\n            \n                \n                        Returns the delay for starting a drag action based on screen width.\nPrevents accidental drags on small screens.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                Drag delay in milliseconds.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getDropTargetStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDropTargetStatus(containerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:53\n                        \n                    \n\n\n            \n                \n                        Determines the new task status based on the drop container ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                containerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the container where the task was dropped.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :      | undefined\n\n                        \n                            \n                                The corresponding task status, or undefined if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDragMove\n                        \n                    \n                \n            \n            \n                \nhandleDragMove(event: CdkDragMove, scrollSection: ElementRef)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:106\n                        \n                    \n\n\n            \n                \n                        Handles automatic scrolling while dragging near the top or bottom edge\nof the scrollable task section.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        CdkDragMove\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragMove event containing the pointer position.\n\n\n                                            \n                                        \n                                        \n                                                scrollSection\n                                            \n                                                        ElementRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe scrollable section element reference.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDrop\n                        \n                    \n                \n            \n            \n                \nhandleDrop(event: CdkDragDrop, updateCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:33\n                        \n                    \n\n\n            \n                \n                        Handles drag-and-drop actions for tasks using the Angular CDK.\nUpdates the task's status and reorders task lists accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CdkDragDrop\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragDrop event containing task data and drop context.\n\n\n                                            \n                                        \n                                        \n                                                updateCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to update task lists after drop.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        reorderTasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    reorderTasks(event: CdkDragDrop)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:68\n                        \n                    \n\n\n            \n                \n                        Reorders tasks in the same or across different containers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CdkDragDrop\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragDrop event object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateTaskStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTaskStatus(task: Task, newStatus: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:92\n                        \n                    \n\n\n            \n                \n                        Updates the status of a given task and persists the change.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object to update.\n\n\n                                            \n                                        \n                                        \n                                                newStatus\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new status to assign.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ElementRef } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem, CdkDragMove } from '@angular/cdk/drag-drop';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * DragDropManager handles all drag-and-drop operations for the BoardComponent.\n * This includes drag delays, drop handling, auto-scrolling, and task status updates.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DragDropManager {\n  constructor(private taskService: TaskService) { }\n\n  /**\n   * Returns the delay for starting a drag action based on screen width.\n   * Prevents accidental drags on small screens.\n   *\n   * @returns Drag delay in milliseconds.\n   */\n  getDragDelay(): number {\n    return window.innerWidth , updateCallback: () => void): void {\n    const task = event.item.data as Task;\n    const newStatus = this.getDropTargetStatus(event.container.id);\n    if (!newStatus) return;\n\n    this.reorderTasks(event);\n\n    if (task.id && task.status !== newStatus) {\n      this.updateTaskStatus(task, newStatus);\n    }\n\n    updateCallback();\n  }\n\n  /**\n   * Determines the new task status based on the drop container ID.\n   *\n   * @param containerId - The ID of the container where the task was dropped.\n   * @returns The corresponding task status, or undefined if not found.\n   */\n  private getDropTargetStatus(containerId: string): Task['status'] | undefined {\n    const statusMap: Record = {\n      todoList: 'to-do',\n      inprogressList: 'in-progress',\n      awaitfeedbackList: 'await-feedback',\n      doneList: 'done',\n    };\n    return statusMap[containerId];\n  }\n\n  /**\n   * Reorders tasks in the same or across different containers.\n   *\n   * @param event - The CdkDragDrop event object.\n   */\n  private reorderTasks(event: CdkDragDrop): void {\n    const sameContainer = event.previousContainer === event.container;\n    if (sameContainer) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    }\n  }\n\n  /**\n   * Updates the status of a given task and persists the change.\n   *\n   * @param task - The task object to update.\n   * @param newStatus - The new status to assign.\n   */\n  private updateTaskStatus(task: Task, newStatus: Task['status']): void {\n    const updatedTask: Task = { ...task, status: newStatus };\n    this.taskService.updateTask(task.id!, updatedTask).catch((error) => {\n      console.error('Error updating task status:', error);\n    });\n  }\n\n  /**\n   * Handles automatic scrolling while dragging near the top or bottom edge\n   * of the scrollable task section.\n   *\n   * @param event - The CdkDragMove event containing the pointer position.\n   * @param scrollSection - The scrollable section element reference.\n   */\n  handleDragMove(event: CdkDragMove, scrollSection: ElementRef): void {\n    const mouseY = event.pointerPosition.y;\n    const section = scrollSection?.nativeElement;\n    if (!section) return;\n\n    const { top, bottom } = section.getBoundingClientRect();\n    const threshold = 100;\n    const scrollStep = 30;\n\n    if (mouseY  void\n  ): void {\n    const task = taskList.find((t) => t.id === taskId);\n    if (!task || task.status === status) return;\n\n    const updatedTask = { ...task, status };\n    this.taskService.updateTask(taskId, updatedTask).then(reloadCallback);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirestoreTimestamp.html":{"url":"interfaces/FirestoreTimestamp.html","title":"interface - FirestoreTimestamp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FirestoreTimestamp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/summary/summary.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toDate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toDate\n                        \n                    \n                \n            \n            \n                \ntoDate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\n\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showAnimatedGreeting();\n      } else {\n        this.showGreeting = false;\n      }\n    });\n  }\n\n  /**\n   * Animates a greeting sequence for mobile devices.\n   * Hides the greeting after the animation and stores the display state in sessionStorage.\n   */\n  private showAnimatedGreeting(): void {\n    this.showGreeting = true;\n    this.greetingState = 'start';\n    setTimeout(() => {\n      this.greetingState = 'moved';\n      setTimeout(() => {\n        this.showGreeting = false;\n        sessionStorage.setItem('greetingShown', 'true');\n      }, 2000);\n    }, 500);\n  }\n\n  /**\n   * Subscribes to task data and processes statistics and deadline information.\n   */\n  private loadAndProcessTasks(): void {\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n      this.setTaskCounts(tasks);\n      this.setNextDeadline(tasks);\n    });\n  }\n\n  /**\n   * Sets the count of tasks by specific statuses and urgency.\n   * \n   * @param tasks - Array of task objects to be analyzed.\n   */\n  private setTaskCounts(tasks: Task[]): void {\n    this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n    this.doneCount = this.countTasksByStatus(tasks, 'done');\n    this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n    this.awaitingFeedbackCount = this.countTasksByStatus(tasks, 'await-feedback');\n    this.nextDeadlineCount = tasks.filter((t) => t.priority === 'urgent').length;\n  }\n\n  /**\n   * Determines the next upcoming deadline from the list of tasks.\n   * \n   * @param tasks - Array of task objects containing dates.\n   */\n  private setNextDeadline(tasks: Task[]): void {\n    const now = new Date();\n    const futureTasks = tasks\n      .filter((t) => t.date && t.status !== 'done')\n      .map((t) => {\n        const dateObj = this.parseDate(t.date);\n        return { ...t, dateObj };\n      })\n      .filter((t) => t.dateObj && t.dateObj > now);\n\n    if (futureTasks.length > 0) {\n      futureTasks.sort((a, b) => a.dateObj!.getTime() - b.dateObj!.getTime());\n      this.nextDeadlineDate = futureTasks[0].dateObj!;\n    } else {\n      this.nextDeadlineDate = null;\n    }\n  }\n\n  /**\n   * Converts a date value of various possible formats into a JavaScript Date object.\n   * \n   * @param date - Date input which could be a string, number, Date, or Firestore timestamp.\n   * @returns A valid Date object or null if conversion is not possible.\n   */\n  private parseDate(date: any): Date | null {\n    if (date instanceof Date) return date;\n    if (this.isFirestoreTimestamp(date)) return date.toDate();\n    if (typeof date === 'string' || typeof date === 'number') return new Date(date);\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/footer/footer.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n\n            \n                styleUrl\n                ./footer.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-footer',\n  imports: [ RouterModule ],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss'\n})\n\nexport class FooterComponent {}\n\n    \n\n    \n        \n    \n        \n            Privacy Policy\n        \n        \n            Legal notice\n        \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Privacy Policy                            Legal notice                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/header/header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isMobile\n                            \n                            \n                                menuOpen\n                            \n                            \n                                    \n                                menuRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUserName\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/header/header.component.ts:62\n                            \n                        \n\n                \n                    \n                            Initializes the header component and injects the authentication service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service responsible for user authentication.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUserName\n                        \n                    \n                \n            \n            \n                \ngetCurrentUserName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:129\n                        \n                    \n\n\n            \n                \n                        Returns the display name or email of the currently authenticated user.\nIf no user is found, returns a default label.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The display name, email, or a fallback string ('User').\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Logs the user out by calling the authentication service,\nclears session storage, and closes the menu.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the mobile menu.\nStops propagation to prevent triggering the outside click handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The click event on the toggle button.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : window.innerWidth \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:57\n                        \n                    \n\n            \n                \n                    Indicates if the current viewport is considered mobile (width \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:52\n                        \n                    \n\n            \n                \n                    Tracks whether the mobile menu is currently open.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        menuRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('menu')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:62\n                        \n                    \n\n            \n                \n                    Reference to the menu DOM element, used for detecting outside clicks.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, ViewChild, ElementRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '200ms ease-out',\n          style({ transform: 'translateX(0)', opacity: 1 })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '200ms ease-in',\n          style({ transform: 'translateX(100%)', opacity: 0 })\n        ),\n      ]),\n    ]),\n  ],\n})\n\nexport class HeaderComponent {\n  /**\n   * Tracks whether the mobile menu is currently open.\n   */\n  menuOpen = false;\n\n  /**\n   * Indicates if the current viewport is considered mobile (width  {\n    await this.authService.signOutUser();\n    sessionStorage.removeItem('greetingShown');\n    this.menuOpen = false;\n  }\n\n  /**\n   * Returns the display name or email of the currently authenticated user.\n   * If no user is found, returns a default label.\n   * \n   * @returns The display name, email, or a fallback string ('User').\n   */\n  getCurrentUserName(): string {\n    const user = this.authService.getCurrentUser();\n    return user?.displayName || user?.email || 'User';\n  }\n\n   /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n\n    \n      Kanban Project Management Tool\n    \n\n    \n      \n        \n      \n\n      \n        {{ getCurrentUserName().charAt(0).toUpperCase() }}\n        \n          Help\n          Privacy Policy\n          Legal notice\n          Log out\n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          Kanban Project Management Tool                                          {{ getCurrentUserName().charAt(0).toUpperCase() }}                  Help          Privacy Policy          Legal notice          Log out                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HelpComponent.html":{"url":"components/HelpComponent.html","title":"component - HelpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HelpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/help/help.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-help\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./help.component.html\n            \n\n\n\n            \n                styleUrl\n                ./help.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/help/help.component.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of HelpComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/help/help.component.ts:32\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-help',\n  imports: [RouterModule],\n  templateUrl: './help.component.html',\n  styleUrl: './help.component.scss'\n})\n\nexport class HelpComponent {\n\n  /**\n   * Creates an instance of HelpComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n \n     Help\n     \n        \n            \n        \n     \n \n\n  \n    Welcome to the help page for Join, your guide to using our kanban project management tool.\n    Here, we'll provide an overview of what Join is, how it can benefit you, and how to use it.\n  \n\n  \n    What is Join?\n    \n      Join is a kanban-based project management tool designed and built by a group of dedicated\n      students as part of their web development bootcamp at the Developer Akademie.\n    \n    \n      Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit\n      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users\n      manage their tasks and projects in an intuitive, visual interface.\n    \n    \n      It is important to note that Join is designed as an educational exercise and is not intended for extensive\n      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent\n      availability, reliability, accuracy, or other aspects of quality regarding Join.\n    \n  \n\n  \n    How to use it\n    \n      \n        1. Exploring the Board\n        \n          In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you'll find a default board. \n          This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.\n        \n      \n      \n        2. Creating Contacts\n        \n          In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,\n          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board. \n          If you are logged in with your personal account, you will find yourself as a contact within the contact list.\n        \n      \n      \n        3. Adding Cards\n        \n          Now that you've added your contacts, you can start adding new cards. Cards represent individual tasks. Click the\n          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task\n          name, description, due date, assignees, etc.\n        \n      \n      \n        4. Moving Cards\n        \n          As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the\n          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages \n          in the board by clicking the \"...\" button.\n        \n      \n      \n        5. Deleting Cards\n        \n          Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will\n          permanently remove it from the board. Please exercise caution when deleting cards, as this action is\n          irreversible.\n        \n      \n    \n    \n      Remember that using Join effectively requires consistent updates from you and your team to ensure the board\n      reflects the current state of your project.\n    \n  \n\n  \n    Still have questions?\n    \n      Feel free to contact us at info&#64;michelle-puschkarow.de. We're here to help!\n    \n    Enjoy using Join!\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Help                                             Welcome to the help page for Join, your guide to using our kanban project management tool.    Here, we\\'ll provide an overview of what Join is, how it can benefit you, and how to use it.        What is Join?          Join is a kanban-based project management tool designed and built by a group of dedicated      students as part of their web development bootcamp at the Developer Akademie.              Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users      manage their tasks and projects in an intuitive, visual interface.              It is important to note that Join is designed as an educational exercise and is not intended for extensive      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent      availability, reliability, accuracy, or other aspects of quality regarding Join.            How to use it                  1. Exploring the Board                  In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you\\'ll find a default board.           This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.                            2. Creating Contacts                  In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board.           If you are logged in with your personal account, you will find yourself as a contact within the contact list.                            3. Adding Cards                  Now that you\\'ve added your contacts, you can start adding new cards. Cards represent individual tasks. Click the          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task          name, description, due date, assignees, etc.                            4. Moving Cards                  As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages           in the board by clicking the \"...\" button.                            5. Deleting Cards                  Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will          permanently remove it from the board. Please exercise caution when deleting cards, as this action is          irreversible.                            Remember that using Join effectively requires consistent updates from you and your team to ensure the board      reflects the current state of your project.            Still have questions?          Feel free to contact us at info@michelle-puschkarow.de. We\\'re here to help!        Enjoy using Join!  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HelpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegalNoticeComponent.html":{"url":"components/LegalNoticeComponent.html","title":"component - LegalNoticeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LegalNoticeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/legal-notice/legal-notice.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-legal-notice\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./legal-notice.component.html\n            \n\n\n\n            \n                styleUrl\n                ./legal-notice.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/legal-notice/legal-notice.component.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of LegalNoticeComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/legal-notice/legal-notice.component.ts:32\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-legal-notice',\n  imports: [RouterModule],\n  templateUrl: './legal-notice.component.html',\n  styleUrl: './legal-notice.component.scss'\n})\n\nexport class LegalNoticeComponent {\n\n  /**\n   * Creates an instance of LegalNoticeComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n    \n\n    \n        \n  \n     Legal Notice\n     \n        \n            \n        \n     \n  \n\n  \n    Imprint\n    Dr. Michelle Puschkarow\n    Waldingstraße 6\n    22391 Hamburg\n    info&#64;michelle-puschkarow.de\n    Represented by:\n    Marco Palummieri\n    Viktor Naumann\n    Jenny Domsgen\n  \n\n  \n    Acceptance of Terms\n    \n      By accessing and using Join (Product), you acknowledge and agree to the following terms and\n      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.\n      We, the listed students, may update or change the terms and conditions from time to time without notice.\n    \n  \n\n  \n    Scope and Ownership of the Product\n    \n      Join has been developed as part of a student group project in a web development bootcamp at the Developer\n      Akademie GmbH. It has an educational purpose and is not intended for extensive personal &amp; business usage. As\n      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality\n      regarding this Product.\n    \n    \n      The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,\n      distribution, or replication of the design is strictly prohibited.\n    \n  \n\n  \n    Proprietary Right\n    \n      Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in\n      Join, including any associated copyrighted material, trademarks,\n      and other proprietary information.\n    \n  \n\n  \n    Use of the Product\n    \n      Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.\n      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly\n      prohibited. You are solely responsible for your interactions with other users of Join.\n    \n  \n\n  \n    Disclaimer of Warranties and Limitation of Liability\n    \n      Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to\n      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.\n    \n    \n      In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,\n      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of\n      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such\n      damages, arising out of or in connection with the use or performance of Join.\n    \n  \n\n  \n    Indemnity\n    \n      You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our\n      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,\n      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join\n      and/or your breach of this Legal Notice.\n    \n  \n\n  Date: July 17, 2025\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '       Legal Notice                                              Imprint    Dr. Michelle Puschkarow    Waldingstraße 6    22391 Hamburg    info@michelle-puschkarow.de    Represented by:    Marco Palummieri    Viktor Naumann    Jenny Domsgen        Acceptance of Terms          By accessing and using Join (Product), you acknowledge and agree to the following terms and      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.      We, the listed students, may update or change the terms and conditions from time to time without notice.            Scope and Ownership of the Product          Join has been developed as part of a student group project in a web development bootcamp at the Developer      Akademie GmbH. It has an educational purpose and is not intended for extensive personal & business usage. As      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality      regarding this Product.              The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,      distribution, or replication of the design is strictly prohibited.            Proprietary Right          Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in      Join, including any associated copyrighted material, trademarks,      and other proprietary information.            Use of the Product          Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly      prohibited. You are solely responsible for your interactions with other users of Join.            Disclaimer of Warranties and Limitation of Liability          Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.              In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such      damages, arising out of or in connection with the use or performance of Join.            Indemnity          You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join      and/or your breach of this Legal Notice.        Date: July 17, 2025'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LegalNoticeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login/login.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                LoginHeaderComponent\n                                FooterComponent\n                            CommonModule\n                            ReactiveFormsModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                isTouchDevice\n                            \n                            \n                                loginForm\n                            \n                            \n                                logoState\n                            \n                            \n                                pageLoaded\n                            \n                            \n                                showPassword\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkIfTouchDevice\n                            \n                            \n                                getValidationMessage\n                            \n                            \n                                    Private\n                                handleAuthResult\n                            \n                            \n                                    Private\n                                initializeAnimation\n                            \n                            \n                                    Private\n                                initializeForm\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Async\n                                onGuestLogin\n                            \n                            \n                                    Async\n                                onLogin\n                            \n                            \n                                    Private\n                                runLogoAnimationWithDelay\n                            \n                            \n                                    Private\n                                startLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/login/login.component.ts:95\n                            \n                        \n\n                \n                    \n                            Initializes the LoginComponent and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder instance for creating the login form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling authentication\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router for navigation after login\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkIfTouchDevice\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfTouchDevice()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:123\n                        \n                    \n\n\n            \n                \n                        Checks whether the user's device is a touch-enabled device.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:220\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for a given form field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the form control (e.g. 'email' or 'password')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string message describing the validation issue.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleAuthResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleAuthResult(result: literal type, fallbackError: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:202\n                        \n                    \n\n\n            \n                \n                        Handles the result of an authentication attempt.\nNavigates on success or displays a fallback error message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                result\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe result object returned from the auth service.\n\n\n                                            \n                                        \n                                        \n                                                fallbackError\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe fallback error message if no message is provided.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:141\n                        \n                    \n\n\n            \n                \n                        Triggers a delayed logo animation if it hasn't already occurred.\nStores a flag in session storage to prevent repeat animation.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Initializes the reactive login form with validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:232\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: resets the loading state when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: initializes the login form, touch detection,\nand triggers logo animation on first visit.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onGuestLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onGuestLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:181\n                        \n                    \n\n\n            \n                \n                        Logs in as a guest user using the AuthService.\nNavigates to the summary page on success or shows an error.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:165\n                        \n                    \n\n\n            \n                \n                        Handles user login using form credentials.\nDisplays a loading indicator, validates form input,\nand navigates on success or shows an error message.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        runLogoAnimationWithDelay\n                        \n                    \n                \n            \n            \n                \n                        \n                    runLogoAnimationWithDelay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:152\n                        \n                    \n\n\n            \n                \n                        Performs the delayed logo animation and sets the session flag.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        startLoading\n                        \n                    \n                \n            \n            \n                \n                        \n                    startLoading()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:190\n                        \n                    \n\n\n            \n                \n                        Starts loading state and resets the error message.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:80\n                        \n                    \n\n            \n                \n                    Displays the current error message if login fails.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:85\n                        \n                    \n\n            \n                \n                    Shows whether a login request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:95\n                        \n                    \n\n            \n                \n                    Detects if the device supports touch input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:75\n                        \n                    \n\n            \n                \n                    Reactive form group for email and password login fields.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:65\n                        \n                    \n\n            \n                \n                    State of the logo animation. 'start' before animation, 'moved' after.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageLoaded\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:70\n                        \n                    \n\n            \n                \n                    Indicates whether the page has finished loading (used for triggering animation).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:90\n                        \n                    \n\n            \n                \n                    Indicates whether the password should be shown in plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FooterComponent } from '../footer/footer.component';\nimport { LoginHeaderComponent } from '../login-header/login-header.component';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  group\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router, RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    LoginHeaderComponent,\n    FooterComponent,\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n  animations: [\n    trigger('fadeOutWrapper', [\n      state('start', style({\n        opacity: 1\n      })),\n      state('moved', style({\n        opacity: 0\n      })),\n      transition('start => moved', [\n        animate('2s 0.7s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class LoginComponent {\n  /**\n   * State of the logo animation. `'start'` before animation, `'moved'` after.\n   */\n  logoState: 'start' | 'moved' = 'start';\n\n  /**\n   * Indicates whether the page has finished loading (used for triggering animation).\n   */\n  pageLoaded = false;\n\n  /**\n   * Reactive form group for email and password login fields.\n   */\n  loginForm!: FormGroup;\n\n  /**\n   * Displays the current error message if login fails.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Shows whether a login request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Indicates whether the password should be shown in plain text.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Detects if the device supports touch input.\n   */\n  isTouchDevice = false;\n\n  /**\n   * Initializes the LoginComponent and injects required services.\n   * \n   * @param fb FormBuilder instance for creating the login form\n   * @param authService Service for handling authentication\n   * @param router Router for navigation after login\n   */\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n  ) { }\n\n  /**\n   * Lifecycle hook: initializes the login form, touch detection,\n   * and triggers logo animation on first visit.\n   */\n  ngOnInit(): void {\n    this.initializeForm();\n    this.checkIfTouchDevice();\n    this.initializeAnimation();\n  }\n\n  /**\n   * Checks whether the user's device is a touch-enabled device.\n   */\n  private checkIfTouchDevice(): void {\n    this.isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n  }\n\n  /**\n   * Initializes the reactive login form with validators.\n   */\n  private initializeForm(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  /**\n   * Triggers a delayed logo animation if it hasn't already occurred.\n   * Stores a flag in session storage to prevent repeat animation.\n   */\n  private initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoMoved')) {\n      this.runLogoAnimationWithDelay();\n    } else {\n      this.logoState = 'moved';\n    }\n  }\n\n  /**\n   * Performs the delayed logo animation and sets the session flag.\n   */\n  private runLogoAnimationWithDelay(): void {\n    setTimeout(() => {\n      this.pageLoaded = true;\n      this.logoState = 'moved';\n      sessionStorage.setItem('logoMoved', 'true');\n    }, 100);\n  }\n\n  /**\n   * Handles user login using form credentials.\n   * Displays a loading indicator, validates form input,\n   * and navigates on success or shows an error message.\n   */\n  async onLogin(): Promise {\n    if (this.loginForm.invalid) {\n      this.loginForm.markAllAsTouched();\n      return;\n    }\n\n    this.startLoading();\n    const { email, password } = this.loginForm.value;\n    const result = await this.authService.signIn(email, password);\n    this.handleAuthResult(result, 'Login failed');\n  }\n\n  /**\n   * Logs in as a guest user using the AuthService.\n   * Navigates to the summary page on success or shows an error.\n   */\n  async onGuestLogin(): Promise {\n    this.startLoading();\n    const result = await this.authService.signInAsGuest();\n    this.handleAuthResult(result, 'Guest login failed');\n  }\n\n  /**\n   * Starts loading state and resets the error message.\n   */\n  private startLoading(): void {\n    this.isLoading = true;\n    this.errorMessage = '';\n  }\n\n  /**\n   * Handles the result of an authentication attempt.\n   * Navigates on success or displays a fallback error message.\n   *\n   * @param result - The result object returned from the auth service.\n   * @param fallbackError - The fallback error message if no message is provided.\n   */\n  private handleAuthResult(\n    result: { success: boolean; message?: string },\n    fallbackError: string\n  ): void {\n    if (result.success) {\n      this.router.navigate(['/summary']);\n    } else {\n      this.errorMessage = result.message || fallbackError;\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for a given form field.\n   * \n   * @param field The name of the form control (e.g. 'email' or 'password')\n   * @returns A string message describing the validation issue.\n   */\n  getValidationMessage(field: string): string {\n    const control = this.loginForm.get(field);\n    if (!control || !control.touched || !control.errors) return '';\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['email']) return 'Please enter a valid email address';\n    if (control.errors['minlength']) return 'Password must be at least 8 characters long';\n    return '';\n  }\n\n  /**\n   * Lifecycle hook: resets the loading state when the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    this.isLoading = false;\n  }\n}\n\n    \n\n    \n        \n    \n    \n        \n    \n    \n        \n            Log in\n            \n                \n                    \n                        \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('email') }}\n                        \n                    \n                    \n                        \n                            \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('password') }}\n                        \n                    \n                    {{ errorMessage }}\n                \n                \n                    \n                        {{ isLoading ? 'Loading...' : 'Log in' }}\n                    \n                    \n                        {{ isLoading ? 'Loading...' : 'Guest Log in' }}\n                    \n                \n            \n        \n       \n            \n                Not a Join user?\n                \n                    Sign up\n                \n            \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                            Log in                                                                                                                                                                                                                                        {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                                                                    {{ getValidationMessage(\\'password\\') }}                                                                {{ errorMessage }}                                                                            {{ isLoading ? \\'Loading...\\' : \\'Log in\\' }}                                                                {{ isLoading ? \\'Loading...\\' : \\'Guest Log in\\' }}                                                                                           Not a Join user?                                    Sign up                                                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginHeaderComponent.html":{"url":"components/LoginHeaderComponent.html","title":"component - LoginHeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginHeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login-header/login-header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login-header\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login-header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login-header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTouchDevice\n                            \n                            \n                                logoState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initializeAnimation\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \ninitializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Triggers the logo fade-in animation if it hasn’t already played during the session.\nStores a flag in sessionStorage to prevent the animation from repeating.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that initializes the animation state when the component loads.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:54\n                        \n                    \n\n            \n                \n                    Indicates whether the current device supports touch input.\nCurrently unused, but reserved for future enhancements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"appear\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:48\n                        \n                    \n\n            \n                \n                    The current state of the logo animation.\n\n'start': hidden state with opacity 0\n'appear': visible state with opacity 1\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/animations';\n\n@Component({\n  selector: 'app-login-header',\n  imports: [ RouterModule ],\n  templateUrl: './login-header.component.html',\n  styleUrl: './login-header.component.scss',\n  animations: [\n    trigger('fadeOut', [\n      state('start', style({\n        opacity: 0\n      })),\n      state('appear', style({\n        opacity: 1\n      })),\n      transition('start => appear', [\n        animate('1.1s 0.7s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class LoginHeaderComponent {\n  /**\n   * The current state of the logo animation.\n   * - `'start'`: hidden state with opacity 0\n   * - `'appear'`: visible state with opacity 1\n   */\n  logoState: 'start' | 'appear' = 'start';\n\n  /**\n   * Indicates whether the current device supports touch input.\n   * Currently unused, but reserved for future enhancements.\n   */\n  isTouchDevice: boolean = false;\n\n  /**\n   * Lifecycle hook that initializes the animation state when the component loads.\n   */\n  ngOnInit(): void {\n    this.initializeAnimation();\n  }\n\n  /**\n   * Triggers the logo fade-in animation if it hasn’t already played during the session.\n   * Stores a flag in sessionStorage to prevent the animation from repeating.\n   */\n  initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoAppeared')) {\n      setTimeout(() => {\n        this.logoState = 'appear';\n        sessionStorage.setItem('logoAppeared', 'true');\n      }, 100);\n    } else {\n      this.logoState = 'appear';\n    }\n  }\n}\n    \n\n    \n        \n    \n        \n    \n    \n        Not a Join user?\n        \n            Sign up\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Not a Join user?                    Sign up            '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginHeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NavigationHistoryService.html":{"url":"injectables/NavigationHistoryService.html","title":"injectable - NavigationHistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NavigationHistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/navigation-history.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service to keep track of recent navigation history within the Angular application.\nStores the last 3 visited URLs (including the current one) and allows navigation\nback to the previous URL.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                history\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getHistory\n                            \n                            \n                                    Public\n                                getPreviousUrl\n                            \n                            \n                                    Public\n                                navigateBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/navigation-history.service.ts:17\n                            \n                        \n\n                \n                    \n                            Subscribes to Angular Router events and tracks navigation history.\nKeeps the last 3 visited URLs (including the current one), trimming\nthe oldest entry when the limit is reached.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used to listen to navigation events.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns a copy of the navigation history.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of the last visited URLs (maximum of 3).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getPreviousUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPreviousUrl()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Gets the URL visited before the current one.\n\n\n                        \n                            Returns :     string | null\n\n                        \n                            \n                                The previous URL, or null if not available.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        navigateBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous URL if available.\nIf no previous URL is stored, navigates to the root path ('/').\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/services/navigation-history.service.ts:17\n                        \n                    \n\n            \n                \n                    Internal array holding the last 3 visited URLs\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n/**\n * A service to keep track of recent navigation history within the Angular application.\n * \n * Stores the last 3 visited URLs (including the current one) and allows navigation\n * back to the previous URL.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NavigationHistoryService {\n  /** Internal array holding the last 3 visited URLs */\n  private history: string[] = [];\n\n  /**\n   * Subscribes to Angular Router events and tracks navigation history.\n   * \n   * Keeps the last 3 visited URLs (including the current one), trimming\n   * the oldest entry when the limit is reached.\n   * \n   * @param router - Angular Router used to listen to navigation events.\n   */\n  constructor(private router: Router) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        if (this.history.length === 3) {\n          this.history.shift(); // Remove the oldest URL\n        }\n        this.history.push(event.urlAfterRedirects);\n      });\n  }\n\n  /**\n   * Returns a copy of the navigation history.\n   * \n   * @returns An array of the last visited URLs (maximum of 3).\n   */\n  public getHistory(): string[] {\n    return [...this.history];\n  }\n\n  /**\n   * Gets the URL visited before the current one.\n   * \n   * @returns The previous URL, or null if not available.\n   */\n  public getPreviousUrl(): string | null {\n    if (this.history.length > 1) {\n      return this.history[this.history.length - 2];\n    }\n    return null;\n  }\n\n  /**\n   * Navigates back to the previous URL if available.\n   * \n   * If no previous URL is stored, navigates to the root path (`'/'`).\n   */\n  public navigateBack(): void {\n    const previousUrl = this.getPreviousUrl();\n    if (previousUrl) {\n      this.router.navigateByUrl(previousUrl);\n    } else {\n      this.router.navigateByUrl('/');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverlayManager.html":{"url":"injectables/OverlayManager.html","title":"injectable - OverlayManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OverlayManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/overlay-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                OverlayManager handles all overlay-related operations for the BoardComponent.\nThis includes opening/closing overlays, managing animation states, and handling responsive behavior.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                animationDirection\n                            \n                            \n                                    Private\n                                backgroundVisible\n                            \n                            \n                                    Private\n                                overlayVisible\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Private\n                                showAddOrEditTask\n                            \n                            \n                                    Private\n                                showTaskDetails\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDetailsOverlay\n                            \n                            \n                                getAnimationDirection\n                            \n                            \n                                getBackgroundVisible\n                            \n                            \n                                getOverlayVisible\n                            \n                            \n                                getSelectedTask\n                            \n                            \n                                getShowAddOrEditTask\n                            \n                            \n                                getShowTaskDetails\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                openAddOrEditOverlay\n                            \n                            \n                                openTaskDetail\n                            \n                            \n                                removeBackground\n                            \n                            \n                                resetOverlayState\n                            \n                            \n                                resetOverlayStates\n                            \n                            \n                                setAnimationDirection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/overlay-manager.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDetailsOverlay\n                        \n                    \n                \n            \n            \n                \ncloseDetailsOverlay(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:154\n                        \n                    \n\n\n            \n                \n                        Closes the overlay for task details or task form.\nAlso resets relevant state variables and clears editing data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating why the overlay is being closed (e.g., 'close', 'added').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAnimationDirection\n                        \n                    \n                \n            \n            \n                \ngetAnimationDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:30\n                        \n                    \n\n\n            \n                \n                        Gets the current animation direction\n\n\n                        \n                            Returns :     \"right\" | \"bottom\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBackgroundVisible\n                        \n                    \n                \n            \n            \n                \ngetBackgroundVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:37\n                        \n                    \n\n\n            \n                \n                        Gets the background visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayVisible\n                        \n                    \n                \n            \n            \n                \ngetOverlayVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:44\n                        \n                    \n\n\n            \n                \n                        Gets the overlay visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSelectedTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:65\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected task\n\n\n                        \n                            Returns :         Task | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowAddOrEditTask\n                        \n                    \n                \n            \n            \n                \ngetShowAddOrEditTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:58\n                        \n                    \n\n\n            \n                \n                        Gets the add/edit task visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowTaskDetails\n                        \n                    \n                \n            \n            \n                \ngetShowTaskDetails()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:51\n                        \n                    \n\n\n            \n                \n                        Gets the task details visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:97\n                        \n                    \n\n\n            \n                \n                        Callback for when the overlay slide-in animation is finished.\nSlight delay before making the background visible for smooth UX.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAnimationEvent from Angular.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openAddOrEditOverlay\n                        \n                    \n                \n            \n            \n                \nopenAddOrEditOverlay(event: string, status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for adding or editing a task.\nOn small screens, navigates to a separate route; otherwise opens the overlay inline.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nEither 'open' or 'edit', indicating the action type.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to prefill in the add/edit task form.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetail\n                        \n                    \n                \n            \n            \n                \nopenTaskDetail(selectedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:141\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for viewing the details of a selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object to display in detail.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:84\n                        \n                    \n\n\n            \n                \n                        Handles removal of background and overlay if the event indicates closure.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string (expected: 'closed') that triggers background removal.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetOverlayState\n                        \n                    \n                \n            \n            \n                \nresetOverlayState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:129\n                        \n                    \n\n\n            \n                \n                        Reset the overlay state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetOverlayStates\n                        \n                    \n                \n            \n            \n                \nresetOverlayStates()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:168\n                        \n                    \n\n\n            \n                \n                        Resets all overlay states to default values\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:75\n                        \n                    \n\n\n            \n                \n                        Sets the animation direction based on screen width.\nUsed for responsive slide-in overlays.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrent screen width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showAddOrEditTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTaskDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AnimationEvent } from '@angular/animations';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * OverlayManager handles all overlay-related operations for the BoardComponent.\n * This includes opening/closing overlays, managing animation states, and handling responsive behavior.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class OverlayManager {\n  private animationDirection: 'right' | 'bottom' = 'right';\n  private backgroundVisible = false;\n  private overlayVisible = false;\n  private showTaskDetails = false;\n  private showAddOrEditTask: boolean = false;\n  private selectedTask?: Task;\n\n  constructor(\n    private router: Router,\n    private taskService: TaskService\n  ) {}\n\n  /**\n   * Gets the current animation direction\n   */\n  getAnimationDirection(): 'right' | 'bottom' {\n    return this.animationDirection;\n  }\n\n  /**\n   * Gets the background visibility state\n   */\n  getBackgroundVisible(): boolean {\n    return this.backgroundVisible;\n  }\n\n  /**\n   * Gets the overlay visibility state\n   */\n  getOverlayVisible(): boolean {\n    return this.overlayVisible;\n  }\n\n  /**\n   * Gets the task details visibility state\n   */\n  getShowTaskDetails(): boolean {\n    return this.showTaskDetails;\n  }\n\n  /**\n   * Gets the add/edit task visibility state\n   */\n  getShowAddOrEditTask(): boolean {\n    return this.showAddOrEditTask;\n  }\n\n  /**\n   * Gets the currently selected task\n   */\n  getSelectedTask(): Task | undefined {\n    return this.selectedTask;\n  }\n\n  /**\n   * Sets the animation direction based on screen width.\n   * Used for responsive slide-in overlays.\n   *\n   * @param width - Current screen width.\n   */\n  setAnimationDirection(width: number): void {\n    this.animationDirection = width  {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Opens the overlay for adding or editing a task.\n   * On small screens, navigates to a separate route; otherwise opens the overlay inline.\n   *\n   * @param event - Either 'open' or 'edit', indicating the action type.\n   * @param status - The status to prefill in the add/edit task form.\n   */\n  openAddOrEditOverlay(event: string, status: string): void {\n    const isSmallScreen = window.innerWidth \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PriorityManager.html":{"url":"injectables/PriorityManager.html","title":"injectable - PriorityManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PriorityManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/priority-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                PriorityManager handles all priority-related operations for the AddTaskComponent.\nThis includes setting priority management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                categoryManager\n                            \n                            \n                                selectedPriority\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setPriority\n                            \n                            \n                                    Public\n                                setPriorityAndCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryManager: CategoryManager)\n                    \n                \n                        \n                            \n                                Defined in src/app/add-task/priority-manager.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryManager\n                                                  \n                                                        \n                                                                        CategoryManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setPriority\n                        \n                    \n                \n            \n            \n                \nsetPriority(priority: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/priority-manager.ts:23\n                        \n                    \n\n\n            \n                \n                        Sets the task priority.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                priority\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe priority level to set ('low', 'medium', 'urgent').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setPriorityAndCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    setPriorityAndCategory(task: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/priority-manager.ts:31\n                        \n                    \n\n\n            \n                \n                        Sets the selected priority and category in their respective managers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categoryManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryManager\n\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/priority-manager.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedPriority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'medium'\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/priority-manager.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { CategoryManager } from './category-manager';\n\n/**\n * PriorityManager handles all priority-related operations for the AddTaskComponent.\n * This includes setting priority management.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PriorityManager {\n  selectedPriority: string = 'medium';\n\n  constructor(\n    public categoryManager: CategoryManager\n  ) { }\n\n   /**\n   * Sets the task priority.\n   * @param priority - The priority level to set ('low', 'medium', 'urgent').\n   */\n  setPriority(priority: string) {\n    this.selectedPriority = priority;\n  }\n  /**\n   * Sets the selected priority and category in their respective managers.\n   *\n   * @param task - The task object.\n   */\n  public setPriorityAndCategory(task: any): void {\n    this.selectedPriority = task.priority || 'medium';\n    this.categoryManager.setSelectedCategory(task.category || '');\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PrivacyPolicyComponent.html":{"url":"components/PrivacyPolicyComponent.html","title":"component - PrivacyPolicyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PrivacyPolicyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/privacy-policy/privacy-policy.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-privacy-policy\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./privacy-policy.component.html\n            \n\n\n\n            \n                styleUrl\n                ./privacy-policy.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrivacyPolicyComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nA service used to handle navigation history and go back to the previous route.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:32\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-privacy-policy',\n  imports: [RouterModule],\n  templateUrl: './privacy-policy.component.html',\n  styleUrl: './privacy-policy.component.scss'\n})\n\nexport class PrivacyPolicyComponent {\n\n  /**\n   * Creates an instance of PrivacyPolicyComponent.\n   *\n   * @param navigationService - A service used to handle navigation history and go back to the previous route.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n    \n     Privacy Policy\n     \n        \n            \n        \n     \n    \n  Information in accordance with Section 5 of the German Digital Services Act (DDG)\n  Last updated: July 17, 2025\n\n  \n    1. Disclaimer\n    1.1 General Information\n    \n      This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your\n      information when You use Join, and tells You about Your privacy rights and how the law protects You.\n    \n    \n      We use Your Personal data to provide and improve the Service. By using the Service, You agree to the\n      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been\n      created with the help of the Privacy Policy Generator.\n    \n  \n\n  \n    1.2 Note on Data Transmission\n    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.\n  \n\n  \n    2. Interpretation and Definitions\n    2.1 Interpretation\n    \n      The words of which the initial letter is capitalized have meanings defined under the following conditions.\n      The following definitions shall have the same meaning regardless of whether they appear in singular or in\n      plural.\n    \n\n    2.2 Definitions\n    \n      Account\n      A unique account created for You to access the kanban board Join.\n\n      Application\n      Refers to Join, the software program provided by the Company.\n\n      Company\n      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.\n\n      Cookies\n      Small files placed on Your device by a website, containing browsing history details.\n\n      Device\n      Any device that can access the Service (e.g. computer, cellphone, tablet).\n\n      Personal Data\n      Any information relating to an identified or identifiable individual.\n\n      Service\n      The Application or the Website or both - meaning Join.\n\n      Service Provider\n       Any person or company processing data on behalf of the Company to facilitate or provide the Service.\n\n      Usage Data\n       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).\n\n      You\n      \n        The individual or legal entity accessing or using the Service, as applicable.\n      \n    \n  \n\n  \n    3. Collecting and Using Your Personal Data\n\n    3.1 Types of Data Collected\n    3.1.1 Personal Data\n    \n      We may ask You for personally identifiable information, such as email address, first and last name,\n      phone number, address, city, state/province, ZIP/postal code.\n    \n\n    3.1.2 Usage Data\n    \n      Collected automatically, including IP address, browser type and version, pages visited, visit time and date,\n      time spent, unique device identifiers and other diagnostic data.\n      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.\n      This data comes from your browser or mobile device when accessing the Service.\n    \n\n    3.1.3 Tracking Technologies and Cookies\n    \n      We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the\n      Service.\n    \n    \n      Cookies: small files you can reject via browser settings.\n      Web Beacons: pixel files for tracking email opens, page popularity, etc.\n    \n    Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).\n\n    Examples of Cookies Used\n    \n      Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.\n      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.\n      Functionality Cookies (Persistent) – remember login or language preferences.\n    \n    \n      For more details and cookie choices, please visit our Cookies Policy section.\n    \n  \n\n  \n    4. Use of Your Personal Data\n    \n      Provide and maintain our Service, monitor usage.\n      Manage Your Account and registration.\n      Perform contracts (orders, service compliance).\n      Contact You (email, phone, SMS, push notifications).\n      Provide news, offers, events (unless unsubscribed).\n      Manage your requests to Us.\n      Business transfers (merger, sale, restructuring).\n      Other: analytics, usage trends, improve campaigns & Service.\n    \n\n    4.1 Sharing of Personal Information\n    \n      With Service Providers: for analysis and support.\n      For Business Transfers: in events like sale or acquisition.\n      With Affiliates: under this same Privacy Policy.\n      With Business Partners: for related products, services, promotions.\n      With Other Users: any info you share publicly is visible.\n      With Your Consent: for any other purposes.\n    \n  \n\n  \n    4.2 Transfer of Your Personal Data\n    \n      Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We\n      take steps to ensure adequate controls and security are in place.\n    \n  \n\n  \n    4.3 Data Retention and Deletion\n    \n      We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.\n      Usage Data retained for analytics or security.\n      You can delete or request deletion of your data via account settings or by contacting us. We may retain\n      information if legally required.\n    \n  \n\n  \n    4.4 Disclosure of Your Personal Data\n\n    4.4.1 Business Transactions\n    \n      If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify\n      before such changes.\n    \n\n    4.4.2 Law Enforcement & Other Legal Requirements\n    \n      We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.\n    \n  \n\n  \n    5. Security of Your Personal Data\n    \n      We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to\n      internet and electronic storage methods.\n    \n  \n\n  \n    6. Links to Other Websites\n    \n      Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for\n      their policies or content. Please review their Privacy Policies.\n    \n  \n\n  \n    7. Changes to this Privacy Policy\n    \n      We may update this policy from time to time. We'll notify via email or Service notice and update the \"Last\n      updated\" date. Changes take effect when posted. Please review periodically.\n    \n  \n\n  \n    8. Data Storage and Third-Party Services\n    \n      Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.\n      Through the use of Firebase services the following data might be processed:\n    \n    \n      Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.\n      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.\n      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.\n      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.\n    \n    \n      The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to\n      Google´s Privacy Policy and \n      Firebase’s Data Processing and Security Terms\n    \n  \n\n  \n    9. Prohibition of unsolicited contact\n    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted. \n       As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.\n  \n\n  \n    10. Contact Us\n    \n      If there are still questions, please contact us at\n      info&#64;michelle-puschkarow.de.\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '         Privacy Policy                                            Information in accordance with Section 5 of the German Digital Services Act (DDG)  Last updated: July 17, 2025      1. Disclaimer    1.1 General Information          This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your      information when You use Join, and tells You about Your privacy rights and how the law protects You.              We use Your Personal data to provide and improve the Service. By using the Service, You agree to the      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been      created with the help of the Privacy Policy Generator.            1.2 Note on Data Transmission    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.        2. Interpretation and Definitions    2.1 Interpretation          The words of which the initial letter is capitalized have meanings defined under the following conditions.      The following definitions shall have the same meaning regardless of whether they appear in singular or in      plural.        2.2 Definitions          Account      A unique account created for You to access the kanban board Join.      Application      Refers to Join, the software program provided by the Company.      Company      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.      Cookies      Small files placed on Your device by a website, containing browsing history details.      Device      Any device that can access the Service (e.g. computer, cellphone, tablet).      Personal Data      Any information relating to an identified or identifiable individual.      Service      The Application or the Website or both - meaning Join.      Service Provider       Any person or company processing data on behalf of the Company to facilitate or provide the Service.      Usage Data       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).      You              The individual or legal entity accessing or using the Service, as applicable.                  3. Collecting and Using Your Personal Data    3.1 Types of Data Collected    3.1.1 Personal Data          We may ask You for personally identifiable information, such as email address, first and last name,      phone number, address, city, state/province, ZIP/postal code.        3.1.2 Usage Data          Collected automatically, including IP address, browser type and version, pages visited, visit time and date,      time spent, unique device identifiers and other diagnostic data.      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.      This data comes from your browser or mobile device when accessing the Service.        3.1.3 Tracking Technologies and Cookies          We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the      Service.              Cookies: small files you can reject via browser settings.      Web Beacons: pixel files for tracking email opens, page popularity, etc.        Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).    Examples of Cookies Used          Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.      Functionality Cookies (Persistent) – remember login or language preferences.              For more details and cookie choices, please visit our Cookies Policy section.            4. Use of Your Personal Data          Provide and maintain our Service, monitor usage.      Manage Your Account and registration.      Perform contracts (orders, service compliance).      Contact You (email, phone, SMS, push notifications).      Provide news, offers, events (unless unsubscribed).      Manage your requests to Us.      Business transfers (merger, sale, restructuring).      Other: analytics, usage trends, improve campaigns & Service.        4.1 Sharing of Personal Information          With Service Providers: for analysis and support.      For Business Transfers: in events like sale or acquisition.      With Affiliates: under this same Privacy Policy.      With Business Partners: for related products, services, promotions.      With Other Users: any info you share publicly is visible.      With Your Consent: for any other purposes.            4.2 Transfer of Your Personal Data          Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We      take steps to ensure adequate controls and security are in place.            4.3 Data Retention and Deletion          We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.      Usage Data retained for analytics or security.      You can delete or request deletion of your data via account settings or by contacting us. We may retain      information if legally required.            4.4 Disclosure of Your Personal Data    4.4.1 Business Transactions          If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify      before such changes.        4.4.2 Law Enforcement & Other Legal Requirements          We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.            5. Security of Your Personal Data          We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to      internet and electronic storage methods.            6. Links to Other Websites          Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for      their policies or content. Please review their Privacy Policies.            7. Changes to this Privacy Policy          We may update this policy from time to time. We\\'ll notify via email or Service notice and update the \"Last      updated\" date. Changes take effect when posted. Please review periodically.            8. Data Storage and Third-Party Services          Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.      Through the use of Firebase services the following data might be processed:              Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.              The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to      Google´s Privacy Policy and       Firebase’s Data Processing and Security Terms            9. Prohibition of unsolicited contact    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted.        As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.        10. Contact Us          If there are still questions, please contact us at      info@michelle-puschkarow.de.      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PrivacyPolicyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SidebarComponent.html":{"url":"components/SidebarComponent.html","title":"component - SidebarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SidebarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/sidebar/sidebar.component.ts\n\n\n\n    \n        Description\n    \n    \n        Sidebar component for application navigation.\nDisplays navigation links and checks the user's authentication status.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sidebar\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sidebar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sidebar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLoggedIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/sidebar/sidebar.component.ts:20\n                            \n                        \n\n                \n                    \n                            Constructs the SidebarComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing user authentication\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/sidebar/sidebar.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Sidebar component for application navigation.\n * Displays navigation links and checks the user's authentication status.\n */\n@Component({\n  selector: 'app-sidebar',\n  imports: [\n    RouterModule,\n    CommonModule\n  ],\n  templateUrl: './sidebar.component.html',\n  styleUrl: './sidebar.component.scss'\n})\n\nexport class SidebarComponent {\n  /**\n   * Constructs the SidebarComponent.\n   * @param authService - Service for managing user authentication\n   */\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n  \n  \n    \n      \n        \n          \n          Summary\n        \n      \n      \n        \n          \n          Board\n        \n      \n      \n        \n          \n          Add Task\n        \n      \n      \n        \n          \n          Contacts\n        \n      \n    \n  \n  \n    \n      \n        \n          \n          Log In\n        \n      \n    \n    \n      Privacy Policy\n      Legal notice\n    \n  \n  \n    Privacy Policy\n    Legal notice\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                Summary                                                Board                                                Add Task                                                Contacts                                                            Log In                            Privacy Policy      Legal notice            Privacy Policy    Legal notice  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SidebarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/signup/signup.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                                FooterComponent\n                            ReactiveFormsModule\n                \n            \n\n            \n                styleUrls\n                ./signup.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                showConfirmPassword\n                            \n                            \n                                showPassword\n                            \n                            \n                                signupform\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getFieldErrorMessage\n                            \n                            \n                                    Private\n                                getPasswordMismatchMessage\n                            \n                            \n                                getValidationMessage\n                            \n                            \n                                    Private\n                                handleRegistrationResult\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToLogin\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                passwordsMatchValidator\n                            \n                            \n                                saveNewContact\n                            \n                            \n                                    Private\n                                startLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, authService: AuthService, router: Router, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                            \n                        \n\n                \n                    \n                            Initializes the signup form and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder for creating the reactive form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for user registration\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to store new users as contacts\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFieldErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFieldErrorMessage(control: AbstractControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:230\n                        \n                    \n\n\n            \n                \n                        Returns a general validation error message for a given form control.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe FormControl instance to evaluate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The corresponding validation message or an empty string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPasswordMismatchMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPasswordMismatchMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:210\n                        \n                    \n\n\n            \n                \n                        Returns a validation message if the password and confirmation do not match.\nOnly shown if either password field has been touched or changed.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Password mismatch message or empty string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:195\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for the given form field.\nDelegates error interpretation to specialized helper functions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the form control.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A descriptive validation message or empty string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleRegistrationResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleRegistrationResult(result: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:148\n                        \n                    \n\n\n            \n                \n                        Handles the result of the registration process.\nShows success message and redirects on success,\nor displays an error message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                result\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nResult object returned from signUp attempt.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: creates the signup form with all necessary validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToLogin\n                        \n                    \n                \n            \n            \n                \nonBackToLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:181\n                        \n                    \n\n\n            \n                \n                        Navigates the user back to the login screen.\nUses skipLocationChange to avoid adding the redirect to browser history.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Handles the form submission process:\nValidates input, attempts user registration,\nsaves the new user as a contact, and navigates on success.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordsMatchValidator\n                        \n                    \n                \n            \n            \n                \npasswordsMatchValidator(group: AbstractControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Custom validator to ensure password and confirm password fields match.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                group\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form group containing password fields.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                A validation error object or null if passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveNewContact\n                        \n                    \n                \n            \n            \n                \nsaveNewContact(newName: string, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:168\n                        \n                    \n\n\n            \n                \n                        Creates and stores a new contact based on registration input.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name entered during registration.\n\n                                            \n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email address entered during registration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        startLoading\n                        \n                    \n                \n            \n            \n                \n                        \n                    startLoading()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:135\n                        \n                    \n\n\n            \n                \n                        Sets loading state, clears previous messages.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:49\n                        \n                    \n\n            \n                \n                    Holds the current error message for display on form failure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:59\n                        \n                    \n\n            \n                \n                    Indicates whether a registration request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showConfirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                        \n                    \n\n            \n                \n                    Controls visibility of the confirm password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:64\n                        \n                    \n\n            \n                \n                    Controls visibility of the password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signupform\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:44\n                        \n                    \n\n            \n                \n                    The reactive signup form with fields for name, email, password, etc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:54\n                        \n                    \n\n            \n                \n                    Holds the success message shown after successful registration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ReactiveFormsModule } from '@angular/forms';\nimport { FooterComponent } from '../footer/footer.component';\nimport { RouterModule, Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../services/auth.service';\nimport { Contact, ContactService } from '../../services/contact.service';\n\n@Component({\n  selector: 'app-signup',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    FooterComponent,\n    ReactiveFormsModule\n  ],\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\n\nexport class SignupComponent implements OnInit {\n  /**\n   * The reactive signup form with fields for name, email, password, etc.\n   */\n  signupform!: FormGroup;\n\n  /**\n   * Holds the current error message for display on form failure.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Holds the success message shown after successful registration.\n   */\n  successMessage: string = '';\n\n  /**\n   * Indicates whether a registration request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Controls visibility of the password input field.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Controls visibility of the confirm password input field.\n   */\n  showConfirmPassword: boolean = false;\n\n  /**\n   * Initializes the signup form and injects required services.\n   * \n   * @param form FormBuilder for creating the reactive form\n   * @param authService Service for user registration\n   * @param router Angular Router for navigation\n   * @param contactService Service to store new users as contacts\n   */\n  constructor(\n    private form: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private contactService: ContactService,\n  ) { }\n\n  /**\n   * Lifecycle hook: creates the signup form with all necessary validators.\n   */\n  ngOnInit(): void {\n    this.signupform = this.form.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.pattern(/^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_\\-+=\\[\\]{};:'\"\\\\|,.<>\\/?]).+$/)\n      ]],\n      confirmPassword: ['', Validators.required],\n      privacyPolicy: [false, [Validators.requiredTrue]],\n    }, { validators: this.passwordsMatchValidator });\n  }\n\n  /**\n   * Custom validator to ensure password and confirm password fields match.\n   * \n   * @param group The form group containing password fields.\n   * @returns A validation error object or null if passwords match.\n   */\n  passwordsMatchValidator(group: AbstractControl): ValidationErrors | null {\n    const password = group.get('password')?.value;\n    const confirm = group.get('confirmPassword')?.value;\n    return password === confirm ? null : { passwordsDontMatch: true };\n  }\n\n  /**\n  * Handles the form submission process:\n  * Validates input, attempts user registration,\n  * saves the new user as a contact, and navigates on success.\n  */\n  async onSubmit(): Promise {\n    if (this.signupform.invalid) {\n      this.signupform.markAllAsTouched();\n      return;\n    }\n    this.startLoading();\n    const { name, email, password } = this.signupform.value;\n    const result = await this.authService.signUp(email, password, name);\n    this.saveNewContact(name, email);\n    this.handleRegistrationResult(result);\n  }\n\n  /**\n   * Sets loading state, clears previous messages.\n   */\n  private startLoading(): void {\n    this.isLoading = true;\n    this.errorMessage = '';\n    this.successMessage = '';\n  }\n\n  /**\n   * Handles the result of the registration process.\n   * Shows success message and redirects on success,\n   * or displays an error message.\n   *\n   * @param result - Result object returned from signUp attempt.\n   */\n  private handleRegistrationResult(\n    result: { success: boolean; message?: string }\n  ): void {\n    if (result.success) {\n      this.successMessage = 'Registration successful! You will be redirected...';\n      setTimeout(() => {\n        this.router.navigate(['/summary']);\n      }, 2000);\n    } else {\n      this.errorMessage = result.message || 'Registration failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Creates and stores a new contact based on registration input.\n   * \n   * @param newName Name entered during registration.\n   * @param newEmail Email address entered during registration.\n   */\n  saveNewContact(newName: string, newEmail: string): void {\n    const newContact: Contact = {\n      name: newName,\n      email: newEmail,\n    };\n    this.contactService.addContact(newContact);\n    this.contactService.selectContact(newContact);\n  }\n\n  /**\n   * Navigates the user back to the login screen.\n   * Uses `skipLocationChange` to avoid adding the redirect to browser history.\n   */\n  onBackToLogin(): void {\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\n      this.router.navigate(['/login']);\n    });\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for the given form field.\n   * Delegates error interpretation to specialized helper functions.\n   * \n   * @param field - The name of the form control.\n   * @returns A descriptive validation message or empty string.\n   */\n  getValidationMessage(field: string): string {\n    if (field === 'confirmPassword') {\n      return this.getPasswordMismatchMessage();\n    }\n    const control = this.signupform.get(field);\n    if (!control || !control.touched || !control.errors) return '';\n    return this.getFieldErrorMessage(control);\n  }\n\n  /**\n   * Returns a validation message if the password and confirmation do not match.\n   * Only shown if either password field has been touched or changed.\n   * \n   * @returns Password mismatch message or empty string.\n   */\n  private getPasswordMismatchMessage(): string {\n    const confirmControl = this.signupform.get('confirmPassword');\n    const passwordControl = this.signupform.get('password');\n    const mismatch = this.signupform.errors?.['passwordsDontMatch'];\n\n    const touched = confirmControl?.touched || passwordControl?.touched;\n    const dirty = confirmControl?.dirty || passwordControl?.dirty;\n\n    if (mismatch && (touched || dirty)) {\n      return 'Passwords do not match';\n    }\n    return '';\n  }\n\n  /**\n   * Returns a general validation error message for a given form control.\n   * \n   * @param control - The FormControl instance to evaluate.\n   * @returns The corresponding validation message or an empty string.\n   */\n  private getFieldErrorMessage(control: AbstractControl): string {\n    if (control.errors?.['required']) {\n      return 'This field is required';\n    }\n    if (control.errors?.['email']) {\n      return 'Please enter a valid email address';\n    }\n    if (control.errors?.['minlength']) {\n      return `Minimum ${control.errors['minlength'].requiredLength} characters required`;\n    }\n    if (control.errors?.['pattern']) {\n      return 'Password must contain uppercase, numbers and special characters';\n    }\n    if (control.errors?.['requiredTrue']) {\n      return 'You must accept the privacy policy';\n    }\n    return '';\n  }\n}\n    \n\n    \n          \n       \n        \n            \n           \n        \n            \n                \n                    \n                \n                Sign up\n            \n                \n                    \n                        \n                            \n                                \n                                \n                                \n                            \n                            \n                                {{ getValidationMessage('name') }}\n                            \n                        \n                       \n                    \n                        \n                            \n                                \n                                \n                                \n                            \n                            \n                                {{ getValidationMessage('email') }}\n                            \n                        \n                        \n                    \n                        \n                            \n                                \n                                \n                                \n                                \n                            \n                            \n                                {{ getValidationMessage('password') }}\n                            \n                        \n                        \n                     \n                        \n                            \n                                \n                                \n                                \n                                \n                            \n                            \n                                {{ getValidationMessage('confirmPassword') }}\n                            \n                        \n                    \n                        \n                        \n                            \n                            I accept the Privacy policy\n                        \n                        \n                    \n                        \n                            Sign Up\n                            \n                                \n                                Signing up...\n                            \n                        \n                    \n                    {{ successMessage }}\n                    {{ errorMessage }}\n                    \n        \n    \n        \n\n\n\n\n\n    \n\n    \n                \n                    ./signup.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.signup-content {\n    position: relative;\n    max-width: 1440px;\n    margin: 0 auto;\n    height: 100dvh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.dark-logo-wrapper {\n    padding: 32px 40px;\n\n    img {\n        @media (max-width: 768px) {\n            height: 72px;\n            width: 64px;\n        }\n\n        @media (max-width: 406px){\n            height: 48px;\n            width: auto;\n            margin: 0 4px;\n        }\n    }\n\n    @media (max-width: 406px){\n        padding: 12px;\n    }\n\n    @media(min-width: 768px) {\n        height: 180px;\n    }\n}\n\n.signup-frame {\n  background-color: var(--background-light);\n  border-radius: 20px;\n  padding: clamp(32px, calc(1.8vw + 20px), 64px);\n  box-shadow: 0px 4px 24px rgba(0, 0, 0, 0.05);\n  width: clamp(440px, 5vw + 440px, 560px);\n  max-width: 500px;\n  margin: 0 auto;\n  @include flex-center;\n  flex-direction: column;\n  align-items: center;\n  gap: clamp(24px, 2.5vh, 36px);\n  margin-top: 1rem;\n  height: 65dvh;\n  max-height: 650px;\n\n  @media (max-width: 600px){\n    width: 90vw;\n    max-width: 400px;\n    padding: 24px 12px;\n    gap: 20px;\n    box-sizing: border-box;\n    overflow-x: hidden;\n    max-height: 536px;\n  }\n\n\n  @media (max-width: 406px){\n    margin-top: 2rem;\n    overflow-y: auto;\n  }\n\n}  \n\n.signup-header {\n  width: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .btn-back {\n    @include btn();\n    position: absolute;\n    left: 0;\n\n    img {\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n    h2 {\n        @include inter700-fs47;\n        color: var(--text-color-main);\n        position: relative;\n        margin-bottom: 0;\n\n        &::after {\n        content: \"\";\n        display: block;\n        width: 80px;\n        height: 3px;\n        background-color: var(--accent-primary-color);\n        margin: 12px auto 0;\n        border-radius: 3px;\n        }\n\n       @media (max-width: 768px){\n            font-family: \"Inter\";\n            font-weight: 700;\n            font-size: 36px;\n        }\n\n        @media (max-width: 406px){\n            font-family: \"Inter\";\n            font-weight: 700;\n            font-size: 26px;\n        }\n    }\n}    \n\nform {\n    padding: 8px 33px;\n\n}\n\n.form-group-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 20px;\n}\n\n.form-group {\n    @include form-group();\n    background-color: var(--background-light);\n    position: relative;\n    \n\n    input {\n        width: 100%;\n        background-color: transparent;\n        color: var(--text-color-main);\n        padding-right: 28px;\n        @include inter400-fs20();\n        height: 16px;\n        font-size: 16px;\n    }\n\n    input::placeholder {\n        color: var(--text-color-medium);\n        opacity: 1; \n    }\n\n    input.invalid {\n        border: 2px solid var(--text-color-error);\n    }\n\n    .input-icon {\n        position: absolute;\n        right: clamp(12px, 2vw, 18px);\n        top: 50%;\n        transform: translateY(-50%);\n        height: 20px;\n        width: 20px;\n        opacity: 0.6;\n    }\n\n    @media(max-width: 768px) {\n        width: 100%;\n\n        input {\n            font-size: 15px;\n            height: 14px;\n        }\n\n        .input-icon {\n            width: 18px;\n            height: 18px;\n            right: 12px;\n        }\n    }\n\n}\n\n.checkbox-label {\n    @include flex-center;\n    gap: 8px;\n    margin: 8px;\n    margin-top: 16px;\n    width: 100%;\n    @include inter400-fs14();\n    color: var(--text-color-medium);\n    cursor: pointer;\n    position: relative;\n\n    input[type=\"checkbox\"] {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        cursor: pointer;\n        background-image: url(\"./../../../../public/assets/img/icons/checkbox.png\");\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        border: none;\n        margin: 0;\n        padding: 0;\n        flex-shrink: 0;\n    }\n\n    input[type=\"checkbox\"]:checked {\n        background-image: url(\"./../../../../public/assets/img/icons/checkbox-checked.png\");\n    }\n\n    .highlight {\n        color: var(--accent-primary-color);\n        text-decoration: none;\n        cursor: pointer;\n    }\n\n    @media (max-width: 406px){\n        font-size: 12px;\n        gap: 4px;\n        margin: 4px;\n    }\n}\n\n.btn-wrapper {\n    width: 100%;\n    @include flex-center;\n}\n\n.btn-signup {\n    cursor: pointer;\n    height: 44px;\n    border-radius: 8px;\n    border: unset;\n    min-width: 120px;\n    transition: background-color 0.2s ease;\n    justify-content: center;\n    @include btn-dark();\n\n    &:hover {\n        background-color: #29abe2;\n        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);\n    }\n\n    &:disabled {\n        background-color: #ccc;\n        color: #666;\n        cursor: not-allowed;\n        opacity: 0.6;\n    }\n\n    @media (max-width: 406px){\n        font-size: 16px;\n        height: 32px;\n        min-width: 96px;\n    }\n}\n\n.colorError {\n    border: 1px solid var(--text-color-error);\n}\n\n.error-message {\n    @include inter400-fs12;\n    color: var(--text-color-error);\n    display: hidden;\n\n    @media(max-width: 768px) {\n        font-size: 13px;\n    }\n}\n\n.success-message {\n    @include inter400-fs12;\n    color: var(--text-color-success);\n    display: block;\n    margin-top: 16px;\n    text-align: center;\n}\n\n.login-link {\n    @include inter400-fs12;\n    color: var(--text-color-light);\n    text-align: center;\n    margin-top: 16px;\n    \n    a {\n        color: var(--accent-color);\n        text-decoration: none;\n        \n        &:hover {\n            text-decoration: underline;\n        }\n    }\n}\n\ninput:focus {\n    border: unset;\n}\n\n.spinner {\n  border: 2px solid #fff;\n  border-top: 2px solid transparent;\n  border-radius: 50%;\n  width: 14px;\n  height: 14px;\n  display: inline-block;\n  animation: spin 0.8s linear infinite;\n  margin-right: 6px;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.input-icon.toggle-eye {\n    cursor: pointer;\n    right: 16px;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                Sign up                                                                                                                                                                                                                                                                                            {{ getValidationMessage(\\'name\\') }}                                                                                                                                                                                                                                                                                                                                           {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                                                                                                                                                            {{ getValidationMessage(\\'password\\') }}                                                                                                                                                                                                                                                                                                                                                                             {{ getValidationMessage(\\'confirmPassword\\') }}                                                                                                                                                                                I accept the Privacy policy                                                                                                                        Sign Up                                                                                            Signing up...                                                                                            {{ successMessage }}                    {{ errorMessage }}                                        '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask.html":{"url":"interfaces/Subtask.html","title":"interface - Subtask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/subtask-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            completed\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        completed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        completed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\n\nexport interface Subtask {\n  id: string | number;\n  text: string;\n  completed: boolean;\n}\n\n/**\n * SubtaskManager handles all subtask-related operations for the AddTaskComponent.\n * This includes adding, editing, deleting, and managing subtask state.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SubtaskManager {\n  private subtasks: Subtask[] = [];\n  private nextSubtaskId: number = 1;\n  private editingSubtaskId: string | number | null = null;\n  private editingSubtaskText: string = '';\n  private subtaskInput: string = '';\n  private showSubtaskConfirmation: boolean = false;\n  originalSubtasks: Subtask[] = [];\n\n  constructor( private taskService: TaskService ){}\n\n  /**\n   * Gets all subtasks\n   */\n  getSubtasks(): Subtask[] {\n    return this.subtasks;\n  }\n\n  /**\n   * Sets the subtasks array\n   */\n  setSubtasks(subtasks: Subtask[]): void {\n    this.subtasks = subtasks;\n    this.nextSubtaskId = subtasks.length + 1;\n  }\n\n  /**\n   * Gets the current subtask input value\n   */\n  getSubtaskInput(): string {\n    return this.subtaskInput;\n  }\n\n  /**\n   * Sets the subtask input value\n   */\n  setSubtaskInput(value: string): void {\n    this.subtaskInput = value;\n  }\n\n  /**\n   * Gets the subtask confirmation state\n   */\n  getShowSubtaskConfirmation(): boolean {\n    return this.showSubtaskConfirmation;\n  }\n\n  /**\n   * Sets the subtask confirmation state\n   */\n  setShowSubtaskConfirmation(value: boolean): void {\n    this.showSubtaskConfirmation = value;\n  }\n\n  /**\n   * Gets the editing subtask ID\n   */\n  getEditingSubtaskId(): string | number | null {\n    return this.editingSubtaskId;\n  }\n\n  /**\n   * Gets the editing subtask text\n   */\n  getEditingSubtaskText(): string {\n    return this.editingSubtaskText;\n  }\n\n  /**\n   * Sets the editing subtask text\n   */\n  setEditingSubtaskText(value: string): void {\n    this.editingSubtaskText = value;\n  }\n\n  /**\n   * Handles subtask input click to clear the input if confirmation is not shown.\n   */\n  onSubtaskInputClick(): void {\n    if (!this.showSubtaskConfirmation) {\n      this.subtaskInput = '';\n    }\n  }\n\n  /**\n   * Handles Enter key press on subtask input to add the subtask.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEnter(event: Event): void {\n    event.preventDefault();\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      this.addSubtask();\n    }\n  }\n\n  /**\n   * Confirms and adds the subtask.\n   * @param event - The event that triggered the confirmation.\n   */\n  confirmSubtask(event: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.addSubtask();\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Cancels subtask creation and clears the input.\n   */\n  cancelSubtask(): void {\n    this.subtaskInput = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Adds a new subtask to the task.\n   */\n  addSubtask(): void {\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      const newSubtask: Subtask = {\n        id: this.nextSubtaskId++,\n        text: this.subtaskInput.trim(),\n        completed: false\n      };\n      this.subtasks.push(newSubtask);\n      this.subtaskInput = '';\n      this.showSubtaskConfirmation = false;\n    }\n  }\n\n  /**\n   * Deletes a subtask by its ID.\n   * @param id - The ID of the subtask to delete.\n   */\n  deleteSubtask(id: string | number): void {\n    this.subtasks = this.subtasks.filter(subtask => subtask.id !== id);\n  }\n\n  /**\n   * Edits the text of a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param newText - The new text for the subtask.\n   */\n  editSubtask(id: string | number, newText: string): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.text = newText.trim();\n    }\n  }\n\n  /**\n   * Initiates editing mode for a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param currentText - The current text of the subtask.\n   */\n  editSubtaskPrompt(id: string | number, currentText: string): void {\n    this.editingSubtaskId = id;\n    this.editingSubtaskText = currentText;\n    setTimeout(() => {\n      const inputElement = document.querySelector('.subtask-edit-input') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = this.editingSubtaskText;\n        inputElement.focus();\n        inputElement.setSelectionRange(inputElement.value.length, inputElement.value.length);\n      }\n    }, 100);\n  }\n\n  /**\n   * Saves the edited subtask text.\n   */\n  saveSubtaskEdit(): void {\n    if (this.editingSubtaskId !== null) {\n      if (this.editingSubtaskText && this.editingSubtaskText.trim()) {\n        this.editSubtask(this.editingSubtaskId, this.editingSubtaskText.trim());\n      }\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Cancels subtask editing mode.\n   */\n  cancelSubtaskEdit(): void {\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n  }\n\n  /**\n   * Handles keyboard shortcuts for subtask editing.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEditKeydown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.saveSubtaskEdit();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Toggles the completion state of a subtask.\n   * @param id - The ID of the subtask to toggle.\n   */\n  toggleSubtaskCompletion(id: string | number): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.completed = !subtask.completed;\n    }\n  }\n\n  /**\n   * Clears all subtask data and resets to default state.\n   */\n  clearAll(): void {\n    this.subtasks = [];\n    this.subtaskInput = '';\n    this.nextSubtaskId = 1;\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Saves all given subtasks to the task with the specified ID.\n   * \n   * @param taskId - The ID of the task to add subtasks to.\n   * @param subtasks - The list of subtasks to be saved.\n   */\n  public async saveAllSubtasks(taskId: string, subtasks: any[]): Promise {\n    for (const subtask of subtasks) {\n      await this.taskService.addSubtask(taskId, {\n        title: subtask.text,\n        isCompleted: subtask.completed\n      });\n    }\n  }\n\n  /**\n   * Returns a list of original subtasks that have been deleted.\n   * \n   * @param currentSubtasks - The current list of subtasks in the form.\n   */\n  public getDeletedSubtasks(currentSubtasks: any[]): any[] {\n    return this.originalSubtasks.filter(original =>\n      typeof original.id === 'string' &&\n      original.id.length > 0 &&\n      !currentSubtasks.some(current => current.id === original.id)\n    );\n  }\n\n  /**\n   * Deletes the given subtasks from the specified task.\n   * \n   * @param taskId - The ID of the task.\n   * @param subtasks - The subtasks to delete.\n   */\n  public async deleteSubtasks(taskId: string, subtasks: any[]): Promise {\n    for (const subtask of subtasks) {\n      if (typeof subtask.id === 'string') {\n        await this.taskService.deleteSubtask(taskId, subtask.id);\n      }\n    }\n  }\n\n  /**\n   * Syncs all current subtasks (add or update) with the backend.\n   * \n   * @param taskId - The ID of the task to sync with.\n   * @param subtasks - The current list of subtasks in the form.\n   */\n  public async syncSubtasks(taskId: string, subtasks: any[]): Promise {\n    for (const subtask of subtasks) {\n      const subtaskData = {\n        title: subtask.text,\n        isCompleted: subtask.completed\n      };\n\n      if (typeof subtask.id === 'string' && subtask.id.length > 0) {\n        await this.taskService.updateSubtask(taskId, subtask.id, subtaskData);\n      } else {\n        await this.taskService.addSubtask(taskId, subtaskData);\n      }\n    }\n  }\n\n   /**\n   * Loads subtasks for the given task ID and sets them in the subtask manager.\n   *\n   * @param taskId - The ID of the task whose subtasks should be loaded.\n   */\n  public loadAndSetSubtasks(taskId: string): void {\n    this.taskService.getSubtasks(taskId).subscribe(subtasks => {\n      const mappedSubtasks = subtasks.map(subtask => ({\n        id: subtask.id || '',\n        text: subtask.title,\n        completed: subtask.isCompleted,\n      }));\n      this.setSubtasks(mappedSubtasks);\n      this.originalSubtasks = [...mappedSubtasks];\n    });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask-1.html":{"url":"interfaces/Subtask-1.html","title":"interface - Subtask-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a subtask belonging to a task.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Completion status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title or label of the subtask\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SummaryComponent.html":{"url":"components/SummaryComponent.html","title":"component - SummaryComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SummaryComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/summary/summary.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-summary\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./summary.component.html\n            \n\n\n\n            \n                styleUrl\n                ./summary.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                awaitingFeedbackCount\n                            \n                            \n                                doneCount\n                            \n                            \n                                greeting\n                            \n                            \n                                greetingState\n                            \n                            \n                                inProgressCount\n                            \n                            \n                                isMobile\n                            \n                            \n                                nextDeadlineCount\n                            \n                            \n                                nextDeadlineDate\n                            \n                            \n                                showGreeting\n                            \n                            \n                                taskList\n                            \n                            \n                                todoCount\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                countTasksByStatus\n                            \n                            \n                                getGreeting\n                            \n                            \n                                goToBoard\n                            \n                            \n                                    Private\n                                isFirestoreTimestamp\n                            \n                            \n                                    Private\n                                loadAndProcessTasks\n                            \n                            \n                                    Private\n                                loadUserGreeting\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                parseDate\n                            \n                            \n                                    Private\n                                setNextDeadline\n                            \n                            \n                                    Private\n                                setTaskCounts\n                            \n                            \n                                    Private\n                                showAnimatedGreeting\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    totalTaskCount\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/summary/summary.component.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        countTasksByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    countTasksByStatus(tasks: Task[], status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:63\n                        \n                    \n\n\n            \n                \n                        Counts the number of tasks with a specific status.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of tasks.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to count.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of tasks with the given status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGreeting\n                        \n                    \n                \n            \n            \n                \ngetGreeting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Returns a greeting depending on the current time.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The greeting (e.g., \"Good morning,\").\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToBoard\n                        \n                    \n                \n            \n            \n                \ngoToBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Navigates to the board view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isFirestoreTimestamp\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFirestoreTimestamp(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:74\n                        \n                    \n\n\n            \n                \n                        Checks if the given object is a FirestoreTimestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         FirestoreTimestamp\n\n                        \n                            \n                                True if the object is a FirestoreTimestamp.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadAndProcessTasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadAndProcessTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:169\n                        \n                    \n\n\n            \n                \n                        Subscribes to task data and processes statistics and deadline information.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadUserGreeting\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadUserGreeting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:134\n                        \n                    \n\n\n            \n                \n                        Loads current user data and sets a personalized greeting.\nIf on mobile and greeting hasn't been shown in this session,\ntriggers an animated greeting display.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:122\n                        \n                    \n\n\n            \n                \n                        Initializes the component by determining device type,\nloading user greeting, and loading tasks with statistics.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseDate(date: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:219\n                        \n                    \n\n\n            \n                \n                        Converts a date value of various possible formats into a JavaScript Date object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDate input which could be a string, number, Date, or Firestore timestamp.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Date | null\n\n                        \n                            \n                                A valid Date object or null if conversion is not possible.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setNextDeadline\n                        \n                    \n                \n            \n            \n                \n                        \n                    setNextDeadline(tasks: Task[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:195\n                        \n                    \n\n\n            \n                \n                        Determines the next upcoming deadline from the list of tasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of task objects containing dates.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setTaskCounts\n                        \n                    \n                \n            \n            \n                \n                        \n                    setTaskCounts(tasks: Task[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:182\n                        \n                    \n\n\n            \n                \n                        Sets the count of tasks by specific statuses and urgency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of task objects to be analyzed.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showAnimatedGreeting\n                        \n                    \n                \n            \n            \n                \n                        \n                    showAnimatedGreeting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:154\n                        \n                    \n\n\n            \n                \n                        Animates a greeting sequence for mobile devices.\nHides the greeting after the animation and stores the display state in sessionStorage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        awaitingFeedbackCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doneCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greeting\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greetingState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inProgressCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showGreeting\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todoCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        totalTaskCount\n                    \n                \n\n                \n                    \n                        gettotalTaskCount()\n                    \n                \n                            \n                                \n                                    Defined in src/app/summary/summary.component.ts:84\n                                \n                            \n                    \n                        \n                                Returns the total number of all tasks.\n\n\n                                \n                                \n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\n\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showAnimatedGreeting();\n      } else {\n        this.showGreeting = false;\n      }\n    });\n  }\n\n  /**\n   * Animates a greeting sequence for mobile devices.\n   * Hides the greeting after the animation and stores the display state in sessionStorage.\n   */\n  private showAnimatedGreeting(): void {\n    this.showGreeting = true;\n    this.greetingState = 'start';\n    setTimeout(() => {\n      this.greetingState = 'moved';\n      setTimeout(() => {\n        this.showGreeting = false;\n        sessionStorage.setItem('greetingShown', 'true');\n      }, 2000);\n    }, 500);\n  }\n\n  /**\n   * Subscribes to task data and processes statistics and deadline information.\n   */\n  private loadAndProcessTasks(): void {\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n      this.setTaskCounts(tasks);\n      this.setNextDeadline(tasks);\n    });\n  }\n\n  /**\n   * Sets the count of tasks by specific statuses and urgency.\n   * \n   * @param tasks - Array of task objects to be analyzed.\n   */\n  private setTaskCounts(tasks: Task[]): void {\n    this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n    this.doneCount = this.countTasksByStatus(tasks, 'done');\n    this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n    this.awaitingFeedbackCount = this.countTasksByStatus(tasks, 'await-feedback');\n    this.nextDeadlineCount = tasks.filter((t) => t.priority === 'urgent').length;\n  }\n\n  /**\n   * Determines the next upcoming deadline from the list of tasks.\n   * \n   * @param tasks - Array of task objects containing dates.\n   */\n  private setNextDeadline(tasks: Task[]): void {\n    const now = new Date();\n    const futureTasks = tasks\n      .filter((t) => t.date && t.status !== 'done')\n      .map((t) => {\n        const dateObj = this.parseDate(t.date);\n        return { ...t, dateObj };\n      })\n      .filter((t) => t.dateObj && t.dateObj > now);\n\n    if (futureTasks.length > 0) {\n      futureTasks.sort((a, b) => a.dateObj!.getTime() - b.dateObj!.getTime());\n      this.nextDeadlineDate = futureTasks[0].dateObj!;\n    } else {\n      this.nextDeadlineDate = null;\n    }\n  }\n\n  /**\n   * Converts a date value of various possible formats into a JavaScript Date object.\n   * \n   * @param date - Date input which could be a string, number, Date, or Firestore timestamp.\n   * @returns A valid Date object or null if conversion is not possible.\n   */\n  private parseDate(date: any): Date | null {\n    if (date instanceof Date) return date;\n    if (this.isFirestoreTimestamp(date)) return date.toDate();\n    if (typeof date === 'string' || typeof date === 'number') return new Date(date);\n    return null;\n  }\n}\n\n    \n\n    \n        \n  \n    Join 360\n    \n    Key Metrics at a Glance\n    \n  \n\n  \n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n  \n    \n      \n        \n          \n            \n            \n              \n            \n            \n              \n            \n          \n\n          \n            {{ todoCount }}\n            To-do\n          \n        \n\n        \n          \n            \n            \n          \n          \n            {{ doneCount }}\n            Done\n          \n        \n      \n\n      \n        \n          \n            \n            \n          \n        \n\n        \n          {{ nextDeadlineCount }}\n          Urgent\n        \n        \n        \n          {{ nextDeadlineDate | date : \"MMMM d, y\" }}\n          Upcoming Deadline\n        \n      \n\n      \n        \n          \n            {{ totalTaskCount }}\n            Tasks inBoard\n          \n        \n        \n          \n            {{ inProgressCount }}\n            Tasks in Progress\n          \n        \n        \n          \n            {{ awaitingFeedbackCount }}\n            Awaiting Feedback\n          \n        \n      \n    \n\n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Join 360        Key Metrics at a Glance                  {{ greeting }}      {{ userName }}                                                                                                                                                            {{ todoCount }}            To-do                                                                                            {{ doneCount }}            Done                                                                                                            {{ nextDeadlineCount }}          Urgent                                  {{ nextDeadlineDate | date : \"MMMM d, y\" }}          Upcoming Deadline                                                  {{ totalTaskCount }}            Tasks inBoard                                                {{ inProgressCount }}            Tasks in Progress                                                {{ awaitingFeedbackCount }}            Awaiting Feedback                                      {{ greeting }}      {{ userName }}      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SummaryComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Task.html":{"url":"interfaces/Task.html","title":"interface - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a task in the system.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            assignedTo\n                                        \n                                \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            priority\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subtask\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        assignedTo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assignedTo:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional list of user IDs assigned to the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:     \"technical\" | \"user story\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"technical\" | \"user story\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Task category\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:     Date | Timestamp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | Timestamp\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Date of the task; may be a native Date object or Firestore Timestamp.\nFirestore stores it as a Timestamp and it needs conversion after reading.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating a task)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:     \"low\" | \"medium\" | \"urgent\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"low\" | \"medium\" | \"urgent\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Priority level of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current status of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtask\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtask:     Subtask[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Subtask[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional array of subtasks (retrieved separately as subcollection)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title of the task\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskComponent.html":{"url":"components/TaskComponent.html","title":"component - TaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task/task.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeStatus\n                            \n                            \n                                getAllUniqueContacts\n                            \n                            \n                                getCompletedSubtasksCount\n                            \n                            \n                                    Async\n                                getContactList\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                getUniqueContacts\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                openDotsMenuHandler\n                            \n                            \n                                openTaskDetails\n                            \n                            \n                                percentageCompleted\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                openedMenuTaskId\n                            \n                            \n                                subtaskList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                closeDotsMenu\n                            \n                            \n                                contacts\n                            \n                            \n                                openDotsMenu\n                            \n                            \n                                taskSelected\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isDotsMenuOpen\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task/task.component.ts:93\n                            \n                        \n\n                \n                    \n                            Injects services required for task and contact operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for task data handling.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contact information.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        openedMenuTaskId\n                    \n                \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:75\n                            \n                        \n                \n                    \n                        The ID of the task for which the contextual \"dots\" menu is currently open.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskList\n                    \n                \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:55\n                            \n                        \n                \n                    \n                        The list of subtasks associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:50\n                            \n                        \n                \n                    \n                        The task to be displayed in this component.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changeTaskStatus\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:90\n                            \n                        \n                \n                    \n                        Emits a status change for the task, along with its ID.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:85\n                            \n                        \n                \n                    \n                        Emits an event when the \"dots\" menu should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        contacts\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:65\n                            \n                        \n                \n                    \n                        Emits the list of resolved contacts associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        openDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:80\n                            \n                        \n                \n                    \n                        Emits the ID of the task when the \"dots\" menu is opened.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        taskSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:60\n                            \n                        \n                \n                    \n                        Emits the selected task when the user opens the task detail view.\n\n                    \n                \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:112\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeStatus\n                        \n                    \n                \n            \n            \n                \nchangeStatus(status: string, event: MouseEvent | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:151\n                        \n                    \n\n\n            \n                \n                        Emits a task status change and closes the dots menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new status to assign to the task.\n\n                                            \n                                        \n                                        \n                                                event\n                                            \n                                                        MouseEvent | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Optional mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUniqueContacts\n                        \n                    \n                \n            \n            \n                \ngetAllUniqueContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:237\n                        \n                    \n\n\n            \n                \n                        Returns a unique list of contacts (removes duplicates based on ID)\n\n\n                        \n                            Returns :         Contact[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCompletedSubtasksCount\n                        \n                    \n                \n            \n            \n                \ngetCompletedSubtasksCount(subtaskList: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Returns the number of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of completed subtasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:222\n                        \n                    \n\n\n            \n                \n                        Loads the full contact details for each assigned contact in the task\nand emits the resolved contact list.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:259\n                        \n                    \n\n\n            \n                \n                        Joins the names of remaining contacts into a comma-separated string.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUniqueContacts\n                        \n                    \n                \n            \n            \n                \ngetUniqueContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:249\n                        \n                    \n\n\n            \n                \n                        Returns the first 4 contacts for display.\n\n\n                        \n                            Returns :         Contact[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when any data-bound @Input properties change.\nThis method checks whether the task input has changed (excluding the first change),\nand if so, resets and reloads the contact list based on the updated task data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An object of changed properties with current and previous values.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that loads the contact list for the task on component init.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:112\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDotsMenuHandler\n                        \n                    \n                \n            \n            \n                \nopenDotsMenuHandler(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:209\n                        \n                    \n\n\n            \n                \n                        Toggles the dots menu open or closed for this task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetails\n                        \n                    \n                \n            \n            \n                \nopenTaskDetails(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:190\n                        \n                    \n\n\n            \n                \n                        Emits the selected task to open its detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The task to open.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        percentageCompleted\n                        \n                    \n                \n            \n            \n                \npercentageCompleted(subtaskList: Subtask[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:179\n                        \n                    \n\n\n            \n                \n                        Calculates the percentage of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        Subtask[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The completion percentage as a number between 0 and 100.\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:45\n                        \n                    \n\n            \n                \n                    The full list of contacts assigned to the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:103\n                        \n                    \n\n            \n                \n                    Service for fetching contact information.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:70\n                        \n                    \n\n            \n                \n                    Holds the task currently selected to open its detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:102\n                        \n                    \n\n            \n                \n                    Service for task data handling.\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isDotsMenuOpen\n                    \n                \n\n                \n                    \n                        getisDotsMenuOpen()\n                    \n                \n                            \n                                \n                                    Defined in src/app/board/task/task.component.ts:200\n                                \n                            \n                    \n                        \n                                Checks if the dots menu is currently open for this task.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n} from '@angular/core';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { TaskService } from '../../services/task.service';\nimport { Task } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { SimpleChanges, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-task',\n  imports: [CommonModule],\n  templateUrl: './task.component.html',\n  styleUrl: './task.component.scss',\n})\n\nexport class TaskComponent {\n\n  /**\n   * The full list of contacts assigned to the task.\n   */\n  contactList: Contact[] = [];\n\n  /**\n   * The task to be displayed in this component.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  @Input() subtaskList: Subtask[] = [];\n\n  /**\n   * Emits the selected task when the user opens the task detail view.\n   */\n  @Output() taskSelected = new EventEmitter();\n\n  /**\n   * Emits the list of resolved contacts associated with the task.\n   */\n  @Output() contacts = new EventEmitter();\n\n  /**\n   * Holds the task currently selected to open its detail view.\n   */\n  selectedTask?: Task;\n\n  /**\n   * The ID of the task for which the contextual \"dots\" menu is currently open.\n   */\n  @Input() openedMenuTaskId: string | null = null;\n\n  /**\n   * Emits the ID of the task when the \"dots\" menu is opened.\n   */\n  @Output() openDotsMenu = new EventEmitter();\n\n  /**\n   * Emits an event when the \"dots\" menu should be closed.\n   */\n  @Output() closeDotsMenu = new EventEmitter();\n\n  /**\n   * Emits a status change for the task, along with its ID.\n   */\n  @Output() changeTaskStatus = new EventEmitter();\n\n  /**\n   * Injects services required for task and contact operations.\n   * \n   * @param taskService Service for task data handling.\n   * @param contactService Service for fetching contact information.\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService\n  ) {}\n\n  /**\n   * Detects clicks outside the \"dots\" menu and closes it if open.\n   * \n   * @param event Mouse click event on the document.\n   */\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (\n      !target.closest('.dots-menu-btn') &&\n      !target.closest('.dots-menu-overlay')\n    ) {\n      if (this.isDotsMenuOpen) {\n        this.closeDotsMenu.emit();\n      }\n    }\n  }\n\n  /**\n   * Lifecycle hook that loads the contact list for the task on component init.\n   */\n  ngOnInit(): void {\n    this.getContactList();\n  }\n\n  /**\n   * Lifecycle hook that is called when any data-bound @Input properties change.\n   * This method checks whether the `task` input has changed (excluding the first change),\n   * and if so, resets and reloads the contact list based on the updated task data.\n   *\n   * @param changes An object of changed properties with current and previous values.\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['task'] && !changes['task'].firstChange) {\n      this.contactList = [];\n      this.getContactList();\n    }\n  }\n\n  /**\n   * Emits a task status change and closes the dots menu.\n   * \n   * @param status The new status to assign to the task.\n   * @param event Optional mouse event to stop propagation.\n   */\n  changeStatus(status: string, event: MouseEvent | undefined) {\n    if (event) {\n      event.stopPropagation();\n    }\n    if (this.task.id) {\n      this.changeTaskStatus.emit({ taskId: this.task.id, status });\n      this.closeDotsMenu.emit();\n    }\n  }\n\n  /**\n   * Returns the number of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The number of completed subtasks.\n   */\n  getCompletedSubtasksCount(subtaskList: any[]): number {\n    return Array.isArray(subtaskList)\n      ? subtaskList.filter((el) => el.isCompleted).length\n      : 0;\n  }\n\n  /**\n   * Calculates the percentage of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The completion percentage as a number between 0 and 100.\n   */\n  percentageCompleted(subtaskList: Subtask[]): number {\n    if (!subtaskList || subtaskList.length === 0) return 0;\n    let completed = this.getCompletedSubtasksCount(subtaskList);\n    return Math.round((completed / subtaskList.length) * 100);\n  }\n\n  /**\n   * Emits the selected task to open its detail view.\n   * \n   * @param task The task to open.\n   */\n  openTaskDetails(task: Task) {\n    this.selectedTask = task;\n    this.taskSelected.emit(this.selectedTask);\n  }\n\n  /**\n   * Checks if the dots menu is currently open for this task.\n   * \n   * @returns A boolean indicating if the dots menu is open.\n   */\n  get isDotsMenuOpen() {\n    return this.openedMenuTaskId === this.task.id;\n  }\n\n  /**\n   * Toggles the dots menu open or closed for this task.\n   * \n   * @param event Mouse event to stop propagation.\n   */\n  openDotsMenuHandler(event: MouseEvent) {\n    event.stopPropagation();\n    if (this.isDotsMenuOpen) {\n      this.closeDotsMenu.emit();\n    } else {\n      this.openDotsMenu.emit(this.task.id);\n    }\n  }\n\n  /**\n   * Loads the full contact details for each assigned contact in the task\n   * and emits the resolved contact list.\n   */\n  async getContactList() {\n    this.contactList = [];\n    if (this.task?.assignedTo?.length) {\n      const uniqueContactIds = [...new Set(this.task.assignedTo)];\n      for (let contactId of uniqueContactIds) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) this.contactList.push(contact);\n      }\n      this.contacts.emit(this.contactList);\n    }\n  }\n\n   /**\n   * Returns a unique list of contacts (removes duplicates based on ID)\n   */\n  getAllUniqueContacts(): Contact[] {\n    if (!this.contactList || this.contactList.length === 0) {\n      return [];\n    }\n    return this.contactList.filter((contact, index, self) =>\n      index === self.findIndex(c => c.id === contact.id)\n    );\n  }\n\n  /**\n   * Returns the first 4 contacts for display.\n   */\n  getUniqueContacts(): Contact[] {\n    return this.getAllUniqueContacts().slice(0, 4);\n  }\n\n  /**\n   * Joins the names of remaining contacts into a comma-separated string.\n   * \n   * @param remainingContacts Array of remaining Contact objects.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(): string {\n    const all = this.getAllUniqueContacts();\n    const remaining = all.slice(4);\n    return remaining.map((c) => c.name).join(', ');\n  }\n}\n    \n\n    \n        \n  \n    \n      {{ taskService.capitalize(task.category) }}\n    \n\n    \n      \n      \n      \n    \n\n    \n      To Do\n      In Progress\n      Awaiting Feedback\n      Done\n    \n  \n  \n    {{ taskService.capitalize(task.title) }}\n    \n      {{ taskService.capitalize(task.description) }}\n      …\n    \n     0 ? 'visible' : 'hidden'\n      \"\n    >\n      \n        \n      \n      \n        {{ getCompletedSubtasksCount(subtaskList) }} /\n        {{ subtaskList.length }} Subtasks\n      \n    \n    \n      \n        \n          @for (contact of getUniqueContacts(); track contact.id) {\n          \n            \n              {{ contactService.getInitials(contact.name) }}\n            \n          \n          }\n           4\"\n            [title]=\"getRemainingContactNames()\"\n          >\n            +{{ getAllUniqueContacts().length - 4 }}\n          \n        \n      \n      \n      \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ taskService.capitalize(task.category) }}                                        To Do      In Progress      Awaiting Feedback      Done            {{ taskService.capitalize(task.title) }}          {{ taskService.capitalize(task.description) }}      …         0 ? \\'visible\\' : \\'hidden\\'      \"    >                                  {{ getCompletedSubtasksCount(subtaskList) }} /        {{ subtaskList.length }} Subtasks                                      @for (contact of getUniqueContacts(); track contact.id) {                                    {{ contactService.getInitials(contact.name) }}                                }           4\"            [title]=\"getRemainingContactNames()\"          >            +{{ getAllUniqueContacts().length - 4 }}                                                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskDetailsComponent.html":{"url":"components/TaskDetailsComponent.html","title":"component - TaskDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task-details/task-details.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task-details\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-details.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-details.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                showContent\n                            \n                            \n                                subtasks\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertDate\n                            \n                            \n                                deleteTask\n                            \n                            \n                                    Async\n                                loadAssignedContacts\n                            \n                            \n                                loadSubtasks\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                onSubtaskToggle\n                            \n                            \n                                openEditTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                closeTaskDetails\n                            \n                            \n                                editTask\n                            \n                            \n                                subtaskChanged\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-details/task-details.component.ts:71\n                            \n                        \n\n                \n                    \n                            Constructor injects task and contact services, and the Angular Router.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tasks and subtasks.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contacts.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation (currently unused).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        contactList\n                    \n                \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:61\n                            \n                        \n                \n                    \n                        The list of contacts assigned to this task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:56\n                            \n                        \n                \n                    \n                        The task whose details are being displayed.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        closeTaskDetails\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:41\n                            \n                        \n                \n                    \n                        Emits an event when the task detail view should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editTask\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:46\n                            \n                        \n                \n                    \n                        Emits an event when the user wants to edit the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:51\n                            \n                        \n                \n                    \n                        Emits the updated subtask list when a subtask is toggled.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Converts a Firebase Timestamp or Date to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The date or timestamp to convert.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the date.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n            \n                \ndeleteTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:131\n                        \n                    \n\n\n            \n                \n                        Deletes the task (if it has a valid ID), and closes the detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loadAssignedContacts\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadAssignedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Fetches detailed contact information for all assigned contact IDs\nand updates the contactList accordingly.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \nloadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:162\n                        \n                    \n\n\n            \n                \n                        Loads subtasks associated with the current task from the database.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook to load assigned contacts and subtasks on component initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Closes the task detail view and emits the close event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskToggle\n                        \n                    \n                \n            \n            \n                \nonSubtaskToggle(subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:148\n                        \n                    \n\n\n            \n                \n                        Toggles a subtask's completion status and updates it in the backend.\nEmits the updated list of subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The subtask to toggle.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openEditTask\n                        \n                    \n                \n            \n            \n                \nopenEditTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Prepares the task for editing and emits the edit event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:82\n                        \n                    \n\n            \n                \n                    Service for fetching contacts.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:66\n                        \n                    \n\n            \n                \n                    Controls whether the detail view content is shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:71\n                        \n                    \n\n            \n                \n                    The list of subtasks associated with the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:81\n                        \n                    \n\n            \n                \n                    Service for handling tasks and subtasks.\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { Task, TaskService } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-task-details',\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  templateUrl: './task-details.component.html',\n  styleUrl: './task-details.component.scss'\n})\n\nexport class TaskDetailsComponent {\n  /**\n   * Emits an event when the task detail view should be closed.\n   */\n  @Output() closeTaskDetails = new EventEmitter();\n\n  /**\n   * Emits an event when the user wants to edit the task.\n   */\n  @Output() editTask = new EventEmitter();\n\n  /**\n   * Emits the updated subtask list when a subtask is toggled.\n   */\n  @Output() subtaskChanged = new EventEmitter();\n\n  /**\n   * The task whose details are being displayed.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of contacts assigned to this task.\n   */\n  @Input() contactList: Contact[] = [];\n\n  /**\n   * Controls whether the detail view content is shown.\n   */\n  showContent = true;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  subtasks: Subtask[] = [];\n\n  /**\n   * Constructor injects task and contact services, and the Angular Router.\n   * \n   * @param taskService Service for handling tasks and subtasks.\n   * @param contactService Service for fetching contacts.\n   * @param router Angular Router for navigation (currently unused).\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService,\n    private router: Router\n  ) {}\n\n  /**\n   * Lifecycle hook to load assigned contacts and subtasks on component initialization.\n   */\n  ngOnInit(): void {\n    this.loadAssignedContacts();\n    this.loadSubtasks();\n  }\n\n  /**\n   * Closes the task detail view and emits the close event.\n   */\n  onClose() {\n    this.showContent = false;\n    this.closeTaskDetails.emit('close');\n  }\n\n  /**\n   * Converts a Firebase Timestamp or Date to a formatted string.\n   * \n   * @param date The date or timestamp to convert.\n   * @returns A string representation of the date.\n   */\n  convertDate(date: Timestamp | Date): string {\n    return this.taskService.convertDate(date);\n  }\n\n  /**\n   * Prepares the task for editing and emits the edit event.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  openEditTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    this.taskService.setEditingTask(this.task);\n    this.editTask.emit(\"edit\");\n  }\n\n  /**\n   * Deletes the task (if it has a valid ID), and closes the detail view.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  deleteTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    if (this.task.id) {\n      this.taskService.deleteTask(this.task.id);\n      this.onClose();\n    }\n  }\n\n  /**\n   * Toggles a subtask's completion status and updates it in the backend.\n   * Emits the updated list of subtasks.\n   * \n   * @param subtask The subtask to toggle.\n   */\n  onSubtaskToggle(subtask: Subtask) {\n    if (!this.task.id || !subtask.id) return;\n    this.taskService.updateSubtask(this.task.id, subtask.id, subtask)\n      .then(() => {\n        this.subtaskChanged.emit(this.subtasks);\n      })\n      .catch(error => {\n        console.error('Error updating subtask:', error);\n      });\n  }\n\n  /**\n   * Loads subtasks associated with the current task from the database.\n   */\n  loadSubtasks() {\n    if (this.task?.id) {\n      this.taskService.getSubtasks(this.task.id).subscribe((subtasks: Subtask[]) => {\n        this.subtasks = subtasks;\n      });\n    }\n  }\n\n  /**\n   * Fetches detailed contact information for all assigned contact IDs\n   * and updates the contactList accordingly.\n   */\n  async loadAssignedContacts() {\n    this.contactList = [];\n    if (this.task?.assignedTo?.length) {\n      for (let contactId of this.task.assignedTo) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) {\n          this.contactList.push(contact);\n        }\n      }\n    }\n  }\n}\n    \n\n    \n        \n    \n        {{taskService.capitalize(task.category)}}\n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n    \n        {{ taskService.capitalize(task.title) }}\n        {{ taskService.capitalize(task.description) }}\n        \n            Due date:\n            {{ convertDate(task.date) }}\n        \n        \n            Priority:\n            {{ task.priority }}\n            \n                \n                \n                \n            \n        \n        \n            Assigned To:\n            No contact selected\n            \n                @for (contact of contactList; track $index) {\n                    \n                        \n                            \n                                {{ contactService.getInitials(contact.name) }}\n                            \n                            {{ contact.name }}\n                        \n                    \n                }\n            \n        \n       \n            Subtasks:\n            No subtasks defined\n            \n                @for (subtask of subtasks; track $index) {\n                    \n                        \n                        \n                        {{ subtask.title }}\n                    \n                }\n            \n        \n        \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Delete\n            \n            \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Edit\n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{taskService.capitalize(task.category)}}                                                                                                                                                                {{ taskService.capitalize(task.title) }}        {{ taskService.capitalize(task.description) }}                    Due date:            {{ convertDate(task.date) }}                            Priority:            {{ task.priority }}                                                                                                    Assigned To:            No contact selected                            @for (contact of contactList; track $index) {                                                                                                        {{ contactService.getInitials(contact.name) }}                                                        {{ contact.name }}                                                            }                                       Subtasks:            No subtasks defined                            @for (subtask of subtasks; track $index) {                                                                                            {{ subtask.title }}                                    }                                                                                                                                                                                                                Delete                                                                                                                                                                                                            Edit                        '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskListManager.html":{"url":"injectables/TaskListManager.html","title":"injectable - TaskListManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskListManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/task-list-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                TaskListManager handles all task list operations for the BoardComponent.\nThis includes loading, filtering, sorting, and managing task lists by status.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                awaitfeedback\n                            \n                            \n                                    Private\n                                done\n                            \n                            \n                                    Private\n                                inprogress\n                            \n                            \n                                    Private\n                                subtasksByTaskId\n                            \n                            \n                                    Private\n                                taskList\n                            \n                            \n                                    Private\n                                todo\n                            \n                            \n                                    Private\n                                unsubTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                destroy\n                            \n                            \n                                    Private\n                                distributeTasksByStatus\n                            \n                            \n                                    Private\n                                emptyArrays\n                            \n                            \n                                    Private\n                                filterTasksBySearchTerm\n                            \n                            \n                                getAwaitFeedbackTasks\n                            \n                            \n                                    Private\n                                getDateValue\n                            \n                            \n                                getDoneTasks\n                            \n                            \n                                getFilteredTasks\n                            \n                            \n                                getInProgressTasks\n                            \n                            \n                                getSubtasksByTaskId\n                            \n                            \n                                getSubtasksForSelectedTask\n                            \n                            \n                                getSubtasksForTask\n                            \n                            \n                                getTaskList\n                            \n                            \n                                    Private\n                                getTasksByStatus\n                            \n                            \n                                getTodoTasks\n                            \n                            \n                                    Private\n                                loadSubtasks\n                            \n                            \n                                loadTasks\n                            \n                            \n                                    Private\n                                sortAllStatusArrays\n                            \n                            \n                                sortTasksByDueDate\n                            \n                            \n                                trackByTaskId\n                            \n                            \n                                updateTaskLists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-list-manager.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        destroy\n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:252\n                        \n                    \n\n\n            \n                \n                        Clears all data and unsubscribes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        distributeTasksByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    distributeTasksByStatus(tasks: Task[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:165\n                        \n                    \n\n\n            \n                \n                        Clears all status arrays and distributes tasks into the appropriate lists.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe full list of tasks to distribute.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emptyArrays\n                        \n                    \n                \n            \n            \n                \n                        \n                    emptyArrays()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:193\n                        \n                    \n\n\n            \n                \n                        Empties all task lists (to-do, in-progress, await-feedback, done).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filterTasksBySearchTerm\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterTasksBySearchTerm(tasks: Task[], searchTerm: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:92\n                        \n                    \n\n\n            \n                \n                        Filters a list of tasks by the provided search term (case-insensitive).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of tasks to filter.\n\n\n                                            \n                                        \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe term to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Filtered tasks array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAwaitFeedbackTasks\n                        \n                    \n                \n            \n            \n                \ngetAwaitFeedbackTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getDateValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDateValue(date: Date | any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:122\n                        \n                    \n\n\n            \n                \n                        Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Date | any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDate input to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDoneTasks\n                        \n                    \n                \n            \n            \n                \ngetDoneTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFilteredTasks\n                        \n                    \n                \n            \n            \n                \ngetFilteredTasks(status: string, searchTerm: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Filters tasks by given status and search term (case-insensitive).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTask status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n\n\n                                            \n                                        \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nSearch term to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Filtered list of tasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInProgressTasks\n                        \n                    \n                \n            \n            \n                \ngetInProgressTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksByTaskId\n                        \n                    \n                \n            \n            \n                \ngetSubtasksByTaskId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:53\n                        \n                    \n\n\n            \n                \n                        Gets subtasks by task ID\n\n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForSelectedTask(selectedTask: Task | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks assigned to the currently selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently selected task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none are found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForTask(taskId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:219\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks for a given task ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to retrieve subtasks for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none exist.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTaskList\n                        \n                    \n                \n            \n            \n                \ngetTaskList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Gets all tasks\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getTasksByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTasksByStatus(status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:75\n                        \n                    \n\n\n            \n                \n                        Returns tasks from the internal status arrays based on status key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStatus key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Array of tasks matching the given status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTodoTasks\n                        \n                    \n                \n            \n            \n                \ngetTodoTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Gets task lists by status\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:203\n                        \n                    \n\n\n            \n                \n                        Loads subtasks for each task and stores them in a lookup table by task ID.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadTasks\n                        \n                    \n                \n            \n            \n                \nloadTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:150\n                        \n                    \n\n\n            \n                \n                        Loads tasks from the task service and distributes them into status-based lists.\nAlso sorts tasks by due date and loads their subtasks.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                A function to unsubscribe from the task observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sortAllStatusArrays\n                        \n                    \n                \n            \n            \n                \n                        \n                    sortAllStatusArrays()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:182\n                        \n                    \n\n\n            \n                \n                        Sorts all status-based task arrays by due date.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortTasksByDueDate\n                        \n                    \n                \n            \n            \n                \nsortTasksByDueDate(tasks: Task[], ascending: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:108\n                        \n                    \n\n\n            \n                \n                        Sorts a list of tasks by their due date.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nArray of tasks to be sorted.\n\n\n                                            \n                                        \n                                        \n                                                ascending\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether to sort in ascending order (default: true).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Sorted task array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trackByTaskId\n                        \n                    \n                \n            \n            \n                \ntrackByTaskId(index: number, task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:140\n                        \n                    \n\n\n            \n                \n                        TrackBy function for use with ngFor to optimize rendering of tasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the item in the array.\n\n\n                                            \n                                        \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                The unique task ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTaskLists\n                        \n                    \n                \n            \n            \n                \nupdateTaskLists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:242\n                        \n                    \n\n\n            \n                \n                        Updates task lists after status changes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        awaitfeedback\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inprogress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtasksByTaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        unsubTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Task, TaskService, Subtask } from '../services/task.service';\nimport { Subscription } from 'rxjs';\n\n/**\n * TaskListManager handles all task list operations for the BoardComponent.\n * This includes loading, filtering, sorting, and managing task lists by status.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskListManager {\n  private taskList: Task[] = [];\n  private subtasksByTaskId: { [taskId: string]: Subtask[] } = {};\n  private unsubTask!: Subscription;\n  private todo: Task[] = [];\n  private inprogress: Task[] = [];\n  private awaitfeedback: Task[] = [];\n  private done: Task[] = [];\n\n  constructor(private taskService: TaskService) { }\n\n  /**\n   * Gets all tasks\n   */\n  getTaskList(): Task[] {\n    return this.taskList;\n  }\n\n  /**\n   * Gets task lists by status\n   */\n  getTodoTasks(): Task[] {\n    return this.todo;\n  }\n\n  getInProgressTasks(): Task[] {\n    return this.inprogress;\n  }\n\n  getAwaitFeedbackTasks(): Task[] {\n    return this.awaitfeedback;\n  }\n\n  getDoneTasks(): Task[] {\n    return this.done;\n  }\n\n  /**\n   * Gets subtasks by task ID\n   */\n  getSubtasksByTaskId(): { [taskId: string]: Subtask[] } {\n    return this.subtasksByTaskId;\n  }\n\n  /**\n   * Filters tasks by given status and search term (case-insensitive).\n   *\n   * @param status - Task status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n   * @param searchTerm - Search term to filter by.\n   * @returns Filtered list of tasks.\n   */\n    getFilteredTasks(status: string, searchTerm: string): Task[] {\n      const tasksForStatus = this.getTasksByStatus(status);\n      return this.filterTasksBySearchTerm(tasksForStatus, searchTerm);\n    }\n\n  /**\n   * Returns tasks from the internal status arrays based on status key.\n   *\n   * @param status - Status key.\n   * @returns Array of tasks matching the given status.\n   */\n  private getTasksByStatus(status: string): Task[] {\n    const statusArrayMap: Record = {\n      'to-do': this.todo,\n      'in-progress': this.inprogress,\n      'await-feedback': this.awaitfeedback,\n      'done': this.done,\n    };\n    return statusArrayMap[status] || [];\n  }\n\n  /**\n   * Filters a list of tasks by the provided search term (case-insensitive).\n   *\n   * @param tasks - The array of tasks to filter.\n   * @param searchTerm - The term to filter by.\n   * @returns Filtered tasks array.\n   */\n  private filterTasksBySearchTerm(tasks: Task[], searchTerm: string): Task[] {\n    const trimmed = searchTerm.trim().toLowerCase();\n    if (!trimmed) return tasks;\n    return tasks.filter(task =>\n      task.title.toLowerCase().includes(trimmed) ||\n      task.description?.toLowerCase().includes(trimmed)\n    );\n  }\n\n  /**\n   * Sorts a list of tasks by their due date.\n   *\n   * @param tasks - Array of tasks to be sorted.\n   * @param ascending - Whether to sort in ascending order (default: true).\n   * @returns Sorted task array.\n   */\n  sortTasksByDueDate(tasks: Task[], ascending: boolean = true): Task[] {\n    return [...tasks].sort((a, b) =>\n      ascending\n        ? this.getDateValue(a.date) - this.getDateValue(b.date)\n        : this.getDateValue(b.date) - this.getDateValue(a.date)\n    );\n  }\n\n  /**\n   * Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n   *\n   * @param date - Date input to convert.\n   * @returns Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n   */\n  private getDateValue(date: Date | any): number {\n    if (date?.toDate instanceof Function) {\n      return date.toDate().getTime();\n    } else if (date instanceof Date) {\n      return date.getTime();\n    } else if (typeof date === 'string') {\n      return new Date(date).getTime();\n    }\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * TrackBy function for use with ngFor to optimize rendering of tasks.\n   *\n   * @param index - The index of the item in the array.\n   * @param task - The task object.\n   * @returns The unique task ID.\n   */\n  trackByTaskId(index: number, task: Task): string | undefined {\n    return task.id;\n  }\n\n  /**\n   * Loads tasks from the task service and distributes them into status-based lists.\n   * Also sorts tasks by due date and loads their subtasks.\n   *\n   * @returns A function to unsubscribe from the task observable.\n   */\n  loadTasks(): () => void {\n    this.unsubTask = this.taskService.getTasks().subscribe((tasks) => {\n      this.taskList = tasks;\n      this.distributeTasksByStatus(tasks);\n      this.sortAllStatusArrays();\n      this.loadSubtasks();\n    });\n    return () => this.unsubTask.unsubscribe();\n  }\n\n  /**\n   * Clears all status arrays and distributes tasks into the appropriate lists.\n   *\n   * @param tasks - The full list of tasks to distribute.\n   */\n  private distributeTasksByStatus(tasks: Task[]): void {\n    this.emptyArrays();\n    for (const task of tasks) {\n      switch (task.status) {\n        case 'to-do': this.todo.push(task); break;\n        case 'in-progress': this.inprogress.push(task); break;\n        case 'await-feedback': this.awaitfeedback.push(task); break;\n        case 'done': this.done.push(task); break;\n        default:\n          console.warn(`Unknown status in task ${task.title}:`, task.status);\n      }\n    }\n  }\n\n  /**\n   * Sorts all status-based task arrays by due date.\n   */\n  private sortAllStatusArrays(): void {\n    this.todo = this.sortTasksByDueDate(this.todo);\n    this.inprogress = this.sortTasksByDueDate(this.inprogress);\n    this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n    this.done = this.sortTasksByDueDate(this.done);\n  }\n\n\n  /**\n   * Empties all task lists (to-do, in-progress, await-feedback, done).\n   */\n  private emptyArrays(): void {\n    this.todo = [];\n    this.inprogress = [];\n    this.awaitfeedback = [];\n    this.done = [];\n  }\n\n  /**\n   * Loads subtasks for each task and stores them in a lookup table by task ID.\n   */\n  private loadSubtasks(): void {\n    for (const task of this.taskList) {\n      if (task.id) {\n        this.taskService.getSubtasks(task.id).subscribe((subtasks) => {\n          this.subtasksByTaskId[task.id!] = subtasks;\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns the subtasks for a given task ID.\n   *\n   * @param taskId - The ID of the task to retrieve subtasks for.\n   * @returns Array of subtasks, or an empty array if none exist.\n   */\n  getSubtasksForTask(taskId: string | undefined): Subtask[] {\n    if (!taskId) {\n      return [];\n    }\n    return this.subtasksByTaskId[taskId] || [];\n  }\n\n  /**\n   * Returns the subtasks assigned to the currently selected task.\n   *\n   * @param selectedTask - The currently selected task.\n   * @returns Array of subtasks, or an empty array if none are found.\n   */\n  getSubtasksForSelectedTask(selectedTask: Task | undefined): Subtask[] {\n    if (selectedTask?.id) {\n      return this.subtasksByTaskId[selectedTask.id] || [];\n    }\n    return [];\n  }\n\n  /**\n   * Updates task lists after status changes\n   */\n  updateTaskLists(): void {\n    this.todo = this.sortTasksByDueDate(this.todo);\n    this.inprogress = this.sortTasksByDueDate(this.inprogress);\n    this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n    this.done = this.sortTasksByDueDate(this.done);\n  }\n\n  /**\n   * Clears all data and unsubscribes\n   */\n  destroy(): void {\n    if (this.unsubTask) {\n      this.unsubTask.unsubscribe();\n    }\n    this.emptyArrays();\n    this.taskList = [];\n    this.subtasksByTaskId = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing tasks and subtasks\nstored in Firestore.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editingTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSubtask\n                            \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                capitalize\n                            \n                            \n                                clearEditingTask\n                            \n                            \n                                convertDate\n                            \n                            \n                                    Async\n                                deleteSubtask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                formatDate\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                getEditingTask\n                            \n                            \n                                getSingleTaskRef\n                            \n                            \n                                getSubtasks\n                            \n                            \n                                getSubtasksRef\n                            \n                            \n                                getTasks\n                            \n                            \n                                getTasksRef\n                            \n                            \n                                setEditingTask\n                            \n                            \n                                    Async\n                                updateSubtask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/task.service.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addSubtask(ColId: string, subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Adds a subtask to a specific task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created subtask with ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addTask(newTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Adds a new task to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task to be added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created task including its generated ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(text: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:298\n                        \n                    \n\n\n            \n                \n                        Capitalizes the first letter of a string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe string to capitalize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Capitalized string or empty string if undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearEditingTask\n                        \n                    \n                \n            \n            \n                \nclearEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:288\n                        \n                    \n\n\n            \n                \n                        Clears the currently edited task.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:248\n                        \n                    \n\n\n            \n                \n                        Converts a Firestore Timestamp or Date object to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Timestamp or Date to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted date string (dd/mm/yyyy).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSubtask(taskId: string, subtaskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Deletes a subtask from a task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask ID to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Deletes a task from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatDate\n                        \n                    \n                \n            \n            \n                \nformatDate(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:262\n                        \n                    \n\n\n            \n                \n                        Formats a Date object into a dd/mm/yyyy string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Date to format.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updated: Task | Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Returns a plain object representation of a Task or Subtask for Firestore updates.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updated\n                                            \n                                                        Task | Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to clean.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { title: string; description: string; date: any; priority: \"low\" | \"medium\" | \"urgent\"; status: string; assignedTo: {}; category: \"technical\" | \"user story\"; isCompleted?: undefined; } | { ...; } | { ...; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingTask\n                        \n                    \n                \n            \n            \n                \ngetEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:281\n                        \n                    \n\n\n            \n                \n                        Returns the task currently being edited.\n\n\n                        \n                            Returns :         Task | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleTaskRef\n                        \n                    \n                \n            \n            \n                \ngetSingleTaskRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Returns a document reference for a specific task by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasks\n                        \n                    \n                \n            \n            \n                \ngetSubtasks(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:125\n                        \n                    \n\n\n            \n                \n                        Observes the subtasks of a given task in real-time.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksRef\n                        \n                    \n                \n            \n            \n                \ngetSubtasksRef(subColId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'subtasks' subcollection for a given task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasks\n                        \n                    \n                \n            \n            \n                \ngetTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:104\n                        \n                    \n\n\n            \n                \n                        Observes all tasks in Firestore and emits updates in real-time.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasksRef\n                        \n                    \n                \n            \n            \n                \ngetTasksRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'tasks' Firestore collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditingTask\n                        \n                    \n                \n            \n            \n                \nsetEditingTask(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:274\n                        \n                    \n\n\n            \n                \n                        Sets the currently edited task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task being edited.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Updates a subtask document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask document ID.\n\n\n                                            \n                                        \n                                        \n                                                updatedSubtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated subtask data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(docId: string, updatedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Updates a task document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task.\n\n\n                                            \n                                        \n                                        \n                                                updatedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated task data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/services/task.service.ts:72\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserData.html":{"url":"interfaces/UserData.html","title":"interface - UserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for user data stored in Firestore.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            uid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n  private authInitialized = new BehaviorSubject(false);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n  \n  /**\n   * Observable that emits true once Firebase Auth has finished initializing.\n   */\n  public authInitialized$: Observable = this.authInitialized.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n      if (!this.authInitialized.value) {\n        this.authInitialized.next(true);\n      }\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/add-task/add-task.component.ts\n            \n            component\n            AddTaskComponent\n            \n                74 %\n                (44/59)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            injectable\n            CategoryManager\n            \n                76 %\n                (13/17)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/add-task/contact-manager.ts\n            \n            injectable\n            ContactManager\n            \n                76 %\n                (13/17)\n            \n        \n        \n            \n                \n                src/app/add-task/priority-manager.ts\n            \n            injectable\n            PriorityManager\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            injectable\n            SubtaskManager\n            \n                77 %\n                (28/36)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            interface\n            Subtask\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/board.component.ts\n            \n            component\n            BoardComponent\n            \n                71 %\n                (25/35)\n            \n        \n        \n            \n                \n                src/app/board/drag-drop-manager.ts\n            \n            injectable\n            DragDropManager\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/app/board/overlay-manager.ts\n            \n            injectable\n            OverlayManager\n            \n                68 %\n                (15/22)\n            \n        \n        \n            \n                \n                src/app/board/task-details/task-details.component.ts\n            \n            component\n            TaskDetailsComponent\n            \n                94 %\n                (18/19)\n            \n        \n        \n            \n                \n                src/app/board/task-list-manager.ts\n            \n            injectable\n            TaskListManager\n            \n                63 %\n                (19/30)\n            \n        \n        \n            \n                \n                src/app/board/task/task.component.ts\n            \n            component\n            TaskComponent\n            \n                96 %\n                (26/27)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-details/contact-details.component.ts\n            \n            component\n            ContactDetailsComponent\n            \n                58 %\n                (18/31)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-form/contact-form.component.ts\n            \n            component\n            ContactFormComponent\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-list/contact-list.component.ts\n            \n            component\n            ContactListComponent\n            \n                86 %\n                (20/23)\n            \n        \n        \n            \n                \n                src/app/contacts/contacts.component.ts\n            \n            component\n            ContactsComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/app/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/app/login-signup/footer/footer.component.ts\n            \n            component\n            FooterComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/login-signup/login-header/login-header.component.ts\n            \n            component\n            LoginHeaderComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/login-signup/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                src/app/login-signup/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                94 %\n                (17/18)\n            \n        \n        \n            \n                \n                src/app/services/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                86 %\n                (13/15)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            interface\n            UserData\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            injectable\n            ContactService\n            \n                95 %\n                (23/24)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            interface\n            Contact\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/app/services/contact.service.ts\n            \n            function\n            notOnlyWhitespace\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/navigation-history.service.ts\n            \n            injectable\n            NavigationHistoryService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            injectable\n            TaskService\n            \n                90 %\n                (19/21)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Subtask\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Task\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/shared/help/help.component.ts\n            \n            component\n            HelpComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/legal-notice/legal-notice.component.ts\n            \n            component\n            LegalNoticeComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/privacy-policy/privacy-policy.component.ts\n            \n            component\n            PrivacyPolicyComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/sidebar/sidebar.component.ts\n            \n            component\n            SidebarComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            component\n            SummaryComponent\n            \n                44 %\n                (11/25)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            interface\n            FirestoreTimestamp\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.14\n        \n            @angular/cdk : ^19.2.14\n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/fire : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            notOnlyWhitespace   (src/.../contact.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/services/contact.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        notOnlyWhitespace\n                        \n                    \n                \n            \n            \n                \nnotOnlyWhitespace(control: AbstractControl)\n                \n            \n\n\n\n\n            \n                \n                        Custom validator to check that a form input contains more than just whitespace.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form control to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                A validation error object if invalid, otherwise null.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nJoin\nThis project was generated using Angular CLI version 19.2.12.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes, withHashLocation()),\n    provideFirebaseApp(() =>\n      initializeApp({\n        projectId: 'join-6125f',\n        appId: '1:703986298510:web:8cb9707daf583f2153a3df',\n        storageBucket: 'join-6125f.firebasestorage.app',\n        apiKey: 'AIzaSyAWyoU260eXmo3445mLTsqCjzRhEG6aq9A',\n        authDomain: 'join-6125f.firebaseapp.com',\n        messagingSenderId: '703986298510',\n      })\n    ),\n    provideFirestore(() => getFirestore()),\n    provideAnimations(),\n    provideAuth(() => getAuth()),\n    {\n      provide: CDK_DRAG_CONFIG,\n      useValue: {\n        dragStartThreshold: 5,\n        pointerDirectionChangeThreshold: 5,\n        zIndex: 1000,\n        scrollSpeed: 30,          \n        scrollProximity: 100,\n      },\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
