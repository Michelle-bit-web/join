var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.31,1,0.981]],["body/components/AppComponent.html",[0,0.529,1,1.762,2,1.519,3,0.243,4,0.212,5,1.333,6,1.333,7,1.333,8,0.212,9,3.69,10,1.333,11,2.024,12,2.142,13,1.138,14,3.185,15,1.32,16,1.607,17,6.08,18,1.762,19,1.762,20,2.36,21,1.607,22,5.521,23,1.801,24,5.521,25,0.182,26,0.671,27,6.08,28,2.901,29,0.83,30,2.956,31,3.43,32,2.956,33,0.854,34,5.521,35,2.581,36,4.171,37,5.521,38,1.071,39,3.695,40,4.707,41,4.707,42,4.374,43,5.461,44,2.276,45,2.64,46,3.771,47,0.651,48,0.023,49,0.684,50,0.271,51,0.487,52,0.377,53,4.153,54,1.138,55,3.771,56,3.185,57,4.707,58,5.521,59,3.185,60,0.946,61,1.008,62,4.327,63,3.451,64,1.519,65,3.451,66,3.451,67,2.957,68,4.707,69,1.572,70,4.171,71,0.487,72,2.581,73,3.451,74,0.387,75,0.212,76,5.184,77,1.125,78,4.327,79,4.327,80,1.584,81,2.956,82,2.956,83,2.705,84,3.69,85,0.243,86,0.243,87,0.671,88,0.776,89,3.69,90,4.327,91,1.68,92,1.898,93,3.69,94,4.327,95,4.327,96,4.327,97,1.333,98,1.701,99,1.607,100,1.333,101,1.973,102,1.333,103,0.946,104,0.892,105,1.701,106,1.333,107,1.062,108,1.333,109,1.26,110,1.18,111,1.333,112,1.19,113,1.333,114,1.19,115,1.333,116,1.19,117,1.333,118,1.19,119,1.333,120,1.701,121,1.19,122,1.333,123,1.19,124,1.26,125,1.333,126,1.19,127,1.333,128,1.19,129,1.19,130,1.26,131,1.333,132,1.333,133,1.19,134,1.333,135,1.125,136,1.333,137,1.19,138,1.19,139,0.487,140,1.062,141,1.26,142,1.333,143,0.017,144,0.017]],["title/guards/AuthGuard.html",[145,2.436,146,2.695]],["body/guards/AuthGuard.html",[3,0.271,4,0.236,8,0.236,13,0.992,15,1.315,25,0.202,29,0.888,32,2.97,33,0.829,39,3.838,45,2.433,47,0.724,48,0.023,49,0.542,50,0.236,51,0.542,52,0.514,54,1.216,64,1.623,68,5.031,69,1.449,74,0.374,75,0.236,77,1.251,83,3.009,85,0.271,86,0.271,87,0.717,88,0.829,143,0.018,144,0.018,145,4.03,146,5.026,147,4.813,148,4.104,149,5.031,150,4.03,151,5.031,152,5.031,153,1.539,154,3.838,155,0.888,156,6.948,157,3.636,158,2.431,159,4.813,160,5.031,161,2.588,162,3.404,163,2.948,164,1.818,165,2.758,166,2.433,167,4.813,168,3.161,169,5.901,170,4.03,171,3.161,172,5.901,173,3.404,174,4.03,175,5.901,176,3.689,177,5.031,178,5.901,179,0.376,180,2.994,181,5.901,182,3.161,183,0.514,184,3.636,185,5.901,186,4.813,187,4.104,188,1.762,189,1.052,190,2.777,191,0.776,192,4.813,193,4.813,194,4.813,195,4.813,196,6.382,197,4.813,198,4.813,199,3.287,200,1.324]],["title/injectables/AuthService.html",[158,1.232,183,0.31]],["body/injectables/AuthService.html",[3,0.159,4,0.139,8,0.139,13,0.583,15,1.322,25,0.119,26,0.501,29,0.621,32,2.688,33,0.955,35,1.928,38,1.221,44,1.701,45,1.701,46,2.818,47,0.805,48,0.023,49,0.708,50,0.291,51,0.752,52,0.496,54,0.85,59,2.38,60,0.976,61,0.977,64,1.135,69,1.398,70,3.117,71,0.803,74,0.32,75,0.139,77,0.735,85,0.232,86,0.159,87,0.78,88,0.938,143,0.012,144,0.012,150,2.818,153,1.599,154,3.761,155,0.621,158,1.849,161,1.24,162,3.923,163,2.674,164,1.938,165,1.928,170,2.818,171,2.21,173,3.923,174,4.679,179,0.441,180,2.813,182,2.21,183,0.359,188,1.035,189,0.618,191,0.863,199,1.931,200,1.688,201,1.035,202,2.136,203,2.061,204,2.579,205,3.117,206,3.629,207,3.117,208,1.425,209,3.559,210,3.117,211,1.559,212,5.068,213,2.176,214,4.301,215,4.153,216,2.147,217,4.565,218,4.045,219,4.565,220,4.126,221,3.657,222,4.126,223,4.565,224,4.565,225,2.828,226,2.691,227,4.126,228,2.868,229,2.828,230,1.809,231,1.422,232,2.307,233,4.759,234,2.309,235,4.216,236,2.828,237,1.928,238,1.977,239,2.828,240,3.517,241,1.342,242,3.089,243,3.517,244,2.828,245,3.517,246,3.517,247,3.517,248,3.517,249,3.117,250,4.153,251,2.818,252,3.117,253,2.828,254,1.346,255,0.902,256,4.153,257,1.701,258,3.517,259,4.835,260,2.828,261,5.068,262,3.082,263,2.828,264,3.117,265,1.928,266,2.828,267,1.928,268,3.517,269,5.558,270,2.828,271,3.517,272,1.011,273,1.746,274,1.602,275,2.868,276,2.818,277,2.828,278,3.517,279,1.701,280,2.818,281,2.818,282,3.517,283,3.517,284,2.828,285,3.517,286,2.818,287,2.828,288,2.411,289,2.411,290,2.411,291,2.411,292,2.411,293,2.411,294,2.411,295,1.515,296,2.411,297,1.931,298,2.411,299,1.412,300,1.515,301,0.579,302,1.412,303,4.297,304,4.153,305,4.153,306,1.34,307,2.411,308,2.411,309,2.411,310,2.411,311,3.066,312,0.928,313,3.517,314,1.622,315,3.517,316,3.517,317,3.517,318,4.565,319,3.517,320,3.517,321,2.81,322,3.049,323,4.153,324,3.517,325,3.517,326,3.117,327,3.517,328,3.517,329,2.411,330,2.411,331,2.411,332,4.565,333,2.411,334,2.411,335,2.411,336,2.411,337,2.411,338,2.136,339,4.753,340,3.517,341,2.411,342,2.411,343,2.411,344,2.818,345,2.21,346,2.411,347,2.411,348,2.411,349,1.515,350,3.117,351,2.411,352,3.517,353,2.136,354,2.136,355,2.609,356,3.517,357,2.411,358,2.411,359,1.768,360,1.631,361,2.411,362,2.136,363,2.136,364,1.931,365,2.411]],["title/interfaces/Category.html",[301,0.501,366,1.232]],["body/interfaces/Category.html",[3,0.243,4,0.212,8,0.212,13,0.89,15,0.89,25,0.181,26,0.67,48,0.023,50,0.298,60,0.945,61,1.255,71,0.813,74,0.243,75,0.212,85,0.31,86,0.243,87,0.525,88,0.853,103,0.945,139,0.684,143,0.017,144,0.017,153,1.206,179,0.421,183,0.48,189,0.945,191,0.846,200,1.86,211,1.864,231,1.278,234,1.409,237,2.84,254,1.409,255,1.446,257,1.781,273,1.799,301,0.607,312,0.775,366,2.568,367,1.781,368,1.781,369,3.265,370,2.02,371,3.764,372,3.682,373,2.274,374,2.019,375,2.314,376,1.781,377,2.02,378,3.767,379,5.109,380,2.493,381,3.684,382,3.684,383,3.684,384,4.703,385,2.954,386,3.684,387,2.954,388,3.684,389,2.669,390,3.684,391,5.992,392,1.905,393,3.684,394,0.995,395,2.84,396,3.684,397,5.766,398,3.684,399,2.701,400,3.684,401,3.684,402,2.314,403,3.684,404,2.951,405,2.314,406,3.505,407,3.684,408,3.684,409,2.419,410,3.684,411,4.703,412,4.703,413,3.684,414,3.684,415,3.767,416,3.684,417,3.684,418,1.905,419,2.158,420,2.951,421,3.684,422,3.684,423,3.684]],["title/injectables/CategoryManager.html",[183,0.31,373,1.471]],["body/injectables/CategoryManager.html",[3,0.201,4,0.175,8,0.175,13,0.736,15,1.003,25,0.15,26,0.591,33,1,47,0.832,48,0.023,49,0.623,50,0.322,51,0.623,52,0.423,60,1.145,61,1.261,71,0.794,74,0.201,75,0.175,85,0.274,86,0.201,87,0.434,88,0.951,103,1.064,139,0.668,143,0.015,144,0.015,153,1.299,155,0.732,179,0.458,183,0.423,189,0.781,191,0.812,200,1.863,201,1.307,211,1.944,231,1.377,234,1.587,237,2.997,254,1.587,255,1.511,257,2.006,273,1.937,301,0.502,312,0.683,366,2.577,368,2.947,369,5.4,370,1.67,371,3.702,372,3.514,373,2.449,374,2.174,375,2.606,376,2.006,377,2.274,378,4.057,379,5.263,380,2.807,381,4.717,382,4.717,383,4.717,384,5.299,385,3.182,386,4.148,387,3.182,388,4.148,389,2.738,390,5.065,391,5.773,392,2.052,393,4.148,394,1.04,395,2.997,396,5.065,397,5.467,398,4.148,399,3.041,400,5.065,401,3.046,402,2.606,403,5.065,404,3.323,405,2.606,406,3.427,407,4.148,408,3.046,409,2.605,410,5.065,411,4.148,412,4.148,413,3.046,414,5.065,415,3.323,416,3.046,417,5.065,418,2.052,419,2.43,420,4.057,421,5.065,422,3.046,423,3.046,424,4.865,425,4.865,426,4.865,427,3.046,428,3.572,429,3.572,430,3.572,431,3.572,432,3.572,433,3.572,434,3.046,435,3.572,436,3.572,437,3.046,438,2.699,439,3.572,440,2.44,441,2.699,442,2.699]],["title/interfaces/Contact.html",[110,0.692,301,0.501]],["body/interfaces/Contact.html",[3,0.188,4,0.164,8,0.164,13,0.689,15,0.689,25,0.14,26,0.65,29,0.503,48,0.023,49,0.761,50,0.283,51,0.707,52,0.291,54,0.689,61,0.849,64,0.92,65,2.091,71,0.804,74,0.341,75,0.164,85,0.301,86,0.188,87,0.822,88,0.883,104,0.958,110,1.445,140,0.821,143,0.014,144,0.014,158,1.846,161,1.467,166,2.204,179,0.425,180,2.883,183,0.465,184,2.527,188,1.224,189,0.731,191,0.837,208,1.155,211,1.354,213,1.956,216,1.647,226,2.727,230,1.467,231,1.239,232,1.846,234,1.516,238,1.936,241,1.016,257,1.379,262,2.883,272,0.976,273,1.516,275,2.49,276,2.284,279,1.379,286,3.176,295,1.791,297,2.284,299,1.671,300,1.791,301,0.751,311,1.671,312,0.923,314,1.312,322,1.791,349,1.791,360,1.929,367,1.379,371,2.49,389,2.44,394,0.913,395,2.173,406,1.929,418,1.606,443,2.284,444,3.964,445,2.5,446,4.109,447,2.906,448,3.176,449,2.682,450,2.173,451,2.906,452,1.805,453,2.682,454,2.906,455,2.091,456,2.091,457,2.091,458,2.852,459,3.176,460,2.173,461,1.791,462,2.284,463,2.284,464,2.144,465,1.03,466,2.091,467,2.091,468,3.513,469,2.682,470,2.527,471,1.671,472,1.501,473,1.791,474,2.527,475,2.852,476,1.791,477,2.852,478,1.47,479,1.467,480,2.527,481,2.091,482,2.852,483,1.929,484,1.379,485,2.527,486,2.852,487,2.852,488,2.527,489,2.852,490,2.852,491,2.527,492,2.852,493,2.49,494,2.852,495,1.671,496,2.527,497,2.852,498,2.852,499,3.513,500,2.852,501,2.527,502,2.852,503,3.964,504,2.852,505,2.852,506,2.852,507,2.852,508,2.852,509,2.852,510,2.852,511,2.852,512,2.852,513,2.852,514,2.852,515,2.852,516,2.852,517,2.852,518,2.852,519,2.852,520,2.852,521,2.852,522,2.852,523,2.852,524,2.852,525,2.852,526,2.852,527,2.852,528,2.322,529,1.995,530,2.852,531,2.091,532,2.527,533,3.094,534,3.611,535,2.852,536,2.852,537,2.852,538,1.702,539,2.852,540,2.852,541,4.557,542,3.964,543,2.682,544,2.091,545,2.852,546,2.852,547,2.091,548,2.091,549,2.852,550,2.091,551,1.791,552,3.341,553,1.563,554,1.791,555,2.852,556,2.906,557,2.852,558,3.964,559,2.091,560,2.091,561,3.964,562,2.091,563,1.929,564,4.557,565,1.671,566,2.852,567,2.852,568,2.091,569,2.852,570,1.929,571,3.964,572,2.527,573,1.671,574,2.284,575,1.379,576,1.224,577,2.852,578,2.284,579,2.852,580,1.791,581,2.852,582,2.852,583,2.852,584,2.852,585,2.852,586,2.852,587,2.527,588,2.527,589,2.852,590,2.852,591,2.852,592,2.173,593,2.852,594,3.964,595,2.863,596,2.852,597,2.852,598,2.852,599,2.091,600,2.852,601,2.852,602,2.852,603,1.467,604,2.852,605,2.852,606,2.852,607,2.852,608,2.284,609,1.379,610,2.852,611,2.852,612,2.852,613,3.964,614,2.852,615,2.852,616,2.852,617,2.852,618,2.852,619,2.852,620,2.852,621,2.852]],["title/components/ContactFormComponent.html",[0,0.31,112,0.981]],["body/components/ContactFormComponent.html",[0,0.492,1,0.765,2,1.122,3,0.156,4,0.136,5,0.857,6,0.857,7,0.857,8,0.136,10,0.857,11,1.937,12,2.05,15,0.84,16,1.187,18,0.765,19,0.765,20,1.873,21,1.187,23,1.33,25,0.117,26,0.495,29,0.726,33,0.981,35,1.906,44,1.681,47,0.799,48,0.023,49,0.749,50,0.313,51,0.687,52,0.462,54,1.166,57,3.476,60,0.477,61,0.508,64,1.122,69,0.683,71,0.459,74,0.318,75,0.136,80,1.018,85,0.156,86,0.156,87,0.687,88,0.977,91,1.583,97,0.857,98,1.256,99,1.187,100,0.857,101,1.637,102,0.857,103,0.608,104,1.166,105,1.256,106,0.857,107,0.683,108,0.857,109,0.81,110,1.447,111,0.857,112,1.462,113,0.857,114,0.765,115,0.857,116,0.765,117,0.857,118,0.765,119,0.857,120,1.256,121,0.765,122,0.857,123,0.765,124,0.81,125,0.857,126,0.765,127,0.857,128,0.765,129,0.765,130,0.81,131,0.857,132,0.857,133,0.765,134,0.857,135,0.723,136,0.857,137,0.765,138,0.765,139,0.313,140,0.683,141,0.81,142,0.857,143,0.012,144,0.012,155,0.613,168,2.184,179,0.428,188,1.018,190,2.352,191,0.586,200,1.122,208,1.835,211,1.187,213,1.766,216,1.821,230,1.788,232,1.835,238,1.487,241,1.369,255,0.891,262,2.592,265,1.906,272,1.044,279,2.745,312,0.678,314,1.001,349,2.184,355,2.184,374,1.492,376,1.989,394,1.002,405,3.354,418,1.408,419,2.654,446,3.695,448,2.785,452,1.583,461,1.49,464,2.39,465,1.637,472,1.536,481,2.548,483,3.41,484,2.88,493,3.166,495,2.036,496,3.08,551,2.184,552,2.548,553,1.906,562,3.695,573,2.036,576,1.018,595,3.166,603,1.788,609,1.681,622,5.299,623,5.299,624,2.372,625,2.784,626,4.114,627,3.646,628,4.114,629,4.077,630,4.077,631,4.825,632,4.825,633,4.825,634,4.825,635,4.077,636,5.313,637,5.313,638,4.53,639,5.313,640,5.313,641,4.014,642,2.483,643,4.53,644,4.53,645,3.476,646,2.785,647,4.825,648,4.825,649,2.372,650,4.465,651,4.077,652,3.476,653,4.077,654,2.846,655,3.646,656,4.825,657,3.863,658,2.782,659,3.476,660,4.53,661,5.039,662,2.782,663,3.629,664,3.321,665,2.036,666,5.313,667,4.077,668,4.077,669,2.782,670,2.952,671,2.782,672,3.08,673,3.476,674,2.785,675,2.782,676,3.476,677,5.313,678,2.782,679,2.782,680,3.08,681,2.782,682,4.53,683,2.785,684,2.782,685,4.077,686,2.548,687,4.614,688,4.077,689,2.184,690,3.476,691,3.476,692,2.782,693,3.476,694,3.08,695,2.782,696,2.782,697,2.352,698,2.548,699,3.08,700,4.077,701,2.782,702,3.476,703,3.646,704,2.782,705,2.352,706,2.782,707,2.782,708,3.476,709,4.077,710,2.785,711,2.782,712,4.077,713,4.077,714,4.077,715,3.476,716,3.296,717,2.102,718,3.08,719,1.3,720,1.08,721,2.782,722,2.372,723,3.646,724,2.102,725,2.782,726,2.782,727,4.077,728,2.782,729,4.825,730,2.782,731,2.782,732,2.782,733,2.782,734,2.782,735,2.782,736,4.077,737,2.782,738,2.782,739,2.782,740,2.782,741,2.782,742,2.782,743,2.782,744,2.782,745,2.782,746,2.782,747,2.782,748,4.077,749,2.782,750,2.782,751,2.782,752,2.782,753,2.782,754,3.476,755,2.782,756,1.583,757,4.077,758,3.476,759,4.077,760,5.313,761,4.077,762,4.077,763,4.077,764,4.077,765,4.077,766,3.08,767,4.077]],["title/components/ContactListComponent.html",[0,0.31,114,0.981]],["body/components/ContactListComponent.html",[0,0.435,1,0.578,2,0.906,3,0.281,4,0.103,5,0.647,6,0.647,7,0.647,8,0.103,10,0.647,11,1.864,12,1.973,14,1.9,15,1.092,16,0.959,18,0.578,19,0.578,20,1.577,21,0.959,25,0.138,26,0.4,29,0.692,33,0.957,35,1.539,38,1.214,44,1.358,47,0.863,48,0.023,49,0.773,50,0.326,51,0.646,52,0.499,60,1.035,61,1.011,66,2.059,69,0.516,71,0.73,74,0.298,75,0.103,80,0.769,83,1.313,85,0.118,86,0.118,87,0.717,88,0.92,91,1.278,97,0.647,98,1.015,99,0.959,100,0.647,101,1.86,102,0.647,103,0.459,104,1.142,105,1.015,106,0.647,107,0.516,108,0.647,109,0.611,110,1.435,111,0.647,112,0.578,113,0.647,114,1.265,115,0.647,116,0.578,117,0.647,118,0.578,119,0.647,120,1.015,121,0.578,122,0.647,123,0.578,124,0.611,125,0.647,126,0.578,127,0.647,128,0.578,129,0.578,130,0.611,131,0.647,132,0.647,133,0.578,134,0.647,135,0.546,136,0.647,137,0.578,138,0.578,139,0.236,140,0.516,141,0.611,142,0.647,143,0.01,144,0.01,153,1.432,154,2.654,155,0.495,158,1.982,161,1.444,162,3.058,168,1.764,179,0.423,182,2.464,188,0.769,190,1.9,191,0.607,203,1.645,213,1.487,214,3.069,218,3.475,231,1.399,234,1.969,238,1.978,241,0.888,254,1.074,255,1.006,262,2.43,272,0.891,273,2.007,279,1.358,312,0.646,364,2.249,371,3.587,374,1.684,378,3.785,389,2.291,394,0.976,399,2.059,404,2.249,406,2.654,409,2.017,415,1.434,451,2.059,464,1.074,472,1.196,476,1.125,478,1.623,480,2.488,484,2.646,488,3.069,499,2.488,529,2.327,538,1.205,574,2.249,576,1.487,592,1.539,622,5.169,625,2.344,626,3.464,641,3.475,642,2.15,646,2.249,652,2.808,655,3.069,657,2.775,670,1.645,674,2.249,687,4.649,690,2.808,691,2.808,694,2.488,705,1.9,708,2.808,710,2.249,716,2.249,719,0.982,768,1.791,769,5.169,770,1.791,771,2.125,772,2.808,773,4.062,774,3.293,775,4.062,776,4.062,777,4.062,778,4.062,779,4.062,780,2.808,781,3.293,782,3.293,783,3.293,784,3.293,785,3.293,786,4.6,787,3.293,788,4.6,789,4.062,790,1.587,791,3.293,792,1.9,793,1.9,794,2.1,795,4.6,796,3.293,797,2.808,798,2.1,799,3.62,800,1.896,801,3.293,802,2.1,803,4.996,804,3.293,805,2.15,806,3.293,807,2.249,808,4.6,809,2.808,810,3.293,811,2.1,812,3.123,813,2.488,814,3.293,815,2.1,816,2.488,817,2.808,818,4.6,819,3.293,820,3.293,821,2.249,822,3.293,823,2.1,824,4.6,825,3.293,826,2.808,827,3.293,828,2.1,829,2.1,830,2.808,831,3.293,832,2.1,833,3.775,834,2.249,835,2.1,836,3.293,837,2.1,838,2.1,839,2.875,840,3.293,841,2.1,842,2.1,843,2.1,844,2.1,845,2.1,846,2.488,847,3.293,848,2.1,849,2.808,850,2.808,851,3.293,852,2.1,853,2.1,854,1.125,855,2.1,856,2.1,857,2.1,858,2.1,859,1.434,860,2.1,861,2.1,862,2.1,863,2.1,864,4.6,865,3.293,866,2.1,867,2.1,868,2.1,869,1.212,870,1.791,871,2.1,872,1.791,873,1.791,874,2.1,875,2.1,876,2.1,877,2.775,878,2.1,879,2.1,880,3.293,881,2.1,882,2.1,883,2.1,884,1.313,885,2.1,886,2.1,887,2.1,888,1.791,889,2.1,890,2.1,891,3.293,892,2.1,893,2.1,894,2.249,895,2.1,896,2.1,897,2.1,898,3.293,899,3.293,900,3.293,901,3.293,902,3.293,903,3.293,904,3.293,905,3.293,906,1.791,907,3.909,908,2.017,909,4.892,910,2.1,911,5.147,912,3.293,913,2.1,914,4.335,915,4.26,916,1.587,917,1.587,918,4.892,919,3.475,920,2.1,921,3.922,922,3.313,923,2.808,924,4.602,925,2.808,926,4.6,927,4.26,928,3.464,929,2.249,930,2.539,931,2.488,932,2.1,933,4.26,934,4.6,935,4.26,936,3.293,937,2.1,938,2.1,939,4.996,940,2.1,941,4.519,942,3.922,943,3.922,944,4.892,945,3.464,946,3.142,947,3.464,948,3.293,949,3.922,950,2.298,951,3.464,952,2.029,953,3.293,954,3.293,955,1.791,956,2.1,957,2.1,958,4.26,959,1.587,960,2.488,961,3.475,962,3.293,963,4.6,964,3.464,965,5.332,966,3.922,967,3.922,968,4.6,969,4.6,970,3.922,971,4.6,972,3.293,973,3.922,974,3.293,975,3.293,976,2.1,977,1.791,978,4.26,979,5.332,980,1.791,981,3.922,982,3.293,983,3.293,984,1.791,985,3.293,986,1.791,987,2.808,988,2.488,989,4.26,990,3.293,991,2.808,992,2.1,993,3.293,994,4.062,995,3.922,996,1.791,997,1.791,998,1.791,999,2.654,1000,1.313,1001,3.922,1002,2.808,1003,2.1,1004,2.808,1005,0.647,1006,1.791,1007,3.293,1008,2.808,1009,3.293,1010,3.293,1011,2.1,1012,1.791,1013,2.1,1014,2.1,1015,1.791,1016,2.1,1017,3.464,1018,1.212,1019,2.1,1020,4.6,1021,2.808,1022,1.791,1023,3.464,1024,2.1,1025,2.808,1026,3.293,1027,3.293,1028,2.1,1029,2.1,1030,1.791,1031,2.1,1032,2.808,1033,2.808,1034,2.808,1035,2.1,1036,2.1,1037,1.791,1038,1.791,1039,2.1,1040,2.249,1041,2.1,1042,2.1,1043,2.1,1044,2.1]],["title/injectables/ContactManager.html",[183,0.31,1045,2.23]],["body/injectables/ContactManager.html",[3,0.196,4,0.171,8,0.171,11,1.315,13,0.717,15,0.985,25,0.259,26,0.581,29,0.719,33,0.997,47,0.998,48,0.023,49,0.747,50,0.337,51,0.747,52,0.554,60,0.819,61,1.072,71,0.781,74,0.307,75,0.171,85,0.196,86,0.196,87,0.748,88,0.915,103,1.045,110,1.453,143,0.014,144,0.014,155,0.719,161,2.096,179,0.463,183,0.416,189,0.761,191,0.792,200,1.694,201,1.274,211,1.932,213,1.998,231,1.108,237,2.747,254,1.559,255,1.472,257,1.971,273,2.165,312,0.671,366,1.202,368,2.938,370,1.627,371,3.408,373,2.809,374,1.75,375,2.56,376,1.971,377,2.234,378,4.013,379,5.148,380,2.758,389,2.693,392,2.03,394,1.025,395,2.974,402,3.147,406,3.149,409,2.577,418,1.651,419,2.388,420,4.013,434,2.968,438,2.63,440,2.378,484,2.623,529,2.396,538,1.75,588,3.611,719,1.627,790,2.63,799,4.346,826,5.01,884,3.412,1005,1.473,1045,3.673,1046,6.075,1047,4.124,1048,5.459,1049,4.075,1050,4.78,1051,4.075,1052,5.876,1053,5.876,1054,5.876,1055,4.78,1056,4.075,1057,4.78,1058,4.78,1059,5.876,1060,3.611,1061,4.78,1062,3.481,1063,4.78,1064,3.481,1065,4.78,1066,3.481,1067,5.01,1068,5.01,1069,5.01,1070,5.01,1071,4.075,1072,3.481,1073,3.481,1074,2.968,1075,4.78,1076,3.481,1077,4.78,1078,4.78,1079,2.968,1080,4.78,1081,3.481,1082,3.481,1083,2.968,1084,1.627,1085,5.459,1086,4.78,1087,3.481,1088,2.968,1089,2.968,1090,4.654,1091,6.159,1092,3.481,1093,3.481,1094,3.481,1095,3.481,1096,2.378,1097,3.481,1098,3.481,1099,3.481,1100,3.481]],["title/injectables/ContactService.html",[183,0.31,484,1.471]],["body/injectables/ContactService.html",[3,0.147,4,0.128,8,0.128,13,0.538,15,0.538,25,0.11,26,0.626,29,0.585,33,0.988,47,0.976,48,0.023,49,0.794,50,0.322,51,0.739,52,0.565,54,0.801,60,1.025,61,1.147,64,1.07,65,2.43,71,0.801,74,0.31,75,0.128,85,0.261,86,0.147,87,0.777,88,0.942,104,1.061,110,1.451,140,0.954,143,0.012,144,0.012,155,0.585,158,2.066,161,1.144,166,2.381,179,0.454,180,2.964,183,0.448,184,1.971,188,0.955,189,0.57,191,0.799,201,0.955,208,1.343,211,1.499,213,2.3,216,2,226,2.776,230,1.705,231,1.338,232,2.123,234,1.268,238,1.894,241,1.126,242,1.505,257,1.076,262,2.415,272,1.01,273,1.68,275,1.398,276,2.656,279,1.603,286,3.517,295,1.398,297,1.782,299,1.303,300,1.398,301,0.546,311,1.303,312,0.864,314,1.141,322,1.398,349,2.082,360,2.243,371,2.758,389,2.551,394,0.962,395,2.407,406,2.243,418,1.779,443,1.782,444,2.225,445,2.454,446,3.443,447,1.631,448,1.782,449,1.505,450,1.22,451,2.43,452,1.013,453,2.681,454,2.43,455,1.631,456,1.631,457,1.631,458,2.225,459,2.656,460,1.817,461,1.398,462,1.782,463,1.782,464,2.187,465,0.804,466,1.631,467,1.631,468,2.938,469,2.243,470,1.971,471,1.303,472,1.598,473,1.398,474,1.971,475,2.225,476,1.398,477,2.225,478,1.278,479,1.705,480,2.938,481,2.43,482,3.315,483,2.243,484,1.603,485,2.938,486,3.315,487,3.962,488,3.511,489,3.315,490,3.962,491,3.511,492,3.315,493,2.758,494,3.962,495,1.942,496,3.511,497,3.315,498,3.315,499,3.891,500,3.315,501,2.938,502,3.315,503,4.696,504,3.315,505,3.315,506,3.315,507,3.315,508,3.315,509,3.315,510,3.315,511,3.315,512,3.315,513,3.315,514,3.315,515,3.315,516,3.315,517,3.315,518,3.315,519,3.315,520,3.315,521,3.315,522,3.315,523,3.315,524,3.315,525,3.315,526,3.315,527,3.315,528,2.572,529,1.995,530,4.391,531,1.631,532,3.511,533,3.425,534,3.739,535,3.315,536,2.225,537,3.315,538,1.885,539,4.391,540,2.225,541,3.962,542,3.315,543,2.243,544,1.631,545,2.225,546,2.225,547,1.631,548,1.631,549,2.225,550,1.631,551,2.082,552,3.219,553,1.817,554,2.082,555,3.315,556,2.43,557,2.225,558,3.315,559,1.631,560,1.631,561,3.315,562,2.43,563,2.243,564,4.924,565,1.942,566,3.315,567,2.225,568,1.631,569,2.225,570,2.243,571,4.391,572,2.938,573,1.942,574,2.656,575,1.603,576,1.423,577,3.315,578,2.656,579,3.315,580,2.082,581,3.315,582,3.315,583,2.225,584,2.225,585,2.225,586,3.315,587,2.938,588,2.938,589,2.225,590,4.391,591,2.225,592,2.407,593,4.391,594,3.315,595,3.093,596,3.315,597,3.315,598,2.225,599,2.43,600,4.391,601,2.225,602,2.225,603,1.705,604,3.315,605,2.225,606,2.225,607,3.315,608,2.656,609,1.603,610,3.315,611,3.315,612,3.315,613,3.962,614,3.315,615,3.315,616,2.225,617,2.225,618,2.225,619,2.225,620,2.225,621,2.225,638,3.315,645,3.315,683,1.782,780,3.315,797,2.225,799,2.656,1049,3.315,1056,3.315,1101,3.888,1102,3.315,1103,3.888,1104,3.888,1105,3.888,1106,2.225,1107,2.609,1108,2.609,1109,2.609,1110,2.609,1111,2.609,1112,2.609,1113,2.609,1114,2.225,1115,1.971,1116,2.609,1117,2.609,1118,2.609,1119,2.609,1120,2.609,1121,2.609,1122,1.971,1123,2.609,1124,2.225,1125,2.609,1126,2.609,1127,2.609,1128,2.609,1129,2.609,1130,2.609,1131,2.609,1132,2.609,1133,2.609,1134,2.609,1135,2.609,1136,2.609,1137,2.609]],["title/components/ContactsComponent.html",[0,0.31,116,0.981]],["body/components/ContactsComponent.html",[0,0.567,1,0.825,2,1.184,3,0.169,4,0.147,5,0.924,6,0.924,7,0.924,8,0.147,10,0.924,11,1.954,12,2.068,14,2.484,15,1.134,16,1.253,18,0.825,19,0.825,20,1.955,21,1.253,23,1.404,25,0.126,26,0.523,29,0.451,33,0.977,35,2.012,38,1.177,41,3.671,44,1.775,47,0.877,48,0.023,49,0.703,50,0.313,51,0.656,52,0.507,54,0.887,60,0.999,61,1.064,63,3.44,64,1.759,69,0.736,71,0.656,74,0.359,75,0.147,80,1.098,85,0.169,86,0.169,87,0.708,91,2.596,97,0.924,98,1.327,99,1.253,100,0.924,101,1.696,102,0.924,103,0.656,104,0.618,105,1.327,106,0.924,107,0.736,108,0.924,109,1.602,110,1.419,111,0.924,112,1.514,113,0.924,114,1.514,115,0.924,116,1.514,117,0.924,118,0.825,119,0.924,120,1.327,121,0.825,122,0.924,123,0.825,124,0.873,125,0.924,126,0.825,127,0.924,128,0.825,129,0.825,130,0.873,131,0.924,132,0.924,133,0.825,134,0.924,135,0.78,136,0.924,137,0.825,138,0.825,139,0.338,140,0.736,141,0.873,142,0.924,143,0.013,144,0.013,155,0.648,168,2.948,179,0.414,180,2.74,188,1.098,200,1.791,211,1.766,231,0.998,235,3.148,241,0.941,265,2.012,267,2.572,272,0.884,273,1.404,374,2.014,389,1.671,392,1.901,394,1.046,395,2.012,404,2.941,449,1.73,452,1.955,464,2.155,478,1.514,484,2.576,491,3.805,529,1.487,552,2.691,553,2.572,587,3.253,592,2.572,599,3.148,609,1.775,623,2.266,642,2.572,655,3.253,659,3.671,663,4.366,664,3.643,665,2.151,686,2.691,689,2.306,719,1.402,720,1.165,769,2.266,790,2.266,833,3.253,907,3.605,922,3.996,924,3.759,929,2.941,950,2.516,952,2.749,999,3.811,1000,1.875,1005,1.327,1040,4.143,1138,2.557,1139,4.305,1140,4.305,1141,4.294,1142,4.294,1143,5.036,1144,5.036,1145,5.036,1146,5.503,1147,4.305,1148,5.503,1149,5.503,1150,3.671,1151,3.671,1152,3.671,1153,5.036,1154,4.305,1155,4.692,1156,5.503,1157,4.305,1158,4.305,1159,3.703,1160,4.83,1161,3,1162,2.484,1163,2.484,1164,4.305,1165,3,1166,2.484,1167,2.948,1168,4.129,1169,4.615,1170,4.305,1171,3,1172,4.692,1173,3.253,1174,6.248,1175,3,1176,3,1177,3.759,1178,2.941,1179,3.671,1180,4.692,1181,3,1182,3.671,1183,2.941,1184,3.671,1185,4.305,1186,4.305,1187,3.671,1188,3,1189,4.305,1190,3.253,1191,2.691,1192,3.671,1193,3,1194,3.253,1195,3,1196,2.557,1197,2.049,1198,3,1199,3,1200,4.305,1201,4.305,1202,3.253,1203,3.253,1204,4.305,1205,3,1206,3.792,1207,4.305,1208,3,1209,2.484,1210,3,1211,3,1212,3,1213,2.557,1214,3,1215,3,1216,1.73,1217,3.605,1218,1.73,1219,1.498,1220,1.73,1221,2.557,1222,4.305,1223,3.671,1224,3.249,1225,5.503,1226,2.557,1227,3,1228,4.305,1229,3,1230,3,1231,3,1232,3,1233,4.305,1234,3,1235,2.557,1236,3,1237,3,1238,2.557,1239,3,1240,3,1241,3,1242,3.671,1243,4.305,1244,1.607,1245,4.305,1246,2.049,1247,4.305]],["title/injectables/DragDropManager.html",[183,0.31,1248,2.695]],["body/injectables/DragDropManager.html",[3,0.197,4,0.171,8,0.171,13,0.721,25,0.147,29,0.526,33,0.933,38,0.679,47,0.981,48,0.023,49,0.734,50,0.32,51,0.734,52,0.568,54,0.721,71,0.694,74,0.308,75,0.171,85,0.197,86,0.197,87,0.774,88,0.947,91,2.648,99,1.396,107,1.177,139,0.835,143,0.014,144,0.014,149,4.089,155,0.721,164,2.212,165,1.635,168,2.569,179,0.438,183,0.417,189,0.765,191,0.75,201,1.28,203,2.395,208,2.201,234,1.141,241,0.765,242,2.767,272,0.991,312,0.975,314,0.859,370,1.635,374,2.258,376,1.977,377,2.242,394,1.058,437,2.982,445,2.258,452,1.862,472,1.53,473,3.154,528,2.395,563,3.559,576,2.155,578,2.389,580,2.931,609,2.427,670,1.747,710,2.389,720,1.358,756,2.286,771,1.208,800,1.977,869,2.018,907,2.767,908,1.534,917,3.623,919,4.135,922,3.421,961,3.623,988,3.623,1021,5.02,1096,3.275,1177,3.275,1178,3.275,1184,4.089,1246,2.389,1248,4.448,1249,5.747,1250,5.424,1251,5.747,1252,5.888,1253,4.089,1254,5.888,1255,4.796,1256,4.796,1257,4.796,1258,4.796,1259,4.796,1260,2.187,1261,2.332,1262,2.982,1263,3.498,1264,3.275,1265,4.796,1266,3.498,1267,5.472,1268,4.135,1269,2.569,1270,2.982,1271,4.089,1272,2.982,1273,3.498,1274,5.02,1275,4.796,1276,3.275,1277,4.796,1278,4.796,1279,4.089,1280,4.796,1281,4.796,1282,4.796,1283,4.796,1284,4.089,1285,4.796,1286,6.372,1287,5.888,1288,5.02,1289,3.498,1290,4.796,1291,4.089,1292,4.796,1293,4.796,1294,5.888,1295,4.814,1296,3.498,1297,6.741,1298,5.888,1299,3.498,1300,3.498,1301,3.498,1302,2.389,1303,5.472,1304,3.275,1305,2.982,1306,3.498,1307,4.796,1308,2.982,1309,4.089,1310,4.089,1311,4.796,1312,4.796,1313,6.741,1314,3.498,1315,4.796,1316,4.796,1317,3.498,1318,1.534,1319,3.498,1320,3.498,1321,3.498,1322,2.389,1323,3.275,1324,3.498,1325,4.796,1326,3.498,1327,2.982,1328,3.498,1329,3.498,1330,1.635,1331,3.498,1332,1.873,1333,3.498,1334,1.873,1335,3.498,1336,4.796,1337,3.498,1338,3.498,1339,4.796,1340,4.796,1341,4.796,1342,3.498,1343,3.275,1344,3.498,1345,3.498,1346,4.796,1347,3.498,1348,3.498,1349,3.498,1350,3.498,1351,3.498,1352,2.982,1353,3.498,1354,3.498,1355,3.498,1356,3.498]],["title/interfaces/FirestoreTimestamp.html",[301,0.501,1357,2.436]],["body/interfaces/FirestoreTimestamp.html",[0,0.413,3,0.194,4,0.169,8,0.169,11,0.948,12,1.003,15,1.206,16,1.003,20,1.843,21,1.003,23,1.124,25,0.145,29,0.518,32,2.239,33,0.484,35,1.611,38,0.669,48,0.023,61,0.629,67,2.543,71,0.773,74,0.357,75,0.169,77,0.896,80,1.261,85,0.194,86,0.194,87,0.817,88,0.986,92,1.511,135,0.896,139,0.794,143,0.014,144,0.014,155,0.714,158,1.876,161,1.511,164,1.891,168,1.846,179,0.437,190,1.988,191,0.835,200,1.494,211,1.382,226,1.338,238,2.07,241,0.753,254,1.124,267,1.611,272,0.873,273,1.124,274,1.338,301,0.484,306,2.019,312,0.862,314,0.846,367,1.421,392,1.64,394,0.88,452,2.666,465,1.062,472,1.721,473,2.543,476,2.909,478,1.788,538,2.379,575,1.421,580,1.846,599,2.154,625,2.739,665,1.722,756,2.773,771,1.64,800,1.957,816,2.604,821,3.996,854,1.846,859,2.354,894,2.354,930,2.154,950,1.722,952,1.722,1005,1.062,1159,1.846,1167,1.846,1216,1.988,1217,3.133,1218,1.988,1219,1.722,1220,1.988,1224,2.543,1244,2.543,1261,1.988,1264,2.354,1318,1.511,1330,1.611,1332,1.846,1334,2.909,1357,4.332,1358,2.604,1359,4.989,1360,3.447,1361,2.154,1362,2.939,1363,2.939,1364,2.939,1365,2.354,1366,2.604,1367,2.354,1368,4.103,1369,2.939,1370,2.939,1371,2.939,1372,2.939,1373,3.133,1374,2.939,1375,2.604,1376,2.939,1377,2.939,1378,5.232,1379,2.939,1380,2.939,1381,2.939,1382,2.939,1383,2.939,1384,4.047,1385,2.939,1386,4.047,1387,4.047,1388,2.939,1389,4.989,1390,2.939,1391,2.939,1392,4.047,1393,2.939,1394,2.939,1395,4.047,1396,4.047,1397,4.047,1398,4.047,1399,2.939,1400,1.846,1401,2.939,1402,2.939,1403,2.939,1404,5.232,1405,2.939,1406,2.154,1407,2.939,1408,2.939,1409,2.939,1410,2.939,1411,2.939,1412,2.939,1413,2.939,1414,2.939,1415,2.939,1416,4.047,1417,2.939,1418,2.939,1419,2.939,1420,4.63,1421,2.939,1422,2.939,1423,2.354,1424,2.604,1425,2.939,1426,4.047,1427,2.939,1428,2.604,1429,2.939,1430,2.604,1431,4.047,1432,1.722,1433,2.939,1434,2.604,1435,2.604,1436,2.939,1437,2.939,1438,2.939,1439,2.939,1440,2.939,1441,2.939,1442,4.989,1443,2.939,1444,2.939,1445,2.939,1446,2.604,1447,2.939,1448,3.658,1449,3.587,1450,2.939,1451,4.047,1452,4.047,1453,2.154,1454,5.541,1455,2.354,1456,2.939,1457,3.587,1458,4.047,1459,2.939,1460,2.939,1461,2.939,1462,4.047,1463,4.047,1464,4.047,1465,2.939,1466,1.846,1467,2.939,1468,2.939,1469,2.939,1470,2.939,1471,2.939,1472,2.939,1473,2.604,1474,2.939,1475,2.939,1476,2.939,1477,2.939,1478,2.939,1479,2.939,1480,1.846,1481,2.939,1482,3.242,1483,1.988,1484,2.939,1485,1.846,1486,2.154,1487,2.939,1488,2.939,1489,2.354,1490,2.354]],["title/components/FooterComponent.html",[0,0.31,118,0.981]],["body/components/FooterComponent.html",[0,0.566,1,1.379,2,1.664,3,0.282,4,0.246,5,1.545,6,1.545,7,1.545,8,0.246,10,1.545,11,2.047,12,2.166,16,1.761,18,1.379,19,1.379,21,1.761,23,1.973,48,0.022,49,0.681,69,1.231,74,0.34,75,0.246,77,1.303,85,0.282,86,0.282,97,1.545,98,1.864,99,1.761,100,1.545,101,2.079,102,1.545,103,1.096,104,1.033,105,1.864,106,1.545,107,1.231,108,1.545,109,1.46,110,1.261,111,1.545,112,1.379,113,1.545,114,1.379,115,1.545,116,1.379,117,1.545,118,1.856,119,1.545,120,1.864,121,1.379,122,1.545,123,1.379,124,1.892,125,1.545,126,1.379,127,1.545,128,1.379,129,1.379,130,1.892,131,1.545,132,1.545,133,1.379,134,1.545,135,1.303,136,1.545,137,1.379,138,1.379,139,0.564,140,1.231,141,1.46,142,1.545,143,0.018,144,0.018,1491,3.134,1492,4.275,1493,6.05,1494,3.037,1495,6.05,1496,6.05,1497,3.782,1498,3.782]],["title/interfaces/FormData.html",[301,0.501,1499,1.782]],["body/interfaces/FormData.html",[3,0.279,4,0.243,8,0.243,13,1.023,25,0.208,26,0.731,28,2.948,48,0.023,50,0.317,52,0.585,71,0.821,74,0.338,75,0.243,85,0.364,86,0.279,88,0.909,143,0.018,144,0.018,179,0.383,183,0.523,189,1.085,191,0.851,254,1.619,255,1.53,272,0.798,301,0.845,306,1.78,312,0.944,366,1.714,367,2.046,368,2.046,373,2.886,460,2.81,464,1.961,465,1.529,471,3.231,573,2.479,697,2.863,834,4.107,1084,2.32,1499,3.358,1500,3.39,1501,3.39,1502,4.305,1503,4.543,1504,4.543,1505,3.103,1506,3.75,1507,4.543,1508,4.543,1509,3.75,1510,4.543,1511,4.887,1512,3.75,1513,4.543,1514,3.75,1515,3.75,1516,3.75,1517,3.75,1518,3.75,1519,3.75,1520,3.75,1521,3.75,1522,2.863,1523,3.75,1524,3.75,1525,3.75]],["title/interfaces/FormData-1.html",[301,0.419,1005,0.919,1499,1.49]],["body/interfaces/FormData-1.html",[3,0.251,4,0.219,8,0.219,13,0.92,25,0.187,26,0.685,28,2.929,38,0.867,48,0.023,50,0.302,52,0.581,71,0.819,74,0.389,75,0.219,85,0.317,86,0.251,88,0.91,92,1.958,110,1.257,139,0.795,143,0.017,144,0.017,153,0.976,164,1.901,179,0.284,183,0.49,189,0.976,191,0.812,216,1.376,232,1.542,241,0.976,272,0.992,301,0.627,306,1.876,312,0.91,366,1.945,367,1.841,368,1.841,373,2.544,385,2.392,387,2.392,394,0.928,445,2.371,464,1.837,472,1.161,478,1.228,529,2.307,562,2.791,576,2.062,672,3.374,719,2.087,884,2.791,1045,4.419,1047,3.374,1084,3.122,1318,1.958,1322,3.847,1323,3.05,1489,3.847,1490,3.05,1499,3.596,1502,4.05,1526,3.374,1527,3.374,1528,4.175,1529,3.017,1530,4.214,1531,1.734,1532,3.05,1533,3.807,1534,3.374,1535,3.374,1536,3.807,1537,3.807,1538,3.807,1539,3.807,1540,3.807,1541,3.807,1542,3.374,1543,3.807,1544,4.255,1545,3.807,1546,3.807,1547,3.807,1548,3.807,1549,3.807,1550,2.576,1551,2.392,1552,2.392,1553,2.791,1554,3.807,1555,3.807,1556,3.807,1557,3.374,1558,3.807,1559,3.807,1560,3.807,1561,5.524,1562,3.807,1563,3.807,1564,3.807,1565,3.807,1566,3.807,1567,4.802,1568,3.807,1569,3.807,1570,3.807,1571,3.807,1572,3.807,1573,3.807]],["title/injectables/FormValidatorService.html",[183,0.31,1505,2.23]],["body/injectables/FormValidatorService.html",[3,0.255,4,0.222,8,0.222,13,0.935,25,0.191,28,2.495,33,0.962,47,1.01,48,0.023,49,0.755,50,0.329,51,0.755,52,0.395,71,0.808,74,0.32,75,0.222,85,0.35,86,0.255,88,0.996,143,0.017,144,0.017,155,0.856,179,0.454,183,0.495,189,0.992,191,0.832,201,1.661,254,1.856,255,1.561,272,0.729,301,0.799,306,1.846,312,0.915,366,1.567,368,2.865,373,3.023,460,2.905,464,2.125,465,1.753,471,3.421,573,2.842,697,3.282,834,4.451,1084,2.121,1499,3.541,1500,4.746,1501,3.099,1502,3.885,1503,4.299,1504,4.299,1505,3.557,1506,4.299,1507,4.299,1508,4.299,1509,4.299,1510,4.299,1511,4.696,1512,3.428,1513,4.299,1514,3.428,1515,4.299,1516,3.428,1517,4.299,1518,3.428,1519,4.299,1520,4.299,1521,4.299,1522,3.282,1523,4.923,1524,3.428,1525,3.428,1574,5.69,1575,5.69,1576,5.69,1577,5.69,1578,5.69,1579,4.538,1580,4.538,1581,4.538,1582,4.538,1583,4.538,1584,4.538]],["title/components/HeaderComponent.html",[0,0.31,19,0.981]],["body/components/HeaderComponent.html",[0,0.511,1,0.955,2,1.313,3,0.195,4,0.17,5,1.07,6,1.47,7,1.07,8,0.17,10,1.07,11,1.985,12,2.1,14,2.753,15,1.21,16,1.389,18,0.955,19,1.615,20,2.117,21,1.389,23,1.556,25,0.146,26,0.58,29,0.522,33,0.974,38,1.139,42,3.724,44,1.432,47,0.956,48,0.023,49,0.78,50,0.302,51,0.715,52,0.553,54,1.124,60,1.006,61,0.871,64,1.615,69,0.853,71,0.661,74,0.346,75,0.17,77,0.903,80,1.271,85,0.195,86,0.195,91,2.785,97,1.07,98,1.47,99,1.587,100,1.07,101,1.809,102,1.07,103,0.759,104,0.716,105,1.47,106,1.07,107,0.853,108,1.07,109,1.011,110,1.058,111,1.07,112,0.955,113,1.07,114,0.955,115,1.07,116,0.955,117,1.07,118,0.955,119,1.07,120,1.47,121,0.955,122,1.07,123,0.955,124,1.587,125,1.07,126,0.955,127,1.07,128,0.955,129,0.955,130,1.587,131,1.07,132,1.07,133,0.955,134,1.07,135,0.903,136,1.07,137,0.955,138,0.955,139,0.391,140,0.853,141,1.011,142,1.07,143,0.014,144,0.014,153,1.551,154,2.753,155,0.718,157,2.624,158,2.028,163,2.723,166,1.432,179,0.441,182,2.556,191,0.748,200,1.693,205,4.119,206,2.004,208,1.648,216,1.47,221,4.009,231,1.36,232,1.2,242,2.753,254,1.556,255,1.043,257,1.968,262,2.574,267,2.744,272,0.767,273,1.556,312,0.825,314,0.853,326,2.624,372,2.556,380,2.753,394,0.82,395,1.623,402,1.86,405,2.92,418,1.2,449,2.753,478,1.313,528,1.735,533,2.556,665,2.384,689,1.86,799,3.259,854,1.86,870,2.961,872,2.961,873,2.961,907,3.387,929,2.372,950,1.735,952,2.384,1005,1.07,1040,3.724,1155,5.005,1167,3.296,1168,2.983,1191,2.983,1194,4.435,1203,3.606,1216,2.004,1217,3.387,1218,3.145,1219,1.735,1220,2.004,1221,2.961,1223,4.069,1224,2.92,1226,2.961,1246,2.372,1288,4.069,1375,4.435,1494,2.548,1497,2.983,1498,2.983,1585,2.961,1586,4.069,1587,4.069,1588,5.452,1589,4.772,1590,6.358,1591,4.069,1592,4.772,1593,4.772,1594,4.069,1595,4.069,1596,4.772,1597,4.772,1598,2.171,1599,2.171,1600,4.069,1601,2.961,1602,4.649,1603,4.772,1604,3.606,1605,5.246,1606,4.435,1607,5.085,1608,4.009,1609,4.772,1610,4.069,1611,4.009,1612,3.473,1613,4.772,1614,3.606,1615,4.772,1616,3.473,1617,4.772,1618,4.772,1619,4.772,1620,4.069,1621,3.473,1622,3.473,1623,2.961,1624,3.473,1625,2.171,1626,2.624,1627,2.961,1628,4.649,1629,2.961,1630,3.473,1631,3.473,1632,3.473,1633,3.473,1634,3.473,1635,2.624,1636,2.961,1637,3.473,1638,2.624,1639,3.473,1640,2.983,1641,4.772,1642,4.772,1643,3.473,1644,4.069,1645,3.473,1646,3.473,1647,2.961,1648,3.473,1649,3.473,1650,4.772,1651,3.473,1652,3.473,1653,3.473,1654,3.473,1655,3.473,1656,3.473,1657,3.473,1658,3.473,1659,3.473,1660,3.473,1661,2.372,1662,3.473,1663,3.473,1664,3.473,1665,3.473,1666,3.473,1667,2.961,1668,3.259,1669,2.983,1670,4.069,1671,3.259,1672,2.983]],["title/components/HelpComponent.html",[0,0.31,121,0.981]],["body/components/HelpComponent.html",[0,0.462,1,0.909,2,1.268,3,0.186,4,0.162,5,1.018,6,1.018,7,1.018,8,0.162,10,1.018,11,1.975,12,2.09,16,1.342,18,0.909,19,0.909,21,1.342,23,1.503,25,0.139,29,0.497,30,2.256,31,3.353,33,0.647,38,0.894,39,2.659,40,3.93,47,0.497,48,0.022,49,0.68,50,0.162,51,0.372,52,0.462,53,3.626,54,0.95,56,2.659,60,0.985,67,2.469,69,0.811,72,3.364,74,0.299,75,0.162,77,0.859,81,2.256,82,2.256,85,0.186,86,0.186,87,0.401,97,1.018,98,1.42,99,1.342,100,1.018,101,1.77,102,1.018,103,0.722,104,1.094,105,1.42,106,1.018,107,0.811,108,1.018,109,0.962,110,1.322,111,1.018,112,0.909,113,1.018,114,0.909,115,1.018,116,0.909,117,1.018,118,0.909,119,1.018,120,1.42,121,1.722,122,1.018,123,0.909,124,0.962,125,1.018,126,0.909,127,1.018,128,0.909,129,0.909,130,0.962,131,1.018,132,1.018,133,0.909,134,1.018,135,0.859,136,1.018,137,0.909,138,0.909,139,0.749,140,1.303,141,0.962,142,1.018,143,0.014,144,0.014,153,1.008,155,0.693,166,1.9,171,2.469,179,0.21,182,2.469,206,2.659,208,1.592,209,3.592,211,1.342,228,2.469,272,1.006,280,3.924,301,0.647,306,1.268,314,1.132,321,2.659,345,3.51,355,2.469,380,3.315,394,0.693,450,2.154,466,2.881,501,3.483,529,2.329,553,2.685,603,2.021,608,3.924,609,1.9,654,2.469,670,3.273,683,3.924,698,2.881,705,2.659,720,1.282,756,2.618,758,3.93,766,3.483,771,2.263,792,2.659,805,2.154,929,3.924,1005,1.42,1023,3.93,1096,3.148,1166,3.315,1167,2.469,1183,3.148,1197,3.148,1270,4.899,1276,3.148,1291,3.93,1295,3.483,1304,3.148,1330,2.685,1332,2.469,1334,3.077,1373,2.659,1406,2.881,1423,3.148,1432,2.302,1453,2.881,1457,3.483,1482,3.148,1494,2.482,1607,3.483,1611,3.924,1661,3.148,1668,4.476,1669,4.096,1670,4.899,1671,4.605,1672,3.913,1673,2.816,1674,4.609,1675,4.609,1676,4.341,1677,3.303,1678,3.483,1679,3.483,1680,3.303,1681,2.302,1682,2.659,1683,2.496,1684,4.609,1685,4.609,1686,4.899,1687,2.816,1688,3.483,1689,3.148,1690,4.609,1691,5.745,1692,4.609,1693,3.93,1694,3.93,1695,3.93,1696,3.148,1697,3.483,1698,3.93,1699,3.93,1700,3.93,1701,4.609,1702,3.93,1703,3.93,1704,4.609,1705,4.609,1706,4.609,1707,3.93,1708,4.609,1709,5.745,1710,3.93,1711,4.609,1712,4.609,1713,4.609,1714,4.609,1715,4.609,1716,3.93,1717,4.899,1718,4.609,1719,3.93,1720,3.93,1721,5.745,1722,3.93,1723,3.93,1724,3.483,1725,3.483,1726,3.93,1727,4.341,1728,4.609,1729,4.609,1730,3.483,1731,3.93,1732,3.93,1733,3.93,1734,4.609,1735,3.93,1736,3.93,1737,4.609,1738,4.443,1739,3.483,1740,3.93,1741,3.93,1742,3.303,1743,2.881,1744,3.93,1745,3.93,1746,3.93,1747,5.745,1748,3.93,1749,3.483,1750,3.93,1751,3.93,1752,3.077,1753,6.875,1754,3.303,1755,4.609,1756,3.93,1757,3.93,1758,3.93,1759,6.553,1760,3.148,1761,4.609,1762,3.483,1763,3.483,1764,4.609,1765,4.609,1766,4.609,1767,4.899,1768,4.609,1769,4.609,1770,3.93,1771,3.93,1772,4.609,1773,4.609,1774,3.913,1775,4.609,1776,4.609,1777,3.93,1778,4.609,1779,4.609,1780,3.93,1781,4.609,1782,4.609,1783,3.93,1784,3.93,1785,3.93,1786,3.93,1787,2.496,1788,3.483,1789,3.303,1790,4.609,1791,2.816,1792,3.303,1793,3.303,1794,2.496,1795,3.303]],["title/components/LegalNoticeComponent.html",[0,0.31,123,0.981]],["body/components/LegalNoticeComponent.html",[0,0.469,1,0.933,2,1.292,3,0.191,4,0.166,5,1.045,6,1.045,7,1.045,8,0.166,10,1.045,11,1.98,12,2.095,16,1.367,18,0.933,19,0.933,21,1.367,23,1.532,25,0.142,29,0.51,30,2.317,31,3.381,33,0.66,39,2.709,47,0.51,48,0.022,49,0.606,50,0.166,51,0.382,52,0.295,53,3.678,54,0.968,56,2.709,64,1.292,69,0.833,72,3.355,74,0.303,75,0.166,77,0.882,81,2.317,82,2.317,85,0.191,86,0.191,87,0.412,91,1.823,97,1.045,98,1.447,99,1.367,100,1.045,101,1.791,102,1.045,103,0.742,104,0.699,105,1.447,106,1.045,107,0.833,108,1.045,109,0.988,110,1.045,111,1.045,112,0.933,113,1.045,114,0.933,115,1.045,116,0.933,117,1.045,118,0.933,119,1.045,120,1.447,121,0.933,122,1.045,123,1.737,124,2.025,125,1.045,126,0.933,127,1.045,128,0.933,129,0.933,130,0.988,131,1.045,132,1.045,133,0.933,134,1.045,135,0.882,136,1.045,137,0.933,138,0.933,139,0.382,140,0.833,141,0.988,142,1.045,143,0.014,144,0.014,155,0.706,166,2.396,179,0.216,228,2.515,241,1.027,267,2.717,306,1.292,321,2.709,345,3.699,363,3.548,394,0.706,563,2.709,575,2.719,608,3.207,670,2.903,676,4.956,698,2.935,699,3.548,705,2.709,720,1.317,999,2.709,1166,3.353,1268,3.548,1400,3.533,1432,2.346,1494,2.517,1498,4.123,1599,2.935,1669,2.935,1676,4.391,1678,3.548,1679,3.548,1681,2.346,1682,2.709,1683,2.563,1694,5.624,1695,4.004,1696,3.207,1697,3.548,1698,4.004,1699,5.78,1700,5.78,1720,4.004,1722,4.956,1723,4.004,1724,3.548,1725,3.548,1730,3.548,1731,4.004,1732,4.004,1733,4.004,1735,4.004,1736,4.004,1749,3.548,1767,4.004,1787,2.563,1788,3.548,1794,2.563,1796,4.592,1797,4.592,1798,2.893,1799,4.696,1800,4.696,1801,3.393,1802,3.393,1803,4.696,1804,4.696,1805,4.004,1806,4.004,1807,4.696,1808,4.004,1809,4.696,1810,4.696,1811,4.696,1812,4.696,1813,4.696,1814,4.696,1815,4.696,1816,4.696,1817,4.696,1818,4.004,1819,5.382,1820,4.004,1821,6.596,1822,4.696,1823,4.956,1824,4.004,1825,4.956,1826,4.004,1827,4.696,1828,4.696,1829,4.696,1830,4.696,1831,6.596,1832,4.696,1833,4.696,1834,4.696,1835,4.696,1836,6.312,1837,5.812,1838,3.393,1839,4.391,1840,4.696,1841,5.382,1842,5.812,1843,4.696,1844,4.696,1845,4.696,1846,4.696,1847,4.696,1848,5.812,1849,5.812,1850,6.312,1851,4.696,1852,4.004,1853,4.004,1854,3.548,1855,4.696,1856,4.004,1857,4.696,1858,4.696,1859,4.004,1860,4.004,1861,4.696,1862,4.696,1863,4.696,1864,4.696,1865,4.696,1866,4.696,1867,4.696,1868,4.696,1869,4.004,1870,4.696,1871,4.696,1872,4.004,1873,5.812,1874,4.696,1875,5.812,1876,3.207,1877,4.696,1878,4.696,1879,4.696,1880,5.812,1881,5.812,1882,4.696,1883,4.696,1884,4.696,1885,4.696,1886,4.696,1887,4.696,1888,4.696,1889,4.696,1890,4.696,1891,4.004,1892,4.696,1893,4.696,1894,6.312,1895,5.812,1896,4.696,1897,4.696,1898,4.696,1899,4.696,1900,4.696,1901,4.696,1902,4.696,1903,5.812,1904,4.004,1905,4.696,1906,4.696,1907,4.696,1908,4.696,1909,4.696,1910,4.004,1911,4.004,1912,4.696,1913,4.696,1914,4.696,1915,4.696,1916,4.004,1917,4.696,1918,4.696,1919,4.696,1920,4.696,1921,4.696,1922,4.696,1923,4.004,1924,4.696,1925,4.696,1926,4.004,1927,4.004,1928,4.004]],["title/components/LoginComponent.html",[0,0.31,126,0.981]],["body/components/LoginComponent.html",[0,0.481,1,0.724,2,1.076,3,0.148,4,0.129,5,0.811,6,0.811,7,0.811,8,0.129,10,0.811,11,1.924,12,2.036,14,2.257,15,1.139,16,1.139,18,0.724,19,0.724,20,1.813,21,1.139,23,1.276,25,0.11,26,0.476,29,0.589,32,2.642,33,0.974,38,0.759,44,2.388,45,1.613,47,0.703,48,0.023,49,0.675,50,0.314,51,0.526,52,0.407,54,1.066,60,0.993,61,1.057,64,1.695,69,1.723,71,0.749,72,1.829,74,0.347,75,0.129,77,0.684,80,0.963,85,0.148,86,0.148,87,0.704,88,0.982,97,0.811,98,1.206,99,1.139,100,0.811,101,1.593,102,0.811,103,0.575,104,0.542,105,1.206,106,0.811,107,0.646,108,0.811,109,0.766,110,0.906,111,0.811,112,0.724,113,0.811,114,0.724,115,0.811,116,0.724,117,0.811,118,1.423,119,0.811,120,1.206,121,0.724,122,0.811,123,0.724,124,0.766,125,0.811,126,1.594,127,0.811,128,1.423,129,0.724,130,0.766,131,0.811,132,0.811,133,0.724,134,0.811,135,0.684,136,0.811,137,0.724,138,0.724,139,0.296,140,0.646,141,0.766,142,0.811,143,0.012,144,0.012,153,1.347,155,0.589,158,2.214,162,2.257,163,2.583,166,1.613,171,2.77,174,2.672,176,2.446,179,0.427,191,0.704,200,1.763,203,1.954,206,3.189,211,1.746,216,1.785,228,2.096,231,0.907,232,1.786,233,4.097,234,2.147,235,4.288,252,2.956,254,1.276,255,1.208,259,4.377,262,2.631,267,1.23,274,1.519,275,1.409,281,2.672,312,0.726,314,0.96,344,2.672,355,1.409,359,2.446,360,2.257,364,2.672,374,1.893,392,1.351,394,1.025,409,1.716,419,2.583,461,1.409,464,2.223,465,1.593,469,2.983,471,2.583,472,1.017,478,1.076,481,3.233,570,2.257,573,1.954,592,2.417,627,3.529,641,3.907,642,2.417,650,4.377,654,2.096,665,1.954,670,2.583,686,2.446,689,2.096,697,2.257,703,3.529,705,2.694,717,3.529,723,2.956,724,1.988,792,2.694,793,2.257,800,1.613,805,1.829,807,2.672,812,4.115,813,2.956,854,1.409,908,1.154,950,1.314,952,1.314,960,2.956,1005,0.811,1159,3.596,1162,2.983,1163,2.983,1173,4.377,1194,1.988,1196,3.336,1209,2.257,1216,1.518,1217,2.694,1218,1.518,1219,1.314,1220,1.518,1224,2.096,1244,1.409,1330,1.829,1361,2.446,1365,1.797,1366,1.988,1367,1.797,1368,4.532,1373,3.342,1448,1.645,1455,3.775,1491,4.353,1494,2.183,1598,2.446,1604,2.956,1614,3.907,1620,4.409,1623,3.336,1625,3.233,1626,2.956,1636,3.336,1640,3.233,1672,3.621,1681,2.893,1876,2.672,1929,2.244,1930,3.913,1931,3.913,1932,4.712,1933,5.114,1934,3.982,1935,4.671,1936,3.982,1937,4.671,1938,3.982,1939,5.171,1940,3.336,1941,4.671,1942,4.409,1943,5.171,1944,5.171,1945,5.171,1946,5.171,1947,4.409,1948,2.632,1949,3.913,1950,4.671,1951,2.632,1952,3.956,1953,4.939,1954,3.913,1955,3.336,1956,2.632,1957,3.336,1958,3.913,1959,2.632,1960,5.527,1961,2.632,1962,5.369,1963,3.336,1964,4.377,1965,2.632,1966,5.171,1967,4.656,1968,3.336,1969,2.632,1970,2.632,1971,3.913,1972,2.632,1973,3.913,1974,2.956,1975,2.632,1976,2.632,1977,3.913,1978,3.913,1979,2.632,1980,3.913,1981,2.632,1982,2.632,1983,3.913,1984,2.632,1985,3.336,1986,2.632,1987,2.632,1988,2.632,1989,2.632,1990,2.244,1991,1.988,1992,2.632,1993,2.632,1994,2.632,1995,2.244,1996,2.632,1997,2.632,1998,2.244,1999,2.632,2000,2.632,2001,2.632,2002,2.632,2003,2.632,2004,2.632,2005,2.632,2006,2.632,2007,3.336,2008,2.632,2009,2.632,2010,2.632,2011,2.632,2012,3.336,2013,2.632,2014,2.632,2015,3.913,2016,2.632,2017,3.982,2018,3.336,2019,2.244,2020,2.244,2021,2.244,2022,2.632,2023,2.244,2024,2.244,2025,2.632,2026,2.632,2027,1.988,2028,2.632,2029,2.244,2030,2.244,2031,2.244,2032,2.244,2033,2.244,2034,2.956,2035,2.244,2036,2.244]],["title/components/LoginHeaderComponent.html",[0,0.31,128,0.981]],["body/components/LoginHeaderComponent.html",[0,0.568,1,1.137,2,1.475,3,0.232,4,0.203,5,1.273,6,1.273,7,1.273,8,0.203,10,1.273,11,2.016,12,2.134,15,0.852,16,1.56,18,1.137,19,1.137,21,1.56,23,1.748,25,0.174,26,0.651,33,0.884,38,1.222,42,3.661,44,2.21,48,0.023,49,0.603,50,0.263,60,0.919,61,0.978,64,1.475,66,3.351,69,1.67,72,2.505,74,0.335,75,0.203,77,1.074,85,0.232,86,0.232,97,1.273,98,1.651,99,1.56,100,1.273,101,1.94,102,1.273,103,0.903,104,0.852,105,1.651,106,1.273,107,1.014,108,1.273,109,1.203,110,1.154,111,1.273,112,1.137,113,1.273,114,1.137,115,1.273,116,1.137,117,1.273,118,1.137,119,1.273,120,1.651,121,1.137,122,1.273,123,1.137,124,1.203,125,1.273,126,1.137,127,1.273,128,1.732,129,1.137,130,1.203,131,1.273,132,1.273,133,1.137,134,1.273,135,1.074,136,1.273,137,1.137,138,1.137,139,0.465,140,1.014,141,1.203,142,1.273,143,0.016,144,0.016,153,1.172,155,0.806,179,0.341,200,1.475,211,2.029,231,1.242,255,1.172,267,1.932,274,2.081,344,3.661,394,0.947,465,1.651,478,1.637,592,2.505,625,2.384,642,2.942,686,3.351,689,2.871,908,1.812,950,2.064,952,2.064,1005,1.833,1159,3.694,1162,3.092,1163,3.092,1206,3.351,1216,2.384,1217,3.432,1218,2.384,1219,2.064,1220,2.384,1224,3.58,1244,2.213,1365,2.823,1367,2.823,1373,3.856,1424,4.05,1449,4.05,1491,4.077,1494,2.781,1586,4.57,1587,4.57,1614,4.05,1625,3.351,1640,3.351,1934,5.072,1936,5.072,1942,5.367,1952,3.661,1953,4.57,1967,4.756,1985,4.57,1991,4.928,1995,3.523,1998,3.523,2007,4.57,2034,4.05,2037,5.561,2038,3.523,2039,4.133,2040,5.36,2041,5.36,2042,5.36,2043,4.57,2044,5.36,2045,4.133,2046,3.092,2047,4.133,2048,4.57,2049,5.36,2050,5.36,2051,5.801,2052,4.133,2053,4.133,2054,4.133,2055,4.133,2056,4.133,2057,4.133]],["title/injectables/NavigationHistoryService.html",[31,1.91,183,0.31]],["body/injectables/NavigationHistoryService.html",[3,0.238,4,0.207,8,0.207,13,1.239,25,0.177,26,0.661,29,0.636,31,2.913,32,2.929,33,0.923,35,2.542,36,4.797,38,1.305,45,2.91,47,0.636,48,0.023,49,0.476,50,0.267,51,0.476,52,0.473,54,1.121,56,4.038,60,0.725,61,0.772,71,0.757,73,3.4,74,0.338,75,0.207,76,5.127,77,1.099,83,2.643,84,3.605,85,0.238,86,0.238,87,0.514,88,0.845,89,3.605,91,1.641,92,1.854,93,3.605,143,0.016,144,0.016,155,0.818,165,3.143,166,2.243,176,3.4,179,0.435,183,0.473,189,0.924,191,0.731,201,1.547,213,2.562,237,2.542,238,2.024,274,2.112,302,2.717,312,0.594,394,0.818,399,3.969,538,2.324,575,2.618,683,4.593,694,4.11,720,1.641,1005,1.303,1018,3.138,1166,3.663,1197,4.781,1644,4.638,1661,2.888,1681,3.171,1682,3.997,1710,4.638,1751,4.638,1777,3.605,2058,5.733,2059,3.605,2060,4.638,2061,5.439,2062,5.907,2063,6.017,2064,6.929,2065,5.439,2066,7.106,2067,6.349,2068,6.349,2069,6.349,2070,3.605,2071,5.439,2072,5.439,2073,5.439,2074,6.014,2075,5.439,2076,5.439,2077,4.228,2078,5.439,2079,5.439,2080,4.228,2081,4.228,2082,5.439,2083,4.638,2084,5.439,2085,4.228,2086,5.439,2087,4.228,2088,4.228,2089,4.228,2090,4.228,2091,5.439,2092,4.228,2093,4.228,2094,3.605]],["title/injectables/OverlayManager.html",[183,0.31,2095,2.695]],["body/injectables/OverlayManager.html",[3,0.195,4,0.17,8,0.17,13,0.714,15,0.714,25,0.146,26,0.579,29,0.717,32,2.62,33,1.013,38,1.138,39,2.75,47,0.979,48,0.023,49,0.732,50,0.34,51,0.757,52,0.567,60,1.089,61,1.122,71,0.78,74,0.33,75,0.17,77,0.901,85,0.195,86,0.195,87,0.662,88,1.01,91,2.467,107,1.17,139,0.812,140,1.44,143,0.014,144,0.014,155,0.717,164,1.958,165,1.62,166,1.965,176,2.167,177,2.956,179,0.447,183,0.415,189,0.758,191,0.772,200,1.824,201,1.269,203,2.381,211,1.982,231,1.105,237,3.24,241,0.758,255,1.488,257,1.965,273,1.131,281,2.368,312,0.487,370,1.62,374,1.994,375,2.553,376,1.965,377,2.228,389,2.115,392,1.646,394,1.024,395,3.099,405,1.857,418,1.197,419,2.381,427,2.956,440,2.368,441,3.601,442,2.619,452,2.115,464,1.777,472,0.901,479,2.09,483,3.142,485,2.619,495,1.732,553,1.62,576,1.745,592,1.62,595,2.553,609,1.965,663,4.822,664,2.98,665,1.732,674,2.368,907,3.755,922,3.667,924,4.2,999,3.666,1000,2.167,1060,2.619,1141,4.644,1142,4.644,1150,4.064,1151,4.064,1152,4.064,1159,3.487,1160,4.432,1169,2.368,1177,4.006,1178,3.256,1179,2.956,1180,5.001,1182,4.644,1187,2.956,1190,4.115,1191,2.167,1192,4.064,1206,2.167,1219,1.732,1238,4.064,1242,4.064,1246,2.368,1261,2.383,1271,2.956,1274,2.956,1276,3.256,1279,4.064,1308,2.956,1318,1.52,1542,4.115,1608,3.256,1640,2.167,1681,2.381,1752,2.553,2070,2.956,2095,4.432,2096,6.165,2097,4.766,2098,5.866,2099,5.866,2100,4.064,2101,5.447,2102,4.432,2103,5.447,2104,5.447,2105,4.766,2106,5.866,2107,5.866,2108,5.866,2109,5.866,2110,5.866,2111,5.866,2112,4.766,2113,4.766,2114,5.447,2115,5.447,2116,3.467,2117,3.467,2118,2.956,2119,2.619,2120,3.467,2121,3.467,2122,3.467,2123,3.467,2124,5.866,2125,3.467,2126,3.467,2127,3.467,2128,3.467,2129,3.467,2130,4.766,2131,4.646,2132,4.766,2133,4.064,2134,4.766,2135,3.467,2136,3.467,2137,3.467,2138,4.766,2139,3.467,2140,3.467,2141,3.467,2142,3.467,2143,3.467,2144,2.956,2145,2.619,2146,2.956,2147,3.467,2148,3.467,2149,3.467,2150,2.956,2151,3.467]],["title/injectables/PriorityManager.html",[183,0.31,1528,2.23]],["body/injectables/PriorityManager.html",[3,0.271,4,0.236,8,0.236,13,0.993,25,0.202,26,0.718,29,0.888,33,0.959,47,0.96,48,0.023,49,0.718,50,0.335,51,0.718,52,0.556,60,0.826,61,0.879,71,0.768,74,0.332,75,0.236,85,0.271,86,0.271,87,0.718,103,1.291,139,0.782,143,0.018,144,0.018,155,0.888,179,0.376,183,0.514,189,1.053,201,1.763,213,2.544,366,2.205,368,2.865,370,2.251,373,2.952,374,2.161,375,3.162,376,2.434,377,2.76,380,3.406,389,2.292,392,2.299,394,0.96,472,1.535,1079,4.107,1084,2.251,1262,5.034,1528,4.16,1529,3.909,1534,4.461,1550,3.406,1551,3.657,1552,3.162,2145,3.639,2152,5.925,2153,5.904,2154,6.384,2155,5.904,2156,5.904,2157,4.817,2158,5.904,2159,4.817,2160,4.032,2161,5.904,2162,5.904,2163,5.904,2164,5.904,2165,4.107,2166,4.817]],["title/components/PrivacyPolicyComponent.html",[0,0.31,129,0.981]],["body/components/PrivacyPolicyComponent.html",[0,0.361,1,0.596,2,0.929,3,0.233,4,0.106,5,0.668,6,0.668,7,0.668,8,0.106,10,1.277,11,1.873,12,2.017,16,0.983,18,0.596,19,0.596,21,0.983,23,1.101,25,0.091,29,0.326,30,1.48,31,2.877,33,0.657,36,4.058,39,2.7,45,1.392,46,3.668,47,0.326,48,0.022,49,0.571,50,0.275,51,0.244,52,0.189,53,2.831,54,1.482,55,2.305,56,2.7,59,3.098,63,2.11,64,0.929,69,1.018,72,2.847,73,3.357,74,0.233,75,0.106,77,0.563,81,1.48,82,1.48,85,0.122,86,0.122,87,0.263,97,0.668,98,1.04,99,0.983,100,0.668,101,1.442,102,0.668,103,0.474,104,0.447,105,1.04,106,0.668,107,0.532,108,0.668,109,0.631,110,1.267,111,0.668,112,0.596,113,0.668,114,0.596,115,0.668,116,0.596,117,0.668,118,0.596,119,0.668,120,1.04,121,0.596,122,0.668,123,0.596,124,1.806,125,0.668,126,0.596,127,0.668,128,0.596,129,1.478,130,2.03,131,0.668,132,0.668,133,0.596,134,0.668,135,0.563,136,0.668,137,0.596,138,0.596,139,0.571,140,1.463,141,0.631,142,0.668,143,0.01,144,0.01,150,3.668,151,2.878,152,2.878,153,1.023,155,0.808,163,2.337,166,1.929,171,1.808,173,3.346,176,2.11,179,0.138,187,4.579,204,2.11,208,1.166,209,3.808,210,3.535,213,1.235,226,1.817,228,1.808,241,1.607,251,2.305,262,2.764,265,2.187,275,3.106,302,2.337,306,1.287,321,3.098,345,3.529,353,2.55,355,3.376,359,2.11,362,3.535,375,2.877,376,1.392,394,0.508,445,1.235,446,2.925,447,3.357,449,2.7,452,1.31,453,2.7,467,2.925,469,1.947,479,1.48,529,1.166,554,1.808,563,2.7,565,2.337,575,1.392,580,1.808,592,1.578,603,1.48,665,2.897,670,3.148,689,1.808,698,2.11,699,2.55,710,3.961,720,0.841,756,1.817,792,2.7,793,3.346,805,1.578,833,2.55,839,2.11,908,1.48,930,2.11,946,2.305,959,2.55,999,1.947,1005,1.04,1018,1.947,1166,2.7,1167,2.506,1178,3.196,1191,2.11,1197,2.305,1206,2.11,1276,2.305,1295,3.535,1309,3.99,1400,3.376,1406,2.925,1423,2.305,1430,2.55,1432,3.472,1482,2.305,1494,1.938,1497,4.345,1498,3.357,1606,2.55,1625,3.357,1626,3.535,1661,2.305,1668,2.305,1669,2.11,1671,2.305,1676,3.535,1681,1.686,1682,2.7,1683,1.638,1687,1.848,1688,4.602,1696,2.305,1703,3.99,1716,4.579,1719,3.99,1724,4.382,1725,4.883,1726,2.878,1727,3.535,1730,2.55,1738,2.11,1746,2.878,1748,2.878,1749,5.116,1756,3.99,1757,3.99,1760,2.305,1762,2.55,1763,2.55,1780,3.99,1783,2.878,1784,2.878,1787,1.638,1788,2.55,1791,1.848,1794,1.638,1808,2.878,1818,3.99,1819,2.878,1820,3.99,1823,2.878,1824,4.579,1825,2.878,1826,4.579,1839,4.382,1852,2.878,1853,3.99,1859,4.579,1860,3.99,1869,2.878,1872,2.878,1876,3.668,1910,2.878,1911,2.878,1916,2.878,1923,2.878,1926,2.878,1927,2.878,1928,2.878,1952,4.5,1974,4.058,2029,2.878,2031,2.878,2051,2.878,2060,2.878,2062,4.579,2063,2.878,2118,2.878,2131,2.55,2167,3.535,2168,3.535,2169,1.848,2170,3.375,2171,3.375,2172,2.167,2173,2.878,2174,2.167,2175,3.375,2176,3.375,2177,3.375,2178,3.375,2179,3.375,2180,2.878,2181,3.375,2182,3.375,2183,4.679,2184,3.375,2185,5.371,2186,3.375,2187,5.371,2188,3.375,2189,3.375,2190,4.679,2191,4.679,2192,6.462,2193,3.375,2194,2.878,2195,3.375,2196,4.679,2197,4.679,2198,3.99,2199,5.371,2200,3.375,2201,3.375,2202,2.305,2203,3.375,2204,3.375,2205,3.375,2206,3.375,2207,3.375,2208,3.375,2209,4.679,2210,3.375,2211,3.375,2212,6.302,2213,3.99,2214,6.842,2215,4.579,2216,3.375,2217,4.679,2218,3.375,2219,3.375,2220,3.375,2221,3.375,2222,3.375,2223,4.679,2224,3.375,2225,3.375,2226,4.679,2227,3.375,2228,3.375,2229,5.371,2230,4.679,2231,4.305,2232,3.375,2233,3.375,2234,3.375,2235,3.375,2236,3.375,2237,3.375,2238,3.375,2239,3.375,2240,3.375,2241,3.375,2242,3.375,2243,2.55,2244,4.679,2245,3.375,2246,4.679,2247,3.375,2248,4.679,2249,3.375,2250,4.579,2251,3.375,2252,3.375,2253,3.375,2254,3.99,2255,4.679,2256,3.375,2257,3.375,2258,3.375,2259,3.375,2260,4.679,2261,3.375,2262,3.375,2263,2.878,2264,5.371,2265,3.375,2266,3.375,2267,3.375,2268,3.375,2269,3.99,2270,3.375,2271,3.375,2272,3.375,2273,4.679,2274,2.878,2275,3.375,2276,3.375,2277,3.375,2278,3.375,2279,3.375,2280,4.679,2281,3.375,2282,3.375,2283,3.375,2284,3.375,2285,3.375,2286,3.375,2287,3.375,2288,3.375,2289,3.375,2290,4.679,2291,4.679,2292,5.371,2293,3.375,2294,5.371,2295,3.375,2296,3.375,2297,3.375,2298,3.375,2299,3.375,2300,3.375,2301,4.679,2302,3.375,2303,3.375,2304,3.375,2305,3.375,2306,4.679,2307,3.375,2308,3.375,2309,4.679,2310,3.375,2311,3.375,2312,3.375,2313,3.375,2314,3.375,2315,3.375,2316,3.375,2317,3.375,2318,4.679,2319,3.375,2320,3.375,2321,3.375,2322,3.375,2323,3.375,2324,3.375,2325,3.375,2326,3.375,2327,3.375,2328,4.679,2329,3.375,2330,3.375,2331,3.375,2332,4.679,2333,3.375,2334,3.375,2335,3.375,2336,3.375,2337,3.375,2338,3.375,2339,3.99,2340,3.375,2341,3.375,2342,3.375,2343,3.375,2344,3.375,2345,4.679,2346,3.375,2347,3.375,2348,3.375,2349,3.375,2350,2.878,2351,3.375,2352,3.375,2353,3.375,2354,3.375,2355,3.375,2356,3.375,2357,2.878,2358,3.375,2359,2.305,2360,3.375,2361,3.375,2362,4.679,2363,3.535,2364,3.375,2365,3.375,2366,3.375,2367,2.878,2368,4.679,2369,3.196,2370,2.878,2371,2.305,2372,2.55,2373,3.375,2374,2.878,2375,2.878,2376,3.375,2377,3.375,2378,3.375,2379,3.375,2380,3.375,2381,3.375,2382,3.375,2383,3.375,2384,5.371,2385,3.375,2386,4.679,2387,3.375,2388,3.375,2389,3.375,2390,3.375,2391,3.375,2392,2.878]],["title/components/SidebarComponent.html",[0,0.31,18,0.981]],["body/components/SidebarComponent.html",[0,0.582,1,1.236,2,1.555,3,0.253,4,0.22,5,1.384,6,1.384,7,1.384,8,0.22,10,1.384,11,2.03,12,2.148,15,1.165,16,1.646,18,1.879,19,1.236,20,2.402,21,1.646,23,1.844,25,0.189,29,0.676,33,0.794,43,5.536,45,2.677,47,0.676,48,0.023,49,0.696,50,0.22,51,0.506,52,0.492,54,1.165,64,1.555,69,1.103,73,3.534,74,0.365,75,0.22,77,1.168,80,1.644,85,0.253,86,0.253,87,0.546,97,1.384,98,1.742,99,1.646,100,1.384,101,2.001,102,1.384,103,0.982,104,1.275,105,1.742,106,1.384,107,1.103,108,1.384,109,1.308,110,1.201,111,1.384,112,1.236,113,1.384,114,1.236,115,1.384,116,1.236,117,1.384,118,1.236,119,1.384,120,1.742,121,1.236,122,1.384,123,1.236,124,1.948,125,1.384,126,1.236,127,1.384,128,1.236,129,1.236,130,1.948,131,1.384,132,1.384,133,1.236,134,1.384,135,1.168,136,1.384,137,1.236,138,1.236,139,0.696,140,1.103,141,1.308,142,1.384,143,0.017,144,0.017,153,1.493,154,3.262,155,0.85,157,3.394,158,2.395,160,4.821,162,3.262,163,3.243,164,1.742,179,0.36,182,3.028,191,0.546,200,1.555,221,4.435,231,1.31,254,2.118,255,1.236,257,2.331,479,2.479,529,1.953,720,1.744,854,2.406,1361,3.534,1494,2.892,1497,4.059,1498,4.059,1667,3.831,1672,3.534,1738,3.534,1964,4.272,2339,4.821,2393,3.831,2394,5.654,2395,5.654,2396,4.493,2397,4.493]],["title/components/SignupComponent.html",[0,0.31,133,0.981]],["body/components/SignupComponent.html",[0,0.333,1,0.526,2,0.841,3,0.108,4,0.094,5,0.589,6,0.589,7,0.589,8,0.094,10,0.589,11,1.836,12,1.943,14,1.764,15,0.984,16,0.89,18,0.526,19,0.526,20,1.483,21,0.89,25,0.08,26,0.372,29,0.46,32,2.42,33,0.911,38,0.593,42,1.306,44,1.261,45,1.261,47,0.766,48,0.023,49,0.736,50,0.308,51,0.573,52,0.443,54,0.899,55,2.088,56,1.764,60,0.818,61,0.871,63,2.728,64,0.841,66,1.911,69,1.071,70,4.747,71,0.769,74,0.312,75,0.094,77,0.497,80,0.7,85,0.108,86,0.108,87,0.714,88,0.902,97,0.589,98,0.942,99,0.89,100,0.589,101,2.015,102,0.589,103,0.418,104,0.394,105,0.942,106,0.589,107,0.469,108,0.589,109,0.557,110,1.111,111,0.589,112,0.526,113,0.589,114,0.526,115,0.589,116,0.526,117,0.589,118,1.201,119,0.589,120,0.942,121,0.526,122,0.589,123,0.526,124,0.557,125,0.589,126,0.526,127,0.589,128,0.526,129,0.526,130,1.271,131,0.589,132,0.589,133,1.201,134,0.589,135,0.497,136,0.589,137,0.526,138,0.526,139,0.215,140,0.469,141,0.557,142,0.589,143,0.009,144,0.009,153,1.283,155,0.46,158,1.917,165,1.429,170,2.088,179,0.422,190,1.764,191,0.754,199,1.306,200,1.575,204,4.088,211,0.89,216,1.177,228,1.638,231,0.709,232,1.056,233,4.095,234,2.049,235,4.218,238,1.471,249,2.31,255,1.168,259,4.631,262,2.51,272,0.818,273,1.867,274,1.187,275,2.046,312,0.842,314,0.469,321,1.764,350,1.445,354,2.31,355,1.024,359,1.911,360,1.103,371,3.702,372,1.024,374,1.598,392,1.056,394,0.883,395,2.04,409,2.756,415,1.306,418,1.056,459,3.65,460,1.786,461,1.024,462,2.088,463,2.088,464,2.239,465,1.91,469,3.203,471,3.049,472,1.134,478,1.706,481,2.728,484,2.289,529,1.056,552,1.195,572,1.445,573,2.543,574,2.088,580,1.638,609,1.261,625,2.204,627,2.886,642,2.04,644,3.721,649,1.63,650,3.846,654,1.638,660,3.257,661,2.607,686,3.182,697,1.764,698,2.728,703,2.886,705,3.083,717,3.298,719,0.894,722,1.63,723,3.298,724,1.445,768,1.63,772,2.607,792,2.518,793,1.764,800,1.799,807,2.088,812,1.911,813,2.31,846,3.298,850,2.607,854,1.024,906,1.63,907,4.034,908,2.232,909,5.358,911,5.529,914,3.606,915,2.607,916,1.445,917,3.606,918,5.421,919,4.194,921,4.556,922,1.911,923,1.63,924,4.292,925,3.257,927,2.607,928,2.607,930,3.816,931,3.606,933,1.63,935,3.721,941,5.005,942,4.069,943,3.257,944,5.112,945,3.257,946,3.26,947,3.721,949,4.556,950,0.955,951,1.63,952,0.955,955,2.607,958,4.733,959,2.31,960,2.31,961,4.325,964,1.63,965,5.112,966,2.607,967,2.607,970,2.607,973,4.733,977,2.607,978,3.721,979,5.205,980,1.63,981,3.721,984,1.63,986,4.34,987,4.34,988,3.606,989,3.721,991,2.607,995,3.257,996,4.069,997,3.257,998,2.607,999,2.753,1000,2.984,1001,4.34,1002,2.607,1004,4.069,1005,0.589,1006,2.607,1008,1.63,1012,2.607,1015,4.881,1017,1.63,1022,3.257,1025,2.607,1032,3.721,1033,2.607,1034,2.607,1037,1.63,1038,1.63,1040,2.609,1124,1.63,1159,1.024,1160,2.886,1162,1.764,1163,1.764,1166,2.204,1173,2.31,1177,2.088,1202,1.445,1209,2.518,1224,2.046,1235,1.63,1244,1.024,1284,2.607,1330,1.429,1428,1.445,1448,1.195,1455,4.17,1466,2.726,1491,4.088,1494,1.786,1497,2.388,1551,1.638,1598,1.911,1640,1.911,1681,2.18,1682,1.764,1727,2.31,1752,1.638,1762,2.31,1891,1.63,1932,4.069,1933,3.257,1938,3.257,1940,2.607,1947,3.721,1955,2.607,1957,2.607,1962,4.733,1963,2.607,1964,2.31,1967,1.445,1990,1.63,2012,1.63,2017,3.257,2018,2.607,2019,1.63,2020,1.63,2021,1.63,2023,1.63,2024,1.63,2027,1.445,2030,2.607,2032,1.63,2033,1.63,2034,3.298,2035,1.63,2036,1.63,2043,3.721,2094,1.63,2133,1.63,2180,2.607,2198,2.607,2231,2.088,2269,2.607,2350,2.607,2357,3.257,2369,2.088,2370,3.721,2398,1.63,2399,3.82,2400,3.058,2401,3.82,2402,3.82,2403,4.773,2404,3.058,2405,4.365,2406,3.82,2407,4.365,2408,3.058,2409,3.058,2410,3.058,2411,3.058,2412,1.912,2413,3.058,2414,2.607,2415,1.912,2416,2.607,2417,5.344,2418,4.365,2419,2.607,2420,4.365,2421,1.912,2422,3.058,2423,3.058,2424,3.058,2425,1.912,2426,1.912,2427,1.912,2428,1.912,2429,3.82,2430,3.058,2431,1.912,2432,2.607,2433,3.058,2434,1.912,2435,5.09,2436,3.058,2437,4.773,2438,1.912,2439,3.82,2440,4.365,2441,1.912,2442,1.912,2443,2.088,2444,1.912,2445,1.912,2446,1.912,2447,1.912,2448,1.912,2449,1.912,2450,1.912,2451,1.912,2452,1.912,2453,3.058,2454,1.912,2455,1.912,2456,1.912,2457,1.912,2458,1.912,2459,1.912,2460,1.912,2461,1.912,2462,1.912,2463,1.912,2464,1.912,2465,1.912,2466,3.058,2467,1.912,2468,1.912,2469,1.912,2470,1.912,2471,1.912,2472,1.912,2473,1.912,2474,1.912,2475,1.912,2476,1.912,2477,1.912,2478,1.912,2479,3.058,2480,1.912,2481,1.912,2482,1.912,2483,1.912,2484,1.912,2485,1.912,2486,1.912,2487,1.912,2488,1.912,2489,1.912,2490,3.82,2491,1.912,2492,1.912,2493,3.058,2494,1.912,2495,1.912,2496,3.82,2497,3.82,2498,1.912,2499,4.773,2500,1.912,2501,3.058,2502,5.09,2503,1.912,2504,1.912,2505,1.912,2506,1.912,2507,1.912,2508,1.912,2509,3.82,2510,1.912,2511,1.912,2512,1.912,2513,1.912,2514,1.912,2515,1.912,2516,1.912,2517,1.912,2518,1.912,2519,1.912,2520,1.912,2521,1.912,2522,1.912,2523,1.912,2524,1.912,2525,1.912,2526,1.912,2527,1.912,2528,1.912,2529,1.912,2530,1.912,2531,1.912,2532,3.058,2533,3.058,2534,3.82,2535,3.058,2536,3.058,2537,1.912,2538,1.912,2539,1.912,2540,1.912,2541,1.912,2542,1.912,2543,3.058,2544,3.82,2545,3.058,2546,3.058,2547,3.82,2548,1.912,2549,1.912,2550,1.912,2551,3.058,2552,1.912,2553,1.912,2554,1.912,2555,1.912,2556,1.912,2557,1.912,2558,3.82,2559,1.912,2560,3.058,2561,1.912,2562,1.912,2563,1.912,2564,1.912,2565,1.912,2566,1.912,2567,1.912,2568,1.912,2569,1.912,2570,1.912,2571,1.912,2572,3.058,2573,1.912,2574,1.912,2575,1.912,2576,1.912,2577,1.912,2578,1.912,2579,1.912,2580,1.912,2581,1.912]],["title/interfaces/Subtask.html",[301,0.501,1531,1.385]],["body/interfaces/Subtask.html",[3,0.175,4,0.152,8,0.152,13,0.64,25,0.13,26,0.536,28,1.935,29,0.467,38,1.146,48,0.023,50,0.252,60,0.532,61,1.078,71,0.814,74,0.248,75,0.152,85,0.248,86,0.175,87,0.854,88,0.887,91,2.548,103,0.679,104,1.058,139,0.738,143,0.013,144,0.013,179,0.198,183,0.384,189,0.679,191,0.746,200,1.688,211,1.719,213,2.161,216,1.582,230,1.935,232,1.773,237,2.76,238,1.89,241,0.679,255,1.341,272,0.709,301,0.436,312,0.922,314,1.372,367,1.28,368,1.28,370,1.451,374,2.046,375,1.663,376,1.28,377,1.451,392,2.04,394,1.061,402,1.663,409,2.982,418,1.524,419,1.551,420,2.12,445,2.643,452,2.584,464,1.439,465,1.945,476,2.749,478,1.214,479,1.361,483,3.641,493,1.663,538,1.136,551,2.363,563,1.791,595,2.749,603,1.935,682,3.762,702,2.647,715,2.647,771,1.931,800,2.116,817,2.647,877,2.12,908,1.361,1005,1.582,1084,1.451,1183,4.191,1209,1.791,1244,1.663,1261,1.879,1269,2.994,1318,1.361,1530,3.014,1531,2.865,1535,2.345,1611,2.12,1638,2.345,1752,1.663,1774,1.94,2027,3.333,2046,1.791,2263,2.647,2367,2.647,2372,2.345,2416,4.766,2432,3.762,2582,2.647,2583,3.85,2584,3.104,2585,3.104,2586,3.104,2587,3.104,2588,3.104,2589,3.104,2590,2.647,2591,4.766,2592,3.104,2593,5.133,2594,3.104,2595,3.104,2596,6.45,2597,3.104,2598,3.104,2599,6.312,2600,3.104,2601,3.104,2602,5.905,2603,3.104,2604,6.312,2605,3.104,2606,3.104,2607,3.104,2608,5.133,2609,3.104,2610,4.766,2611,5.133,2612,4.412,2613,3.104,2614,3.104,2615,3.104,2616,2.345,2617,4.412,2618,3.104,2619,2.647,2620,3.104,2621,3.104,2622,3.104,2623,3.104,2624,5.231,2625,3.104,2626,4.412,2627,3.104,2628,4.412,2629,4.412,2630,5.133,2631,3.104,2632,3.104,2633,5.133,2634,3.104,2635,4.412,2636,3.104,2637,3.104,2638,3.104,2639,3.104,2640,3.104,2641,3.104,2642,3.104,2643,4.412,2644,3.104,2645,4.412,2646,3.104,2647,3.104,2648,3.104,2649,3.104,2650,4.412,2651,3.104,2652,3.104,2653,1.791,2654,3.104,2655,5.59,2656,4.412,2657,3.104,2658,4.412,2659,3.014,2660,3.104,2661,3.104,2662,3.104,2663,4.412,2664,3.104,2665,3.104,2666,3.104,2667,3.104,2668,3.104,2669,3.104,2670,3.104,2671,3.104,2672,5.133,2673,3.104,2674,3.104,2675,2.647,2676,3.104,2677,3.104,2678,4.412,2679,3.104,2680,2.647,2681,3.104,2682,3.104,2683,3.104]],["title/interfaces/Subtask-1.html",[301,0.419,1005,0.919,1531,1.158]],["body/interfaces/Subtask-1.html",[3,0.174,4,0.152,8,0.152,13,0.638,25,0.13,26,0.535,28,2.917,38,0.601,48,0.023,50,0.251,51,0.725,52,0.486,54,0.638,67,2.359,71,0.82,74,0.288,75,0.152,85,0.288,86,0.174,87,0.86,88,0.435,92,1.931,104,0.638,139,0.83,143,0.013,144,0.013,153,0.963,164,1.818,179,0.417,180,2.248,183,0.383,188,1.133,189,0.677,191,0.866,208,1.928,216,1.889,226,2.726,230,1.931,231,1.188,232,1.521,234,1.821,238,1.986,241,0.963,255,1.121,265,2.058,272,0.824,274,1.202,279,1.276,295,1.658,299,1.546,300,1.658,301,0.619,302,1.546,306,1.931,311,2.2,312,0.97,314,1.505,322,2.359,366,1.928,367,1.276,372,2.359,385,1.658,387,1.658,392,1.069,409,1.931,418,1.069,445,2.636,450,1.447,453,2.541,454,1.935,455,1.935,456,1.935,457,1.935,472,1.533,478,1.212,479,1.358,493,2.99,495,2.2,528,2.56,531,1.935,533,3.283,534,3.49,538,1.133,543,3.221,544,2.753,547,2.753,548,2.753,550,2.753,551,2.359,553,1.447,554,2.99,556,3.687,559,2.753,560,3.204,565,2.947,568,2.753,570,1.786,575,1.276,576,1.612,603,1.931,654,2.745,720,1.202,756,2.38,771,1.069,800,1.816,805,1.447,839,1.935,869,2.957,1261,1.133,1269,2.745,1302,3.008,1343,3.008,1400,2.359,1466,1.658,1480,1.658,1483,1.786,1485,3.453,1486,1.935,1522,1.786,1529,2.745,1531,2.813,1550,1.786,1551,1.658,1552,1.658,1553,2.753,1599,1.935,1743,3.204,1752,2.359,1774,1.935,2160,2.115,2202,2.115,2359,2.115,2371,3.008,2443,3.008,2583,3.283,2653,2.541,2659,4.187,2684,2.115,2685,3.327,2686,2.115,2687,2.339,2688,2.339,2689,2.115,2690,2.339,2691,2.339,2692,4.218,2693,2.339,2694,2.339,2695,3.327,2696,4.457,2697,2.339,2698,2.339,2699,2.339,2700,2.339,2701,3.327,2702,2.339,2703,3.327,2704,2.339,2705,3.327,2706,2.339,2707,2.339,2708,2.339,2709,2.339,2710,2.339,2711,2.339,2712,3.872,2713,2.339,2714,2.339,2715,2.339,2716,2.339,2717,2.339,2718,2.339,2719,2.339,2720,2.339,2721,2.339,2722,2.339,2723,2.339,2724,2.339,2725,4.218,2726,3.327,2727,2.339,2728,3.327,2729,3.327,2730,2.339,2731,2.339,2732,2.339,2733,2.339,2734,2.339,2735,2.115,2736,2.339,2737,2.339,2738,3.327,2739,2.339,2740,2.339,2741,2.339,2742,2.339,2743,2.339,2744,2.339,2745,2.339,2746,3.008,2747,1.935,2748,3.327,2749,2.115,2750,2.339,2751,2.339,2752,2.339,2753,2.339,2754,2.339,2755,2.339,2756,2.339,2757,2.339,2758,2.339,2759,2.339,2760,2.339,2761,2.339,2762,3.872,2763,2.339,2764,2.339,2765,2.339,2766,2.339,2767,2.339,2768,2.339,2769,2.339]],["title/components/SummaryComponent.html",[0,0.31,135,0.927]],["body/components/SummaryComponent.html",[0,0.428,1,0.656,2,0.999,3,0.134,4,0.117,5,0.734,6,0.734,7,0.734,8,0.117,10,0.734,11,1.899,12,2.009,15,1.15,16,1.057,18,0.656,19,0.656,20,1.708,21,1.057,23,1.184,25,0.1,26,0.441,29,0.546,32,2.392,33,0.99,35,1.697,38,0.854,44,0.982,47,0.9,48,0.023,49,0.703,50,0.335,51,0.673,52,0.505,60,1.104,61,1.203,67,2.635,69,0.585,71,0.773,72,1.697,74,0.314,75,0.117,77,0.619,80,0.872,85,0.134,86,0.134,87,0.745,88,1.006,92,1.045,97,0.734,98,1.119,99,1.057,100,0.734,101,1.516,102,0.734,103,0.521,104,0.491,105,1.119,106,0.734,107,0.585,108,0.734,109,0.694,110,0.854,111,0.734,112,0.656,113,0.734,114,0.656,115,0.734,116,0.656,117,0.734,118,0.656,119,0.734,120,1.119,121,0.656,122,0.734,123,0.656,124,0.694,125,0.734,126,0.656,127,0.734,128,0.656,129,0.656,130,0.694,131,0.734,132,0.734,133,0.656,134,0.734,135,1.279,136,0.734,137,0.656,138,0.656,139,0.797,140,0.585,141,0.694,142,0.734,143,0.011,144,0.011,153,0.794,155,0.546,158,2.004,161,1.592,164,1.926,168,1.945,179,0.449,190,2.095,191,0.772,200,1.353,211,1.281,226,1.41,238,2.049,241,0.962,254,1.184,267,1.114,272,0.707,273,1.435,274,1.41,301,0.335,306,2.011,312,0.744,314,0.585,392,1.829,394,0.969,452,2.691,465,1.119,472,1.742,473,2.635,476,2.356,478,1.773,538,2.412,575,1.497,580,1.945,592,1.114,599,2.27,625,2.538,642,2.056,665,1.814,756,2.798,771,1.699,800,2.028,812,2.27,816,2.743,821,4.085,854,1.276,859,2.48,877,2.48,894,1.628,916,2.743,930,2.27,950,1.19,952,1.19,1005,0.734,1159,1.945,1167,2.356,1168,1.49,1209,1.375,1216,1.375,1217,2.538,1218,1.375,1219,1.19,1220,1.375,1224,1.945,1244,1.945,1260,1.49,1261,2.042,1264,3.005,1318,1.045,1330,2.056,1332,2.356,1334,2.988,1357,4.085,1358,1.8,1359,2.032,1361,2.27,1362,3.096,1363,3.096,1364,2.032,1365,1.628,1366,1.8,1367,1.628,1368,3.717,1369,2.032,1370,2.032,1371,4.946,1372,3.751,1373,3.055,1374,3.751,1375,3.324,1376,4.515,1377,4.515,1378,5.826,1379,4.515,1380,4.515,1381,4.515,1382,4.515,1383,3.096,1384,4.194,1385,3.096,1386,3.096,1387,3.096,1388,2.032,1389,4.515,1390,3.096,1391,2.032,1392,3.751,1393,2.032,1394,4.515,1395,3.096,1396,3.096,1397,3.096,1398,3.096,1399,3.096,1400,1.945,1401,3.096,1402,3.096,1403,4.194,1404,4.515,1405,2.032,1406,1.49,1407,2.032,1408,2.032,1409,2.032,1410,2.032,1411,2.032,1412,2.032,1413,2.032,1414,2.032,1415,2.032,1416,3.096,1417,2.032,1418,2.032,1419,2.032,1420,3.751,1421,3.096,1422,3.096,1423,2.48,1424,2.743,1425,4.194,1426,3.096,1427,2.032,1428,1.8,1429,2.032,1430,3.324,1431,4.757,1432,1.814,1433,4.194,1434,1.8,1435,1.8,1436,2.032,1437,2.032,1438,3.096,1439,3.096,1440,3.096,1441,3.096,1442,4.194,1443,2.032,1444,2.032,1445,2.032,1446,2.743,1447,3.096,1448,3.738,1449,3.717,1450,3.096,1451,4.194,1452,4.757,1453,2.27,1454,5.224,1455,2.48,1456,3.096,1457,2.743,1458,3.096,1459,2.032,1460,2.032,1461,2.032,1462,3.096,1463,3.096,1464,4.194,1465,3.096,1466,1.945,1467,3.096,1468,2.032,1469,2.032,1470,2.032,1471,2.032,1472,2.032,1473,3.717,1474,3.096,1475,2.032,1476,2.032,1477,2.032,1478,2.032,1479,2.032,1480,1.945,1481,3.096,1482,3.36,1483,2.095,1484,3.096,1485,1.945,1486,2.27,1487,3.096,1488,2.032,1489,1.628,1490,1.628,1552,1.945,1625,1.49,1681,1.19,1738,1.49,1952,1.628,1968,2.032,2046,1.375,2770,3.631,2771,3.631,2772,3.631,2773,4.399,2774,3.631,2775,4.399,2776,3.631,2777,3.631,2778,3.096,2779,3.631,2780,2.383,2781,2.383,2782,2.383,2783,2.383,2784,2.383,2785,2.383,2786,2.383,2787,2.383,2788,2.383,2789,2.383,2790,2.383,2791,2.383,2792,2.383,2793,2.383,2794,2.383,2795,2.383,2796,2.383,2797,2.383,2798,2.383,2799,2.383,2800,2.383,2801,2.383,2802,2.383,2803,2.383,2804,2.383,2805,2.383,2806,2.383,2807,2.383,2808,2.383,2809,3.631,2810,3.631,2811,3.631,2812,3.631,2813,3.631,2814,3.631,2815,3.096]],["title/interfaces/Task.html",[139,0.401,301,0.501]],["body/interfaces/Task.html",[3,0.166,4,0.144,8,0.144,13,0.607,25,0.124,26,0.516,28,2.885,38,0.824,48,0.023,50,0.318,51,0.785,52,0.554,54,0.607,67,2.275,71,0.823,74,0.28,75,0.144,85,0.28,86,0.166,87,0.855,88,0.414,92,1.863,104,0.607,139,0.832,143,0.013,144,0.013,153,1.265,164,1.96,179,0.412,180,2.185,183,0.37,188,1.078,189,0.644,191,0.861,208,1.884,216,1.857,226,2.731,230,1.863,231,1.155,232,1.467,234,1.779,238,1.96,241,0.929,255,0.644,265,1.985,272,0.801,274,1.649,279,1.214,295,1.577,299,1.471,300,1.577,301,0.597,302,1.471,306,1.967,311,2.122,312,0.962,314,1.48,322,2.275,366,2.197,367,1.214,372,1.577,385,2.669,387,2.669,392,1.017,409,1.863,418,1.017,445,2.624,450,1.985,453,2.451,454,1.84,455,1.84,456,1.84,457,1.84,472,1.567,478,1.169,479,1.291,493,2.922,495,2.122,528,2.489,531,1.84,533,3.228,534,3.411,538,1.555,543,3.148,544,2.655,547,2.655,548,2.655,550,2.655,551,2.275,553,1.376,554,2.922,556,3.616,559,2.655,560,3.115,565,2.89,568,2.655,570,1.698,575,1.214,576,1.555,603,1.863,654,2.669,720,1.143,756,2.34,771,1.467,800,1.751,805,1.376,839,1.84,869,2.875,1261,1.078,1269,2.669,1302,2.901,1343,2.901,1400,2.275,1466,1.577,1480,1.577,1483,1.698,1485,3.606,1486,2.655,1522,1.698,1529,3.328,1531,2.811,1550,2.875,1551,2.669,1552,2.669,1553,3.616,1599,1.84,1743,3.115,1752,2.275,1774,1.84,2160,2.901,2202,2.011,2359,2.901,2371,2.901,2443,2.901,2583,3.328,2653,1.698,2659,3.404,2684,2.011,2685,2.224,2686,2.901,2687,3.209,2688,3.209,2689,2.901,2690,3.209,2691,3.209,2692,4.371,2693,2.224,2694,2.224,2695,3.209,2696,4.371,2697,2.224,2698,2.224,2699,2.224,2700,2.224,2701,3.209,2702,2.224,2703,3.209,2704,2.224,2705,3.209,2706,2.224,2707,2.224,2708,2.224,2709,2.224,2710,2.224,2711,2.224,2712,3.765,2713,2.224,2714,2.224,2715,2.224,2716,2.224,2717,2.224,2718,2.224,2719,2.224,2720,2.224,2721,2.224,2722,2.224,2723,2.224,2724,2.224,2725,4.122,2726,3.209,2727,2.224,2728,3.209,2729,3.209,2730,2.224,2731,2.224,2732,2.224,2733,2.224,2734,2.224,2735,2.011,2736,2.224,2737,2.224,2738,3.209,2739,2.224,2740,2.224,2741,2.224,2742,2.224,2743,2.224,2744,2.224,2745,2.224,2746,2.901,2747,1.84,2748,3.209,2749,2.011,2750,2.224,2751,2.224,2752,2.224,2753,2.224,2754,2.224,2755,2.224,2756,2.224,2757,2.224,2758,2.224,2759,2.224,2760,2.224,2761,2.224,2762,3.765,2763,2.224,2764,2.224,2765,2.224,2766,2.224,2767,2.224,2768,2.224,2769,2.224]],["title/components/TaskComponent.html",[0,0.31,137,0.981]],["body/components/TaskComponent.html",[0,0.505,1,0.656,2,1,3,0.134,4,0.117,5,0.735,6,0.735,7,0.735,8,0.117,10,0.735,11,1.899,12,2.01,16,1.058,18,0.656,19,0.656,20,1.709,21,1.058,23,1.185,25,0.185,26,0.678,29,0.546,33,0.99,38,0.705,47,0.922,48,0.023,49,0.715,50,0.337,51,0.734,52,0.533,54,1.15,59,2.096,60,0.754,61,0.803,64,1,65,2.271,66,2.271,69,0.585,71,0.715,74,0.336,75,0.178,80,0.873,85,0.134,86,0.134,87,0.772,91,2.691,97,0.735,98,1.119,99,1.058,100,0.735,101,1.516,102,0.735,103,0.521,104,0.491,105,1.119,106,0.735,107,0.585,108,0.735,109,0.694,110,1.384,111,0.735,112,0.656,113,0.735,114,0.656,115,0.735,116,0.656,117,0.735,118,0.656,119,0.735,120,1.119,121,0.656,122,0.735,123,0.656,124,0.694,125,0.735,126,0.656,127,0.735,128,0.656,129,0.656,130,0.694,131,0.735,132,0.735,133,0.656,134,0.735,135,0.62,136,0.735,137,1.354,138,0.656,139,0.829,140,1.08,141,0.694,142,0.735,143,0.011,144,0.011,153,0.794,155,0.546,164,1.888,179,0.441,191,0.727,203,2.198,213,2.043,216,1.356,231,1.293,238,1.516,241,1.269,254,1.605,255,0.521,272,0.961,273,1.185,279,2.764,312,0.744,314,0.585,376,1.498,389,2.167,394,0.9,402,1.946,405,2.837,419,1.815,445,2.189,447,2.271,450,2.3,451,3.076,452,2.427,465,1.843,472,0.944,478,1.646,484,2.62,529,2.253,533,2.357,538,0.873,565,1.815,576,1.611,609,2.029,642,2.3,646,2.482,657,4.341,663,1.629,664,3.076,674,2.482,680,2.745,716,3.812,719,1.698,771,2.347,792,2.096,793,2.096,805,2.3,821,1.629,846,2.745,884,2.751,908,1.93,931,1.802,1018,2.096,1051,4.196,1067,4.196,1068,4.196,1069,4.196,1070,4.196,1071,2.033,1088,2.033,1089,2.033,1090,2.033,1096,2.482,1115,1.802,1162,2.839,1163,2.839,1168,3.489,1169,3.812,1172,3.098,1183,3.964,1190,1.802,1202,2.745,1206,2.271,1253,3.752,1260,1.491,1261,2.288,1268,4.519,1269,1.277,1318,1.93,1330,1.698,1332,1.946,1334,1.946,1432,2.198,1453,2.271,1531,2.167,1544,2.745,1591,3.098,1594,3.098,1595,3.098,1598,2.271,1600,2.033,1601,2.033,1602,5.33,1604,3.325,1605,3.752,1606,3.325,1607,5.134,1608,4.579,1610,4.948,1611,3.006,1627,3.098,1628,2.033,1629,3.098,1635,3.718,1647,2.033,1682,2.096,1707,3.098,1763,4.384,1854,3.718,2046,2.839,2102,3.325,2131,2.745,2150,2.033,2414,4.196,2419,4.196,2583,3.53,2616,2.745,2653,2.096,2778,3.098,2815,3.098,2816,2.033,2817,3.633,2818,3.633,2819,3.752,2820,3.633,2821,4.921,2822,3.633,2823,4.921,2824,5.581,2825,3.633,2826,3.633,2827,3.633,2828,3.633,2829,4.401,2830,5.982,2831,4.401,2832,4.401,2833,4.401,2834,4.401,2835,2.385,2836,3.752,2837,2.385,2838,3.633,2839,6.704,2840,2.385,2841,2.385,2842,2.385,2843,3.633,2844,2.385,2845,2.385,2846,4.921,2847,2.385,2848,3.633,2849,2.385,2850,3.633,2851,3.633,2852,2.385,2853,4.196,2854,2.385,2855,3.633,2856,3.633,2857,4.921,2858,2.385,2859,2.385,2860,2.385,2861,3.633,2862,2.385,2863,3.633,2864,4.921,2865,2.385,2866,3.633,2867,3.633,2868,3.633,2869,2.385,2870,3.633,2871,3.633,2872,2.385,2873,3.633,2874,2.385,2875,3.633,2876,2.385,2877,3.633,2878,4.921,2879,2.385,2880,2.385,2881,2.385,2882,2.385,2883,2.385,2884,2.385,2885,2.385,2886,2.385,2887,2.385,2888,2.385,2889,3.633,2890,3.633,2891,4.401,2892,3.633,2893,2.385,2894,2.385,2895,3.752,2896,3.752,2897,2.385,2898,2.385,2899,2.385,2900,2.385,2901,4.921,2902,2.385,2903,2.385,2904,2.385,2905,2.385,2906,2.385,2907,2.033,2908,2.385,2909,2.033,2910,2.033,2911,2.385,2912,2.385,2913,2.385,2914,2.385,2915,2.385,2916,2.385,2917,2.385,2918,2.385,2919,3.098,2920,3.098,2921,3.098,2922,3.098,2923,3.633,2924,3.633]],["title/injectables/TaskDataService.html",[183,0.31,1532,2.436]],["body/injectables/TaskDataService.html",[3,0.223,4,0.195,8,0.195,13,0.818,25,0.167,28,2.289,33,0.928,38,1.013,47,0.994,48,0.023,49,0.744,50,0.324,51,0.744,52,0.454,71,0.811,74,0.379,75,0.195,85,0.294,86,0.223,88,0.995,92,1.74,110,1.327,139,0.808,143,0.016,144,0.016,153,0.867,155,0.785,164,2.036,179,0.435,183,0.454,189,0.867,191,0.782,201,1.452,216,1.797,232,1.803,241,1.141,272,0.937,301,0.557,306,1.854,312,0.87,366,1.803,368,2.778,373,2.778,385,2.125,387,2.125,394,0.994,445,2.419,464,2.021,472,1.357,478,1.092,529,2.389,562,3.263,576,1.91,672,3.943,719,1.855,884,2.48,1045,4.59,1047,2.998,1084,3.089,1122,2.998,1318,1.74,1322,3.565,1323,2.71,1489,3.565,1490,2.71,1499,3.678,1502,2.48,1526,5.09,1527,2.998,1528,4.451,1529,2.796,1530,4.602,1531,1.54,1532,3.565,1533,4.45,1534,3.943,1535,3.943,1536,4.973,1537,3.383,1538,3.383,1539,3.383,1540,3.383,1541,3.383,1542,3.943,1543,4.973,1544,3.943,1545,3.383,1546,3.383,1547,3.383,1548,3.383,1549,3.383,1550,2.289,1551,2.125,1552,2.125,1553,2.48,1554,3.383,1555,4.45,1556,3.383,1557,2.998,1558,3.383,1559,3.383,1560,4.45,1561,5.284,1562,3.383,1563,3.383,1564,4.45,1565,4.45,1566,3.383,1567,4.45,1568,3.383,1569,3.383,1570,4.45,1571,3.383,1572,3.383,1573,3.383,2925,5.22,2926,5.22,2927,5.22,2928,5.22,2929,3.968,2930,3.968,2931,3.968,2932,3.968,2933,3.968,2934,3.968,2935,3.968,2936,3.968]],["title/components/TaskDetailsComponent.html",[0,0.31,138,0.981]],["body/components/TaskDetailsComponent.html",[0,0.497,1,0.785,2,1.142,3,0.16,4,0.14,5,0.879,6,0.879,7,0.879,8,0.14,10,0.879,11,1.943,12,2.056,15,0.856,16,1.209,18,0.785,19,0.785,20,1.9,21,1.209,23,1.354,25,0.24,26,0.505,29,0.809,32,2.759,33,0.988,38,0.806,45,1.712,47,0.859,48,0.023,49,0.692,50,0.331,51,0.723,52,0.497,54,1.229,60,1.055,61,0.893,63,2.595,64,1.142,65,2.595,69,0.7,71,0.671,74,0.362,75,0.14,77,0.741,80,1.044,85,0.16,86,0.16,87,0.748,88,0.401,91,2.767,97,0.879,98,1.279,99,1.209,100,0.879,101,1.656,102,0.879,103,0.624,104,0.588,105,1.279,106,0.879,107,0.7,108,0.879,109,0.83,110,1.354,111,0.879,112,0.785,113,0.879,114,0.785,115,0.879,116,0.785,117,0.879,118,0.785,119,0.879,120,1.279,121,0.785,122,0.879,123,0.785,124,0.83,125,0.879,126,0.785,127,0.879,128,0.785,129,0.785,130,0.83,131,0.879,132,0.879,133,0.785,134,0.879,135,0.741,136,0.879,137,0.785,138,1.479,139,0.817,140,1.402,141,0.83,142,0.879,143,0.013,144,0.013,153,0.908,155,0.624,164,1.279,165,2.513,173,2.395,179,0.409,191,0.505,200,0.785,203,2.445,208,1.857,213,2.182,216,1.508,230,1.821,231,0.962,234,0.93,272,0.787,279,2.759,299,1.425,306,1.858,312,0.401,314,0.7,389,1.612,394,0.926,402,2.224,405,2.88,445,1.52,450,2.947,461,1.528,465,1.508,483,2.395,484,2.729,495,2.074,529,2.126,565,2.685,578,1.948,595,3.193,603,1.821,628,4.173,642,2.513,643,4.584,646,2.836,657,4.203,664,2.595,680,3.137,689,2.88,693,3.54,716,3.672,719,1.941,754,2.432,756,1.9,771,2.178,793,2.395,869,1.646,888,3.54,946,2.836,1018,3.102,1114,3.54,1115,2.155,1122,3.137,1162,2.395,1163,2.395,1168,3.942,1169,4.307,1191,2.595,1209,2.395,1260,1.783,1261,2.391,1305,3.54,1318,1.821,1432,2.074,1448,2.595,1480,2.224,1485,3.378,1529,2.224,1531,2.721,1598,2.595,1635,4.062,1638,3.137,1760,2.836,1854,4.062,2046,2.395,2048,3.54,2100,4.584,2165,3.54,2363,3.137,2372,3.137,2583,3.783,2591,2.432,2610,3.54,2616,3.137,2624,3.54,2653,2.395,2675,3.54,2680,3.54,2689,2.836,2735,2.836,2746,2.836,2747,2.595,2749,2.836,2819,5.247,2836,4.173,2853,4.584,2895,2.432,2896,3.54,2907,2.432,2909,2.432,2910,2.432,2919,3.54,2920,3.54,2921,3.54,2922,3.54,2937,5.294,2938,5.975,2939,2.432,2940,4.152,2941,4.152,2942,4.895,2943,3.54,2944,3.54,2945,5.376,2946,4.584,2947,4.152,2948,4.152,2949,4.895,2950,4.895,2951,4.895,2952,4.152,2953,2.853,2954,2.853,2955,2.853,2956,2.853,2957,2.853,2958,4.152,2959,2.853,2960,4.152,2961,2.853,2962,2.853,2963,3.54,2964,2.853,2965,2.853,2966,4.152,2967,2.853,2968,4.152,2969,2.853,2970,4.152,2971,4.152,2972,2.853,2973,4.152,2974,2.853,2975,2.853,2976,2.853,2977,2.853,2978,2.432,2979,2.853,2980,2.853,2981,2.853,2982,2.853,2983,2.853,2984,2.853,2985,2.853,2986,2.853,2987,2.853,2988,2.853,2989,2.853,2990,2.853,2991,4.152]],["title/injectables/TaskListManager.html",[183,0.31,2992,2.695]],["body/injectables/TaskListManager.html",[3,0.136,4,0.118,8,0.118,13,0.497,15,1.02,25,0.223,26,0.445,29,0.363,33,0.997,47,0.943,48,0.023,49,0.705,50,0.336,51,0.705,52,0.546,54,0.755,59,2.113,60,1.074,61,1.063,64,1.008,71,0.781,74,0.249,75,0.118,83,3.752,85,0.136,86,0.136,87,0.794,88,1.019,92,1.606,107,0.899,139,0.838,143,0.011,144,0.015,155,0.551,164,2.186,179,0.458,180,1.606,183,0.319,188,0.882,189,0.527,191,0.84,201,0.882,208,1.265,226,1.422,231,1.147,237,2.619,241,0.801,242,2.113,255,0.968,264,2.767,272,0.387,274,1.422,306,1.893,312,0.748,314,1.376,338,1.821,339,4.534,345,1.962,349,1.962,370,1.127,374,1.341,376,1.51,377,1.712,389,1.921,394,0.993,418,1.709,438,1.821,440,1.646,441,2.767,442,1.821,445,2.294,447,2.29,450,1.712,451,2.29,452,2.066,465,1.129,472,0.952,473,2.85,476,1.291,479,1.606,538,2.518,543,2.113,576,2.197,609,2.31,673,3.123,687,3.347,720,0.936,756,2.804,771,2.498,800,2.31,807,2.502,809,4.778,812,2.29,830,3.123,849,3.123,877,3.38,894,1.646,914,3.739,1060,1.821,1074,2.055,1083,2.055,1260,1.507,1261,2.051,1264,3.026,1269,2.85,1304,4.412,1310,3.123,1318,1.057,1322,2.502,1323,2.502,1327,2.055,1330,2.619,1332,3.002,1334,3.292,1434,1.821,1435,3.739,1446,3.739,1453,2.29,1466,2.65,1480,1.962,1483,2.113,1485,3.002,1531,2.261,1557,1.821,1702,5.117,1739,2.767,1758,3.123,1760,3.828,1876,2.502,2046,3.233,2083,3.123,2102,2.767,2144,2.055,2145,1.821,2146,2.055,2583,3.623,2747,2.29,2937,5.373,2946,4.219,2978,2.055,2992,3.739,2993,3.663,2994,4.43,2995,4.43,2996,4.43,2997,4.43,2998,4.43,2999,4.948,3000,3.663,3001,4.948,3002,3.663,3003,4.948,3004,3.663,3005,4.948,3006,3.663,3007,4.948,3008,4.948,3009,3.663,3010,3.663,3011,4.948,3012,3.663,3013,4.948,3014,4.948,3015,4.948,3016,3.663,3017,3.663,3018,4.948,3019,2.41,3020,3.663,3021,2.41,3022,4.948,3023,3.663,3024,2.41,3025,3.663,3026,3.663,3027,6.147,3028,2.41,3029,5.604,3030,4.948,3031,4.948,3032,3.663,3033,2.41,3034,3.663,3035,4.43,3036,2.41,3037,3.663,3038,2.41,3039,2.41,3040,3.663,3041,2.41,3042,3.663,3043,2.41,3044,3.663,3045,2.41,3046,3.663,3047,2.41,3048,2.41,3049,3.663,3050,3.123,3051,2.41,3052,5.604,3053,2.41,3054,3.663,3055,5.824,3056,2.41,3057,4.948,3058,3.663,3059,3.663,3060,2.41,3061,3.663,3062,3.663,3063,3.663,3064,3.663,3065,3.663,3066,2.41,3067,5.322,3068,5.322,3069,5.322,3070,5.322,3071,3.663,3072,2.41,3073,2.41,3074,2.41,3075,2.41,3076,2.41,3077,2.41,3078,2.41,3079,2.41,3080,2.41,3081,2.41,3082,3.663,3083,3.663,3084,2.41,3085,2.41,3086,2.41,3087,2.41,3088,3.663,3089,2.41,3090,2.41,3091,3.663,3092,3.663,3093,2.41,3094,4.948,3095,2.41,3096,2.41,3097,2.41,3098,2.41,3099,3.663,3100,3.663,3101,3.663,3102,3.663,3103,2.41,3104,2.41,3105,2.41,3106,2.41,3107,2.41]],["title/injectables/TaskService.html",[183,0.31,1261,1.306]],["body/injectables/TaskService.html",[3,0.138,4,0.12,8,0.12,13,0.504,25,0.103,26,0.45,28,2.568,29,0.368,33,0.969,38,0.475,47,1.005,48,0.023,49,0.752,50,0.33,51,0.776,52,0.597,54,0.764,60,0.419,61,0.447,67,2.671,71,0.83,74,0.251,75,0.12,85,0.251,86,0.138,87,0.834,88,0.628,92,1.625,104,0.764,139,0.835,143,0.011,144,0.011,153,0.978,155,0.557,164,1.651,179,0.455,180,2.35,183,0.323,188,0.896,189,0.535,191,0.842,201,0.896,208,2.083,216,2.102,226,2.752,230,2.187,231,1.306,232,1.723,234,1.627,238,2.02,241,1.09,255,0.535,265,2.331,272,0.802,274,0.95,279,1.528,295,1.311,299,1.222,300,1.311,301,0.52,302,1.851,306,1.955,311,1.851,312,0.93,314,1.384,322,1.985,366,1.851,372,1.311,385,1.985,387,1.985,392,1.28,394,0.557,409,1.961,418,1.28,445,2.627,450,1.144,453,2.58,454,1.53,455,1.53,456,1.53,457,1.53,472,1.605,478,1.019,479,1.625,493,3.23,495,2.491,528,2.816,531,1.53,533,3.472,534,3.66,538,0.896,543,2.877,544,2.316,547,2.316,548,2.316,550,2.316,551,2.671,553,1.732,554,2.671,556,3.349,559,2.316,560,2.795,565,3.012,568,2.316,570,2.138,575,1.528,576,2.063,603,2.187,654,1.985,720,0.95,756,2.397,771,0.845,800,2.056,805,1.732,839,2.316,869,2.58,1102,3.159,1106,2.087,1261,1.356,1269,3.019,1302,3.406,1343,3.406,1400,2.671,1466,1.985,1480,1.985,1483,2.138,1485,3.472,1486,1.53,1522,2.138,1529,2.671,1531,2.818,1550,2.138,1551,1.985,1552,1.985,1553,2.795,1599,2.316,1743,2.316,1752,1.985,1774,1.53,2160,1.672,2202,2.531,2359,1.672,2371,3.406,2443,3.406,2583,3.307,2590,3.159,2619,3.159,2653,1.412,2659,3.406,2684,1.672,2685,1.849,2686,1.672,2687,1.849,2688,1.849,2689,1.672,2690,1.849,2691,1.849,2692,4.424,2693,3.378,2694,3.768,2695,3.378,2696,4.755,2697,2.799,2698,1.849,2699,2.799,2700,1.849,2701,3.768,2702,3.768,2703,2.799,2704,1.849,2705,2.799,2706,1.849,2707,1.849,2708,2.799,2709,1.849,2710,1.849,2711,1.849,2712,3.768,2713,2.799,2714,1.849,2715,1.849,2716,1.849,2717,2.799,2718,2.799,2719,1.849,2720,1.849,2721,1.849,2722,2.799,2723,1.849,2724,1.849,2725,4.556,2726,3.768,2727,2.799,2728,2.799,2729,2.799,2730,1.849,2731,2.799,2732,1.849,2733,2.799,2734,1.849,2735,2.531,2736,2.799,2737,2.799,2738,2.799,2739,1.849,2740,1.849,2741,1.849,2742,1.849,2743,1.849,2744,1.849,2745,1.849,2746,3.406,2747,2.316,2748,3.768,2749,2.531,2750,1.849,2751,1.849,2752,2.799,2753,1.849,2754,1.849,2755,1.849,2756,1.849,2757,1.849,2758,1.849,2759,1.849,2760,1.849,2761,2.799,2762,3.378,2763,3.768,2764,3.768,2765,2.799,2766,3.768,2767,2.799,2768,1.849,2769,1.849,2943,3.159,2944,3.159,3108,3.705,3109,3.705,3110,3.705,3111,3.705,3112,3.705,3113,3.705,3114,3.705,3115,3.705,3116,3.705,3117,2.447,3118,2.447,3119,2.447,3120,2.447,3121,2.447,3122,2.447,3123,2.447,3124,2.447,3125,2.447,3126,2.447,3127,2.447,3128,2.447,3129,2.447,3130,2.447,3131,2.447,3132,2.447,3133,2.447,3134,2.447]],["title/interfaces/UserData.html",[301,0.501,303,2.436]],["body/interfaces/UserData.html",[3,0.188,4,0.164,8,0.164,13,0.689,15,1.328,25,0.14,26,0.565,29,0.503,32,2.503,35,1.563,38,1.121,44,1.379,45,1.379,46,2.284,48,0.023,49,0.523,50,0.283,51,0.65,52,0.291,54,0.689,59,1.929,60,0.573,64,0.92,69,1.312,71,0.798,74,0.341,75,0.164,77,0.869,85,0.261,86,0.188,87,0.811,88,0.883,143,0.014,144,0.014,150,2.284,153,1.591,154,3.502,158,1.606,161,1.467,162,3.719,163,2.322,164,1.78,165,1.563,170,2.284,171,1.791,173,3.719,174,4.489,179,0.418,180,2.662,182,1.791,183,0.405,188,1.224,189,0.731,191,0.878,199,2.284,200,1.729,202,2.527,203,1.671,204,2.091,205,2.527,206,3.502,207,2.527,208,1.155,209,3.341,210,2.527,211,1.354,212,3.964,213,1.702,214,4.038,215,2.852,216,1.936,217,2.852,218,2.527,219,2.852,221,2.284,223,2.852,224,2.852,226,2.624,228,2.49,230,1.467,231,1.339,232,2.171,233,4.772,234,2.279,235,4.173,237,1.563,238,1.936,240,2.852,241,1.327,242,3.083,243,2.852,245,2.852,246,2.852,247,2.852,248,2.852,249,2.527,250,3.964,251,2.284,252,2.527,254,1.091,255,0.731,256,3.964,257,1.379,258,2.852,259,4.772,261,4.557,262,3.11,264,2.527,265,1.563,267,1.563,268,2.852,269,5.823,271,2.852,272,0.976,273,1.516,274,1.298,275,2.863,276,2.284,278,2.852,279,1.379,280,2.284,281,2.284,282,2.852,283,2.852,285,2.852,286,2.284,288,2.852,289,2.852,290,2.852,291,2.852,292,2.852,293,2.852,294,2.852,295,1.791,296,2.852,297,2.284,298,2.852,299,1.671,300,1.791,301,0.751,302,2.322,303,4.559,304,5.358,305,5.358,306,1.67,307,2.852,308,2.852,309,2.852,310,2.852,311,3.22,312,0.959,313,3.964,314,1.677,315,3.964,316,3.964,317,3.964,318,4.925,319,3.964,320,3.964,321,3.083,322,3.252,323,4.557,324,3.964,325,3.964,326,3.513,327,3.964,328,3.964,329,2.852,330,2.852,331,2.852,332,4.925,333,2.852,334,2.852,335,2.852,336,2.852,337,2.852,338,2.527,339,4.966,340,3.964,341,2.852,342,2.852,343,2.852,344,3.176,345,2.49,346,2.852,347,2.852,348,2.852,349,1.791,350,3.513,351,2.852,352,3.964,353,2.527,354,2.527,355,2.863,356,3.964,357,2.852,358,2.852,359,2.091,360,1.929,361,2.852,362,2.527,363,2.527,364,2.284,365,2.852,367,1.379]],["title/interfaces/ValidationErrors.html",[301,0.501,460,1.667]],["body/interfaces/ValidationErrors.html",[3,0.281,4,0.245,8,0.245,13,1.029,25,0.21,26,0.733,28,2.19,48,0.023,50,0.296,52,0.435,71,0.789,74,0.339,75,0.245,85,0.365,86,0.281,88,0.911,143,0.018,144,0.018,179,0.384,183,0.525,189,1.092,191,0.852,254,1.628,255,1.583,272,0.802,301,0.848,306,1.784,312,0.946,366,1.725,367,2.058,368,2.058,373,2.89,460,3.031,464,1.968,465,1.538,471,3.239,573,2.494,697,2.88,834,4.121,1084,2.334,1499,3.239,1500,3.41,1501,3.41,1502,3.772,1503,5.211,1504,5.211,1505,3.121,1506,3.772,1507,4.559,1508,4.559,1509,3.772,1510,4.559,1511,4.9,1512,3.772,1513,4.559,1514,3.772,1515,3.772,1516,3.772,1517,3.772,1518,3.772,1519,3.772,1520,3.772,1521,3.772,1522,2.88,1523,3.772,1524,3.772,1525,3.772]],["title/coverage.html",[3135,4.144]],["body/coverage.html",[0,0.639,1,1.211,8,0.216,9,3.753,18,1.211,19,1.211,31,2.358,48,0.023,50,0.216,103,0.962,107,1.081,109,1.282,110,0.854,112,1.211,114,1.211,116,1.211,118,1.211,121,1.211,123,1.211,126,1.211,128,1.211,129,1.211,133,1.211,135,1.144,137,1.211,138,1.211,139,0.495,143,0.017,144,0.017,145,3.007,146,3.326,148,3.753,158,1.52,183,0.628,202,4.217,272,0.707,301,0.998,303,3.007,366,1.52,368,2.963,369,4.217,370,3.296,373,1.815,443,4.186,448,3.007,460,2.057,473,2.358,478,1.922,484,1.815,622,4.631,623,3.326,624,3.753,718,3.326,769,3.326,770,3.753,771,1.52,908,3.027,1000,2.752,1045,2.752,1046,3.753,1138,3.753,1213,3.753,1248,3.326,1249,3.753,1250,3.326,1261,1.611,1357,3.007,1358,4.217,1491,4.029,1492,3.753,1499,2.788,1500,4.186,1501,4.186,1505,2.752,1526,4.217,1527,4.217,1528,2.752,1530,3.007,1531,2.167,1532,3.007,1585,3.753,1673,3.753,1796,3.753,1797,3.753,1798,3.753,1929,3.753,1991,3.326,2037,3.753,2038,3.753,2058,3.753,2059,3.753,2095,3.326,2096,3.753,2152,3.753,2167,3.753,2168,3.753,2169,3.753,2393,3.753,2398,3.753,2582,4.759,2684,4.186,2816,3.753,2937,4.217,2938,3.753,2939,4.759,2992,3.326,3050,3.753,3135,3.753,3136,4.402,3137,4.402,3138,4.402,3139,4.402,3140,4.402,3141,4.402,3142,5.581,3143,5.581,3144,6.445,3145,4.402,3146,4.402,3147,4.402,3148,4.402,3149,4.402,3150,4.402,3151,4.402,3152,4.402,3153,4.402,3154,4.402,3155,3.753,3156,4.402,3157,3.753,3158,5.581,3159,4.402,3160,4.402,3161,4.402,3162,4.402,3163,4.402,3164,4.402,3165,4.402,3166,6.129,3167,4.402,3168,4.402,3169,4.402,3170,4.402,3171,4.402,3172,4.402,3173,4.402,3174,6.129,3175,5.581,3176,5.581,3177,4.402,3178,4.402,3179,4.402,3180,4.402,3181,4.402,3182,4.402,3183,4.402,3184,5.581,3185,4.402,3186,4.402,3187,4.402,3188,4.402,3189,4.402,3190,4.402,3191,4.402,3192,4.402,3193,4.402,3194,4.402,3195,4.402,3196,6.129,3197,6.129,3198,4.402,3199,4.402,3200,4.402,3201,4.402]],["title/dependencies.html",[3202,2.543,3203,3.24]],["body/dependencies.html",[48,0.022,75,0.274,77,1.453,80,2.047,143,0.019,144,0.019,188,2.047,461,2.995,1219,2.793,2231,4.407,2374,4.767,3203,4.225,3204,6.452,3205,5.592,3206,7.293,3207,5.592,3208,5.592,3209,6.452,3210,5.592,3211,5.592,3212,5.592,3213,5.592,3214,5.592]],["title/miscellaneous/functions.html",[2369,2.929,3215,2.037]],["body/miscellaneous/functions.html",[25,0.236,47,0.844,48,0.021,49,0.632,50,0.275,51,0.632,52,0.489,143,0.02,144,0.02,161,2.461,179,0.357,234,1.831,238,1.992,257,2.314,349,3.006,443,3.834,459,4.416,460,2.624,462,3.834,463,3.834,464,2.109,465,1.729,466,3.509,467,3.509,468,4.241,469,3.73,470,4.241,471,2.804,472,1.459,474,4.241,718,4.885,2369,3.834,3215,3.834,3216,5.613]],["title/index.html",[25,0.125,3217,2.543,3218,2.543]],["body/index.html",[0,0.544,2,1.265,4,0.225,38,0.892,45,1.896,48,0.022,55,3.141,60,0.983,69,1.129,72,3.149,73,3.586,104,0.948,110,0.892,124,1.339,130,1.67,139,0.704,140,1.408,141,1.339,143,0.017,144,0.017,153,1.254,163,2.866,165,3.149,166,2.365,171,3.609,173,3.31,204,2.874,206,2.653,207,3.474,209,2.874,226,2.427,241,1.254,251,3.918,265,2.149,272,0.739,280,3.141,302,2.297,306,1.265,311,2.297,314,1.129,345,3.073,377,2.149,399,2.874,446,2.874,449,2.653,466,2.874,467,2.874,528,2.297,529,1.588,532,3.474,554,2.463,575,1.896,595,2.463,609,1.896,670,2.866,756,2.542,766,3.474,771,1.588,805,2.149,859,3.141,1018,2.653,1084,2.681,1167,2.463,1203,3.474,1250,3.474,1251,3.921,1272,3.921,1304,3.141,1330,2.149,1332,2.463,1334,2.463,1361,3.586,1373,2.653,1432,2.866,1473,4.334,1608,3.141,1668,3.141,1669,4.212,1671,4.271,1672,3.586,1678,3.474,1679,3.474,1686,3.921,1689,3.918,1693,4.891,1696,3.141,1697,3.474,1717,4.891,1738,4.093,1739,3.474,1740,3.921,1741,3.921,1743,2.874,1744,3.921,1745,3.921,1750,3.921,1770,3.921,1771,3.921,1785,3.921,1786,3.921,1805,3.921,1806,3.921,1839,3.474,1841,3.921,1856,3.921,1904,3.921,1974,3.474,2173,3.921,2194,3.921,2215,3.921,2231,3.141,2243,4.334,2250,3.921,2254,3.921,2274,3.921,2363,4.724,2375,3.921,2686,3.141,2963,3.921,3203,3.474,3217,3.921,3218,3.921,3219,4.598,3220,6.547,3221,4.598,3222,5.737,3223,4.598,3224,4.598,3225,4.598,3226,4.598,3227,4.598,3228,5.737,3229,4.598,3230,5.737,3231,4.598,3232,4.598,3233,4.598,3234,4.598,3235,4.598,3236,4.598,3237,5.737,3238,6.738,3239,4.598,3240,5.737,3241,6.547,3242,4.598,3243,4.598,3244,4.598,3245,4.598,3246,4.598,3247,5.737,3248,4.598,3249,4.598,3250,6.253,3251,6.253,3252,4.598,3253,4.598,3254,4.598,3255,4.598,3256,6.253,3257,4.598,3258,4.598,3259,4.598,3260,4.598,3261,4.598,3262,4.598,3263,4.598,3264,4.598,3265,4.598,3266,5.737,3267,4.598,3268,4.598,3269,4.598,3270,4.598,3271,4.598,3272,4.598,3273,4.598]],["title/modules.html",[3274,4.144]],["body/modules.html",[48,0.02,143,0.02,144,0.02,3274,4.966]],["title/overview.html",[1689,3.32]],["body/overview.html",[2,1.59,48,0.02,143,0.02,144,0.02,145,3.947,201,2.115,367,2.382,1005,1.78,1689,3.947,2392,4.927,3275,5.779,3276,5.779]],["title/properties.html",[26,0.521,3202,2.543]],["body/properties.html",[26,0.706,48,0.021,143,0.02,144,0.02,2243,4.387,3277,5.807]],["title/miscellaneous/variables.html",[2119,3.24,3215,2.037]],["body/miscellaneous/variables.html",[15,1.126,25,0.229,48,0.023,50,0.268,60,0.936,61,0.997,72,3.148,143,0.019,144,0.019,908,2.395,1030,4.657,1352,4.657,1406,3.978,1688,4.126,2119,4.126,2213,4.657,3155,4.657,3157,5.426,3215,3.73,3278,5.462,3279,5.462,3280,5.462,3281,5.462,3282,5.462,3283,5.462,3284,5.462,3285,5.462,3286,5.462,3287,5.462,3288,5.462,3289,5.462,3290,5.462,3291,5.462,3292,5.462,3293,5.462,3294,5.462,3295,5.462,3296,5.462,3297,5.462,3298,5.462,3299,5.462,3300,5.462,3301,5.462,3302,5.462,3303,5.462,3304,5.462,3305,5.462,3306,5.462,3307,5.462,3308,5.462,3309,5.462]]],"invertedIndex":[["",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":478,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":3277,"title":{},"body":{"properties.html":{}}}],["0.05",{"_index":2510,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.15.0",{"_index":3214,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":2562,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.2s",{"_index":951,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["0.3",{"_index":1035,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.3s",{"_index":1036,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.4",{"_index":1039,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.5s",{"_index":1370,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["0.6",{"_index":2546,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.7s",{"_index":1995,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["0.8s",{"_index":2573,"title":{},"body":{"components/SignupComponent.html":{}}}],["0/1",{"_index":3158,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3200,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3147,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3144,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":974,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0038ff",{"_index":388,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["007cee",{"_index":1011,"title":{},"body":{"components/ContactListComponent.html":{}}}],["00bcd4",{"_index":509,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0118acff",{"_index":521,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0288d1",{"_index":522,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["049484ff",{"_index":524,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["084c6bff",{"_index":526,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0px",{"_index":2509,"title":{},"body":{"components/SignupComponent.html":{}}}],["1",{"_index":1005,"title":{"interfaces/FormData-1.html":{},"interfaces/Subtask-1.html":{}},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":2757,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["1.1",{"_index":2179,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.2",{"_index":2189,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.5vw",{"_index":975,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1/1",{"_index":3190,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":3187,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2392,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"overview.html":{}}}],["10/10",{"_index":3195,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":908,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":1030,"title":{},"body":{"components/ContactListComponent.html":{},"miscellaneous/variables.html":{}}}],["1000px",{"_index":1013,"title":{},"body":{"components/ContactListComponent.html":{}}}],["100dvh",{"_index":2495,"title":{},"body":{"components/SignupComponent.html":{}}}],["100px",{"_index":1024,"title":{},"body":{"components/ContactListComponent.html":{}}}],["10px",{"_index":990,"title":{},"body":{"components/ContactListComponent.html":{}}}],["12",{"_index":1407,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["12/13",{"_index":3180,"title":{},"body":{"coverage.html":{}}}],["120px",{"_index":2561,"title":{},"body":{"components/SignupComponent.html":{}}}],["12px",{"_index":1004,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["12vw",{"_index":938,"title":{},"body":{"components/ContactListComponent.html":{}}}],["13",{"_index":3276,"title":{},"body":{"overview.html":{}}}],["13/15",{"_index":3185,"title":{},"body":{"coverage.html":{}}}],["13/17",{"_index":3143,"title":{},"body":{"coverage.html":{}}}],["13/27",{"_index":3199,"title":{},"body":{"coverage.html":{}}}],["13px",{"_index":2566,"title":{},"body":{"components/SignupComponent.html":{}}}],["140px",{"_index":913,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1440px",{"_index":2494,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":2547,"title":{},"body":{"components/SignupComponent.html":{}}}],["15/22",{"_index":3165,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":984,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["16/17",{"_index":3178,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":949,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["17",{"_index":1927,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["17/18",{"_index":3183,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":976,"title":{},"body":{"components/ContactListComponent.html":{}}}],["18",{"_index":1408,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["18/19",{"_index":3167,"title":{},"body":{"coverage.html":{}}}],["18/31",{"_index":3173,"title":{},"body":{"coverage.html":{}}}],["180px",{"_index":2505,"title":{},"body":{"components/SignupComponent.html":{}}}],["18px",{"_index":2544,"title":{},"body":{"components/SignupComponent.html":{}}}],["19",{"_index":3275,"title":{},"body":{"overview.html":{}}}],["19.2",{"_index":3231,"title":{},"body":{"index.html":{}}}],["19.2.0",{"_index":3206,"title":{},"body":{"dependencies.html":{}}}],["19.2.12",{"_index":3221,"title":{},"body":{"index.html":{}}}],["19.2.14",{"_index":3204,"title":{},"body":{"dependencies.html":{}}}],["19/20",{"_index":3175,"title":{},"body":{"coverage.html":{}}}],["19/21",{"_index":3193,"title":{},"body":{"coverage.html":{}}}],["19/30",{"_index":3169,"title":{},"body":{"coverage.html":{}}}],["190px",{"_index":1014,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1976d2",{"_index":517,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["1:703986298510:web:8cb9707daf583f2153a3df",{"_index":3289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1fd7c1",{"_index":386,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["1px",{"_index":980,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["1rem",{"_index":2518,"title":{},"body":{"components/SignupComponent.html":{}}}],["1vw",{"_index":983,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2",{"_index":1661,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["2.1",{"_index":2200,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.2",{"_index":2208,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.3.0",{"_index":3212,"title":{},"body":{"dependencies.html":{}}}],["2.5vh",{"_index":2517,"title":{},"body":{"components/SignupComponent.html":{}}}],["2.5vw",{"_index":948,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2/3",{"_index":3197,"title":{},"body":{"coverage.html":{}}}],["2/7",{"_index":3152,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3186,"title":{},"body":{"coverage.html":{}}}],["20/23",{"_index":3177,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":1428,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["200ms",{"_index":1650,"title":{},"body":{"components/HeaderComponent.html":{}}}],["2025",{"_index":1928,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["20px",{"_index":973,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2196f3",{"_index":505,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["21px",{"_index":1027,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22.5px",{"_index":940,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22391",{"_index":1809,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["23/24",{"_index":3188,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":935,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["25/35",{"_index":3161,"title":{},"body":{"coverage.html":{}}}],["26/27",{"_index":3171,"title":{},"body":{"coverage.html":{}}}],["26px",{"_index":2537,"title":{},"body":{"components/SignupComponent.html":{}}}],["27/42",{"_index":3141,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":3151,"title":{},"body":{"coverage.html":{}}}],["28/36",{"_index":3150,"title":{},"body":{"coverage.html":{}}}],["28px",{"_index":2539,"title":{},"body":{"components/SignupComponent.html":{}}}],["29abe2",{"_index":1037,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2a3647",{"_index":993,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2px",{"_index":995,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2rem",{"_index":2527,"title":{},"body":{"components/SignupComponent.html":{}}}],["2vw",{"_index":964,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["3",{"_index":1197,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["3.1",{"_index":2234,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.1",{"_index":2236,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.2",{"_index":2242,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.3",{"_index":2253,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3/3",{"_index":3184,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3154,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":3148,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":3146,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1352,"title":{},"body":{"injectables/DragDropManager.html":{},"miscellaneous/variables.html":{}}}],["3000",{"_index":1241,"title":{},"body":{"components/ContactsComponent.html":{}}}],["30px",{"_index":1026,"title":{},"body":{"components/ContactListComponent.html":{}}}],["32px",{"_index":1002,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["33px",{"_index":2538,"title":{},"body":{"components/SignupComponent.html":{}}}],["352px",{"_index":936,"title":{},"body":{"components/ContactListComponent.html":{}}}],["360",{"_index":2809,"title":{},"body":{"components/SummaryComponent.html":{}}}],["36px",{"_index":977,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["388e3c",{"_index":516,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3f51b5",{"_index":513,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3px",{"_index":2533,"title":{},"body":{"components/SignupComponent.html":{}}}],["3vw",{"_index":934,"title":{},"body":{"components/ContactListComponent.html":{}}}],["4",{"_index":1763,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["4.1",{"_index":2297,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.2",{"_index":2307,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.3",{"_index":2314,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4",{"_index":2322,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.1",{"_index":2323,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.2",{"_index":2329,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4/4",{"_index":3194,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3182,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":971,"title":{},"body":{"components/ContactListComponent.html":{}}}],["400px",{"_index":2523,"title":{},"body":{"components/SignupComponent.html":{}}}],["406px",{"_index":2502,"title":{},"body":{"components/SignupComponent.html":{}}}],["40px",{"_index":2498,"title":{},"body":{"components/SignupComponent.html":{}}}],["42",{"_index":3145,"title":{},"body":{"coverage.html":{}}}],["440px",{"_index":2513,"title":{},"body":{"components/SignupComponent.html":{}}}],["44px",{"_index":2559,"title":{},"body":{"components/SignupComponent.html":{}}}],["456px",{"_index":910,"title":{},"body":{"components/ContactListComponent.html":{}}}],["45px",{"_index":1003,"title":{},"body":{"components/ContactListComponent.html":{}}}],["46px",{"_index":1031,"title":{},"body":{"components/ContactListComponent.html":{}}}],["48",{"_index":3198,"title":{},"body":{"coverage.html":{}}}],["48px",{"_index":2503,"title":{},"body":{"components/SignupComponent.html":{}}}],["4caf50",{"_index":507,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["4px",{"_index":1001,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["4vw",{"_index":954,"title":{},"body":{"components/ContactListComponent.html":{}}}],["5",{"_index":1406,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"miscellaneous/variables.html":{}}}],["5/5",{"_index":3189,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1000,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["500",{"_index":1429,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["500px",{"_index":2515,"title":{},"body":{"components/SignupComponent.html":{}}}],["5191daff",{"_index":511,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["536px",{"_index":2526,"title":{},"body":{"components/SignupComponent.html":{}}}],["560px",{"_index":2514,"title":{},"body":{"components/SignupComponent.html":{}}}],["56px",{"_index":939,"title":{},"body":{"components/ContactListComponent.html":{}}}],["58",{"_index":3172,"title":{},"body":{"coverage.html":{}}}],["5c0582ff",{"_index":518,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["5vw",{"_index":2512,"title":{},"body":{"components/SignupComponent.html":{}}}],["6",{"_index":1808,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["6/6",{"_index":3191,"title":{},"body":{"coverage.html":{}}}],["600px",{"_index":2521,"title":{},"body":{"components/SignupComponent.html":{}}}],["6125f",{"_index":3287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebaseapp.com",{"_index":3295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebasestorage.app",{"_index":3291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["63",{"_index":3168,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":3140,"title":{},"body":{"coverage.html":{}}}],["64px",{"_index":2501,"title":{},"body":{"components/SignupComponent.html":{}}}],["650px",{"_index":2520,"title":{},"body":{"components/SignupComponent.html":{}}}],["65dvh",{"_index":2519,"title":{},"body":{"components/SignupComponent.html":{}}}],["66",{"_index":3196,"title":{},"body":{"coverage.html":{}}}],["666",{"_index":2563,"title":{},"body":{"components/SignupComponent.html":{}}}],["68",{"_index":3164,"title":{},"body":{"coverage.html":{}}}],["6bb604ff",{"_index":527,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["6px",{"_index":1038,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["7",{"_index":2346,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["7.8.0",{"_index":3210,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":2536,"title":{},"body":{"components/SignupComponent.html":{}}}],["703986298510",{"_index":3297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["71",{"_index":3160,"title":{},"body":{"coverage.html":{}}}],["72px",{"_index":2500,"title":{},"body":{"components/SignupComponent.html":{}}}],["75",{"_index":3153,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":3142,"title":{},"body":{"coverage.html":{}}}],["768px",{"_index":2499,"title":{},"body":{"components/SignupComponent.html":{}}}],["77",{"_index":3149,"title":{},"body":{"coverage.html":{}}}],["780px",{"_index":1016,"title":{},"body":{"components/ContactListComponent.html":{}}}],["8",{"_index":2029,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["8/9",{"_index":3163,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3181,"title":{},"body":{"coverage.html":{}}}],["80px",{"_index":923,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["86",{"_index":3176,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":3162,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":978,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["9",{"_index":2382,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["90",{"_index":3192,"title":{},"body":{"coverage.html":{}}}],["90vw",{"_index":2522,"title":{},"body":{"components/SignupComponent.html":{}}}],["92",{"_index":3179,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":3166,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":3174,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":3170,"title":{},"body":{"coverage.html":{}}}],["96px",{"_index":2564,"title":{},"body":{"components/SignupComponent.html":{}}}],["9c27b0",{"_index":504,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["9px",{"_index":920,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.dateobj.gettime",{"_index":1470,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["a.key.localecompare(b.key",{"_index":896,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.name.localecompare(b.name",{"_index":895,"title":{},"body":{"components/ContactListComponent.html":{}}}],["absolute",{"_index":998,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["abstractcontrol",{"_index":459,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["abuses",{"_index":2391,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accent",{"_index":2534,"title":{},"body":{"components/SignupComponent.html":{}}}],["accept",{"_index":2490,"title":{},"body":{"components/SignupComponent.html":{}}}],["acceptable",{"_index":2337,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["acceptance",{"_index":1818,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["access",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["accessing",{"_index":1820,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accessors",{"_index":2778,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["accidental",{"_index":1277,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["accordance",{"_index":1860,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accordingly",{"_index":1305,"title":{},"body":{"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["account",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["accounts",{"_index":2360,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accuracy",{"_index":1733,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["acknowledge",{"_index":1822,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["acquisition",{"_index":2301,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["act",{"_index":2177,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["action",{"_index":1276,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["actions",{"_index":1300,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["activated",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{}}}],["active",{"_index":708,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["activities",{"_index":1864,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["activity",{"_index":2258,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["actual_component",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["add",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["add/edit",{"_index":2124,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["addcontact",{"_index":1101,"title":{},"body":{"injectables/ContactService.html":{}}}],["addcontact(newcontact",{"_index":555,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc",{"_index":455,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(contactsref",{"_index":557,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc(subtasksref",{"_index":2721,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(tasksref",{"_index":2716,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["added",{"_index":553,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addedcontact",{"_index":647,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["adding",{"_index":1752,"title":{},"body":{"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["additional",{"_index":1770,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["addnewcontact",{"_index":635,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["addnewcontact(contact",{"_index":668,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["address",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["addresses",{"_index":2355,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adds",{"_index":551,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addsubtask",{"_index":2619,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/TaskService.html":{}}}],["addsubtask(colid",{"_index":2718,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtask",{"_index":3108,"title":{},"body":{"injectables/TaskService.html":{}}}],["addtask(newtask",{"_index":2713,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtaskcomponent",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["adequate",{"_index":2312,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adjust",{"_index":1158,"title":{},"body":{"components/ContactsComponent.html":{}}}],["advertising",{"_index":2386,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["advised",{"_index":1901,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["affiliates",{"_index":1910,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["again",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["against",{"_index":1916,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["agents",{"_index":1914,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["agree",{"_index":1823,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["aizasyawyou260exmo3445mltsqcjzrheg6aq9a",{"_index":3293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["akademie",{"_index":1700,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["align",{"_index":942,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["all.slice(4",{"_index":2916,"title":{},"body":{"components/TaskComponent.html":{}}}],["allowed",{"_index":572,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["allows",{"_index":2065,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["along",{"_index":2843,"title":{},"body":{"components/TaskComponent.html":{}}}],["alphabetical",{"_index":851,"title":{},"body":{"components/ContactListComponent.html":{}}}],["alphabetically",{"_index":804,"title":{},"body":{"components/ContactListComponent.html":{}}}],["already",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"interfaces/UserData.html":{}}}],["amendments",{"_index":1828,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["amp",{"_index":1838,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["analysis",{"_index":2299,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["analytics",{"_index":2294,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["analyzed",{"_index":1440,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["and/or",{"_index":1924,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["angular",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["angular's",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{}}}],["angular/animations",{"_index":1219,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SummaryComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":3205,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/drag",{"_index":1317,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["angular/common",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":3207,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":3208,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/auth",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["angular/fire/firestore",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["angular/forms",{"_index":461,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":3209,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["animate",{"_index":1218,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["animate('1.1s",{"_index":2055,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["animate('1.5s",{"_index":1369,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["animate('250ms",{"_index":1225,"title":{},"body":{"components/ContactsComponent.html":{}}}],["animate('2s",{"_index":1994,"title":{},"body":{"components/LoginComponent.html":{}}}],["animated",{"_index":2789,"title":{},"body":{"components/SummaryComponent.html":{}}}],["animates",{"_index":1421,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["animation",{"_index":1159,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["animationdirection",{"_index":1141,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animationevent",{"_index":1180,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animations",{"_index":1220,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["anonymized",{"_index":2364,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["another",{"_index":1767,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["apikey",{"_index":3292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["app.component.html",{"_index":22,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":3157,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appear",{"_index":2051,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["appearance",{"_index":2551,"title":{},"body":{"components/SignupComponent.html":{}}}],["appid",{"_index":3288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applicable",{"_index":699,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["application",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"index.html":{}}}],["applicationconfig",{"_index":3279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":1758,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["arguments",{"_index":1600,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["arising",{"_index":1903,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["array",{"_index":538,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["array.isarray(subtasklist",{"_index":2898,"title":{},"body":{"components/TaskComponent.html":{}}}],["arrays",{"_index":809,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["artifacts",{"_index":3259,"title":{},"body":{"index.html":{}}}],["ascending",{"_index":3055,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["aside",{"_index":1851,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ask",{"_index":2237,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["aspect",{"_index":1840,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["aspects",{"_index":1734,"title":{},"body":{"components/HelpComponent.html":{}}}],["asset",{"_index":2326,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["assign",{"_index":1096,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["assigned",{"_index":450,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["assignedto",{"_index":1553,"title":{},"body":{"interfaces/FormData-1.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{}}}],["assignedtoids",{"_index":1565,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["assignedtoids.includes(contact.id",{"_index":1568,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["assignedtoids.length",{"_index":1566,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["assignees",{"_index":1761,"title":{},"body":{"components/HelpComponent.html":{}}}],["associated",{"_index":1854,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["assume",{"_index":2343,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["async",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/FormData-1.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["attaches",{"_index":1164,"title":{},"body":{"components/ContactsComponent.html":{}}}],["attempt",{"_index":1963,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["attempts",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["auth",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["auth.service",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["auth/email",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/invalid",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/network",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/too",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/user",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/weak",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/wrong",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["authdomain",{"_index":3294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":2271,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["authenticated",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["authentication",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["authguard",{"_index":146,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["authinitialized",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["author",{"_index":3271,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":158,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["auto",{"_index":917,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["automatic",{"_index":1290,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["automatically",{"_index":449,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["availability",{"_index":1731,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["available",{"_index":399,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"index.html":{}}}],["avatar",{"_index":499,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["avatarcolors",{"_index":503,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["avoid",{"_index":574,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["await",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["awaitfeedback",{"_index":2994,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["awaitfeedbacklist",{"_index":1331,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["awaiting",{"_index":2815,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["awaitingfeedbackcount",{"_index":1382,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b",{"_index":894,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["b.dateobj.gettime",{"_index":1471,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b3c511ff",{"_index":514,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["back",{"_index":1166,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["backend",{"_index":2372,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["background",{"_index":924,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["backgroundvisible",{"_index":1142,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["based",{"_index":609,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["beacons",{"_index":2255,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["before",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["behalf",{"_index":2227,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["behavior",{"_index":2100,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskDetailsComponent.html":{}}}],["behaviorsubject",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["behaviorsubject(false",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["behaviorsubject(null",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["behind",{"_index":1207,"title":{},"body":{"components/ContactsComponent.html":{}}}],["being",{"_index":495,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["belonging",{"_index":2685,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["benefit",{"_index":1690,"title":{},"body":{"components/HelpComponent.html":{}}}],["best",{"_index":1728,"title":{},"body":{"components/HelpComponent.html":{}}}],["better",{"_index":757,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["between",{"_index":1202,"title":{},"body":{"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["billboard",{"_index":1704,"title":{},"body":{"components/HelpComponent.html":{}}}],["block",{"_index":1022,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["board",{"_index":1738,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["board'},{'name",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["boardcomponent",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["boolean",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["bootcamp",{"_index":1698,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["border",{"_index":979,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["both",{"_index":2224,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["bottom",{"_index":922,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["bound",{"_index":2866,"title":{},"body":{"components/TaskComponent.html":{}}}],["box",{"_index":1032,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["breach",{"_index":1925,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["break",{"_index":3094,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["brightness(0",{"_index":1043,"title":{},"body":{"components/ContactListComponent.html":{}}}],["browser",{"_index":2231,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"dependencies.html":{},"index.html":{}}}],["browsing",{"_index":2218,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["btn",{"_index":931,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["build",{"_index":3256,"title":{},"body":{"index.html":{}}}],["buildcontactfromform",{"_index":636,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["builder",{"_index":653,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["building",{"_index":3255,"title":{},"body":{"index.html":{}}}],["builds",{"_index":672,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["buildtask",{"_index":1543,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["buildtask(formdata",{"_index":2929,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["buildthis",{"_index":3257,"title":{},"body":{"index.html":{}}}],["built",{"_index":1692,"title":{},"body":{"components/HelpComponent.html":{}}}],["business",{"_index":1724,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["button",{"_index":929,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["c.email",{"_index":867,"title":{},"body":{"components/ContactListComponent.html":{}}}],["c.id",{"_index":1090,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["c.id).filter(id",{"_index":1573,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["c.name).join",{"_index":2918,"title":{},"body":{"components/TaskComponent.html":{}}}],["c.value",{"_index":412,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["c2185b",{"_index":523,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c303aaff",{"_index":520,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c44314ff",{"_index":510,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c90d0dff",{"_index":519,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calc(1.8vw",{"_index":2508,"title":{},"body":{"components/SignupComponent.html":{}}}],["calc(100",{"_index":932,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calc(100dvh",{"_index":912,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calculate",{"_index":612,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calculates",{"_index":2877,"title":{},"body":{"components/TaskComponent.html":{}}}],["callback",{"_index":1271,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["called",{"_index":1172,"title":{},"body":{"components/ContactsComponent.html":{},"components/TaskComponent.html":{}}}],["calling",{"_index":1624,"title":{},"body":{"components/HeaderComponent.html":{}}}],["campaigns",{"_index":2296,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["canactivate",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cancel",{"_index":666,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["cancels",{"_index":2617,"title":{},"body":{"interfaces/Subtask.html":{}}}],["cancelsubtask",{"_index":2618,"title":{},"body":{"interfaces/Subtask.html":{}}}],["cancelsubtaskedit",{"_index":2646,"title":{},"body":{"interfaces/Subtask.html":{}}}],["capitalize",{"_index":2766,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalize(text",{"_index":2767,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalized",{"_index":2202,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalizes",{"_index":2765,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["card",{"_index":1759,"title":{},"body":{"components/HelpComponent.html":{}}}],["cards",{"_index":1753,"title":{},"body":{"components/HelpComponent.html":{}}}],["case",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["catch",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["catch(error",{"_index":2987,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["categories",{"_index":384,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category",{"_index":366,"title":{"interfaces/Category.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["category.color",{"_index":416,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.label",{"_index":413,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.value",{"_index":408,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["categoryerror",{"_index":1511,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["categorymanager",{"_index":373,"title":{"injectables/CategoryManager.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"injectables/PriorityManager.html":{},"injectables/TaskDataService.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["categorymanager.getselectedcategory",{"_index":1554,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["categorymanager.hasselectedcategory",{"_index":1518,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["categorymanager.showcategoryerror",{"_index":1514,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["caution",{"_index":1778,"title":{},"body":{"components/HelpComponent.html":{}}}],["ccc",{"_index":415,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["cdk",{"_index":1301,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdk_drag_config",{"_index":3303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cdkdragdrop",{"_index":1297,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdkdragmove",{"_index":1286,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdks",{"_index":3222,"title":{},"body":{"index.html":{}}}],["cellphone",{"_index":2220,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["center",{"_index":944,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["certain",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["change",{"_index":1268,"title":{},"body":{"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{}}}],["changed",{"_index":2419,"title":{},"body":{"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["changes",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["changes['task",{"_index":2893,"title":{},"body":{"components/TaskComponent.html":{}}}],["changes['task'].firstchange",{"_index":2894,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus",{"_index":2820,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus(status",{"_index":2851,"title":{},"body":{"components/TaskComponent.html":{}}}],["changetaskstatus",{"_index":1253,"title":{},"body":{"injectables/DragDropManager.html":{},"components/TaskComponent.html":{}}}],["changetaskstatus(taskid",{"_index":1263,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["character",{"_index":806,"title":{},"body":{"components/ContactListComponent.html":{}}}],["characters",{"_index":2030,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["check",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["checkbox",{"_index":2548,"title":{},"body":{"components/SignupComponent.html":{}}}],["checked.png",{"_index":2556,"title":{},"body":{"components/SignupComponent.html":{}}}],["checkiftouchdevice",{"_index":1939,"title":{},"body":{"components/LoginComponent.html":{}}}],["checks",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["choices",{"_index":2277,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["city",{"_index":2239,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["claim",{"_index":1917,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["clamp(12px",{"_index":933,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["clamp(14px",{"_index":972,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(20px",{"_index":953,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(24px",{"_index":2516,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(32px",{"_index":2507,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(440px",{"_index":2511,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(48px",{"_index":937,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(4px",{"_index":982,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(8px",{"_index":963,"title":{},"body":{"components/ContactListComponent.html":{}}}],["class",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["clean",{"_index":2736,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["cleans",{"_index":685,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clear",{"_index":715,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{}}}],["clearall",{"_index":420,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/Subtask.html":{}}}],["cleareditingtask",{"_index":2764,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["clearinputs",{"_index":637,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clears",{"_index":418,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["clearselection",{"_index":590,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["cli",{"_index":3220,"title":{},"body":{"index.html":{}}}],["click",{"_index":1611,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{}}}],["clicking",{"_index":1773,"title":{},"body":{"components/HelpComponent.html":{}}}],["clicks",{"_index":1605,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["clone",{"_index":3235,"title":{},"body":{"index.html":{}}}],["close",{"_index":1191,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closed",{"_index":664,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closedetailsoverlay",{"_index":2105,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedetailsoverlay(event",{"_index":2116,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedotsmenu",{"_index":2831,"title":{},"body":{"components/TaskComponent.html":{}}}],["closeoverlay",{"_index":648,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closes",{"_index":405,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closetaskdetails",{"_index":2949,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["closing",{"_index":677,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closure",{"_index":2139,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["cloud",{"_index":2368,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["code",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["codes",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["colid",{"_index":2717,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collaborate",{"_index":1745,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["collect",{"_index":2248,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collected",{"_index":2229,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collecting",{"_index":2233,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collection",{"_index":453,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.firestore",{"_index":531,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.gettasksref",{"_index":2698,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["color",{"_index":371,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["colorerror",{"_index":2565,"title":{},"body":{"components/SignupComponent.html":{}}}],["colors",{"_index":500,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["column",{"_index":2496,"title":{},"body":{"components/SignupComponent.html":{}}}],["combinelatest",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{}}}],["comes",{"_index":2252,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["comma",{"_index":1067,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["command",{"_index":3266,"title":{},"body":{"index.html":{}}}],["commercially",{"_index":2336,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["commonmodule",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["company",{"_index":2212,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["compare",{"_index":825,"title":{},"body":{"components/ContactListComponent.html":{}}}],["compile",{"_index":3258,"title":{},"body":{"index.html":{}}}],["complete",{"_index":2194,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["completed",{"_index":1183,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{}}}],["completion",{"_index":2653,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["compliance",{"_index":2283,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{},"overview.html":{}}}],["computer",{"_index":2219,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["conditions",{"_index":1825,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["confirm",{"_index":2435,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmation",{"_index":2416,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask.html":{}}}],["confirmcontrol",{"_index":2472,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmcontrol?.dirty",{"_index":2480,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmcontrol?.touched",{"_index":2477,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmpassword",{"_index":2453,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirms",{"_index":2613,"title":{},"body":{"interfaces/Subtask.html":{}}}],["confirmsubtask(event",{"_index":2615,"title":{},"body":{"interfaces/Subtask.html":{}}}],["connection",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"components/LegalNoticeComponent.html":{},"interfaces/UserData.html":{}}}],["consent",{"_index":2306,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["consequential",{"_index":1892,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["considered",{"_index":1642,"title":{},"body":{"components/HeaderComponent.html":{}}}],["consistent",{"_index":608,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["console.error('error",{"_index":869,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["console.error(err",{"_index":561,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["console.log(err",{"_index":606,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["console.warn(`unknown",{"_index":3098,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["const",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["constructor",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["constructor(auth",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["constructor(categorymanager",{"_index":2157,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["constructor(contactservice",{"_index":790,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{}}}],["constructor(fb",{"_index":1948,"title":{},"body":{"components/LoginComponent.html":{}}}],["constructor(firestore",{"_index":1106,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["constructor(form",{"_index":649,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(navigationservice",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["constructor(private",{"_index":720,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["constructor(router",{"_index":2070,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{}}}],["constructor(taskservice",{"_index":1260,"title":{},"body":{"injectables/DragDropManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["constructs",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"components/SidebarComponent.html":{}}}],["contact",{"_index":110,"title":{"interfaces/Contact.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"interfaces/FormData-1.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{},"index.html":{}}}],["contact's",{"_index":826,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["contact.email",{"_index":880,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact.id",{"_index":884,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"interfaces/FormData-1.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{}}}],["contact.name",{"_index":888,"title":{},"body":{"components/ContactListComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contact.name).join",{"_index":1100,"title":{},"body":{"injectables/ContactManager.html":{}}}],["contact.name.charat(0).touppercase",{"_index":890,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact?.email",{"_index":902,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact?.name",{"_index":900,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactdetailscomponent",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactform",{"_index":631,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactformcomponent",{"_index":112,"title":{"components/ContactFormComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactid",{"_index":1115,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacting",{"_index":2320,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["contactlist",{"_index":2819,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactlistcomponent",{"_index":114,"title":{"components/ContactListComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactmanager",{"_index":1045,"title":{"injectables/ContactManager.html":{}},"body":{"injectables/ContactManager.html":{},"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{},"coverage.html":{}}}],["contactmanager.getselectedcontacts",{"_index":1571,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["contactmanager.setselectedcontacts(selectedcontacts",{"_index":1569,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["contactname",{"_index":610,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactref",{"_index":616,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contacts",{"_index":529,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FormData-1.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["contacts'},{'name",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacts.component.html",{"_index":1139,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.component.scss",{"_index":1140,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.filter((contact",{"_index":1087,"title":{},"body":{"injectables/ContactManager.html":{}}}],["contacts.filter(contact",{"_index":887,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.find(c",{"_index":866,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.push",{"_index":546,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactscomponent",{"_index":116,"title":{"components/ContactsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactselected",{"_index":789,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice",{"_index":484,"title":{"injectables/ContactService.html":{}},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactservice.getinitials(contact.name",{"_index":2922,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactservice.getinitials(contact?.name",{"_index":899,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice.getinitials(contacttoedit.name",{"_index":759,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactsref",{"_index":541,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactssubscription",{"_index":775,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacttoedit",{"_index":632,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contact’s",{"_index":611,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contain",{"_index":959,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["container",{"_index":1021,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{}}}],["containerid",{"_index":1282,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["containers",{"_index":1311,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["containing",{"_index":580,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["contains",{"_index":466,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["content",{"_index":946,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["context",{"_index":1306,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["contextual",{"_index":2838,"title":{},"body":{"components/TaskComponent.html":{}}}],["contracts",{"_index":2281,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["contribute",{"_index":3273,"title":{},"body":{"index.html":{}}}],["control",{"_index":469,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["control.errors",{"_index":2024,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors?.['email",{"_index":2483,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors?.['minlength",{"_index":2484,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors?.['pattern",{"_index":2487,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors?.['required",{"_index":2482,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors?.['requiredtrue",{"_index":2489,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['email",{"_index":2026,"title":{},"body":{"components/LoginComponent.html":{}}}],["control.errors['minlength",{"_index":2028,"title":{},"body":{"components/LoginComponent.html":{}}}],["control.errors['minlength'].requiredlength",{"_index":2486,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['required",{"_index":2025,"title":{},"body":{"components/LoginComponent.html":{}}}],["control.touched",{"_index":2023,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.value",{"_index":475,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["controls",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["conversion",{"_index":1486,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["convert",{"_index":2747,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["convertdate",{"_index":2943,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(date",{"_index":2749,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(task.date",{"_index":2991,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["converts",{"_index":1480,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["cookie",{"_index":2273,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["cookies",{"_index":2214,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["copy",{"_index":2078,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["copyrighted",{"_index":1855,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["corresponding",{"_index":1284,"title":{},"body":{"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["corresponds",{"_index":1615,"title":{},"body":{"components/HeaderComponent.html":{}}}],["cost",{"_index":1920,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["count",{"_index":1384,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counts",{"_index":1383,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counttasksbystatus",{"_index":2770,"title":{},"body":{"components/SummaryComponent.html":{}}}],["counttasksbystatus(tasks",{"_index":1385,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["coverage",{"_index":3135,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":766,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"index.html":{}}}],["created",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["createdat",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createerror",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creates",{"_index":698,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["createuserwithemailandpassword",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createuserwithemailandpassword(this.auth",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creating",{"_index":654,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["creation",{"_index":2367,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{}}}],["credentials",{"_index":1977,"title":{},"body":{"components/LoginComponent.html":{}}}],["crud",{"_index":656,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["current",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["current.id",{"_index":2666,"title":{},"body":{"interfaces/Subtask.html":{}}}],["currently",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["currentsubtasks",{"_index":2660,"title":{},"body":{"interfaces/Subtask.html":{}}}],["currentsubtasks.some(current",{"_index":2665,"title":{},"body":{"interfaces/Subtask.html":{}}}],["currenttext",{"_index":2633,"title":{},"body":{"interfaces/Subtask.html":{}}}],["currentuser",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["currentuser.uid",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["currentuseremail",{"_index":776,"title":{},"body":{"components/ContactListComponent.html":{}}}],["currentusersubject",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["cursor",{"_index":987,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["custom",{"_index":462,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["d",{"_index":2813,"title":{},"body":{"components/SummaryComponent.html":{}}}],["damage",{"_index":1919,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["damages",{"_index":1894,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["dark",{"_index":927,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["data",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["data.service.ts",{"_index":1527,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{},"coverage.html":{}}}],["data.service.ts:25",{"_index":2933,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["data.service.ts:46",{"_index":2930,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["data.service.ts:70",{"_index":2935,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["data.service.ts:75",{"_index":2936,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["data.service.ts:88",{"_index":2934,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["data.service.ts:96",{"_index":2931,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["database",{"_index":2363,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["date",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"index.html":{}}}],["date().gethours",{"_index":1405,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date(date",{"_index":1490,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"components/SummaryComponent.html":{},"injectables/TaskDataService.html":{}}}],["date(date).gettime",{"_index":3087,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date(formdata.duedate",{"_index":1548,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["date.getfullyear",{"_index":2759,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["date.gettime",{"_index":3086,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date.todate",{"_index":1489,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"components/SummaryComponent.html":{},"injectables/TaskDataService.html":{}}}],["date.todate().gettime",{"_index":3085,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date?.todate",{"_index":3084,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["dateerror",{"_index":1513,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["dateobj",{"_index":1454,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["datevalue",{"_index":1561,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["datevalue.toisostring().split('t')[0",{"_index":1563,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["day",{"_index":2753,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["day}/${month}/${year",{"_index":2760,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["dd/mm/yyyy",{"_index":2748,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["ddg",{"_index":2178,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["deadline",{"_index":1431,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["decision",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{}}}],["decoration",{"_index":2558,"title":{},"body":{"components/SignupComponent.html":{}}}],["decorators",{"_index":1628,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["dedicated",{"_index":1693,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["default",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":1907,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["defined",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["definitions",{"_index":2199,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["delay",{"_index":1274,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["delayed",{"_index":1966,"title":{},"body":{"components/LoginComponent.html":{}}}],["delays",{"_index":1184,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{}}}],["delegates",{"_index":2422,"title":{},"body":{"components/SignupComponent.html":{}}}],["delete",{"_index":603,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deleteaccount",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deletecontact",{"_index":638,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["deletecontact(docid",{"_index":604,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deleted",{"_index":2263,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{}}}],["deletedoc",{"_index":457,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(docref).catch(err",{"_index":2732,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(this.getsinglecontactsref(docid)).catch((err",{"_index":605,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deletedoc(this.getsingletaskref(docid)).catch(console.error",{"_index":2734,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletes",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["deletesubtask",{"_index":3109,"title":{},"body":{"injectables/TaskService.html":{}}}],["deletesubtask(id",{"_index":2622,"title":{},"body":{"interfaces/Subtask.html":{}}}],["deletesubtask(taskid",{"_index":2731,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletesubtasks(taskid",{"_index":2667,"title":{},"body":{"interfaces/Subtask.html":{}}}],["deletetask",{"_index":2944,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deletetask(docid",{"_index":2733,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletetask(event",{"_index":2960,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["deleteuser",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleteuser(user",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleting",{"_index":1774,"title":{},"body":{"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletion",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["demand",{"_index":1918,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["demo",{"_index":3224,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3203,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["depending",{"_index":1399,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["describes",{"_index":2181,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["describing",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["description",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{}}}],["descriptive",{"_index":2424,"title":{},"body":{"components/SignupComponent.html":{}}}],["deselect",{"_index":1077,"title":{},"body":{"injectables/ContactManager.html":{}}}],["design",{"_index":1841,"title":{},"body":{"components/LegalNoticeComponent.html":{},"index.html":{}}}],["designed",{"_index":1691,"title":{},"body":{"components/HelpComponent.html":{}}}],["desktop",{"_index":1203,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"index.html":{}}}],["destroy",{"_index":2999,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["destroyed",{"_index":1971,"title":{},"body":{"components/LoginComponent.html":{}}}],["destruction",{"_index":688,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["detail",{"_index":1169,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["detailed",{"_index":2963,"title":{},"body":{"components/TaskDetailsComponent.html":{},"index.html":{}}}],["details",{"_index":140,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["details'},{'name",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component",{"_index":1214,"title":{},"body":{"components/ContactsComponent.html":{}}}],["details.component.html",{"_index":2940,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.scss",{"_index":2941,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts",{"_index":2939,"title":{},"body":{"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["details.component.ts:108",{"_index":2959,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:117",{"_index":2972,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:131",{"_index":2961,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:148",{"_index":2969,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:162",{"_index":2964,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:174",{"_index":2962,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:41",{"_index":2955,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:46",{"_index":2956,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:51",{"_index":2957,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:56",{"_index":2954,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:61",{"_index":2953,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:66",{"_index":2975,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:71",{"_index":2952,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:81",{"_index":2976,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:82",{"_index":2974,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:89",{"_index":2965,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:97",{"_index":2967,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details/contact",{"_index":1213,"title":{},"body":{"components/ContactsComponent.html":{},"coverage.html":{}}}],["details/task",{"_index":2938,"title":{},"body":{"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["detecting",{"_index":1646,"title":{},"body":{"components/HeaderComponent.html":{}}}],["detection",{"_index":1973,"title":{},"body":{"components/LoginComponent.html":{}}}],["detects",{"_index":1604,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/TaskComponent.html":{}}}],["determine",{"_index":37,"title":{},"body":{"components/AppComponent.html":{}}}],["determines",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["determining",{"_index":2791,"title":{},"body":{"components/SummaryComponent.html":{}}}],["developed",{"_index":1834,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["developer",{"_index":1699,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["development",{"_index":1697,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["device",{"_index":1952,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["devices",{"_index":1423,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["diagnostic",{"_index":2247,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["diagnostics",{"_index":2251,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["different",{"_index":1310,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["digital",{"_index":2176,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["direct",{"_index":1888,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["direction",{"_index":1160,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["directive",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["directives",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["directly",{"_index":796,"title":{},"body":{"components/ContactListComponent.html":{}}}],["directors",{"_index":1913,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["directory",{"_index":3261,"title":{},"body":{"index.html":{}}}],["dirty",{"_index":2479,"title":{},"body":{"components/SignupComponent.html":{}}}],["disabled",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["disclaimer",{"_index":1872,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["disclose",{"_index":2331,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["disclosure",{"_index":2183,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["display",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"interfaces/UserData.html":{}}}],["displayed",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["displayname",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["displays",{"_index":1964,"title":{},"body":{"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["disputes",{"_index":2317,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["dist",{"_index":3260,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":3023,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distributes",{"_index":3022,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distributetasksbystatus",{"_index":3000,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distributetasksbystatus(tasks",{"_index":3020,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distribution",{"_index":1846,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["doc",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["doc(collection(this.firestore",{"_index":2700,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.firestore",{"_index":2728,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.getcontactsref",{"_index":536,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["doc.data",{"_index":548,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc.id",{"_index":547,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docid",{"_index":534,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref",{"_index":556,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref.id",{"_index":559,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["document",{"_index":533,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{}}}],["document.queryselector('.subtask",{"_index":2636,"title":{},"body":{"interfaces/Subtask.html":{}}}],["document:click",{"_index":1595,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["document:click(event",{"_index":1601,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["documentation",{"_index":3136,"title":{},"body":{"coverage.html":{}}}],["documentdata",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["doe",{"_index":1619,"title":{},"body":{"components/HeaderComponent.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["domsgen",{"_index":1817,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["done",{"_index":1334,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["donecount",{"_index":1380,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["donelist",{"_index":1333,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["don´t",{"_index":764,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["dos",{"_index":3268,"title":{},"body":{"index.html":{}}}],["dots",{"_index":2839,"title":{},"body":{"components/TaskComponent.html":{}}}],["dr",{"_index":1804,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["drag",{"_index":1251,"title":{},"body":{"injectables/DragDropManager.html":{},"index.html":{}}}],["dragdropmanager",{"_index":1248,"title":{"injectables/DragDropManager.html":{}},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["dragging",{"_index":1291,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["drags",{"_index":1278,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dragstartthreshold",{"_index":3305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drop",{"_index":1250,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{},"index.html":{}}}],["dropdown",{"_index":379,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{}}}],["dropped",{"_index":1283,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dropping",{"_index":1769,"title":{},"body":{"components/HelpComponent.html":{}}}],["due",{"_index":1760,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["duedate",{"_index":1502,"title":{},"body":{"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"injectables/TaskDataService.html":{},"interfaces/ValidationErrors.html":{}}}],["duplicates",{"_index":2856,"title":{},"body":{"components/TaskComponent.html":{}}}],["duration",{"_index":2366,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["during",{"_index":2043,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["dynamic",{"_index":2374,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1157,"title":{},"body":{"components/ContactsComponent.html":{}}}],["e",{"_index":904,"title":{},"body":{"components/ContactListComponent.html":{}}}],["e.g",{"_index":665,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["e91e63",{"_index":512,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["each",{"_index":1453,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["earliest",{"_index":1464,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["ease",{"_index":952,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["easy",{"_index":3226,"title":{},"body":{"index.html":{}}}],["edge",{"_index":1293,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["edit",{"_index":595,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["editcontact",{"_index":496,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["editcontactsubject",{"_index":494,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["editcontactsubscription",{"_index":633,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["edited",{"_index":493,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["editing",{"_index":483,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["editingsubtaskid",{"_index":2585,"title":{},"body":{"interfaces/Subtask.html":{}}}],["editingsubtasktext",{"_index":2586,"title":{},"body":{"interfaces/Subtask.html":{}}}],["editingtask",{"_index":2693,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["edits",{"_index":2625,"title":{},"body":{"interfaces/Subtask.html":{}}}],["editsubtask(id",{"_index":2627,"title":{},"body":{"interfaces/Subtask.html":{}}}],["editsubtaskprompt(id",{"_index":2634,"title":{},"body":{"interfaces/Subtask.html":{}}}],["edittask",{"_index":2950,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["educational",{"_index":1720,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["effect",{"_index":2347,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["effective",{"_index":1706,"title":{},"body":{"components/HelpComponent.html":{}}}],["effectively",{"_index":1781,"title":{},"body":{"components/HelpComponent.html":{}}}],["efficiency",{"_index":1712,"title":{},"body":{"components/HelpComponent.html":{}}}],["el.iscompleted).length",{"_index":2900,"title":{},"body":{"components/TaskComponent.html":{}}}],["electronic",{"_index":2338,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["element",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["elementref",{"_index":1288,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{}}}],["ellipsis",{"_index":1010,"title":{},"body":{"components/ContactListComponent.html":{}}}],["elsewhere",{"_index":1609,"title":{},"body":{"components/HeaderComponent.html":{}}}],["email",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["email.trim",{"_index":746,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["emits",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["emitted",{"_index":1189,"title":{},"body":{"components/ContactsComponent.html":{}}}],["emitting",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["employees",{"_index":1915,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["empties",{"_index":3025,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["empty",{"_index":1466,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["emptyarrays",{"_index":3001,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["enabled",{"_index":1954,"title":{},"body":{"components/LoginComponent.html":{}}}],["encrypted",{"_index":2356,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["enforcement",{"_index":2318,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["enhancements",{"_index":2050,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["enjoy",{"_index":1790,"title":{},"body":{"components/HelpComponent.html":{}}}],["ensure",{"_index":1727,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["enter",{"_index":2027,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{}}}],["entered",{"_index":2440,"title":{},"body":{"components/SignupComponent.html":{}}}],["entity",{"_index":2232,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["entry",{"_index":694,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["err",{"_index":560,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["error",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["errorcode",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["errormessage",{"_index":1932,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["errors",{"_index":834,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["escape",{"_index":2652,"title":{},"body":{"interfaces/Subtask.html":{}}}],["essential",{"_index":2270,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["etc",{"_index":1762,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["evaluate",{"_index":2414,"title":{},"body":{"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["even",{"_index":1900,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["event",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.container",{"_index":1338,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.container.data",{"_index":1339,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.currentindex",{"_index":1341,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.item.data",{"_index":1319,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.key",{"_index":2650,"title":{},"body":{"interfaces/Subtask.html":{}}}],["event.pointerposition.y",{"_index":1347,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.preventdefault",{"_index":2610,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["event.previouscontainer",{"_index":1337,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previouscontainer.data",{"_index":1342,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previousindex",{"_index":1340,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.stoppropagation",{"_index":2616,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.target",{"_index":2887,"title":{},"body":{"components/TaskComponent.html":{}}}],["event.tostate",{"_index":1243,"title":{},"body":{"components/ContactsComponent.html":{}}}],["event.urlafterredirects",{"_index":96,"title":{},"body":{"components/AppComponent.html":{}}}],["eventcoalescing",{"_index":3281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":657,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["events",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["example",{"_index":3238,"title":{},"body":{"index.html":{}}}],["examples",{"_index":2268,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["excluding",{"_index":2867,"title":{},"body":{"components/TaskComponent.html":{}}}],["exemplary",{"_index":1893,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["exercise",{"_index":1721,"title":{},"body":{"components/HelpComponent.html":{}}}],["exist",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["existing",{"_index":562,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["expected",{"_index":2140,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["experience",{"_index":1729,"title":{},"body":{"components/HelpComponent.html":{}}}],["expiry",{"_index":2267,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["exploring",{"_index":1737,"title":{},"body":{"components/HelpComponent.html":{}}}],["export",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["express",{"_index":1879,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["extensive",{"_index":1723,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["extra",{"_index":577,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["extracts",{"_index":1121,"title":{},"body":{"injectables/ContactService.html":{}}}],["eye",{"_index":2579,"title":{},"body":{"components/SignupComponent.html":{}}}],["f44336",{"_index":508,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["f5f5f5",{"_index":992,"title":{},"body":{"components/ContactListComponent.html":{}}}],["fab",{"_index":1020,"title":{},"body":{"components/ContactListComponent.html":{}}}],["facilitate",{"_index":2228,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["fade",{"_index":2040,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["failed",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["fails",{"_index":1983,"title":{},"body":{"components/LoginComponent.html":{}}}],["failure",{"_index":2443,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["fallback",{"_index":1620,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["fallbackerror",{"_index":1960,"title":{},"body":{"components/LoginComponent.html":{}}}],["false",{"_index":200,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["family",{"_index":966,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["fb",{"_index":1950,"title":{},"body":{"components/LoginComponent.html":{}}}],["features",{"_index":2375,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["feedback",{"_index":1332,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["feel",{"_index":1785,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["fees",{"_index":1922,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fetches",{"_index":1114,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskDetailsComponent.html":{}}}],["fetching",{"_index":2836,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["ff5722",{"_index":515,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ff9800",{"_index":506,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ffa000",{"_index":525,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["fff",{"_index":2571,"title":{},"body":{"components/SignupComponent.html":{}}}],["ffffff",{"_index":994,"title":{},"body":{"components/ContactListComponent.html":{}}}],["field",{"_index":1455,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["fields",{"_index":573,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/ValidationErrors.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["files",{"_index":2215,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["fill",{"_index":1747,"title":{},"body":{"components/HelpComponent.html":{}}}],["fills",{"_index":714,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["filter",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/TaskListManager.html":{}}}],["filter(([user",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{}}}],["filter((t",{"_index":1458,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["filter(contact",{"_index":1567,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["filtered",{"_index":3031,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filtering",{"_index":2993,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filters",{"_index":1446,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["filtertasksbysearchterm",{"_index":3002,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filtertasksbysearchterm(tasks",{"_index":3026,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["finalizesubmission",{"_index":639,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["find",{"_index":1270,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["finished",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/UserData.html":{}}}],["firebase",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["firebase’s",{"_index":2381,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["firestore",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["firestoretimestamp",{"_index":1357,"title":{"interfaces/FirestoreTimestamp.html":{}},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["first",{"_index":805,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["fitness",{"_index":1883,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fixed",{"_index":1028,"title":{},"body":{"components/ContactListComponent.html":{}}}],["flag",{"_index":1614,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["flex",{"_index":941,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["flickering",{"_index":1186,"title":{},"body":{"components/ContactsComponent.html":{}}}],["flow",{"_index":1713,"title":{},"body":{"components/HelpComponent.html":{}}}],["following",{"_index":1824,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["font",{"_index":965,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["footer",{"_index":1493,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer'},{'name",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["footer.component.html",{"_index":1495,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.component.scss",{"_index":1496,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer/footer.component",{"_index":1990,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["footercomponent",{"_index":118,"title":{"components/FooterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["forget",{"_index":765,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form",{"_index":464,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/TaskDataService.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{}}}],["form'},{'name",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["form.component",{"_index":1215,"title":{},"body":{"components/ContactsComponent.html":{}}}],["form.component.html",{"_index":629,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.scss",{"_index":630,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts",{"_index":624,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{}}}],["form.component.ts:103",{"_index":695,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:114",{"_index":696,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:130",{"_index":671,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:144",{"_index":681,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:153",{"_index":701,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:164",{"_index":669,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:174",{"_index":679,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:182",{"_index":675,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:189",{"_index":678,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:33",{"_index":658,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:39",{"_index":662,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:44",{"_index":704,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:49",{"_index":707,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:54",{"_index":651,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:61",{"_index":706,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:67",{"_index":692,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:80",{"_index":711,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:94",{"_index":684,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form/contact",{"_index":623,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["format",{"_index":1522,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/ValidationErrors.html":{}}}],["formatdate",{"_index":3110,"title":{},"body":{"injectables/TaskService.html":{}}}],["formatdate(date",{"_index":2752,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["formats",{"_index":1483,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["formatted",{"_index":2746,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["formbuilder",{"_index":650,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formcontrol",{"_index":2413,"title":{},"body":{"components/SignupComponent.html":{}}}],["formdata",{"_index":1499,"title":{"interfaces/FormData.html":{},"interfaces/FormData-1.html":{}},"body":{"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"injectables/TaskDataService.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["formdata.description",{"_index":1558,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["formdata.description?.trim",{"_index":1547,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["formdata.duedate",{"_index":1562,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["formdata.title",{"_index":1556,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["formdata.title.trim",{"_index":1546,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["formgroup",{"_index":703,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formsmodule",{"_index":628,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["formvalidatorservice",{"_index":1505,"title":{"injectables/FormValidatorService.html":{}},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["found",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["four",{"_index":1744,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["frame",{"_index":2506,"title":{},"body":{"components/SignupComponent.html":{}}}],["fraud",{"_index":2272,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["free",{"_index":1786,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["friendly",{"_index":1957,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["fs12",{"_index":997,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["fs14",{"_index":2549,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs20",{"_index":2540,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs47",{"_index":2531,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":451,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["fullcontact",{"_index":558,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["function",{"_index":473,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["functionality",{"_index":2274,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["functions",{"_index":2369,"title":{"miscellaneous/functions.html":{}},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["future",{"_index":1449,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["futuretasks",{"_index":1475,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["g",{"_index":1657,"title":{},"body":{"components/HeaderComponent.html":{}}}],["gap",{"_index":947,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["general",{"_index":2180,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["generate",{"_index":3250,"title":{},"body":{"index.html":{}}}],["generated",{"_index":554,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["generates",{"_index":607,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["generator",{"_index":2188,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["german",{"_index":2175,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["getalluniquecontacts",{"_index":2821,"title":{},"body":{"components/TaskComponent.html":{}}}],["getalluniquecontacts().length",{"_index":2924,"title":{},"body":{"components/TaskComponent.html":{}}}],["getanimationdirection",{"_index":2106,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getauth",{"_index":3302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getawaitfeedbacktasks",{"_index":3003,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getbackgroundvisible",{"_index":2107,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getcategories",{"_index":400,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorycolor",{"_index":414,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorytext",{"_index":410,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcleanjson",{"_index":1102,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updated",{"_index":2737,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updatedcontact",{"_index":581,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcompletedsubtaskscount",{"_index":2822,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcompletedsubtaskscount(subtasklist",{"_index":2857,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontactbyid",{"_index":1103,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactbyid(contactid",{"_index":1112,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactcolor",{"_index":1049,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["getcontactcolor(contact",{"_index":1061,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactcolor(contactname",{"_index":615,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactinitials",{"_index":1050,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactinitials(contact",{"_index":1063,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactlist",{"_index":2823,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontacts",{"_index":539,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactsref",{"_index":530,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcurrentuser",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["getcurrentuserdata",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getcurrentuserinitials",{"_index":1590,"title":{},"body":{"components/HeaderComponent.html":{}}}],["getdatatoedit",{"_index":634,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["getdatevalue",{"_index":3004,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdatevalue(date",{"_index":3032,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdeletedsubtasks(currentsubtasks",{"_index":2661,"title":{},"body":{"interfaces/Subtask.html":{}}}],["getdoc",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["getdoc(contactref).then(snapshot",{"_index":618,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdoc(doc(this.firestore",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getdocs",{"_index":458,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdonetasks",{"_index":3005,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdragdelay",{"_index":1254,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["getdroptargetstatus",{"_index":1255,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["getdroptargetstatus(containerid",{"_index":1281,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["getearliestdate",{"_index":2771,"title":{},"body":{"components/SummaryComponent.html":{}}}],["getearliestdate(tasks",{"_index":1467,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["geteditingsubtaskid",{"_index":2601,"title":{},"body":{"interfaces/Subtask.html":{}}}],["geteditingsubtasktext",{"_index":2603,"title":{},"body":{"interfaces/Subtask.html":{}}}],["geteditingtask",{"_index":2763,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["geterrormessage",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["geterrormessage(errorcode",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getfielderrormessage",{"_index":2404,"title":{},"body":{"components/SignupComponent.html":{}}}],["getfielderrormessage(control",{"_index":2411,"title":{},"body":{"components/SignupComponent.html":{}}}],["getfilteredtasks",{"_index":3006,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfilteredtasks(status",{"_index":3037,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfirestore",{"_index":3299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfuturetaskswithdateobj",{"_index":2772,"title":{},"body":{"components/SummaryComponent.html":{}}}],["getfuturetaskswithdateobj(tasks",{"_index":1456,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["getgreeting",{"_index":1403,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["gethistory",{"_index":2067,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getinitials",{"_index":780,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinitials(name",{"_index":797,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinprogresstasks",{"_index":3007,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getisdotsmenuopen",{"_index":2883,"title":{},"body":{"components/TaskComponent.html":{}}}],["getoverlayvisible",{"_index":2108,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getpasswordmismatchmessage",{"_index":2405,"title":{},"body":{"components/SignupComponent.html":{}}}],["getpreviousurl",{"_index":2068,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getremainingcontactnames",{"_index":1051,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["getremainingcontactnames(remainingcontacts",{"_index":1065,"title":{},"body":{"injectables/ContactManager.html":{}}}],["gets",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["getselectedcategory",{"_index":390,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getselectedcontacts",{"_index":1052,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedcontactstext",{"_index":1053,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedtask",{"_index":2109,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowaddoredittask",{"_index":2110,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowcategorydropdown",{"_index":396,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getshowcontactdropdown",{"_index":1054,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getshowsubtaskconfirmation",{"_index":2598,"title":{},"body":{"interfaces/Subtask.html":{}}}],["getshowtaskdetails",{"_index":2111,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getsinglecontactsref",{"_index":1104,"title":{},"body":{"injectables/ContactService.html":{}}}],["getsinglecontactsref(docid",{"_index":535,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getsingletaskref",{"_index":3111,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskref(docid",{"_index":2699,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtaskinput",{"_index":2595,"title":{},"body":{"interfaces/Subtask.html":{}}}],["getsubtasks",{"_index":2590,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/TaskService.html":{}}}],["getsubtasks(taskid",{"_index":2708,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtasksbytaskid",{"_index":3008,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask",{"_index":3009,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask(selectedtask",{"_index":3040,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask",{"_index":3010,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask(taskid",{"_index":3042,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksref",{"_index":3112,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsubtasksref(subcolid",{"_index":2697,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasklist",{"_index":3011,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettasks",{"_index":2702,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasksbystatus",{"_index":3012,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettasksbystatus(status",{"_index":3046,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettasksref",{"_index":2694,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getting",{"_index":3217,"title":{"index.html":{}},"body":{"index.html":{}}}],["gettodaydate",{"_index":1523,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["gettodotasks",{"_index":3013,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettotaltaskcount",{"_index":2807,"title":{},"body":{"components/SummaryComponent.html":{}}}],["getuniqueassignedcontactids",{"_index":2925,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["getuniqueassignedcontactids(contactmanager",{"_index":1570,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["getuniquecontacts",{"_index":2824,"title":{},"body":{"components/TaskComponent.html":{}}}],["getvalidationmessage",{"_index":1940,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('confirmpassword",{"_index":2492,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('email",{"_index":2032,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('name",{"_index":2491,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('password",{"_index":2033,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'confirmpassword",{"_index":2581,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'email",{"_index":2035,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'name",{"_index":2580,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'password",{"_index":2036,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(field",{"_index":1955,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["give",{"_index":3272,"title":{},"body":{"index.html":{}}}],["given",{"_index":800,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["gives",{"_index":3225,"title":{},"body":{"index.html":{}}}],["glance",{"_index":2811,"title":{},"body":{"components/SummaryComponent.html":{}}}],["gmbh",{"_index":1836,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["go",{"_index":1746,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["goback",{"_index":1676,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["good",{"_index":1401,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["goodwill",{"_index":1897,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["google",{"_index":2351,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google´s",{"_index":2380,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google’s",{"_index":2376,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["gotoboard",{"_index":2773,"title":{},"body":{"components/SummaryComponent.html":{}}}],["greeting",{"_index":1378,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingshown",{"_index":1416,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingstate",{"_index":1372,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["group",{"_index":705,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["group.get('confirmpassword')?.value",{"_index":2458,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.get('password')?.value",{"_index":2457,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.key",{"_index":898,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial",{"_index":781,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial(contacts",{"_index":801,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouped",{"_index":847,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupedcontacts",{"_index":777,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouping",{"_index":818,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups",{"_index":803,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial",{"_index":891,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].push(contact",{"_index":892,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].sort((a",{"_index":893,"title":{},"body":{"components/ContactListComponent.html":{}}}],["guarantee",{"_index":1730,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["guard",{"_index":145,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guest",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["guest123",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guest@join.com",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"interfaces/UserData.html":{}}}],["guestemail",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guestpassword",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guide",{"_index":1685,"title":{},"body":{"components/HelpComponent.html":{}}}],["guidelines",{"_index":1827,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["h2",{"_index":2529,"title":{},"body":{"components/SignupComponent.html":{}}}],["h4",{"_index":962,"title":{},"body":{"components/ContactListComponent.html":{}}}],["hamburg",{"_index":1810,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["handle",{"_index":2173,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["handleauthresult",{"_index":1941,"title":{},"body":{"components/LoginComponent.html":{}}}],["handleauthresult(result",{"_index":1959,"title":{},"body":{"components/LoginComponent.html":{}}}],["handlecontactserror",{"_index":782,"title":{},"body":{"components/ContactListComponent.html":{}}}],["handlecontactserror(error",{"_index":810,"title":{},"body":{"components/ContactListComponent.html":{}}}],["handlecontactsloaded",{"_index":783,"title":{},"body":{"components/ContactListComponent.html":{}}}],["handlecontactsloaded(contacts",{"_index":814,"title":{},"body":{"components/ContactListComponent.html":{}}}],["handledragmove",{"_index":1256,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledragmove(event",{"_index":1285,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop",{"_index":1257,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop(event",{"_index":1296,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handler",{"_index":1637,"title":{},"body":{"components/HeaderComponent.html":{}}}],["handleregistrationresult",{"_index":2406,"title":{},"body":{"components/SignupComponent.html":{}}}],["handleregistrationresult(result",{"_index":2425,"title":{},"body":{"components/SignupComponent.html":{}}}],["handles",{"_index":374,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/TaskListManager.html":{}}}],["handling",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["harass",{"_index":1865,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harm",{"_index":1866,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harmless",{"_index":1909,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["hasformerrors",{"_index":1574,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["hasformerrors(formdata",{"_index":1509,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["hash",{"_index":613,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hasn't",{"_index":1968,"title":{},"body":{"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["hasn’t",{"_index":2041,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["hasselectedcategory",{"_index":417,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["header",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["header'},{'name",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["header.component",{"_index":1992,"title":{},"body":{"components/LoginComponent.html":{}}}],["header.component.html",{"_index":1586,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.scss",{"_index":1587,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.ts",{"_index":2038,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["header.component.ts:48",{"_index":2052,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:54",{"_index":2047,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:59",{"_index":2045,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:67",{"_index":2039,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header/header.component",{"_index":79,"title":{},"body":{"components/AppComponent.html":{}}}],["header/login",{"_index":1991,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["headercomponent",{"_index":19,"title":{"components/HeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["height",{"_index":911,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["help",{"_index":1671,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["help'},{'name",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["help.component.html",{"_index":1674,"title":{},"body":{"components/HelpComponent.html":{}}}],["help.component.scss",{"_index":1675,"title":{},"body":{"components/HelpComponent.html":{}}}],["helpcomponent",{"_index":121,"title":{"components/HelpComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["helper",{"_index":850,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["here",{"_index":1686,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["hexadecimal",{"_index":614,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hidden",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hideform",{"_index":600,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hides",{"_index":599,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["hiding",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/ContactsComponent.html":{}}}],["highlight",{"_index":2557,"title":{},"body":{"components/SignupComponent.html":{}}}],["highly",{"_index":1705,"title":{},"body":{"components/HelpComponent.html":{}}}],["history",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["history.service",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["history.service.ts",{"_index":2059,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["history.service.ts:17",{"_index":2071,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:43",{"_index":2077,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:52",{"_index":2080,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:64",{"_index":2081,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["hold",{"_index":1908,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["holding",{"_index":2084,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["holds",{"_index":846,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hook",{"_index":1163,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["hostlistener",{"_index":1647,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('document:click",{"_index":1629,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('window:resize",{"_index":1631,"title":{},"body":{"components/HeaderComponent.html":{}}}],["hostlisteners",{"_index":1594,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hour",{"_index":1404,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["hover",{"_index":991,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["html",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["htmlelement",{"_index":2888,"title":{},"body":{"components/TaskComponent.html":{}}}],["htmlinputelement",{"_index":2637,"title":{},"body":{"interfaces/Subtask.html":{}}}],["http://localhost:4200",{"_index":3244,"title":{},"body":{"index.html":{}}}],["human",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["icon",{"_index":2543,"title":{},"body":{"components/SignupComponent.html":{}}}],["icon.toggle",{"_index":2578,"title":{},"body":{"components/SignupComponent.html":{}}}],["id",{"_index":445,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FormData-1.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["ideas",{"_index":3269,"title":{},"body":{"index.html":{}}}],["identifiable",{"_index":2223,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identification",{"_index":502,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["identified",{"_index":2222,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifier",{"_index":448,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"coverage.html":{}}}],["identifiers",{"_index":2246,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifying",{"_index":795,"title":{},"body":{"components/ContactListComponent.html":{}}}],["ids",{"_index":2689,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["illegal",{"_index":1863,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["image",{"_index":955,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["img",{"_index":1025,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["implements",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["implied",{"_index":1880,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["important",{"_index":1023,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{}}}],["imports",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["impressum",{"_index":3228,"title":{},"body":{"index.html":{}}}],["imprint",{"_index":1803,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["improve",{"_index":2187,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["inboard",{"_index":2814,"title":{},"body":{"components/SummaryComponent.html":{}}}],["incidental",{"_index":1890,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["include",{"_index":930,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["includes",{"_index":377,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["including",{"_index":575,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["indemnify",{"_index":1906,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["indemnity",{"_index":1905,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1640,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["indicating",{"_index":1190,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["indicator",{"_index":1978,"title":{},"body":{"components/LoginComponent.html":{}}}],["indirect",{"_index":1889,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["individual",{"_index":1756,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["infinite",{"_index":2575,"title":{},"body":{"components/SignupComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["info&#64;michelle",{"_index":1787,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["info@michelle",{"_index":1794,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["information",{"_index":1432,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["infrastructure",{"_index":2377,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["infringement",{"_index":1886,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["init",{"_index":2870,"title":{},"body":{"components/TaskComponent.html":{}}}],["initial",{"_index":833,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["initialization",{"_index":2966,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["initialize",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{}}}],["initializeanimation",{"_index":1942,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["initializeapp",{"_index":3285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialized",{"_index":196,"title":{},"body":{"guards/AuthGuard.html":{}}}],["initializeform",{"_index":1943,"title":{},"body":{"components/LoginComponent.html":{}}}],["initializes",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["initializing",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["initials",{"_index":799,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{}}}],["initiates",{"_index":2632,"title":{},"body":{"interfaces/Subtask.html":{}}}],["injectable",{"_index":183,"title":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/FormValidatorService.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["injectables",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/FormValidatorService.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"overview.html":{}}}],["injecting",{"_index":652,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["injects",{"_index":1598,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["inline",{"_index":2133,"title":{},"body":{"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["inprogress",{"_index":2995,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["inprogresscount",{"_index":1381,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["inprogresslist",{"_index":1329,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["input",{"_index":465,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{}}}],["input.invalid",{"_index":2542,"title":{},"body":{"components/SignupComponent.html":{}}}],["input::placeholder",{"_index":2541,"title":{},"body":{"components/SignupComponent.html":{}}}],["input:focus",{"_index":2569,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox",{"_index":2550,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox\"]:checked",{"_index":2554,"title":{},"body":{"components/SignupComponent.html":{}}}],["inputelement",{"_index":2635,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputelement.focus",{"_index":2639,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputelement.setselectionrange(inputelement.value.length",{"_index":2640,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputelement.value",{"_index":2638,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputelement.value.length",{"_index":2641,"title":{},"body":{"interfaces/Subtask.html":{}}}],["inputs",{"_index":680,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["insensitive",{"_index":3030,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["install",{"_index":3237,"title":{},"body":{"index.html":{}}}],["instance",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["instanceof",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["intangible",{"_index":1898,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intended",{"_index":1722,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["inter",{"_index":967,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["inter400",{"_index":996,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["inter700",{"_index":2530,"title":{},"body":{"components/SignupComponent.html":{}}}],["interact",{"_index":1748,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["interaction",{"_index":486,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["interactions",{"_index":1871,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["interface",{"_index":301,"title":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["interfaces",{"_index":367,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"overview.html":{}}}],["internal",{"_index":2083,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"injectables/TaskListManager.html":{}}}],["internet",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["interpretation",{"_index":2198,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["intimidate",{"_index":1868,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intuitive",{"_index":1718,"title":{},"body":{"components/HelpComponent.html":{}}}],["invalid",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["invert(1",{"_index":1044,"title":{},"body":{"components/ContactListComponent.html":{}}}],["investigate",{"_index":2333,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["ip",{"_index":2230,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["irreversible",{"_index":1779,"title":{},"body":{"components/HelpComponent.html":{}}}],["iscompleted",{"_index":2659,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["iscontactselected",{"_index":1055,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscontactselected(contact",{"_index":1075,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscurrentuser",{"_index":784,"title":{},"body":{"components/ContactListComponent.html":{}}}],["iscurrentuser(contact",{"_index":822,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isdotsmenuopen",{"_index":2834,"title":{},"body":{"components/TaskComponent.html":{}}}],["iseditmode",{"_index":640,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["isfirestoretimestamp",{"_index":2774,"title":{},"body":{"components/SummaryComponent.html":{}}}],["isfirestoretimestamp(obj",{"_index":1390,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["isloading",{"_index":1933,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["isloggedin",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["ismobile",{"_index":1375,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["iso",{"_index":1521,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["isselected",{"_index":785,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isselected(contact",{"_index":827,"title":{},"body":{"components/ContactListComponent.html":{}}}],["issmallscreen",{"_index":2151,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["issue",{"_index":1958,"title":{},"body":{"components/LoginComponent.html":{}}}],["istouchdevice",{"_index":1934,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["item",{"_index":3065,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["items",{"_index":943,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["japanese",{"_index":1701,"title":{},"body":{"components/HelpComponent.html":{}}}],["javascript",{"_index":1484,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["jd",{"_index":1617,"title":{},"body":{"components/HeaderComponent.html":{}}}],["jenny",{"_index":1816,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["john",{"_index":1618,"title":{},"body":{"components/HeaderComponent.html":{}}}],["join",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["joins",{"_index":2861,"title":{},"body":{"components/TaskComponent.html":{}}}],["json",{"_index":571,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["july",{"_index":1926,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["jurisdiction",{"_index":2310,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["justify",{"_index":945,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["kanban",{"_index":1668,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["keep",{"_index":2060,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["keeps",{"_index":2072,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["keine",{"_index":903,"title":{},"body":{"components/ContactListComponent.html":{}}}],["key",{"_index":877,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["keyasc",{"_index":778,"title":{},"body":{"components/ContactListComponent.html":{}}}],["keyboard",{"_index":2608,"title":{},"body":{"interfaces/Subtask.html":{}}}],["keyboardevent",{"_index":2649,"title":{},"body":{"interfaces/Subtask.html":{}}}],["keyframes",{"_index":2576,"title":{},"body":{"components/SignupComponent.html":{}}}],["keys",{"_index":808,"title":{},"body":{"components/ContactListComponent.html":{}}}],["kind",{"_index":1878,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["label",{"_index":372,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["language",{"_index":2275,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["last",{"_index":2062,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["later",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["law",{"_index":2185,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["lawful",{"_index":1858,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["laws",{"_index":1861,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["leaks",{"_index":691,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["left",{"_index":2528,"title":{},"body":{"components/SignupComponent.html":{}}}],["legal",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["legally",{"_index":2321,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["legalnoticecomponent",{"_index":123,"title":{"components/LegalNoticeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["legend",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["letter",{"_index":839,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["level",{"_index":2160,"title":{},"body":{"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["leverages",{"_index":1714,"title":{},"body":{"components/HelpComponent.html":{}}}],["liability",{"_index":1875,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["liable",{"_index":1887,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["lifecycle",{"_index":1162,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["light",{"_index":925,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["limit",{"_index":1710,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["limitation",{"_index":1874,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["limited",{"_index":1881,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["linear",{"_index":2574,"title":{},"body":{"components/SignupComponent.html":{}}}],["link",{"_index":2567,"title":{},"body":{"components/SignupComponent.html":{}}}],["links",{"_index":2339,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["list",{"_index":771,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{},"index.html":{}}}],["list'},{'name",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["list.component",{"_index":1212,"title":{},"body":{"components/ContactsComponent.html":{}}}],["list.component.html",{"_index":774,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.scss",{"_index":773,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts",{"_index":770,"title":{},"body":{"components/ContactListComponent.html":{},"coverage.html":{}}}],["list.component.ts:100",{"_index":843,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:102",{"_index":842,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:103",{"_index":853,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:108",{"_index":791,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:116",{"_index":841,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:123",{"_index":829,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:133",{"_index":823,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:141",{"_index":837,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:151",{"_index":828,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:158",{"_index":835,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:167",{"_index":802,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:181",{"_index":848,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:188",{"_index":798,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:29",{"_index":832,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:38",{"_index":838,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:51",{"_index":815,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:66",{"_index":811,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:73",{"_index":794,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:85",{"_index":845,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:90",{"_index":852,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:95",{"_index":844,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list/contact",{"_index":769,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["listed",{"_index":1831,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["listen",{"_index":2076,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["listener",{"_index":1156,"title":{},"body":{"components/ContactsComponent.html":{}}}],["lists",{"_index":1304,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["literal",{"_index":807,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"injectables/TaskListManager.html":{}}}],["live",{"_index":3223,"title":{},"body":{"index.html":{}}}],["llc",{"_index":2352,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["load",{"_index":693,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["loadandprocesstasks",{"_index":1433,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["loadandsetsubtasks(taskid",{"_index":2676,"title":{},"body":{"interfaces/Subtask.html":{}}}],["loadassignedcontacts",{"_index":2945,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["loaded",{"_index":817,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/Subtask.html":{}}}],["loading",{"_index":812,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["loads",{"_index":2046,"title":{},"body":{"components/LoginHeaderComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadsubtasks",{"_index":2946,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadtasks",{"_index":3014,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["loadusergreeting",{"_index":2775,"title":{},"body":{"components/SummaryComponent.html":{}}}],["log",{"_index":1672,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"index.html":{}}}],["logged",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["login",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["login'},{'name",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["login.component.html",{"_index":1930,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":1931,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":126,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["loginform",{"_index":1935,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginheadercomponent",{"_index":128,"title":{"components/LoginHeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["logins",{"_index":2361,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["logo",{"_index":1967,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["logostate",{"_index":1936,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["logout",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"interfaces/UserData.html":{}}}],["logs",{"_index":1623,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["long",{"_index":2031,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["lookup",{"_index":3049,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["loss",{"_index":1895,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["losses",{"_index":1899,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["low",{"_index":1550,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{}}}],["mail",{"_index":905,"title":{},"body":{"components/ContactListComponent.html":{}}}],["main",{"_index":2532,"title":{},"body":{"components/SignupComponent.html":{}}}],["maintain",{"_index":2278,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["making",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/OverlayManager.html":{}}}],["manage",{"_index":1716,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["management",{"_index":380,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"injectables/PriorityManager.html":{}}}],["manager",{"_index":1084,"title":{},"body":{"injectables/ContactManager.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"injectables/TaskDataService.html":{},"interfaces/ValidationErrors.html":{},"index.html":{}}}],["manager.ts",{"_index":370,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["manager.ts:103",{"_index":1289,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:104",{"_index":1062,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:105",{"_index":433,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:108",{"_index":3056,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:112",{"_index":427,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{}}}],["manager.ts:113",{"_index":1066,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:120",{"_index":434,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{}}}],["manager.ts:122",{"_index":3033,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:125",{"_index":1266,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:129",{"_index":2141,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:13",{"_index":1262,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/PriorityManager.html":{}}}],["manager.ts:14",{"_index":1083,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:140",{"_index":3060,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:141",{"_index":2136,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:15",{"_index":1060,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:150",{"_index":3051,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:154",{"_index":2117,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:16",{"_index":2145,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:165",{"_index":3021,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:168",{"_index":2143,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:17",{"_index":2146,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:18",{"_index":442,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:182",{"_index":3053,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:19",{"_index":440,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:193",{"_index":3024,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:20",{"_index":441,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:203",{"_index":3048,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:21",{"_index":439,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:219",{"_index":3043,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:22",{"_index":1273,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:23",{"_index":2159,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["manager.ts:232",{"_index":3041,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:242",{"_index":3066,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:25",{"_index":1072,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:252",{"_index":3019,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:27",{"_index":3045,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:29",{"_index":431,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:30",{"_index":2120,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:32",{"_index":1079,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/PriorityManager.html":{}}}],["manager.ts:33",{"_index":1299,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:34",{"_index":3047,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:36",{"_index":436,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:37",{"_index":2121,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:38",{"_index":3038,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:42",{"_index":1074,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:43",{"_index":432,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:44",{"_index":2122,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:46",{"_index":3036,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:49",{"_index":1081,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:50",{"_index":437,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/DragDropManager.html":{}}}],["manager.ts:51",{"_index":2125,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:53",{"_index":3039,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:56",{"_index":1082,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:57",{"_index":428,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:58",{"_index":2123,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:64",{"_index":438,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:65",{"_index":1308,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["manager.ts:72",{"_index":435,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:75",{"_index":2144,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:78",{"_index":1076,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:81",{"_index":430,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:84",{"_index":2137,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:86",{"_index":1073,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:89",{"_index":1314,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:92",{"_index":3028,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:93",{"_index":429,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:95",{"_index":1064,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:97",{"_index":2126,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["managers",{"_index":1534,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/PriorityManager.html":{},"injectables/TaskDataService.html":{}}}],["manages",{"_index":655,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["managing",{"_index":479,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["many",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["map",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{}}}],["map(([user",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{}}}],["map((t",{"_index":1460,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["mappedsubtasks",{"_index":2678,"title":{},"body":{"interfaces/Subtask.html":{}}}],["maps",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["marco",{"_index":1812,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["margin",{"_index":918,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["marked",{"_index":1450,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["match",{"_index":2417,"title":{},"body":{"components/SignupComponent.html":{}}}],["matchedcontact",{"_index":865,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matches",{"_index":824,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matching",{"_index":144,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1856,"title":{},"body":{"components/LegalNoticeComponent.html":{},"index.html":{}}}],["math.round((completed",{"_index":2903,"title":{},"body":{"components/TaskComponent.html":{}}}],["max",{"_index":909,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["maximize",{"_index":1711,"title":{},"body":{"components/HelpComponent.html":{}}}],["maximum",{"_index":2079,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["meaning",{"_index":1703,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["meanings",{"_index":2203,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["media",{"_index":1015,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["media(max",{"_index":1012,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["media(min",{"_index":2504,"title":{},"body":{"components/SignupComponent.html":{}}}],["medium",{"_index":1551,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{}}}],["memory",{"_index":690,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["menu",{"_index":1607,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["menuopen",{"_index":1588,"title":{},"body":{"components/HeaderComponent.html":{}}}],["menuref",{"_index":1589,"title":{},"body":{"components/HeaderComponent.html":{}}}],["merchantability",{"_index":1882,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["merger",{"_index":2291,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["message",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["messages",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["messagingsenderid",{"_index":3296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["method",{"_index":1707,"title":{},"body":{"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["methods",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["metrics",{"_index":2810,"title":{},"body":{"components/SummaryComponent.html":{}}}],["michelle",{"_index":1805,"title":{},"body":{"components/LegalNoticeComponent.html":{},"index.html":{}}}],["milliseconds",{"_index":1280,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["min",{"_index":1006,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["minimum",{"_index":2485,"title":{},"body":{"components/SignupComponent.html":{}}}],["miscellaneous",{"_index":3215,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":2420,"title":{},"body":{"components/SignupComponent.html":{}}}],["missing",{"_index":762,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["mmmm",{"_index":2812,"title":{},"body":{"components/SummaryComponent.html":{}}}],["mobile",{"_index":1167,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["mode",{"_index":682,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{}}}],["modification",{"_index":1845,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["modify",{"_index":3246,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3274,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monitor",{"_index":2279,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["month",{"_index":2755,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["more",{"_index":467,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["morning",{"_index":1402,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["mouse",{"_index":1610,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mouseevent",{"_index":1602,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mousey",{"_index":1346,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["move",{"_index":1775,"title":{},"body":{"components/HelpComponent.html":{}}}],["moved",{"_index":1368,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["moveiteminarray",{"_index":1315,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["moves",{"_index":1765,"title":{},"body":{"components/HelpComponent.html":{}}}],["moving",{"_index":1764,"title":{},"body":{"components/HelpComponent.html":{}}}],["name",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["name.trim",{"_index":745,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["namefor",{"_index":3252,"title":{},"body":{"index.html":{}}}],["names",{"_index":1070,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["native",{"_index":2687,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["naumann",{"_index":1815,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["navigate",{"_index":1678,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["navigateback",{"_index":2069,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["navigates",{"_index":1681,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["navigation",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["navigationend",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["navigationhistoryservice",{"_index":31,"title":{"injectables/NavigationHistoryService.html":{}},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["navigationservice",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["navigator.maxtouchpoints",{"_index":2001,"title":{},"body":{"components/LoginComponent.html":{}}}],["near",{"_index":1292,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["necessary",{"_index":2269,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["need",{"_index":1740,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["needs",{"_index":2359,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["network",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["new",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{},"index.html":{}}}],["newcontact",{"_index":552,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["newemail",{"_index":2437,"title":{},"body":{"components/SignupComponent.html":{}}}],["newly",{"_index":659,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{}}}],["newname",{"_index":2439,"title":{},"body":{"components/SignupComponent.html":{}}}],["news",{"_index":2287,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["newstatus",{"_index":1313,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["newsubtask",{"_index":2620,"title":{},"body":{"interfaces/Subtask.html":{}}}],["newtask",{"_index":2712,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["newtext",{"_index":2626,"title":{},"body":{"interfaces/Subtask.html":{}}}],["newtext.trim",{"_index":2631,"title":{},"body":{"interfaces/Subtask.html":{}}}],["next",{"_index":859,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["nextdeadlinecount",{"_index":1377,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdeadlinedate",{"_index":1376,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextsubtaskid",{"_index":2584,"title":{},"body":{"interfaces/Subtask.html":{}}}],["ng",{"_index":3241,"title":{},"body":{"index.html":{}}}],["ngfor",{"_index":3062,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["ngonchanges",{"_index":2825,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngonchanges(changes",{"_index":2863,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngondestroy",{"_index":641,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{}}}],["ngoninit",{"_index":642,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["nice",{"_index":1412,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["non",{"_index":1885,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["none",{"_index":914,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"injectables/TaskListManager.html":{}}}],["note",{"_index":1719,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["notice",{"_index":1498,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["notice'},{'name",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["notice.component.html",{"_index":1799,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.scss",{"_index":1800,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts",{"_index":1798,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notice.component.ts:20",{"_index":1801,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts:32",{"_index":1802,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice/legal",{"_index":1797,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notifications",{"_index":2286,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notify",{"_index":2328,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notonlywhitespace",{"_index":718,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["notonlywhitespace(control",{"_index":474,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["now",{"_index":1457,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{}}}],["nowrap",{"_index":1009,"title":{},"body":{"components/ContactListComponent.html":{}}}],["npm",{"_index":3239,"title":{},"body":{"index.html":{}}}],["null",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":452,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["number.max_safe_integer",{"_index":3035,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["numbers",{"_index":2488,"title":{},"body":{"components/SignupComponent.html":{}}}],["numeric",{"_index":3034,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["obj",{"_index":1389,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["obj.todate",{"_index":1391,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["object",{"_index":472,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["objects",{"_index":821,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["obligations",{"_index":2316,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["observable",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["observable((observer",{"_index":540,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observable(observer",{"_index":2703,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.error(error",{"_index":550,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(contacts",{"_index":549,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observer.next(subtasks",{"_index":2711,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(tasks",{"_index":2707,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observes",{"_index":2701,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["occurred",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["offers",{"_index":2288,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["officers",{"_index":1912,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["oh",{"_index":763,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["oldest",{"_index":2074,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["onaddnewcontact",{"_index":786,"title":{},"body":{"components/ContactListComponent.html":{}}}],["onauthstatechanged",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onauthstatechanged(this.auth",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onbacktolist",{"_index":1146,"title":{},"body":{"components/ContactsComponent.html":{}}}],["onbacktologin",{"_index":2407,"title":{},"body":{"components/SignupComponent.html":{}}}],["oncategoryselect",{"_index":421,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["once",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["onchanges",{"_index":2885,"title":{},"body":{"components/TaskComponent.html":{}}}],["onclose",{"_index":643,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["oncontactadded",{"_index":1147,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactadded(newcontact",{"_index":1170,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactselect",{"_index":787,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselect(contact",{"_index":836,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselected",{"_index":1148,"title":{},"body":{"components/ContactsComponent.html":{}}}],["ondestroy",{"_index":626,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["ondocumentclick",{"_index":1591,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["ondocumentclick(event",{"_index":1627,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["one",{"_index":683,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["onguestlogin",{"_index":1944,"title":{},"body":{"components/LoginComponent.html":{}}}],["oninit",{"_index":625,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["onlogin",{"_index":1945,"title":{},"body":{"components/LoginComponent.html":{}}}],["onnocontactvisible",{"_index":1149,"title":{},"body":{"components/ContactsComponent.html":{}}}],["onoverlayanimationdone",{"_index":1150,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onoverlayanimationdone(event",{"_index":1179,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onresize",{"_index":1592,"title":{},"body":{"components/HeaderComponent.html":{}}}],["onresize(event",{"_index":1630,"title":{},"body":{"components/HeaderComponent.html":{}}}],["onsnapshot",{"_index":454,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.getsubtasksref(taskid",{"_index":2709,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.gettasksref",{"_index":2704,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsubmit",{"_index":644,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["onsubtaskeditkeydown(event",{"_index":2648,"title":{},"body":{"interfaces/Subtask.html":{}}}],["onsubtaskenter(event",{"_index":2609,"title":{},"body":{"interfaces/Subtask.html":{}}}],["onsubtaskinputclick",{"_index":2606,"title":{},"body":{"interfaces/Subtask.html":{}}}],["onsubtasktoggle",{"_index":2947,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["onsubtasktoggle(subtask",{"_index":2968,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["ontouchstart",{"_index":2000,"title":{},"body":{"components/LoginComponent.html":{}}}],["oops",{"_index":760,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["opacity",{"_index":1224,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["open",{"_index":1608,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"index.html":{}}}],["openaddoreditoverlay",{"_index":2112,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["openaddoreditoverlay(event",{"_index":2130,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opendotsmenu",{"_index":2832,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler",{"_index":2826,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler(event",{"_index":2871,"title":{},"body":{"components/TaskComponent.html":{}}}],["opened",{"_index":2848,"title":{},"body":{"components/TaskComponent.html":{}}}],["openedittask",{"_index":2948,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedittask(event",{"_index":2971,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedmenutaskid",{"_index":2829,"title":{},"body":{"components/TaskComponent.html":{}}}],["opening/closing",{"_index":2097,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opens",{"_index":2131,"title":{},"body":{"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["opentaskdetail",{"_index":2113,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetail(selectedtask",{"_index":2135,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetails",{"_index":2827,"title":{},"body":{"components/TaskComponent.html":{}}}],["opentaskdetails(task",{"_index":2873,"title":{},"body":{"components/TaskComponent.html":{}}}],["operational",{"_index":2378,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["operations",{"_index":376,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["operator",{"_index":2388,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["optimize",{"_index":3063,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["optimizes",{"_index":3263,"title":{},"body":{"index.html":{}}}],["option",{"_index":1771,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["optional",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":1739,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["orders",{"_index":2282,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["organize",{"_index":3219,"title":{},"body":{"index.html":{}}}],["original",{"_index":1535,"title":{},"body":{"interfaces/FormData-1.html":{},"interfaces/Subtask.html":{},"injectables/TaskDataService.html":{}}}],["original.id",{"_index":2663,"title":{},"body":{"interfaces/Subtask.html":{}}}],["original.id.length",{"_index":2664,"title":{},"body":{"interfaces/Subtask.html":{}}}],["originalsubtasks",{"_index":2589,"title":{},"body":{"interfaces/Subtask.html":{}}}],["os",{"_index":2249,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["otherwise",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["output",{"_index":716,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outputs",{"_index":646,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outside",{"_index":1606,"title":{},"body":{"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["over",{"_index":2191,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["overflow",{"_index":915,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["overlay",{"_index":663,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["overlaymanager",{"_index":2095,"title":{"injectables/OverlayManager.html":{}},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["overlays",{"_index":2098,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overlayvisible",{"_index":2101,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overview",{"_index":1689,"title":{"overview.html":{}},"body":{"components/HelpComponent.html":{},"index.html":{},"overview.html":{}}}],["owned",{"_index":1842,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ownership",{"_index":1833,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["package",{"_index":3202,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":921,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["page",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["pageloaded",{"_index":1937,"title":{},"body":{"components/LoginComponent.html":{}}}],["pages",{"_index":2244,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["palummieri",{"_index":1813,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["param",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":2696,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["parsedate",{"_index":1452,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["parsedate(date",{"_index":1487,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["parses",{"_index":1451,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["part",{"_index":1695,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["partial",{"_index":582,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["particular",{"_index":1884,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["partners",{"_index":1911,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["parts",{"_index":1658,"title":{},"body":{"components/HeaderComponent.html":{}}}],["parts.length",{"_index":1660,"title":{},"body":{"components/HeaderComponent.html":{}}}],["parts[0][0",{"_index":1662,"title":{},"body":{"components/HeaderComponent.html":{}}}],["parts[0][0].touppercase",{"_index":1664,"title":{},"body":{"components/HeaderComponent.html":{}}}],["parts[1][0]).touppercase",{"_index":1663,"title":{},"body":{"components/HeaderComponent.html":{}}}],["party",{"_index":2197,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["password",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["passwordcontrol",{"_index":2474,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordcontrol?.dirty",{"_index":2481,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordcontrol?.touched",{"_index":2478,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwords",{"_index":2357,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["passwordsdontmatch",{"_index":2459,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator",{"_index":2408,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator(group",{"_index":2433,"title":{},"body":{"components/SignupComponent.html":{}}}],["path",{"_index":2082,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["percentage",{"_index":2878,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted",{"_index":2828,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted(subtasklist",{"_index":2875,"title":{},"body":{"components/TaskComponent.html":{}}}],["perform",{"_index":2280,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["performance",{"_index":1904,"title":{},"body":{"components/LegalNoticeComponent.html":{},"index.html":{}}}],["performs",{"_index":1980,"title":{},"body":{"components/LoginComponent.html":{}}}],["periodically",{"_index":2349,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["permanently",{"_index":1776,"title":{},"body":{"components/HelpComponent.html":{}}}],["permitted",{"_index":2387,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persistent",{"_index":2264,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persists",{"_index":1267,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["person",{"_index":1869,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["person.svg",{"_index":957,"title":{},"body":{"components/ContactListComponent.html":{}}}],["personal",{"_index":1749,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["personalized",{"_index":2788,"title":{},"body":{"components/SummaryComponent.html":{}}}],["personally",{"_index":2238,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["phone",{"_index":446,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["phone.trim",{"_index":747,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["pipe",{"_index":194,"title":{},"body":{"guards/AuthGuard.html":{}}}],["pipe(filter((event",{"_index":90,"title":{},"body":{"components/AppComponent.html":{}}}],["pipe(filter(event",{"_index":2085,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["pipes",{"_index":3254,"title":{},"body":{"index.html":{}}}],["pixel",{"_index":2261,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["place",{"_index":2313,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["placed",{"_index":2216,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["plain",{"_index":570,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["played",{"_index":2042,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["please",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["plural",{"_index":2207,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["pointer",{"_index":988,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["pointerdirectionchangethreshold",{"_index":3306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["policies",{"_index":1826,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["policy",{"_index":1497,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["policy'},{'name",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["policy.component.html",{"_index":2170,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.scss",{"_index":2171,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts",{"_index":2169,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["policy.component.ts:20",{"_index":2172,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts:32",{"_index":2174,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy/privacy",{"_index":2168,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["popularity",{"_index":2262,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["populatefromtask",{"_index":1536,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["populatefromtask(task",{"_index":2932,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["populates",{"_index":1533,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["position",{"_index":961,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["possibility",{"_index":1902,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["possible",{"_index":1482,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["posted",{"_index":2348,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["powerful",{"_index":3248,"title":{},"body":{"index.html":{}}}],["pre",{"_index":713,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["preferences",{"_index":2276,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["prefill",{"_index":2134,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["prefilled",{"_index":596,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["prepares",{"_index":2973,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["present",{"_index":820,"title":{},"body":{"components/ContactListComponent.html":{}}}],["presented",{"_index":1830,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["preset",{"_index":498,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["press",{"_index":2607,"title":{},"body":{"interfaces/Subtask.html":{}}}],["prevent",{"_index":689,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["prevents",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/DragDropManager.html":{}}}],["preview",{"_index":3230,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1682,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["previousurl",{"_index":2091,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["primary",{"_index":2535,"title":{},"body":{"components/SignupComponent.html":{}}}],["principles",{"_index":1715,"title":{},"body":{"components/HelpComponent.html":{}}}],["priority",{"_index":1529,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["prioritymanager",{"_index":1528,"title":{"injectables/PriorityManager.html":{}},"body":{"interfaces/FormData-1.html":{},"injectables/PriorityManager.html":{},"injectables/TaskDataService.html":{},"coverage.html":{}}}],["prioritymanager.selectedpriority",{"_index":1549,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["prioritymanager.setpriorityandcategory(task",{"_index":1539,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["privacy",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["privacypolicy",{"_index":2454,"title":{},"body":{"components/SignupComponent.html":{}}}],["privacypolicycomponent",{"_index":129,"title":{"components/PrivacyPolicyComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["private",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["procedures",{"_index":2182,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["process",{"_index":2370,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["processed",{"_index":2309,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["processes",{"_index":816,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["processing",{"_index":2226,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["product",{"_index":1821,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["production",{"_index":3262,"title":{},"body":{"index.html":{}}}],["products",{"_index":2302,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["profile",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["profits",{"_index":1896,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["program",{"_index":2211,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["progress",{"_index":1330,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["prohibited",{"_index":1849,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["prohibition",{"_index":2383,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["project",{"_index":1669,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["projectid",{"_index":3286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects",{"_index":1717,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["promise",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/FormData-1.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["promotions",{"_index":2303,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["propagation",{"_index":1635,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["properties",{"_index":26,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"properties.html":{}}}],["property",{"_index":1465,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["proprietary",{"_index":1850,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["protect",{"_index":2332,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protection",{"_index":2195,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protects",{"_index":2186,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["provide",{"_index":1688,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":3300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":3301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":1876,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{}}}],["providedin",{"_index":189,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["providefirebaseapp",{"_index":3284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":3298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":2225,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["providerouter(routes",{"_index":3282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":2213,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":480,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["providezonechangedetection",{"_index":3280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/NavigationHistoryService.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["publicly",{"_index":2305,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["purpose",{"_index":1837,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["purposes",{"_index":1859,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["puschkarow",{"_index":1806,"title":{},"body":{"components/LegalNoticeComponent.html":{},"index.html":{}}}],["puschkarow.de",{"_index":1788,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["push",{"_index":2285,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["quality",{"_index":1735,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["questions",{"_index":1784,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["radius",{"_index":989,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["reached",{"_index":2075,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["reactive",{"_index":481,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["reactiveformsmodule",{"_index":627,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["readable",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["reading",{"_index":2688,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["readonly",{"_index":1393,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["real",{"_index":2371,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["reasonable",{"_index":1921,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["receive",{"_index":709,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["receives",{"_index":712,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["recent",{"_index":2061,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["record",{"_index":1327,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["redirect",{"_index":2430,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirected",{"_index":2467,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirects",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["refer",{"_index":2379,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reference",{"_index":528,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["references",{"_index":3267,"title":{},"body":{"index.html":{}}}],["refers",{"_index":2209,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reflect",{"_index":1768,"title":{},"body":{"components/HelpComponent.html":{}}}],["reflects",{"_index":1782,"title":{},"body":{"components/HelpComponent.html":{}}}],["regarding",{"_index":1736,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["regardless",{"_index":2205,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["register",{"_index":1741,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["registers",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["registration",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["regulations",{"_index":1862,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["reject",{"_index":2259,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["related",{"_index":375,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{}}}],["relating",{"_index":1923,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["relative",{"_index":986,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["relevant",{"_index":2118,"title":{},"body":{"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["reliability",{"_index":1732,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["reload",{"_index":1272,"title":{},"body":{"injectables/DragDropManager.html":{},"index.html":{}}}],["reloadcallback",{"_index":1265,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["reloads",{"_index":2868,"title":{},"body":{"components/TaskComponent.html":{}}}],["remain",{"_index":2265,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["remaining",{"_index":1069,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remaining.map((c",{"_index":2917,"title":{},"body":{"components/TaskComponent.html":{}}}],["remainingcontacts",{"_index":1071,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remainingcontacts.map((contact",{"_index":1099,"title":{},"body":{"injectables/ContactManager.html":{}}}],["remember",{"_index":1780,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["removal",{"_index":2138,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["remove",{"_index":1777,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["removebackground",{"_index":1151,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["removebackground(event",{"_index":1187,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["removes",{"_index":2855,"title":{},"body":{"components/TaskComponent.html":{}}}],["rendering",{"_index":3064,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["reorders",{"_index":1303,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["reordertasks",{"_index":1258,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["reordertasks(event",{"_index":1307,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["repeat",{"_index":960,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["repeating",{"_index":2044,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["replication",{"_index":1847,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["repository",{"_index":3236,"title":{},"body":{"index.html":{}}}],["represent",{"_index":1755,"title":{},"body":{"components/HelpComponent.html":{}}}],["representation",{"_index":2735,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["represented",{"_index":1811,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["representing",{"_index":444,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["represents",{"_index":1743,"title":{},"body":{"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["reproduction",{"_index":1844,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["request",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["requests",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["required",{"_index":792,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["requirements",{"_index":2330,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["requires",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{}}}],["reserved",{"_index":2049,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["reserves",{"_index":2389,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reset",{"_index":2142,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["resetoverlaystate",{"_index":2114,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["resetoverlaystates",{"_index":2115,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["resets",{"_index":419,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{}}}],["resize",{"_index":1155,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["resolved",{"_index":2846,"title":{},"body":{"components/TaskComponent.html":{}}}],["resolves",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{}}}],["resolving",{"_index":1116,"title":{},"body":{"injectables/ContactService.html":{}}}],["resources",{"_index":3265,"title":{},"body":{"index.html":{}}}],["respective",{"_index":2163,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["responsibility",{"_index":2344,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["responsible",{"_index":1599,"title":{},"body":{"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["responsive",{"_index":2099,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["restructuring",{"_index":2293,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["result",{"_index":1962,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.message",{"_index":2021,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.success",{"_index":2019,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["results",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1852,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["retained",{"_index":2319,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retention",{"_index":2315,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retrieve",{"_index":3044,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["retrieved",{"_index":2690,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["retrieves",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["return",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["returned",{"_index":813,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["returns",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":2345,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["rgba(0",{"_index":1034,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["right",{"_index":999,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["rights",{"_index":1853,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["root",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["root'},{'name",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["rotate(360deg",{"_index":2577,"title":{},"body":{"components/SignupComponent.html":{}}}],["route",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["router",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["routermodule",{"_index":1494,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["routeroutlet",{"_index":17,"title":{},"body":{"components/AppComponent.html":{}}}],["routes",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{}}}],["routing",{"_index":1679,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["run",{"_index":3251,"title":{},"body":{"index.html":{}}}],["runlogoanimationwithdelay",{"_index":1946,"title":{},"body":{"components/LoginComponent.html":{}}}],["running",{"_index":3243,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":188,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["s.id",{"_index":2629,"title":{},"body":{"interfaces/Subtask.html":{}}}],["safety",{"_index":2335,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sale",{"_index":2292,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["same",{"_index":1309,"title":{},"body":{"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["samecontainer",{"_index":1336,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["sanitize",{"_index":579,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["sans",{"_index":968,"title":{},"body":{"components/ContactListComponent.html":{}}}],["save",{"_index":767,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["saveallsubtasks(taskid",{"_index":2657,"title":{},"body":{"interfaces/Subtask.html":{}}}],["saved",{"_index":702,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{}}}],["savenewcontact",{"_index":2409,"title":{},"body":{"components/SignupComponent.html":{}}}],["savenewcontact(newname",{"_index":2436,"title":{},"body":{"components/SignupComponent.html":{}}}],["saves",{"_index":2432,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask.html":{}}}],["savesubtaskedit",{"_index":2642,"title":{},"body":{"interfaces/Subtask.html":{}}}],["scaffolding",{"_index":3247,"title":{},"body":{"index.html":{}}}],["scale(0.95",{"_index":1042,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scale(1.1",{"_index":1041,"title":{},"body":{"components/ContactListComponent.html":{}}}],["schematics",{"_index":3253,"title":{},"body":{"index.html":{}}}],["scope",{"_index":1832,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["screen",{"_index":1177,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["screens",{"_index":1279,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["screenshots",{"_index":3229,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":2257,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["scrollable",{"_index":1294,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollbar",{"_index":926,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scrolling",{"_index":1252,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollproximity",{"_index":3309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollsection",{"_index":1287,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollsection?.nativeelement",{"_index":1348,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollspeed",{"_index":3308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollstep",{"_index":1351,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scss",{"_index":3233,"title":{},"body":{"index.html":{}}}],["search",{"_index":3029,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm",{"_index":3027,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm.trim().tolowercase",{"_index":3077,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["seconds",{"_index":1198,"title":{},"body":{"components/ContactsComponent.html":{}}}],["section",{"_index":1295,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["section.getboundingclientrect",{"_index":1349,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["securely",{"_index":2362,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["security",{"_index":2192,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["see",{"_index":1413,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["seems",{"_index":761,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["select",{"_index":406,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcategory",{"_index":424,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["selectcategory(category",{"_index":407,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectcontact",{"_index":1056,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcontact(contact",{"_index":588,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selected",{"_index":389,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedcategory",{"_index":382,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectedcontact",{"_index":488,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["selectedcontacts",{"_index":1047,"title":{},"body":{"injectables/ContactManager.html":{},"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["selectedcontactsubject",{"_index":487,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["selectedpriority",{"_index":2154,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["selectedtask",{"_index":2102,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedtask?.id",{"_index":3106,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["selecting",{"_index":819,"title":{},"body":{"components/ContactListComponent.html":{}}}],["selection",{"_index":378,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["selectionsubscription",{"_index":779,"title":{},"body":{"components/ContactListComponent.html":{}}}],["selector",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["selects",{"_index":404,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["self",{"_index":1088,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["self.findindex(c",{"_index":1089,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["sending",{"_index":2385,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["separate",{"_index":2132,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["separated",{"_index":1068,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["separately",{"_index":2691,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["sequence",{"_index":1422,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["serif",{"_index":969,"title":{},"body":{"components/ContactListComponent.html":{}}}],["serve",{"_index":3242,"title":{},"body":{"index.html":{}}}],["server",{"_index":3240,"title":{},"body":{"index.html":{}}}],["service",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["services",{"_index":793,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["services/auth.service",{"_index":854,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["services/contact.service",{"_index":719,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FormData-1.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{}}}],["services/navigation",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["services/task.service",{"_index":1318,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["session",{"_index":1625,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage",{"_index":1424,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.getitem('greetingshown",{"_index":1417,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.getitem('logoappeared",{"_index":2056,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.getitem('logomoved",{"_index":2005,"title":{},"body":{"components/LoginComponent.html":{}}}],["sessionstorage.removeitem('greetingshown",{"_index":1653,"title":{},"body":{"components/HeaderComponent.html":{}}}],["sessionstorage.setitem('greetingshown",{"_index":1427,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.setitem('logoappeared",{"_index":2057,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.setitem('logomoved",{"_index":2009,"title":{},"body":{"components/LoginComponent.html":{}}}],["set",{"_index":2161,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["set(contacts.map(c",{"_index":1572,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["set(this.task.assignedto",{"_index":2908,"title":{},"body":{"components/TaskComponent.html":{}}}],["setanimationdirection",{"_index":1152,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setanimationdirection(width",{"_index":1192,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setassignedcontacts",{"_index":2926,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["setassignedcontacts(assignedtoids",{"_index":1564,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["setbasicformdata",{"_index":2927,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["setbasicformdata(task",{"_index":1555,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["setdoc",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["setdoc(doc(this.firestore",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["setduedate",{"_index":2928,"title":{},"body":{"injectables/TaskDataService.html":{}}}],["setduedate(date",{"_index":1560,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["seteditingsubtasktext(value",{"_index":2605,"title":{},"body":{"interfaces/Subtask.html":{}}}],["seteditingtask",{"_index":3113,"title":{},"body":{"injectables/TaskService.html":{}}}],["seteditingtask(task",{"_index":2761,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["setnextdeadline",{"_index":2776,"title":{},"body":{"components/SummaryComponent.html":{}}}],["setnextdeadline(tasks",{"_index":1474,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["setpriority",{"_index":2155,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["setpriority(priority",{"_index":2158,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["setpriorityandcategory",{"_index":2156,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["setpriorityandcategory(task",{"_index":2162,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["sets",{"_index":392,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["setselectedcategory",{"_index":425,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setselectedcategory(category",{"_index":393,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setselectedcontacts",{"_index":1057,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setselectedcontacts(contacts",{"_index":1078,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcategorydropdown",{"_index":426,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setshowcategorydropdown(value",{"_index":398,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setshowcontactdropdown",{"_index":1058,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcontactdropdown(value",{"_index":1080,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowsubtaskconfirmation(value",{"_index":2600,"title":{},"body":{"interfaces/Subtask.html":{}}}],["setsubtaskinput(value",{"_index":2597,"title":{},"body":{"interfaces/Subtask.html":{}}}],["setsubtasks(subtasks",{"_index":2592,"title":{},"body":{"interfaces/Subtask.html":{}}}],["settaskcounts",{"_index":2777,"title":{},"body":{"components/SummaryComponent.html":{}}}],["settaskcounts(tasks",{"_index":1441,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["settimeout",{"_index":1244,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{}}}],["setting",{"_index":2153,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["settings",{"_index":2260,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shadow",{"_index":1033,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["shall",{"_index":2204,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["share",{"_index":2304,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sharing",{"_index":2298,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shortcuts",{"_index":2647,"title":{},"body":{"interfaces/Subtask.html":{}}}],["show",{"_index":586,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddform",{"_index":593,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddoredittask",{"_index":2103,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["showanimatedgreeting",{"_index":1425,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["showcategorydropdown",{"_index":383,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["showcategoryerror",{"_index":381,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["showconfirmpassword",{"_index":2401,"title":{},"body":{"components/SignupComponent.html":{}}}],["showcontactdetails",{"_index":1143,"title":{},"body":{"components/ContactsComponent.html":{}}}],["showcontactdropdown",{"_index":1048,"title":{},"body":{"injectables/ContactManager.html":{}}}],["showcontent",{"_index":2942,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["showdateerror",{"_index":1504,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["showeditform",{"_index":1105,"title":{},"body":{"injectables/ContactService.html":{}}}],["showeditform(contact",{"_index":597,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showform",{"_index":491,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["showformsubject",{"_index":490,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showgreeting",{"_index":1374,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["showheaderandsidebar",{"_index":27,"title":{},"body":{"components/AppComponent.html":{}}}],["showing",{"_index":1185,"title":{},"body":{"components/ContactsComponent.html":{}}}],["shown",{"_index":1209,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["showpassword",{"_index":1938,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["shows",{"_index":1173,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["showsubtaskconfirmation",{"_index":2588,"title":{},"body":{"interfaces/Subtask.html":{}}}],["showtaskdetails",{"_index":2104,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["showtitleerror",{"_index":1503,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["shrink",{"_index":2553,"title":{},"body":{"components/SignupComponent.html":{}}}],["sidebar",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/SidebarComponent.html":{}}}],["sidebar'},{'name",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["sidebar.component.html",{"_index":2394,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar.component.scss",{"_index":2395,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar/sidebar.component",{"_index":78,"title":{},"body":{"components/AppComponent.html":{}}}],["sidebarcomponent",{"_index":18,"title":{"components/SidebarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["sign",{"_index":2034,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["signed",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signin",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(email",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinasguest",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signing",{"_index":2493,"title":{},"body":{"components/SignupComponent.html":{}}}],["signinwithemailandpassword",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinwithemailandpassword(this.auth",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout(this.auth",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signoutuser",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signs",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{}}}],["signup'].includes",{"_index":95,"title":{},"body":{"components/AppComponent.html":{}}}],["signup'},{'name",{"_index":134,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["signup(email",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup.component.html",{"_index":2400,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.scss",{"_index":2399,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/footer/footer.component.ts",{"_index":1492,"title":{},"body":{"components/FooterComponent.html":{},"coverage.html":{}}}],["signup/login",{"_index":2037,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts",{"_index":1929,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts:114",{"_index":1972,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:123",{"_index":1951,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:130",{"_index":1969,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:141",{"_index":1965,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:152",{"_index":1979,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:165",{"_index":1976,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:181",{"_index":1975,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:190",{"_index":1981,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:202",{"_index":1961,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:220",{"_index":1956,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:232",{"_index":1970,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:65",{"_index":1987,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:70",{"_index":1988,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:75",{"_index":1986,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:80",{"_index":1982,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:85",{"_index":1984,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:90",{"_index":1989,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:95",{"_index":1949,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/signup/signup.component.ts",{"_index":2398,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["signup/signup/signup.component.ts:109",{"_index":2434,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:120",{"_index":2431,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:135",{"_index":2441,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:148",{"_index":2426,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:168",{"_index":2438,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:181",{"_index":2428,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:195",{"_index":2421,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:210",{"_index":2415,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:228",{"_index":2412,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:44",{"_index":2446,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:49",{"_index":2442,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:54",{"_index":2447,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:59",{"_index":2444,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:64",{"_index":2445,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:69",{"_index":2410,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:89",{"_index":2427,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":133,"title":{"components/SignupComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["signupform",{"_index":2402,"title":{},"body":{"components/SignupComponent.html":{}}}],["similar",{"_index":2250,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["simplechanges",{"_index":2864,"title":{},"body":{"components/TaskComponent.html":{}}}],["single",{"_index":532,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"index.html":{}}}],["singular",{"_index":2206,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sites",{"_index":2342,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["size",{"_index":958,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sizing",{"_index":2524,"title":{},"body":{"components/SignupComponent.html":{}}}],["skiplocationchange",{"_index":2429,"title":{},"body":{"components/SignupComponent.html":{}}}],["slide",{"_index":1182,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["slight",{"_index":2127,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["small",{"_index":1178,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["smooth",{"_index":2128,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["sms",{"_index":2284,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["snapshot",{"_index":544,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.data",{"_index":621,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.exists",{"_index":619,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach((doc",{"_index":545,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach(doc",{"_index":2705,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.id",{"_index":620,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["software",{"_index":2210,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["solely",{"_index":1870,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["solid",{"_index":981,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sort",{"_index":3058,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sortallstatusarrays",{"_index":3015,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorted",{"_index":3057,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorting",{"_index":849,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["sorts",{"_index":3052,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate",{"_index":3016,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate(tasks",{"_index":3054,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"index.html":{}}}],["space",{"_index":1008,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["spam",{"_index":2390,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["special",{"_index":1891,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/SignupComponent.html":{}}}],["specialized",{"_index":2423,"title":{},"body":{"components/SignupComponent.html":{}}}],["specific",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["specified",{"_index":2656,"title":{},"body":{"interfaces/Subtask.html":{}}}],["speed",{"_index":3264,"title":{},"body":{"index.html":{}}}],["spent",{"_index":2245,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["spin",{"_index":2572,"title":{},"body":{"components/SignupComponent.html":{}}}],["spinner",{"_index":2570,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/.../app.config.ts",{"_index":3278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contact.service.ts",{"_index":3216,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/add",{"_index":368,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask.html":{},"injectables/TaskDataService.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:31",{"_index":62,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:36",{"_index":34,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":3155,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/board/board.component.ts",{"_index":3159,"title":{},"body":{"coverage.html":{}}}],["src/app/board/drag",{"_index":1249,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["src/app/board/overlay",{"_index":2096,"title":{},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["src/app/board/task",{"_index":2937,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts",{"_index":2816,"title":{},"body":{"components/TaskComponent.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts:102",{"_index":2882,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:103",{"_index":2880,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:112",{"_index":2850,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:127",{"_index":2869,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:138",{"_index":2865,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:151",{"_index":2852,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:167",{"_index":2858,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:179",{"_index":2876,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:190",{"_index":2874,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:200",{"_index":2884,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:209",{"_index":2872,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:222",{"_index":2859,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:237",{"_index":2854,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:249",{"_index":2862,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:259",{"_index":2860,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:45",{"_index":2879,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:50",{"_index":2841,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:55",{"_index":2840,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:60",{"_index":2849,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:65",{"_index":2845,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:70",{"_index":2881,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:75",{"_index":2837,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:80",{"_index":2847,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:85",{"_index":2844,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:90",{"_index":2842,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:93",{"_index":2835,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/contacts/contact",{"_index":622,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts",{"_index":1138,"title":{},"body":{"components/ContactsComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts:107",{"_index":1171,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:117",{"_index":1193,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:124",{"_index":1195,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:137",{"_index":1188,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:149",{"_index":1181,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:160",{"_index":1165,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:167",{"_index":1175,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:174",{"_index":1176,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:54",{"_index":1199,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:59",{"_index":1211,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:64",{"_index":1210,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:69",{"_index":1205,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:74",{"_index":1208,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:79",{"_index":1154,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:94",{"_index":1161,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/header/header.component.ts",{"_index":1585,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/header/header.component.ts:107",{"_index":1633,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:116",{"_index":1622,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:128",{"_index":1616,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:149",{"_index":1621,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:51",{"_index":1643,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:56",{"_index":1639,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:61",{"_index":1597,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:76",{"_index":1613,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:91",{"_index":1603,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/login",{"_index":1491,"title":{},"body":{"components/FooterComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts:14",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.guard.ts:33",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.service.ts",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts:105",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:118",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:146",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:155",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:166",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:174",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:183",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:210",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:41",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:42",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:47",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:52",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:81",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/contact.service.ts",{"_index":443,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/services/contact.service.ts:101",{"_index":1118,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:127",{"_index":1108,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:145",{"_index":1130,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:159",{"_index":1111,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:173",{"_index":1127,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:180",{"_index":1109,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:187",{"_index":1128,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:196",{"_index":1129,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:204",{"_index":1126,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:214",{"_index":1110,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:226",{"_index":1117,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:240",{"_index":1120,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:253",{"_index":1113,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:55",{"_index":1135,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:57",{"_index":1134,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:59",{"_index":1137,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:61",{"_index":1136,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:63",{"_index":1133,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:65",{"_index":1132,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:67",{"_index":1131,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:73",{"_index":1107,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:83",{"_index":1119,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:92",{"_index":1125,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/navigation",{"_index":2058,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts",{"_index":2684,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts:104",{"_index":3130,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:125",{"_index":3128,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:145",{"_index":3118,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:163",{"_index":3117,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:180",{"_index":3134,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:192",{"_index":3133,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:203",{"_index":3122,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:213",{"_index":3123,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:222",{"_index":3125,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:248",{"_index":3121,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:262",{"_index":3124,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:274",{"_index":3132,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:281",{"_index":3126,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:288",{"_index":3120,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:298",{"_index":3119,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:72",{"_index":3116,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:79",{"_index":3131,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:88",{"_index":3129,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:97",{"_index":3127,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/shared/help/help.component.ts",{"_index":1673,"title":{},"body":{"components/HelpComponent.html":{},"coverage.html":{}}}],["src/app/shared/help/help.component.ts:20",{"_index":1677,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/help/help.component.ts:32",{"_index":1680,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/legal",{"_index":1796,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["src/app/shared/privacy",{"_index":2167,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts",{"_index":2393,"title":{},"body":{"components/SidebarComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts:20",{"_index":2396,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/sidebar/sidebar.component.ts:31",{"_index":2397,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/summary/summary.component.ts",{"_index":1358,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["src/app/summary/summary.component.ts:111",{"_index":2784,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:119",{"_index":2790,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:130",{"_index":2787,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:149",{"_index":2795,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:15",{"_index":1360,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{}}}],["src/app/summary/summary.component.ts:164",{"_index":2786,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:177",{"_index":2794,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:193",{"_index":2782,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:210",{"_index":2781,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:221",{"_index":2793,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:232",{"_index":2792,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:33",{"_index":2804,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:34",{"_index":2806,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:35",{"_index":2798,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:36",{"_index":2803,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:37",{"_index":2800,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:38",{"_index":2802,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:39",{"_index":2801,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:40",{"_index":2797,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:41",{"_index":2805,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:42",{"_index":2796,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:43",{"_index":2799,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:44",{"_index":2779,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:60",{"_index":2780,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:71",{"_index":2785,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:81",{"_index":2808,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:95",{"_index":2783,"title":{},"body":{"components/SummaryComponent.html":{}}}],["stage",{"_index":1766,"title":{},"body":{"components/HelpComponent.html":{}}}],["stages",{"_index":1772,"title":{},"body":{"components/HelpComponent.html":{}}}],["standalone",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["start",{"_index":1373,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["started",{"_index":3218,"title":{"index.html":{}},"body":{"index.html":{}}}],["starting",{"_index":1275,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["startloading",{"_index":1947,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["startmessageanimation",{"_index":1153,"title":{},"body":{"components/ContactsComponent.html":{}}}],["starts",{"_index":1196,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{}}}],["state",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["state('appear",{"_index":2054,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["state('moved",{"_index":1366,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["state('start",{"_index":1365,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["state/province",{"_index":2240,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["statements",{"_index":3137,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1542,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/OverlayManager.html":{},"injectables/TaskDataService.html":{}}}],["statistics",{"_index":1430,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["status",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["status).length",{"_index":1388,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["statusarraymap",{"_index":3075,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["statusarraymap[status",{"_index":3076,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["statuses",{"_index":1438,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["statusmap",{"_index":1326,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["statusmap[containerid",{"_index":1335,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["steps",{"_index":2311,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["still",{"_index":1783,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["stop",{"_index":2853,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["stops",{"_index":1634,"title":{},"body":{"components/HeaderComponent.html":{}}}],["storage",{"_index":1626,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["storagebucket",{"_index":3290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"index.html":{}}}],["stored",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["stores",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["storing",{"_index":2353,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["story",{"_index":387,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/FormData-1.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{}}}],["stream",{"_index":537,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["streams",{"_index":482,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["strictly",{"_index":1848,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["string",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{}}}],["string(date.getdate()).padstart(2",{"_index":2754,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["string(date.getmonth",{"_index":2756,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["strive",{"_index":1726,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["student",{"_index":1835,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["students",{"_index":1694,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["style",{"_index":1217,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["styles",{"_index":768,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styles.scss",{"_index":906,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styleurl",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["styleurls",{"_index":772,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styling",{"_index":3234,"title":{},"body":{"index.html":{}}}],["subcolid",{"_index":2695,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subcollection",{"_index":2692,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["submission",{"_index":661,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["submit",{"_index":667,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["subscribe((event",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["subscribes",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["subscribetocontacts",{"_index":788,"title":{},"body":{"components/ContactListComponent.html":{}}}],["subscribing",{"_index":58,"title":{},"body":{"components/AppComponent.html":{}}}],["subscription",{"_index":687,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["subscriptions",{"_index":831,"title":{},"body":{"components/ContactListComponent.html":{}}}],["subtask",{"_index":1531,"title":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{}},"body":{"interfaces/FormData-1.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["subtask's",{"_index":2970,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtask.completed",{"_index":2655,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtask.id",{"_index":2624,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["subtask.id.length",{"_index":2673,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtask.iscompleted",{"_index":2681,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtask.text",{"_index":2630,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtask.title",{"_index":2680,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["subtaskchanged",{"_index":2951,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtaskdata",{"_index":2672,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtaskid",{"_index":2725,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtaskinput",{"_index":2587,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtasklist",{"_index":2830,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.filter((el",{"_index":2899,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.length",{"_index":2901,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtaskmanager",{"_index":1530,"title":{},"body":{"interfaces/FormData-1.html":{},"interfaces/Subtask.html":{},"injectables/TaskDataService.html":{},"coverage.html":{}}}],["subtaskmanager.loadandsetsubtasks(task.id",{"_index":1541,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["subtasks",{"_index":2583,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["subtasks.length",{"_index":2594,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtasks.map(subtask",{"_index":2679,"title":{},"body":{"interfaces/Subtask.html":{}}}],["subtasks.push",{"_index":2710,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtasksbytaskid",{"_index":2996,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["subtasksref",{"_index":2719,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["success",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["successful",{"_index":660,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["successfully",{"_index":1247,"title":{},"body":{"components/ContactsComponent.html":{}}}],["successmessage",{"_index":2403,"title":{},"body":{"components/SignupComponent.html":{}}}],["such",{"_index":1839,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["summary",{"_index":1361,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["summary'},{'name",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["summary.component.html",{"_index":1362,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summary.component.scss",{"_index":1363,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summarycomponent",{"_index":135,"title":{"components/SummaryComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["support",{"_index":2300,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["supports",{"_index":1985,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["switch",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["switches",{"_index":1201,"title":{},"body":{"components/ContactsComponent.html":{}}}],["sync",{"_index":2670,"title":{},"body":{"interfaces/Subtask.html":{}}}],["syncs",{"_index":2669,"title":{},"body":{"interfaces/Subtask.html":{}}}],["syncsubtasks(taskid",{"_index":2671,"title":{},"body":{"interfaces/Subtask.html":{}}}],["system",{"_index":2686,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["t",{"_index":1462,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.date",{"_index":1459,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.dateobj",{"_index":1463,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.id",{"_index":1354,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["t.priority",{"_index":1444,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.status",{"_index":1387,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["table",{"_index":3050,"title":{},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3201,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":2221,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tags",{"_index":2256,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["take",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["take(1",{"_index":197,"title":{},"body":{"guards/AuthGuard.html":{}}}],["target",{"_index":2886,"title":{},"body":{"components/TaskComponent.html":{}}}],["target.closest('.dots",{"_index":2889,"title":{},"body":{"components/TaskComponent.html":{}}}],["task",{"_index":139,"title":{"interfaces/Task.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"interfaces/FormData-1.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{},"index.html":{}}}],["task's",{"_index":1302,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["task'},{'name",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["task.component.html",{"_index":2817,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.scss",{"_index":2818,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.ts",{"_index":3139,"title":{},"body":{"coverage.html":{}}}],["task.description",{"_index":1559,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["task.description?.tolowercase().includes(trimmed",{"_index":3080,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task.id",{"_index":1322,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{}}}],["task.priority",{"_index":2165,"title":{},"body":{"injectables/PriorityManager.html":{},"components/TaskDetailsComponent.html":{}}}],["task.status",{"_index":1323,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{}}}],["task.title",{"_index":1557,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{}}}],["task.title.tolowercase().includes(trimmed",{"_index":3079,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task/add",{"_index":3138,"title":{},"body":{"coverage.html":{}}}],["task/category",{"_index":369,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"coverage.html":{}}}],["task/contact",{"_index":1046,"title":{},"body":{"injectables/ContactManager.html":{},"coverage.html":{}}}],["task/form",{"_index":1500,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["task/priority",{"_index":2152,"title":{},"body":{"injectables/PriorityManager.html":{},"coverage.html":{}}}],["task/subtask",{"_index":2582,"title":{},"body":{"interfaces/Subtask.html":{},"coverage.html":{}}}],["task/task",{"_index":1526,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{},"coverage.html":{}}}],["task['status",{"_index":1325,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["taskcomponent",{"_index":137,"title":{"components/TaskComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskdataservice",{"_index":1532,"title":{"injectables/TaskDataService.html":{}},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{},"coverage.html":{}}}],["taskdetailscomponent",{"_index":138,"title":{"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskid",{"_index":1269,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["tasklist",{"_index":1264,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["tasklist.find((t",{"_index":1353,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["tasklistmanager",{"_index":2992,"title":{"injectables/TaskListManager.html":{}},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tasks",{"_index":756,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["tasks.filter((t",{"_index":1386,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["tasks.filter(task",{"_index":3078,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasks.length",{"_index":1468,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["tasks.push",{"_index":2706,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks.sort((a",{"_index":1469,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["tasks/${taskid}/subtasks/${subtaskid",{"_index":2729,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks[0].dateobj",{"_index":1472,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["tasks].sort((a",{"_index":3081,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["taskselected",{"_index":2833,"title":{},"body":{"components/TaskComponent.html":{}}}],["taskservice",{"_index":1261,"title":{"injectables/TaskService.html":{}},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskservice.capitalize(task.category",{"_index":2919,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.description",{"_index":2921,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.title",{"_index":2920,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["tasksforstatus",{"_index":3072,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasksref",{"_index":2714,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["team",{"_index":758,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{}}}],["technical",{"_index":385,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/FormData-1.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{}}}],["technologies",{"_index":2254,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["tells",{"_index":2184,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["term",{"_index":1702,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["terms",{"_index":1819,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["text",{"_index":409,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.charat(0).touppercase",{"_index":2768,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.slice(1",{"_index":2769,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["thereto",{"_index":1829,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["therfore",{"_index":2373,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third",{"_index":2196,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third‑party",{"_index":2341,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["this.addedcontact.emit(newcontact",{"_index":752,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.addnewcontact(contact",{"_index":742,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.addsubtask",{"_index":2612,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.animationdirection",{"_index":1238,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.auth.currentuser",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authinitialized.asobservable",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authinitialized.next(true",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authinitialized.value",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authservice.authinitialized",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authservice.currentuser",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authservice.getcurrentuser",{"_index":870,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["this.authservice.isloggedin",{"_index":1667,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["this.authservice.signin(email",{"_index":2014,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signinasguest",{"_index":2016,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signoutuser",{"_index":1652,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.authservice.signup(email",{"_index":2463,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.awaitfeedback",{"_index":3069,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitfeedback.push(task",{"_index":3096,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitingfeedbackcount",{"_index":1397,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.backgroundvisible",{"_index":1242,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.buildcontactfromform",{"_index":739,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.cancelsubtaskedit",{"_index":2645,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.categories",{"_index":401,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.categories.find(c",{"_index":411,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.categorymanager.setselectedcategory(task.category",{"_index":2166,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["this.changetaskstatus.emit",{"_index":2897,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.checkiftouchdevice",{"_index":1997,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.clearinputs",{"_index":753,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closedotsmenu.emit",{"_index":2891,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.closeoverlay.emit('closed",{"_index":737,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closetaskdetails.emit('close",{"_index":2980,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.contactform",{"_index":721,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.patchvalue",{"_index":730,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.reset",{"_index":736,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.valid",{"_index":738,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.value",{"_index":744,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactlist",{"_index":2895,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactlist.filter((contact",{"_index":2913,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.contactlist.length",{"_index":2912,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.contactlist.push(contact",{"_index":2910,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contacts.emit(this.contactlist",{"_index":2911,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.contactselected.emit",{"_index":882,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.addcontact(contact",{"_index":751,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.addcontact(newcontact",{"_index":2468,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.contactservice.deletecontact(this.contacttoedit.id",{"_index":755,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.editcontact$.subscribe(this.getdatatoedit",{"_index":728,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.getcontactbyid(contactid",{"_index":2909,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactservice.getcontactcolor(contact.name",{"_index":1098,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getcontacts().subscribe",{"_index":858,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.getinitials(contact.name",{"_index":1097,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getinitials(name",{"_index":897,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.hideform",{"_index":735,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.selectcontact(contact",{"_index":881,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.selectcontact(newcontact",{"_index":1235,"title":{},"body":{"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["this.contactservice.selectedcontact$.subscribe",{"_index":875,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showaddform",{"_index":885,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showform",{"_index":1232,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.contactservice.updatecontact(this.contacttoedit.id",{"_index":750,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactssubscription",{"_index":857,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactssubscription.unsubscribe",{"_index":878,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contacttoedit",{"_index":729,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.email",{"_index":732,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.id",{"_index":749,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.name",{"_index":731,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.phone",{"_index":733,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit?.id",{"_index":748,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.counttasksbystatus(tasks",{"_index":1442,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.currentuser",{"_index":871,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentuseremail",{"_index":864,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentusersubject.asobservable",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.currentusersubject.next(user",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.distributetasksbystatus(tasks",{"_index":3089,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.done",{"_index":3070,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.done.push(task",{"_index":3097,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.donecount",{"_index":1398,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.editcontactsubject.asobservable",{"_index":497,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(contact",{"_index":598,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(null",{"_index":602,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubscription",{"_index":727,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editcontactsubscription.unsubscribe",{"_index":734,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editingsubtaskid",{"_index":2602,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.editingsubtasktext",{"_index":2604,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.editingsubtasktext.trim",{"_index":2643,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.editingtask",{"_index":2762,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.editsubtask(this.editingsubtaskid",{"_index":2644,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.edittask.emit(\"edit",{"_index":2983,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.emptyarrays",{"_index":3092,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.errormessage",{"_index":2018,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.fb.group",{"_index":2003,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.filtertasksbysearchterm(tasksforstatus",{"_index":3074,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.finalizesubmission",{"_index":743,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.form.group",{"_index":722,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["this.formatdate(date",{"_index":2751,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.formatdate(date.todate",{"_index":2750,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getalluniquecontacts",{"_index":2915,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getalluniquecontacts().slice(0",{"_index":2914,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcleanjson(updatedcontact)).catch((err",{"_index":569,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcleanjson(updatedsubtask)).catch(console.error",{"_index":2730,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcleanjson(updatedtask)).catch(console.error",{"_index":2724,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcompletedsubtaskscount(subtasklist",{"_index":2902,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactlist",{"_index":2892,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactsref",{"_index":542,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcurrentuser",{"_index":856,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.getdatevalue(a.date",{"_index":3082,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.getdatevalue(b.date",{"_index":3083,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.getdroptargetstatus(event.container.id",{"_index":1320,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.getearliestdate(futuretasks",{"_index":1479,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.geterrormessage(createerror.code",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.geterrormessage(error.code",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.getfielderrormessage(control",{"_index":2471,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.getfuturetaskswithdateobj(tasks",{"_index":1476,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.getgreeting",{"_index":1415,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.getpasswordmismatchmessage",{"_index":2469,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.getpreviousurl",{"_index":2092,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.getsinglecontactsref(contactid",{"_index":617,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsinglecontactsref(docid",{"_index":567,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsingletaskref(docid",{"_index":2723,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getsubtasksref(colid",{"_index":2720,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.gettasksbystatus(status",{"_index":3073,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.gettasksref",{"_index":2715,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getuniqueassignedcontactids(contactmanager",{"_index":1545,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["this.greeting",{"_index":1414,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.greetingstate",{"_index":1426,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.groupbyinitial(contacts",{"_index":863,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.groupedcontacts",{"_index":862,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.handleauthresult(result",{"_index":2015,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.handlecontactserror(error",{"_index":861,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.handlecontactsloaded(contacts",{"_index":860,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.handleregistrationresult(result",{"_index":2465,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.hasselectedcategory",{"_index":422,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.history",{"_index":2089,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.length",{"_index":2086,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.push(event.urlafterredirects",{"_index":2088,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.shift",{"_index":2087,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history[this.history.length",{"_index":2090,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.initializeanimation",{"_index":1998,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.initializeform",{"_index":1996,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.inprogress",{"_index":3068,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogress.push(task",{"_index":3095,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogresscount",{"_index":1396,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isdotsmenuopen",{"_index":2890,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.iseditmode",{"_index":740,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.isfirestoretimestamp(date",{"_index":1488,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isloading",{"_index":2017,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.ismobile",{"_index":1418,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.istouchdevice",{"_index":1999,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loadassignedcontacts",{"_index":2977,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.loadsubtasks",{"_index":2978,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.loginform",{"_index":2002,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.get(field",{"_index":2022,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.invalid",{"_index":2010,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.markallastouched",{"_index":2011,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.value",{"_index":2013,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.logostate",{"_index":2007,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.menuopen",{"_index":1654,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.navigationservice.navigateback",{"_index":1683,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["this.nextdeadlinecount",{"_index":1443,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextdeadlinedate",{"_index":1478,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextsubtaskid",{"_index":2593,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.onclose",{"_index":754,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.oncontactselect(matchedcontact",{"_index":868,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.oncontactselected",{"_index":1236,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.opendotsmenu.emit(this.task.id",{"_index":2906,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.openedmenutaskid",{"_index":2905,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.originalsubtasks",{"_index":2683,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.originalsubtasks.filter(original",{"_index":2662,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.overlayvisible",{"_index":2147,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.pageloaded",{"_index":2008,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.parsedate(t.date",{"_index":1461,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.parsedate.bind(this",{"_index":1477,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.passwordsmatchvalidator",{"_index":2456,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reordertasks(event",{"_index":1321,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.router.events",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["this.router.navigate(['/login",{"_index":199,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["this.router.navigate(['/summary",{"_index":2020,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl",{"_index":2094,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl(previousurl",{"_index":2093,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.runlogoanimationwithdelay",{"_index":2006,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.savenewcontact(name",{"_index":2464,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.savesubtaskedit",{"_index":2651,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.selectedcategory",{"_index":391,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.selectedcontact",{"_index":876,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontact?.id",{"_index":883,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontacts",{"_index":1085,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.findindex(c",{"_index":1092,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.push(contact",{"_index":1093,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.some(c",{"_index":1095,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.splice(index",{"_index":1094,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontactsubject.asobservable",{"_index":489,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(contact",{"_index":589,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(null",{"_index":591,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedpriority",{"_index":2164,"title":{},"body":{"injectables/PriorityManager.html":{}}}],["this.selectedtask",{"_index":2150,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["this.selectionsubscription",{"_index":874,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectionsubscription.unsubscribe",{"_index":879,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.setanimationdirection(window.innerwidth",{"_index":1233,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.setassignedcontacts(task.assignedto",{"_index":1540,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["this.setbasicformdata(task",{"_index":1537,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["this.setduedate(task.date",{"_index":1538,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/TaskDataService.html":{}}}],["this.setnextdeadline(tasks",{"_index":1437,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.setsubtasks(mappedsubtasks",{"_index":2682,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.settaskcounts(tasks",{"_index":1436,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.showaddoredittask",{"_index":2149,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.showanimatedgreeting",{"_index":1419,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.showcategorydropdown",{"_index":397,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.showcategoryerror",{"_index":423,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.showcontactdetails",{"_index":1245,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showcontactdropdown",{"_index":1091,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.showcontent",{"_index":2979,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.showform",{"_index":1231,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showformsubject.asobservable",{"_index":492,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(false",{"_index":601,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(true",{"_index":594,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showgreeting",{"_index":1420,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.showheaderandsidebar",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["this.showsubtaskconfirmation",{"_index":2599,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.showtaskdetails",{"_index":2148,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.signupform",{"_index":2448,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.errors?.['passwordsdontmatch",{"_index":2476,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('confirmpassword",{"_index":2473,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('password",{"_index":2475,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get(field",{"_index":2470,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.invalid",{"_index":2460,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.markallastouched",{"_index":2461,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.value",{"_index":2462,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.sortallstatusarrays",{"_index":3090,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.awaitfeedback",{"_index":3101,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.done",{"_index":3102,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.inprogress",{"_index":3100,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.todo",{"_index":3099,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.startloading",{"_index":2012,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.startmessageanimation",{"_index":1237,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.subscribetocontacts",{"_index":855,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.subtaskchanged.emit(this.subtasks",{"_index":2986,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.subtaskinput",{"_index":2596,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtaskinput.trim",{"_index":2611,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtasks",{"_index":2591,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["this.subtasks.filter(subtask",{"_index":2623,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtasks.find(s",{"_index":2628,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtasks.push(newsubtask",{"_index":2621,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.subtasksbytaskid",{"_index":3071,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[selectedtask.id",{"_index":3107,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[task.id",{"_index":3104,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[taskid",{"_index":3105,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.successmessage",{"_index":2466,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.task.assignedto",{"_index":2990,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.task.id",{"_index":2896,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.assignedto?.length",{"_index":2907,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.id",{"_index":2988,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.tasklist",{"_index":1435,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskselected.emit(this.selectedtask",{"_index":2904,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.taskservice.addsubtask(taskid",{"_index":2658,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.taskservice.convertdate(date",{"_index":2981,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.deletesubtask(taskid",{"_index":2668,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.taskservice.deletetask(this.task.id",{"_index":2984,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.getsubtasks(task.id).subscribe((subtasks",{"_index":3103,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.taskservice.getsubtasks(taskid).subscribe(subtasks",{"_index":2677,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.taskservice.getsubtasks(this.task.id).subscribe((subtasks",{"_index":2989,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.gettasks().subscribe((tasks",{"_index":1434,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskservice.seteditingtask(this.task",{"_index":2982,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatesubtask(taskid",{"_index":2674,"title":{},"body":{"interfaces/Subtask.html":{}}}],["this.taskservice.updatesubtask(this.task.id",{"_index":2985,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatetask(task.id",{"_index":1344,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.taskservice.updatetask(taskid",{"_index":1355,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.toastanimationstate",{"_index":1240,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.toastmessagevisible",{"_index":1239,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.todo",{"_index":3067,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todo.push(task",{"_index":3093,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todocount",{"_index":1395,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.unsubtask",{"_index":3088,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.unsubtask.unsubscribe",{"_index":3091,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.updatecontact(contact",{"_index":741,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.updatetaskstatus(task",{"_index":1324,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.username",{"_index":1409,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.validatecategory(categorymanager",{"_index":1512,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["this.validateduedate(formdata.duedate",{"_index":1508,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["this.validatetitle(formdata.title",{"_index":1507,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["those",{"_index":1447,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["threaten",{"_index":1867,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["threshold",{"_index":1350,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["through",{"_index":2354,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["thumb",{"_index":1019,"title":{},"body":{"components/ContactListComponent.html":{}}}],["time",{"_index":1400,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["timestamp",{"_index":1485,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["title",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{},"interfaces/ValidationErrors.html":{}}}],["title.trim",{"_index":1516,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["title]=\"getremainingcontactnames",{"_index":2923,"title":{},"body":{"components/TaskComponent.html":{}}}],["titleerror",{"_index":1510,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["toast",{"_index":1174,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastanimationstate",{"_index":1144,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastmessagevisible",{"_index":1145,"title":{},"body":{"components/ContactsComponent.html":{}}}],["todate",{"_index":1359,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["today",{"_index":1524,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["today's",{"_index":1520,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["today.toisostring().split('t')[0",{"_index":1525,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["todo",{"_index":2997,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["todocount",{"_index":1379,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["todolist",{"_index":1328,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["toggle",{"_index":1638,"title":{},"body":{"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["togglecategorydropdown",{"_index":403,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["toggled",{"_index":2958,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["toggledropdown",{"_index":1059,"title":{},"body":{"injectables/ContactManager.html":{}}}],["togglemenu",{"_index":1593,"title":{},"body":{"components/HeaderComponent.html":{}}}],["togglemenu(event",{"_index":1632,"title":{},"body":{"components/HeaderComponent.html":{}}}],["toggles",{"_index":402,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["togglesubtaskcompletion(id",{"_index":2654,"title":{},"body":{"interfaces/Subtask.html":{}}}],["tokens",{"_index":2358,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tool",{"_index":1670,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["tools",{"_index":3249,"title":{},"body":{"index.html":{}}}],["top",{"_index":919,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["total",{"_index":1392,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["totaltaskcount",{"_index":1394,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["touch",{"_index":1953,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["touched",{"_index":2418,"title":{},"body":{"components/SignupComponent.html":{}}}],["track",{"_index":1018,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["trackby",{"_index":3061,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid",{"_index":3017,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid(index",{"_index":3059,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tracking",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["tracks",{"_index":1644,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["trademarks",{"_index":1857,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["transactions",{"_index":2324,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfer",{"_index":2308,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transferarrayitem",{"_index":1316,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["transferred",{"_index":2327,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfers",{"_index":2290,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transform",{"_index":1040,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{}}}],["transition",{"_index":950,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["transition(':enter",{"_index":1649,"title":{},"body":{"components/HeaderComponent.html":{}}}],["transition(':leave",{"_index":1651,"title":{},"body":{"components/HeaderComponent.html":{}}}],["transition('bottom",{"_index":1230,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('right",{"_index":1227,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('start",{"_index":1367,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["transition('void",{"_index":1222,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transitions",{"_index":1200,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatex(0",{"_index":1226,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatex(100",{"_index":1223,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatey",{"_index":2545,"title":{},"body":{"components/SignupComponent.html":{}}}],["translatey(0",{"_index":1229,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatey(100",{"_index":1228,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transmission",{"_index":2190,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transparent",{"_index":928,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["trends",{"_index":2295,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["trigger",{"_index":1216,"title":{},"body":{"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeout",{"_index":2053,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["trigger('fadeoutgreeting",{"_index":1364,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeoutwrapper",{"_index":1993,"title":{},"body":{"components/LoginComponent.html":{}}}],["trigger('slideinout",{"_index":1221,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["triggered",{"_index":2614,"title":{},"body":{"interfaces/Subtask.html":{}}}],["triggering",{"_index":1636,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["triggers",{"_index":592,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["trimmed",{"_index":673,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/TaskListManager.html":{}}}],["trimming",{"_index":2073,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["true",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["tslib",{"_index":3211,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1123,"title":{},"body":{"injectables/ContactService.html":{}}}],["type",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FormData.html":{},"interfaces/FormData-1.html":{},"injectables/FormValidatorService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":476,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["types",{"_index":2235,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["typescript",{"_index":3232,"title":{},"body":{"index.html":{}}}],["u",{"_index":1666,"title":{},"body":{"components/HeaderComponent.html":{}}}],["ui",{"_index":587,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["uid",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["unauthorized",{"_index":1843,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["unbekannt",{"_index":901,"title":{},"body":{"components/ContactListComponent.html":{}}}],["undefined",{"_index":576,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FormData-1.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["under",{"_index":1757,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["undergoes",{"_index":2325,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["underline",{"_index":2568,"title":{},"body":{"components/SignupComponent.html":{}}}],["understand",{"_index":2365,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unique",{"_index":447,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["uniquecontactids",{"_index":1544,"title":{},"body":{"interfaces/FormData-1.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{}}}],["uniquecontacts",{"_index":1086,"title":{},"body":{"injectables/ContactManager.html":{}}}],["unless",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["unset",{"_index":2560,"title":{},"body":{"components/SignupComponent.html":{}}}],["unsolicited",{"_index":2384,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribe",{"_index":543,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["unsubscribed",{"_index":2289,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribes",{"_index":830,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["unsubtask",{"_index":2998,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["until",{"_index":2266,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unused",{"_index":2048,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["up",{"_index":686,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["upcoming",{"_index":1473,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["update",{"_index":563,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{}}}],["updatecallback",{"_index":1298,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatecontact",{"_index":645,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["updatecontact(contact",{"_index":700,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["updatecontact(docid",{"_index":566,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updated",{"_index":565,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["updated.assignedto",{"_index":2743,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.category",{"_index":2744,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.date",{"_index":2740,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.description",{"_index":2739,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.iscompleted",{"_index":2745,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.priority",{"_index":2741,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.status",{"_index":2742,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.title",{"_index":2738,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedcontact",{"_index":564,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.email",{"_index":584,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.name",{"_index":583,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.phone",{"_index":585,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedoc",{"_index":456,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedoc(docref",{"_index":568,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedsubtask",{"_index":2726,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask",{"_index":1343,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask).catch((error",{"_index":1345,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatedtask).then(reloadcallback",{"_index":1356,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updateprofile",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updateprofile(user",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updates",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["updatesubtask",{"_index":3114,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatesubtask(taskid",{"_index":2727,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetask",{"_index":3115,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(docid",{"_index":2722,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetasklists",{"_index":3018,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["updatetaskstatus",{"_index":1259,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatetaskstatus(task",{"_index":1312,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updating",{"_index":578,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["upload",{"_index":3270,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":1124,"title":{},"body":{"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["urgency",{"_index":1439,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["urgent",{"_index":1552,"title":{},"body":{"interfaces/FormData-1.html":{},"injectables/PriorityManager.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskDataService.html":{},"injectables/TaskService.html":{}}}],["urgent').length",{"_index":1445,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["url",{"_index":2066,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["url(\"../../../../public/assets/img/svg/add",{"_index":956,"title":{},"body":{"components/ContactListComponent.html":{}}}],["url(\"./../../../../public/assets/img/icons/checkbox",{"_index":2555,"title":{},"body":{"components/SignupComponent.html":{}}}],["url(\"./../../../../public/assets/img/icons/checkbox.png",{"_index":2552,"title":{},"body":{"components/SignupComponent.html":{}}}],["urls",{"_index":2064,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["usage",{"_index":1725,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["use",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["used",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["user",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"interfaces/FormData-1.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["user's",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["user.displayname.trim().split",{"_index":1659,"title":{},"body":{"components/HeaderComponent.html":{}}}],["user.email",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user.email[0].touppercase",{"_index":1665,"title":{},"body":{"components/HeaderComponent.html":{}}}],["user.uid",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user?.displayname",{"_index":872,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["user?.displayname?.tolowercase",{"_index":1656,"title":{},"body":{"components/HeaderComponent.html":{}}}],["user?.email",{"_index":873,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["user?.email?.tolowercase",{"_index":1655,"title":{},"body":{"components/HeaderComponent.html":{}}}],["usercredential",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["usercredential.user",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdata",{"_index":303,"title":{"interfaces/UserData.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["userdata.displayname",{"_index":1411,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdata?.displayname?.trim",{"_index":1410,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdoc",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.data",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.exists",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["username",{"_index":1371,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["users",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["user’s",{"_index":840,"title":{},"body":{"components/ContactListComponent.html":{}}}],["uses",{"_index":2350,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["usevalue",{"_index":3304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":670,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["ux",{"_index":2129,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["valid",{"_index":1448,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["validate",{"_index":470,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["validatecategory",{"_index":1575,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validatecategory(categorymanager",{"_index":1517,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["validateduedate",{"_index":1576,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validateduedate(duedate",{"_index":1519,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["validateform",{"_index":1577,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validateform(formdata",{"_index":1506,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["validates",{"_index":697,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/ValidationErrors.html":{}}}],["validatetitle",{"_index":1578,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validatetitle(title",{"_index":1515,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{}}}],["validation",{"_index":471,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/ValidationErrors.html":{},"miscellaneous/functions.html":{}}}],["validationerrors",{"_index":460,"title":{"interfaces/ValidationErrors.html":{}},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"components/SignupComponent.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":463,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validator.service.ts",{"_index":1501,"title":{},"body":{"interfaces/FormData.html":{},"injectables/FormValidatorService.html":{},"interfaces/ValidationErrors.html":{},"coverage.html":{}}}],["validator.service.ts:24",{"_index":1583,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validator.service.ts:34",{"_index":1580,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validator.service.ts:43",{"_index":1584,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validator.service.ts:47",{"_index":1581,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validator.service.ts:51",{"_index":1582,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validator.service.ts:58",{"_index":1579,"title":{},"body":{"injectables/FormValidatorService.html":{}}}],["validators",{"_index":717,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.email",{"_index":724,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.min(10",{"_index":725,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.minlength(2",{"_index":2449,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.minlength(6",{"_index":2004,"title":{},"body":{"components/LoginComponent.html":{}}}],["validators.minlength(8",{"_index":2450,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^(?=.*[a",{"_index":2451,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^\\d",{"_index":726,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.required",{"_index":723,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.requiredtrue",{"_index":2455,"title":{},"body":{"components/SignupComponent.html":{}}}],["validcontacts",{"_index":886,"title":{},"body":{"components/ContactListComponent.html":{}}}],["validcontacts.reduce((groups",{"_index":889,"title":{},"body":{"components/ContactListComponent.html":{}}}],["value",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/variables.html":{}}}],["value.trim().length",{"_index":477,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["values",{"_index":674,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["var",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["variable",{"_index":3156,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2119,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OverlayManager.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1481,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["version",{"_index":2243,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{},"properties.html":{}}}],["via",{"_index":710,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["view",{"_index":1168,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["viewchild",{"_index":1648,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild('menu",{"_index":1645,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewing",{"_index":485,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{}}}],["viewport",{"_index":1641,"title":{},"body":{"components/HeaderComponent.html":{}}}],["views",{"_index":1204,"title":{},"body":{"components/ContactsComponent.html":{}}}],["viktor",{"_index":1814,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["visibility",{"_index":395,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["visible",{"_index":1206,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["visit",{"_index":1974,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["visited",{"_index":2063,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["visual",{"_index":501,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{}}}],["visualize",{"_index":1708,"title":{},"body":{"components/HelpComponent.html":{}}}],["void",{"_index":394,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/FormData-1.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/PriorityManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["vulnerabilities",{"_index":2193,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["waits",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{}}}],["waldingstraße",{"_index":1807,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranties",{"_index":1873,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranty",{"_index":1877,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["we'll",{"_index":1687,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we're",{"_index":1789,"title":{},"body":{"components/HelpComponent.html":{}}}],["we\\'ll",{"_index":1791,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we\\'re",{"_index":1795,"title":{},"body":{"components/HelpComponent.html":{}}}],["weak",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["web",{"_index":1696,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["webkit",{"_index":1017,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["website",{"_index":2217,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["websites",{"_index":2340,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["weight",{"_index":970,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["welcome",{"_index":1684,"title":{},"body":{"components/HelpComponent.html":{}}}],["whenever",{"_index":3245,"title":{},"body":{"index.html":{}}}],["whether",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["white",{"_index":1007,"title":{},"body":{"components/ContactListComponent.html":{}}}],["whitespace",{"_index":468,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["whose",{"_index":2675,"title":{},"body":{"interfaces/Subtask.html":{},"components/TaskDetailsComponent.html":{}}}],["width",{"_index":907,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["window",{"_index":1194,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["window.addeventlistener('resize",{"_index":1234,"title":{},"body":{"components/ContactsComponent.html":{}}}],["window.innerwidth",{"_index":1246,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{}}}],["window:resize",{"_index":1596,"title":{},"body":{"components/HeaderComponent.html":{}}}],["window:resize(event",{"_index":1612,"title":{},"body":{"components/HeaderComponent.html":{}}}],["withhashlocation",{"_index":3283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":1751,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["without",{"_index":676,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["words",{"_index":2201,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["work",{"_index":1709,"title":{},"body":{"components/HelpComponent.html":{}}}],["works",{"_index":3227,"title":{},"body":{"index.html":{}}}],["wrap",{"_index":985,"title":{},"body":{"components/ContactListComponent.html":{}}}],["wrapper",{"_index":2497,"title":{},"body":{"components/SignupComponent.html":{}}}],["wrong",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["wrongdoing",{"_index":2334,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["x",{"_index":2525,"title":{},"body":{"components/SignupComponent.html":{}}}],["y",{"_index":916,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["year",{"_index":2758,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["yes",{"_index":1122,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskDataService.html":{},"components/TaskDetailsComponent.html":{}}}],["you'll",{"_index":1742,"title":{},"body":{"components/HelpComponent.html":{}}}],["you've",{"_index":1754,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ll",{"_index":1792,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ve",{"_index":1793,"title":{},"body":{"components/HelpComponent.html":{}}}],["yourself",{"_index":1750,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["z",{"_index":1029,"title":{},"body":{"components/ContactListComponent.html":{}}}],["z])(?=.*\\d)(?=.*[!@#$%^&*()_",{"_index":2452,"title":{},"body":{"components/SignupComponent.html":{}}}],["zindex",{"_index":3307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zip/postal",{"_index":2241,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["zone.js",{"_index":3213,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                SidebarComponent\n                                HeaderComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                showHeaderAndSidebar\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:36\n                            \n                        \n\n                \n                    \n                            Subscribes to router events to determine if the current route\nrequires hiding the header and sidebar. Also initializes navigation tracking.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to store navigation history.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's router for subscribing to route changes.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        showHeaderAndSidebar\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:31\n                        \n                    \n\n            \n                \n                    Controls whether the header and sidebar should be displayed.\nHidden on specific routes like login or signup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'join'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:36\n                        \n                    \n\n            \n                \n                    The title of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet, Router, NavigationEnd } from '@angular/router';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { HeaderComponent } from './header/header.component';\nimport { CommonModule } from '@angular/common';\nimport { NavigationHistoryService } from './services/navigation-history.service';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, SidebarComponent, HeaderComponent, CommonModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\n\nexport class AppComponent {\n\n  /**\n   * Controls whether the header and sidebar should be displayed.\n   * Hidden on specific routes like login or signup.\n   */\n  showHeaderAndSidebar = true;\n\n  /**\n   * The title of the application.\n   */\n  title = 'join';\n\n  /**\n   * Subscribes to router events to determine if the current route\n   * requires hiding the header and sidebar. Also initializes navigation tracking.\n   *\n   * @param navigationService - Service to store navigation history.\n   * @param router - Angular's router for subscribing to route changes.\n   */\n  constructor(\n    private navigationService: NavigationHistoryService,\n    private router: Router) {\n    this.router.events\n    .pipe(filter((event) => event instanceof NavigationEnd))\n    .subscribe((event: NavigationEnd) => {\n      this.showHeaderAndSidebar = !['/login', '/', '/signup'].includes(\n        event.urlAfterRedirects\n      );\n    });\n  }\n}\n\n\n    \n\n    \n        \n  \n  \n    \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/services/auth.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Route guard that prevents access to certain routes\nunless the user is authenticated.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            Constructs the AuthGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to check the user's authentication status\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Determines whether a route can be activated.\nIf the user is not authenticated, redirects to the login page.\nWaits for Firebase Auth to initialize before making the decision.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable that resolves to true if user is logged in\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { Observable, combineLatest, map, filter, take } from 'rxjs';\n\n/**\n * Route guard that prevents access to certain routes\n * unless the user is authenticated.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthGuard implements CanActivate {\n\n  /**\n   * Constructs the AuthGuard.\n   * @param authService - Service to check the user's authentication status\n   * @param router - Angular Router used for navigation\n   */\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  /**\n   * Determines whether a route can be activated.\n   * If the user is not authenticated, redirects to the login page.\n   * Waits for Firebase Auth to initialize before making the decision.\n   *\n   * @returns Observable that resolves to true if user is logged in\n   */\n  canActivate(): Observable {\n    return combineLatest([\n      this.authService.currentUser$,\n      this.authService.authInitialized$\n    ]).pipe(\n      filter(([user, initialized]) => initialized),\n      take(1),\n      map(([user, initialized]) => {\n        if (user) {\n          return true;\n        } else {\n          this.router.navigate(['/login']);\n          return false;\n        }\n      })\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication service for handling user registration, login, logout,\nguest access, profile updates, account deletion, and state tracking.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authInitialized\n                            \n                            \n                                    Public\n                                authInitialized$\n                            \n                            \n                                    Public\n                                currentUser$\n                            \n                            \n                                    Private\n                                currentUserSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                getCurrentUser\n                            \n                            \n                                    Async\n                                getCurrentUserData\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInAsGuest\n                            \n                            \n                                    Async\n                                signOutUser\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: Auth, firestore: Firestore, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.service.ts:52\n                            \n                        \n\n                \n                    \n                            Initializes the AuthService and subscribes to authentication state changes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Auth instance\n\n\n                                                        \n                                                \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Firestore instance\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAccount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:210\n                        \n                    \n\n\n            \n                \n                        Deletes the currently authenticated user account.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:174\n                        \n                    \n\n\n            \n                \n                        Gets the current authenticated Firebase user.\n\n\n                        \n                            Returns :     User | null\n\n                        \n                            \n                                The current user or null if not logged in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCurrentUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:155\n                        \n                    \n\n\n            \n                \n                        Retrieves the current user's data from Firestore.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The user's Firestore data or null if not found\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(errorCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:183\n                        \n                    \n\n\n            \n                \n                        Maps Firebase Auth error codes to human-readable error messages.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                errorCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFirebase Auth error code\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string describing the error\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Checks whether a user is currently authenticated.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a user is signed in, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Signs in a user with email and password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInAsGuest()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Signs in as a guest user. If guest user does not exist, it will be created.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Signs out the currently authenticated user and redirects to the login page.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(email: string, password: string, displayName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Registers a new user with email, password, and display name.\nStores user data in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email address\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                        \n                                                displayName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's display name\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        authInitialized\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authInitialized$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authInitialized.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:52\n                        \n                    \n\n            \n                \n                    Observable that emits true once Firebase Auth has finished initializing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentUser$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentUserSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:47\n                        \n                    \n\n            \n                \n                    Observable emitting the current authenticated Firebase user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:41\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n  private authInitialized = new BehaviorSubject(false);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n  \n  /**\n   * Observable that emits true once Firebase Auth has finished initializing.\n   */\n  public authInitialized$: Observable = this.authInitialized.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n      if (!this.authInitialized.value) {\n        this.authInitialized.next(true);\n      }\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category.html":{"url":"interfaces/Category.html","title":"interface - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CategoryManager {\n  showCategoryError: boolean = false;\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n\n   /**\n   * Handles category selection and clears error state.\n   */\n  onCategorySelect() {\n    if (this.hasSelectedCategory()) {\n      this.showCategoryError = false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryManager.html":{"url":"injectables/CategoryManager.html","title":"injectable - CategoryManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                CategoryManager handles all category-related operations for the AddTaskComponent.\nThis includes category selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                categories\n                            \n                            \n                                    Private\n                                selectedCategory\n                            \n                            \n                                    Private\n                                showCategoryDropdown\n                            \n                            \n                                showCategoryError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getCategories\n                            \n                            \n                                getCategoryColor\n                            \n                            \n                                getCategoryText\n                            \n                            \n                                getSelectedCategory\n                            \n                            \n                                getShowCategoryDropdown\n                            \n                            \n                                hasSelectedCategory\n                            \n                            \n                                onCategorySelect\n                            \n                            \n                                selectCategory\n                            \n                            \n                                setSelectedCategory\n                            \n                            \n                                setShowCategoryDropdown\n                            \n                            \n                                toggleCategoryDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Clears the selected category and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategories\n                        \n                    \n                \n            \n            \n                \ngetCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:57\n                        \n                    \n\n\n            \n                \n                        Gets all available categories\n\n\n                        \n                            Returns :         Category[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryColor\n                        \n                    \n                \n            \n            \n                \ngetCategoryColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:93\n                        \n                    \n\n\n            \n                \n                        Returns the color for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category color or default color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryText\n                        \n                    \n                \n            \n            \n                \ngetCategoryText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:81\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category label or default text.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedCategory\n                        \n                    \n                \n            \n            \n                \ngetSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:29\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected category\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:43\n                        \n                    \n\n\n            \n                \n                        Gets the category dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSelectedCategory\n                        \n                    \n                \n            \n            \n                \nhasSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Checks if a category is currently selected.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a category is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCategorySelect\n                        \n                    \n                \n            \n            \n                \nonCategorySelect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:120\n                        \n                    \n\n\n            \n                \n                        Handles category selection and clears error state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectCategory\n                        \n                    \n                \n            \n            \n                \nselectCategory(category: Category)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:72\n                        \n                    \n\n\n            \n                \n                        Selects a category and closes the dropdown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            Category\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe category to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedCategory\n                        \n                    \n                \n            \n            \n                \nsetSelectedCategory(category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:36\n                        \n                    \n\n\n            \n                \n                        Sets the selected category\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowCategoryDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:50\n                        \n                    \n\n\n            \n                \n                        Sets the category dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Toggles the category dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showCategoryDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showCategoryError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CategoryManager {\n  showCategoryError: boolean = false;\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n\n   /**\n   * Handles category selection and clears error state.\n   */\n  onCategorySelect() {\n    if (this.hasSelectedCategory()) {\n      this.showCategoryError = false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact.html":{"url":"interfaces/Contact.html","title":"interface - Contact","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a contact.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email address of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Unique identifier (automatically assigned by Firestore)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Full name of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional phone number of the contact\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Updates an existing contact in Firestore.\n   *\n   * @param docId - The Firestore document ID of the contact to update.\n   * @param updatedContact - The updated contact data.\n   */\n  async updateContact(docId: string, updatedContact: Contact): Promise {\n    let docRef = this.getSingleContactsRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n      console.error(err);\n    });\n  }\n\n  /**\n   * Returns a plain JSON object with only the allowed contact fields.\n   * This is used to avoid including undefined or extra properties when updating Firestore.\n   *\n   * @param updatedContact - The contact object to sanitize.\n   * @returns A JSON object containing name, email, and phone.\n   */\n  getCleanJson(updatedContact: Contact): Partial {\n    return {\n      name: updatedContact.name,\n      email: updatedContact.email,\n      phone: updatedContact.phone,\n    };\n  }\n\n  /**\n   * Emits a contact to the selected contact observable.\n   * Used to show the contact details in the UI.\n   *\n   * @param contact - The contact to select.\n   */\n  selectContact(contact: Contact): void {\n    this.selectedContactSubject.next(contact);\n  }\n\n  /**\n   * Clears the currently selected contact.\n   */\n  clearSelection(): void {\n    this.selectedContactSubject.next(null);\n  }\n\n  /**\n   * Triggers the display of the add contact form.\n   */\n  showAddForm(): void {\n    this.showFormSubject.next(true);\n  }\n\n  /**\n   * Triggers the display of the edit contact form with a prefilled contact.\n   *\n   * @param contact - The contact to edit.\n   */\n  showEditForm(contact: Contact): void {\n    this.editContactSubject.next(contact);\n    this.showFormSubject.next(true);\n  }\n\n  /**\n   * Hides the contact form and clears the edit state.\n   */\n  hideForm(): void {\n    this.showFormSubject.next(false);\n    this.editContactSubject.next(null);\n  }\n\n  /**\n   * Deletes a contact from Firestore.\n   *\n   * @param docId - The Firestore document ID of the contact to delete.\n   */\n  async deleteContact(docId: string): Promise {\n    await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  /**\n   * Generates a consistent avatar color for a contact based on their name.\n   *\n   * @param contactName - The contact’s name used to calculate a hash.\n   * @returns A hexadecimal color string from the avatarColors array.\n   */\n  getContactColor(contactName: string): string {\n    let hash = 0;\n    for (let i = 0; i  {\n    const contactRef = this.getSingleContactsRef(contactId);\n    return getDoc(contactRef).then(snapshot => {\n      if (snapshot.exists()) {\n        return { id: snapshot.id, ...snapshot.data() } as Contact;\n      }\n      return null;\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactFormComponent.html":{"url":"components/ContactFormComponent.html","title":"component - ContactFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-form/contact-form.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-form\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contact-form.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contact-form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactForm\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                contactToEdit\n                            \n                            \n                                    Private\n                                    Optional\n                                editContactSubscription\n                            \n                            \n                                getDataToEdit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addNewContact\n                            \n                            \n                                    Private\n                                buildContactFromForm\n                            \n                            \n                                clearInputs\n                            \n                            \n                                deleteContact\n                            \n                            \n                                    Private\n                                finalizeSubmission\n                            \n                            \n                                    Private\n                                isEditMode\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                    Private\n                                updateContact\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                addedContact\n                            \n                            \n                                closeOverlay\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:54\n                            \n                        \n\n                \n                    \n                            Constructor injecting the form builder and contact service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's FormBuilder for creating the form.\n\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService that manages contact CRUD operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        addedContact\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:33\n                            \n                        \n                \n                    \n                        Emits a newly created contact after successful form submission.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeOverlay\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:39\n                            \n                        \n                \n                    \n                        Emits when the form overlay is closed (e.g., after cancel or submit).\nEmits the string 'closed' as an identifier.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addNewContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    addNewContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:164\n                        \n                    \n\n\n            \n                \n                        Adds a new contact using the ContactService and emits it if successful.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new contact data to be added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildContactFromForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildContactFromForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Builds a trimmed Contact object from form values.\n\n\n                        \n                            Returns :         Contact\n\n                        \n                            \n                                A Contact object based on form input.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearInputs\n                        \n                    \n                \n            \n            \n                \nclearInputs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:182\n                        \n                    \n\n\n            \n                \n                        Resets the form without closing the overlay.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteContact\n                        \n                    \n                \n            \n            \n                \ndeleteContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:189\n                        \n                    \n\n\n            \n                \n                        Deletes the contact being edited (if any) and closes the form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        finalizeSubmission\n                        \n                    \n                \n            \n            \n                \n                        \n                    finalizeSubmission()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Clears form inputs and closes the form after submission.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isEditMode\n                        \n                    \n                \n            \n            \n                \n                        \n                    isEditMode()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:144\n                        \n                    \n\n\n            \n                \n                        Determines whether the form is in edit mode.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if editing an existing contact, false if creating a new one.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:94\n                        \n                    \n\n\n            \n                \n                        Cleans up the subscription on component destruction to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Initializes the form and subscribes to editContact$ to load contact data\nwhen editing an existing entry.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:103\n                        \n                    \n\n\n            \n                \n                        Closes the contact form, resets its state, and emits a closing event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Handles form submission. Validates input, creates or updates the contact\nusing the ContactService, emits the new contact (if applicable),\nand closes the form.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:153\n                        \n                    \n\n\n            \n                \n                        Updates an existing contact using the ContactService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact data to be saved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:44\n                        \n                    \n\n            \n                \n                    The reactive form group for the contact form.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:61\n                        \n                    \n\n            \n                \n                    - Service that manages contact CRUD operations.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:49\n                        \n                    \n\n            \n                \n                    The contact to edit, if editing mode is active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        editContactSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:54\n                        \n                    \n\n            \n                \n                    Subscription to receive the contact data to be edited via the ContactService.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDataToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:80\n                        \n                    \n\n            \n                \n                    Receives a contact to be edited and pre-fills the form fields.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    contact\n                                                    \n                                                            \nThe contact object or null to clear the form.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact, notOnlyWhitespace } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-contact-form',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  templateUrl: './contact-form.component.html',\n  styleUrl: './contact-form.component.scss',\n})\n\nexport class ContactFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * Emits a newly created contact after successful form submission.\n   */\n  @Output() addedContact = new EventEmitter();\n\n  /**\n   * Emits when the form overlay is closed (e.g., after cancel or submit).\n   * Emits the string 'closed' as an identifier.\n   */\n  @Output() closeOverlay = new EventEmitter();\n\n  /**\n   * The reactive form group for the contact form.\n   */\n  contactForm!: FormGroup;\n\n  /**\n   * The contact to edit, if editing mode is active.\n   */\n  contactToEdit?: Contact;\n\n  /**\n   * Subscription to receive the contact data to be edited via the ContactService.\n   */\n  private editContactSubscription?: Subscription;\n\n  /**\n   * Constructor injecting the form builder and contact service.\n   * @param form - Angular's FormBuilder for creating the form.\n   * @param contactService - Service that manages contact CRUD operations.\n   */\n  constructor(private form: FormBuilder, public contactService: ContactService) { }\n\n  /**\n   * Initializes the form and subscribes to editContact$ to load contact data\n   * when editing an existing entry.\n   */\n  ngOnInit(): void {\n    this.contactForm = this.form.group({\n      name: ['', [Validators.required, notOnlyWhitespace]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.required, Validators.min(10), Validators.pattern(/^\\d+$/)]]\n    });\n    this.editContactSubscription = this.contactService.editContact$.subscribe(this.getDataToEdit);\n  }\n\n  /**\n   * Receives a contact to be edited and pre-fills the form fields.\n   * @param contact - The contact object or null to clear the form.\n   */\n  getDataToEdit = (contact: Contact | null) => {\n    this.contactToEdit = contact || undefined;\n    if (this.contactToEdit) {\n      this.contactForm.patchValue({\n        name: this.contactToEdit.name,\n        email: this.contactToEdit.email,\n        phone: this.contactToEdit.phone\n      });\n    }\n  }\n\n  /**\n   * Cleans up the subscription on component destruction to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    if (this.editContactSubscription) {\n      this.editContactSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Closes the contact form, resets its state, and emits a closing event.\n   */\n  onClose(): void {\n    this.contactService.hideForm();\n    this.contactForm.reset();\n    this.closeOverlay.emit('closed');\n  }\n\n  /**\n   * Handles form submission. Validates input, creates or updates the contact\n   * using the ContactService, emits the new contact (if applicable),\n   * and closes the form.\n   */\n  async onSubmit(): Promise {\n    if (!this.contactForm.valid) return;\n    const contact = this.buildContactFromForm();\n    if (this.isEditMode()) {\n      this.updateContact(contact);\n    } else {\n      await this.addNewContact(contact);\n    }\n    this.finalizeSubmission();\n  }\n\n  /**\n   * Builds a trimmed Contact object from form values.\n   * \n   * @returns A Contact object based on form input.\n   */\n  private buildContactFromForm(): Contact {\n    const { name, email, phone } = this.contactForm.value;\n    return {\n      name: name.trim(),\n      email: email.trim(),\n      phone: phone.trim(),\n    };\n  }\n\n  /**\n   * Determines whether the form is in edit mode.\n   * \n   * @returns True if editing an existing contact, false if creating a new one.\n   */\n  private isEditMode(): boolean {\n    return !!this.contactToEdit?.id;\n  }\n\n  /**\n   * Updates an existing contact using the ContactService.\n   * \n   * @param contact - The contact data to be saved.\n   */\n  private updateContact(contact: Contact): void {\n    if (this.contactToEdit && this.contactToEdit.id) {\n      this.contactService.updateContact(this.contactToEdit.id, contact);\n    }\n  }\n\n  /**\n   * Adds a new contact using the ContactService and emits it if successful.\n   * \n   * @param contact - The new contact data to be added.\n   */\n  private async addNewContact(contact: Contact): Promise {\n    const newContact = await this.contactService.addContact(contact);\n    if (newContact) {\n      this.addedContact.emit(newContact);\n    }\n  }\n\n  /**\n   * Clears form inputs and closes the form after submission.\n   */\n  private finalizeSubmission(): void {\n    this.clearInputs();\n    this.onClose();\n  }\n\n  /**\n   * Resets the form without closing the overlay.\n   */\n  clearInputs() {\n    this.contactForm.reset();\n  }\n\n  /**\n   * Deletes the contact being edited (if any) and closes the form.\n   */\n  deleteContact() {\n    if (this.contactToEdit?.id) {\n      this.contactService.deleteContact(this.contactToEdit.id);\n      this.onClose();\n    }\n  }\n}\n\n\n    \n\n    \n        \n    \n        \n          \n              \n              \n              \n              \n              \n               \n            \n        \n     \n    \n        \n        Add contact\n        Edit contact\n        Tasks are better with a team!\n        \n    \n    \n        \n            \n                \n                {{ contactService.getInitials(contactToEdit.name) }}\n            \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! Please add a name.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! This email seems invalid or missing.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oh! Don´t forget the phone number.\n                                \n                 \n                    \n                        Cancel\n                         \n                            \n                            \n                            \n                            \n                            \n                            \n                        \n                    \n                     \n                        Delete\n                    \n                    \n                        Create contact\n                        \n                    \n                    \n                        Save\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                        Add contact        Edit contact        Tasks are better with a team!                                                                    {{ contactService.getInitials(contactToEdit.name) }}                                                                                                                                                                            Oops! Please add a name.                                                                                                                                                                    Oops! This email seems invalid or missing.                                                                                                                                                                    Oh! Don´t forget the phone number.                                                                                             Cancel                                                                                                                                                                                                                                                                                          Delete                                                                Create contact                                                                                        Save                                                                                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactListComponent.html":{"url":"components/ContactListComponent.html","title":"component - ContactListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-list/contact-list.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-list\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./contact-list.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./contact-list.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Private\n                                contactsSubscription\n                            \n                            \n                                currentUser\n                            \n                            \n                                currentUserEmail\n                            \n                            \n                                groupedContacts\n                            \n                            \n                                keyAsc\n                            \n                            \n                                selectedContact\n                            \n                            \n                                    Private\n                                selectionSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUser\n                            \n                            \n                                getInitials\n                            \n                            \n                                groupByInitial\n                            \n                            \n                                    Private\n                                handleContactsError\n                            \n                            \n                                    Private\n                                handleContactsLoaded\n                            \n                            \n                                isCurrentUser\n                            \n                            \n                                isSelected\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAddNewContact\n                            \n                            \n                                onContactSelect\n                            \n                            \n                                    Private\n                                subscribeToContacts\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactSelected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:108\n                            \n                        \n\n                \n                    \n                            Constructor injecting required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nManages contact data and selection.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nProvides the currently logged-in user's info.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        contactSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-list/contact-list.component.ts:108\n                            \n                        \n                \n                    \n                        Emits an event when a contact is selected.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Identifying the current user to directly select this user in the contact list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:188\n                        \n                    \n\n\n            \n                \n                        Returns the initials of the given name using ContactService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Initials string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupByInitial\n                        \n                    \n                \n            \n            \n                \ngroupByInitial(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Groups contacts alphabetically by the first character of their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of contacts to group.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object with initials as keys and arrays of contacts as values.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleContactsError\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleContactsError(error: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:66\n                        \n                    \n\n\n            \n                \n                        Handles an error that occurred while loading contacts.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error object returned from the subscription.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleContactsLoaded\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleContactsLoaded(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:51\n                        \n                    \n\n\n            \n                \n                        Processes the loaded contacts by grouping them\nand selecting the current user's contact if present.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of contact objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCurrentUser\n                        \n                    \n                \n            \n            \n                \nisCurrentUser(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:133\n                        \n                    \n\n\n            \n                \n                        Checks if the given contact matches the current logged-in user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to compare with the current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact's email matches the user's email.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSelected\n                        \n                    \n                \n            \n            \n                \nisSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:151\n                        \n                    \n\n\n            \n                \n                        Determines if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:123\n                        \n                    \n\n\n            \n                \n                        Unsubscribes from all subscriptions to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Initializes the component by loading contacts,\ngrouping them by initial, identifying the current user,\nand handling errors and contact selection.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAddNewContact\n                        \n                    \n                \n            \n            \n                \nonAddNewContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:158\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the \"add contact\" form via the ContactService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelect\n                        \n                    \n                \n            \n            \n                \nonContactSelect(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:141\n                        \n                    \n\n\n            \n                \n                        Handles selection of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribeToContacts\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribeToContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:38\n                        \n                    \n\n\n            \n                \n                        Subscribes to the contact list, groups them by initial letter,\nand selects the current user’s contact if available.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:116\n                        \n                    \n\n            \n                \n                    - Manages contact data and selection.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        contactsSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:100\n                        \n                    \n\n            \n                \n                    The display name of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUserEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:95\n                        \n                    \n\n            \n                \n                    The email of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:85\n                        \n                    \n\n            \n                \n                    Holds the contacts grouped by the first letter of their name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyAsc\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:181\n                        \n                    \n\n            \n                \n                    Sorting helper for alphabetical keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedContact\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:90\n                        \n                    \n\n            \n                \n                    The currently selected contact (if any).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectionSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:103\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-contact-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './contact-list.component.html',\n  styleUrls: ['./contact-list.component.scss']\n})\n\nexport class ContactListComponent implements OnInit, OnDestroy {\n\n  /**\n  * Initializes the component by loading contacts,\n  * grouping them by initial, identifying the current user,\n  * and handling errors and contact selection.\n  */\n  ngOnInit(): void {\n    this.subscribeToContacts();\n    this.getCurrentUser();\n  }\n\n  /**\n   * Subscribes to the contact list, groups them by initial letter,\n   * and selects the current user’s contact if available.\n   */\n  private subscribeToContacts(): void {\n    this.contactsSubscription = this.contactService.getContacts().subscribe({\n      next: (contacts) => this.handleContactsLoaded(contacts),\n      error: (error) => this.handleContactsError(error),\n    });\n  }\n\n  /**\n   * Processes the loaded contacts by grouping them\n   * and selecting the current user's contact if present.\n   * \n   * @param contacts - The array of contact objects.\n   */\n  private handleContactsLoaded(contacts: Contact[]): void {\n    this.groupedContacts = this.groupByInitial(contacts);\n    if (this.currentUserEmail) {\n      const matchedContact = contacts.find(c => c.email === this.currentUserEmail);\n      if (matchedContact) {\n        this.onContactSelect(matchedContact);\n      }\n    }\n  }\n\n  /**\n   * Handles an error that occurred while loading contacts.\n   * \n   * @param error - The error object returned from the subscription.\n   */\n  private handleContactsError(error: any): void {\n    console.error('Error loading contacts:', error);\n  }\n\n  /**\n   * Identifying the current user to directly select this user in the contact list.\n   */\n  getCurrentUser() {\n    const user = this.authService.getCurrentUser();\n    this.currentUser = user?.displayName || null;\n    this.currentUserEmail = user?.email || null;\n    this.selectionSubscription = this.contactService.selectedContact$.subscribe(\n      contact => this.selectedContact = contact\n    );\n  }\n\n  /**\n   * Holds the contacts grouped by the first letter of their name.\n   */\n  groupedContacts: { [key: string]: Contact[] } = {};\n\n  /**\n   * The currently selected contact (if any).\n   */\n  selectedContact: Contact | null = null;\n\n  /**\n   * The email of the currently authenticated user.\n   */\n  currentUserEmail: string | null = null;\n\n  /**\n   * The display name of the currently authenticated user.\n   */\n  currentUser: string | null = null;\n\n  private contactsSubscription: Subscription = new Subscription();\n  private selectionSubscription: Subscription = new Subscription();\n\n  /**\n   * Emits an event when a contact is selected.\n   */\n  @Output() contactSelected = new EventEmitter();\n\n  /**\n   * Constructor injecting required services.\n   * @param contactService - Manages contact data and selection.\n   * @param authService - Provides the currently logged-in user's info.\n   */\n  constructor(\n    public contactService: ContactService,\n    private authService: AuthService\n  ) { }\n\n  /**\n   * Unsubscribes from all subscriptions to avoid memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.contactsSubscription.unsubscribe();\n    this.selectionSubscription.unsubscribe();\n  }\n\n  /**\n   * Checks if the given contact matches the current logged-in user.\n   * @param contact - The contact to compare with the current user.\n   * @returns True if the contact's email matches the user's email.\n   */\n  isCurrentUser(contact: Contact): boolean {\n    return typeof contact.email === 'string' && contact.email === this.currentUserEmail;\n  }\n\n  /**\n   * Handles selection of a contact.\n   * @param contact - The contact to select.\n   */\n  onContactSelect(contact: Contact): void {\n    this.contactService.selectContact(contact);\n    this.contactSelected.emit();\n  }\n\n  /**\n   * Determines if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected.\n   */\n  isSelected(contact: Contact): boolean {\n    return this.selectedContact?.id === contact.id;\n  }\n\n  /**\n   * Triggers the display of the \"add contact\" form via the ContactService.\n   */\n  onAddNewContact(): void {\n    this.contactService.showAddForm();\n  }\n\n  /**\n   * Groups contacts alphabetically by the first character of their name.\n   * @param contacts - The list of contacts to group.\n   * @returns An object with initials as keys and arrays of contacts as values.\n   */\n  groupByInitial(contacts: Contact[]): { [key: string]: Contact[] } {\n    const validContacts = contacts.filter(contact => contact && contact.name);\n    return validContacts.reduce((groups, contact) => {\n      const initial = contact.name.charAt(0).toUpperCase();\n      groups[initial] = groups[initial] || [];\n      groups[initial].push(contact);\n      groups[initial].sort((a, b) => a.name.localeCompare(b.name));\n      return groups;\n    }, {} as { [key: string]: Contact[] });\n  }\n\n  /**\n   * Sorting helper for alphabetical keys.\n   */\n  keyAsc = (a: any, b: any) => a.key.localeCompare(b.key);\n\n  /**\n   * Returns the initials of the given name using ContactService.\n   * @param name - The full name of the contact.\n   * @returns Initials string.\n   */\n  getInitials(name: string | undefined): string {\n    return this.contactService.getInitials(name);\n  }\n}\n\n    \n\n    \n        \n  \n    Add new contact\n  \n\n  \n    {{ group.key }}\n    \n      \n        {{ contactService.getInitials(contact?.name) }}\n      \n      Me\n      \n        \n          {{ contact?.name || \"Unbekannt\" }}\n        \n        {{ contact?.email || \"Keine E-Mail\" }}\n      \n    \n  \n\n\n\n  \n    \n  \n\n\n    \n\n    \n                \n                    ./contact-list.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.contact-list {\n  width: 100%;\n  max-width: 456px;\n  height: calc(100dvh - 140px);\n  max-height: none;\n  overflow-y: auto;\n  margin-top: -9px;\n  padding-bottom: 80px;\n  background-color: var(--background-light);\n  scrollbar-color: var(--background-default-dark) transparent;\n\n  .add-button {\n    @include btn;\n    @include btn-dark;\n    width: calc(100% - clamp(12px, 3vw, 24px));\n    max-width: 352px;\n    height: clamp(48px, 12vw, 56px);\n    margin-top: 22.5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: clamp(12px, 2.5vw, 16px);\n    transition: background-color 0.2s ease;\n\n    &::after {\n      content: \"\";\n      width: clamp(20px, 4vw, 24px);\n      height: clamp(20px, 4vw, 24px);\n      background-image: url(\"../../../../public/assets/img/svg/add-person.svg\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n  }\n\n  h4 {\n    margin-top: clamp(8px, 2vw, 16px);\n    font-family: \"Inter\", sans-serif;\n    font-weight: 400;\n    font-size: clamp(14px, 3vw, 20px);\n    color: #000000;\n    padding: clamp(8px, 1.5vw, 17px) clamp(12px, 3vw, 36px);\n    gap: 8px;\n    border-bottom: 1px solid var(--background-default-dark);\n    margin-bottom: clamp(4px, 1vw, 8px);\n    max-width: 352px;\n  }\n\n  .contact-entry {\n    display: flex;\n    align-items: center;\n    margin: clamp(4px, 1vw, 8px) 0;\n    padding: clamp(8px, 1.5vw, 15px) clamp(8px, 2vw, 24px);\n    gap: clamp(12px, 2vw, 24px);\n    flex-wrap: wrap;\n    position: relative;\n    cursor: pointer;\n    transition: background-color 0.2s;\n    border-radius: 10px;\n\n    &:hover {\n      background-color: #f5f5f5;\n    }\n\n    &.selected {\n      background-color: #2a3647;\n\n      .info .name {\n        color: #ffffff;\n      }\n\n      .avatar {\n        border: 2px solid #ffffff;\n      }\n    }\n\n    .active-user {\n      @include inter400-fs12;\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      color: var(--text-color-dark);\n      border-radius: 50%;\n      background-color: var(--background-light);\n      border: 2px solid var(--text-color-error);\n      padding: 4px;\n    }\n\n    .avatar {\n      width: 32px;\n      height: 32px;\n      border-radius: 45px;\n      background-color: #ccc;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-right: 10px;\n      font-family: \"Inter\", sans-serif;\n      font-weight: 400;\n      font-size: 12px;\n      color: #ffffff;\n      border: 2px solid transparent;\n      transition: border 0.2s ease;\n    }\n\n    .info {\n      flex: 1;\n      min-width: 0;\n      \n      .name {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(14px, 3vw, 20px);\n        color: #000000;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        margin-bottom: 2px;\n      }\n\n      .email {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(12px, 2.5vw, 16px);\n        color: #007cee;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n  }\n}\n\n@media(max-width: 1000px) {\n  .contact-list {\n    height: calc(100dvh - 190px);\n  }\n}\n\n@media (max-width: 780px) {\n  .contact-list {\n    width: 100%;\n    max-width: none;\n    margin: 0;\n    &::-webkit-scrollbar {\n      width: 4px;\n    }\n    &::-webkit-scrollbar-track {\n      background: transparent;\n    }\n    &::-webkit-scrollbar-thumb {\n      background-color: --background-default-dark;\n      border-radius: 4px;\n    }\n    \n    .add-button {\n      display: none;\n    }\n    \n    h4 {\n      max-width: none;\n      width: 100%;\n    }\n    \n    .contact-entry {\n      width: 100%;\n      max-width: none;\n    }\n  }\n  \n  .fab-container {\n    display: block !important;\n    bottom: 100px !important;\n    right: 20px !important;\n  }\n  \n  .fab {\n    width: 56px;\n    height: 56px;\n    \n    img {\n      width: 30px;\n      height: 21px;\n    }\n  }\n}\n\n.fab-container {\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n  z-index: 1000;\n  display: none;\n}\n\n.fab {\n  width: 56px;\n  height: 56px;\n  border-radius: 46px;\n  background-color: #2a3647;\n  border: none;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: #29ABE2;\n    border: none;\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);\n    transform: scale(1.1);\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  img {\n    width: 30px;\n    height: 21px;\n    filter: brightness(0) invert(1);\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Add new contact        {{ group.key }}                  {{ contactService.getInitials(contact?.name) }}            Me                        {{ contact?.name || \"Unbekannt\" }}                {{ contact?.email || \"Keine E-Mail\" }}                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactManager.html":{"url":"injectables/ContactManager.html","title":"injectable - ContactManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/contact-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                ContactManager handles all contact-related operations for the AddTaskComponent.\nThis includes contact selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                categoryManager\n                            \n                            \n                                    Private\n                                selectedContacts\n                            \n                            \n                                    Private\n                                showContactDropdown\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContactInitials\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                getSelectedContacts\n                            \n                            \n                                getSelectedContactsText\n                            \n                            \n                                getShowContactDropdown\n                            \n                            \n                                isContactSelected\n                            \n                            \n                                selectContact\n                            \n                            \n                                setSelectedContacts\n                            \n                            \n                                setShowContactDropdown\n                            \n                            \n                                toggleDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, categoryManager: CategoryManager)\n                    \n                \n                        \n                            \n                                Defined in src/app/add-task/contact-manager.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryManager\n                                                  \n                                                        \n                                                                        CategoryManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:120\n                        \n                    \n\n\n            \n                \n                        Clears all selected contacts and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:104\n                        \n                    \n\n\n            \n                \n                        Returns the color for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get color for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactInitials\n                        \n                    \n                \n            \n            \n                \ngetContactInitials(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:95\n                        \n                    \n\n\n            \n                \n                        Returns the initials for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get initials for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's initials.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames(remainingContacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:113\n                        \n                    \n\n\n            \n                \n                        Returns a comma-separated string of remaining contact names.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                remainingContacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe remaining contacts to display.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContacts\n                        \n                    \n                \n            \n            \n                \ngetSelectedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:25\n                        \n                    \n\n\n            \n                \n                        Gets all selected contacts\n\n\n                        \n                            Returns :         Contact[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContactsText\n                        \n                    \n                \n            \n            \n                \ngetSelectedContactsText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:86\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for selected contacts.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The text to display in the contact selector.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowContactDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowContactDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:42\n                        \n                    \n\n\n            \n                \n                        Gets the contact dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isContactSelected\n                        \n                    \n                \n            \n            \n                \nisContactSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Checks if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Toggles the selection state of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select or deselect.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedContacts\n                        \n                    \n                \n            \n            \n                \nsetSelectedContacts(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:32\n                        \n                    \n\n\n            \n                \n                        Sets the selected contacts array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowContactDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowContactDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:49\n                        \n                    \n\n\n            \n                \n                        Sets the contact dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Toggles the contact dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categoryManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryManager\n\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showContactDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Contact, ContactService } from '../services/contact.service';\nimport { CategoryManager } from './category-manager';\n\n/**\n * ContactManager handles all contact-related operations for the AddTaskComponent.\n * This includes contact selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ContactManager {\n  private selectedContacts: Contact[] = [];\n  private showContactDropdown: boolean = false;\n\n  constructor(\n    private contactService: ContactService,\n    public categoryManager: CategoryManager\n  ) {}\n\n  /**\n   * Gets all selected contacts\n   */\n  getSelectedContacts(): Contact[] {\n    return this.selectedContacts;\n  }\n\n  /**\n   * Sets the selected contacts array\n   */\n  setSelectedContacts(contacts: Contact[]): void {\n    const uniqueContacts = contacts.filter((contact, index, self) => \n      index === self.findIndex(c => c.id === contact.id)\n    );\n    this.selectedContacts = uniqueContacts;\n  }\n\n  /**\n   * Gets the contact dropdown visibility state\n   */\n  getShowContactDropdown(): boolean {\n    return this.showContactDropdown;\n  }\n\n  /**\n   * Sets the contact dropdown visibility state\n   */\n  setShowContactDropdown(value: boolean): void {\n    this.showContactDropdown = value;\n  }\n\n  /**\n   * Toggles the contact dropdown visibility.\n   */\n  toggleDropdown(): void {\n    this.showContactDropdown = !this.showContactDropdown;\n  }\n\n  /**\n   * Toggles the selection state of a contact.\n   * @param contact - The contact to select or deselect.\n   */\n  selectContact(contact: Contact): void {\n    const index = this.selectedContacts.findIndex(c => c.id === contact.id);\n    if (index === -1) {\n      this.selectedContacts.push(contact);\n    } else {\n      this.selectedContacts.splice(index, 1);\n    }\n  }\n\n  /**\n   * Checks if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected, false otherwise.\n   */\n  isContactSelected(contact: Contact): boolean {\n    return this.selectedContacts.some(c => c.id === contact.id);\n  }\n\n  /**\n   * Returns the text to display for selected contacts.\n   * @returns The text to display in the contact selector.\n   */\n  getSelectedContactsText(): string {\n    return 'Select contacts to assign';\n  }\n\n  /**\n   * Returns the initials for a contact.\n   * @param contact - The contact to get initials for.\n   * @returns The contact's initials.\n   */\n  getContactInitials(contact: Contact): string {\n    return this.contactService.getInitials(contact.name);\n  }\n\n  /**\n   * Returns the color for a contact.\n   * @param contact - The contact to get color for.\n   * @returns The contact's color.\n   */\n  getContactColor(contact: Contact): string {\n    return this.contactService.getContactColor(contact.name);\n  }\n\n  /**\n   * Returns a comma-separated string of remaining contact names.\n   * @param remainingContacts - The remaining contacts to display.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(remainingContacts: Contact[]): string {\n    return remainingContacts.map((contact) => contact.name).join(', ');\n  }\n\n  /**\n   * Clears all selected contacts and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedContacts = [];\n    this.showContactDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactService.html":{"url":"injectables/ContactService.html","title":"injectable - ContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable service for managing contact data in Firestore.\nProvides reactive streams for selected contact, form visibility, and editing state.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                avatarColors\n                            \n                            \n                                    Public\n                                editContact$\n                            \n                            \n                                    Private\n                                editContactSubject\n                            \n                            \n                                    Public\n                                selectedContact$\n                            \n                            \n                                    Private\n                                selectedContactSubject\n                            \n                            \n                                    Public\n                                showForm$\n                            \n                            \n                                    Private\n                                showFormSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addContact\n                            \n                            \n                                clearSelection\n                            \n                            \n                                    Async\n                                deleteContact\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                    Async\n                                getContactById\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContacts\n                            \n                            \n                                getContactsRef\n                            \n                            \n                                getInitials\n                            \n                            \n                                getSingleContactsRef\n                            \n                            \n                                hideForm\n                            \n                            \n                                selectContact\n                            \n                            \n                                showAddForm\n                            \n                            \n                                showEditForm\n                            \n                            \n                                    Async\n                                updateContact\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/contact.service.ts:73\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    addContact(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Adds a new contact to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The added contact with its generated ID or null if failed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearSelection\n                        \n                    \n                \n            \n            \n                \nclearSelection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Clears the currently selected contact.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteContact(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Deletes a contact from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Returns a plain JSON object with only the allowed contact fields.\nThis is used to avoid including undefined or extra properties when updating Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact object to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Partial\n\n                        \n                            \n                                A JSON object containing name, email, and phone.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactById(contactId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:253\n                        \n                    \n\n\n            \n                \n                        Fetches a single contact by its Firestore document ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise resolving to the contact object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contactName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:226\n                        \n                    \n\n\n            \n                \n                        Generates a consistent avatar color for a contact based on their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact’s name used to calculate a hash.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A hexadecimal color string from the avatarColors array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContacts\n                        \n                    \n                \n            \n            \n                \ngetContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Returns an observable stream of all contacts from Firestore.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable of Contact array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactsRef\n                        \n                    \n                \n            \n            \n                \ngetContactsRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to the contacts collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:240\n                        \n                    \n\n\n            \n                \n                        Extracts the initials from a contact name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string with one or two uppercase initials, or '?' if the name is invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleContactsRef\n                        \n                    \n                \n            \n            \n                \ngetSingleContactsRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to a single contact document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the contact document.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideForm\n                        \n                    \n                \n            \n            \n                \nhideForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Hides the contact form and clears the edit state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Emits a contact to the selected contact observable.\nUsed to show the contact details in the UI.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showAddForm\n                        \n                    \n                \n            \n            \n                \nshowAddForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:187\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the add contact form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEditForm\n                        \n                    \n                \n            \n            \n                \nshowEditForm(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:196\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the edit contact form with a prefilled contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to edit.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateContact(docId: string, updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Updates an existing contact in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to update.\n\n\n                                            \n                                        \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated contact data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        avatarColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:67\n                        \n                    \n\n            \n                \n                    Preset avatar colors for visual identification\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        editContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.editContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:65\n                        \n                    \n\n            \n                \n                    Observable for the contact being edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:63\n                        \n                    \n\n            \n                \n                    Currently selected contact to be edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectedContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.selectedContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:57\n                        \n                    \n\n            \n                \n                    Observable for the selected contact\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:55\n                        \n                    \n\n            \n                \n                    Currently selected contact (for viewing or interaction)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.showFormSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:61\n                        \n                    \n\n            \n                \n                    Observable for contact form visibility\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showFormSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:59\n                        \n                    \n\n            \n                \n                    Whether the contact form should be displayed\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Updates an existing contact in Firestore.\n   *\n   * @param docId - The Firestore document ID of the contact to update.\n   * @param updatedContact - The updated contact data.\n   */\n  async updateContact(docId: string, updatedContact: Contact): Promise {\n    let docRef = this.getSingleContactsRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n      console.error(err);\n    });\n  }\n\n  /**\n   * Returns a plain JSON object with only the allowed contact fields.\n   * This is used to avoid including undefined or extra properties when updating Firestore.\n   *\n   * @param updatedContact - The contact object to sanitize.\n   * @returns A JSON object containing name, email, and phone.\n   */\n  getCleanJson(updatedContact: Contact): Partial {\n    return {\n      name: updatedContact.name,\n      email: updatedContact.email,\n      phone: updatedContact.phone,\n    };\n  }\n\n  /**\n   * Emits a contact to the selected contact observable.\n   * Used to show the contact details in the UI.\n   *\n   * @param contact - The contact to select.\n   */\n  selectContact(contact: Contact): void {\n    this.selectedContactSubject.next(contact);\n  }\n\n  /**\n   * Clears the currently selected contact.\n   */\n  clearSelection(): void {\n    this.selectedContactSubject.next(null);\n  }\n\n  /**\n   * Triggers the display of the add contact form.\n   */\n  showAddForm(): void {\n    this.showFormSubject.next(true);\n  }\n\n  /**\n   * Triggers the display of the edit contact form with a prefilled contact.\n   *\n   * @param contact - The contact to edit.\n   */\n  showEditForm(contact: Contact): void {\n    this.editContactSubject.next(contact);\n    this.showFormSubject.next(true);\n  }\n\n  /**\n   * Hides the contact form and clears the edit state.\n   */\n  hideForm(): void {\n    this.showFormSubject.next(false);\n    this.editContactSubject.next(null);\n  }\n\n  /**\n   * Deletes a contact from Firestore.\n   *\n   * @param docId - The Firestore document ID of the contact to delete.\n   */\n  async deleteContact(docId: string): Promise {\n    await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  /**\n   * Generates a consistent avatar color for a contact based on their name.\n   *\n   * @param contactName - The contact’s name used to calculate a hash.\n   * @returns A hexadecimal color string from the avatarColors array.\n   */\n  getContactColor(contactName: string): string {\n    let hash = 0;\n    for (let i = 0; i  {\n    const contactRef = this.getSingleContactsRef(contactId);\n    return getDoc(contactRef).then(snapshot => {\n      if (snapshot.exists()) {\n        return { id: snapshot.id, ...snapshot.data() } as Contact;\n      }\n      return null;\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactsComponent.html":{"url":"components/ContactsComponent.html","title":"component - ContactsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contacts.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contacts\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                ContactListComponent\n                                ContactDetailsComponent\n                                ContactFormComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contacts.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contacts.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                animationDirection\n                            \n                            \n                                backgroundVisible\n                            \n                            \n                                showContactDetails\n                            \n                            \n                                showForm$\n                            \n                            \n                                toastAnimationState\n                            \n                            \n                                toastMessageVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToList\n                            \n                            \n                                onContactAdded\n                            \n                            \n                                onContactSelected\n                            \n                            \n                                onNoContactVisible\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                removeBackground\n                            \n                            \n                                setAnimationDirection\n                            \n                            \n                                startMessageAnimation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contacts.component.ts:79\n                            \n                        \n\n                \n                    \n                            Initializes the component and subscribes to the form visibility observable.\nAlso sets up the resize event listener to dynamically adjust the animation direction.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service that manages contact data and UI state.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:94\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: Sets initial animation direction and attaches resize listener.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToList\n                        \n                    \n                \n            \n            \n                \nonBackToList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Handles the back button in mobile view, hiding the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactAdded\n                        \n                    \n                \n            \n            \n                \nonContactAdded(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Called when a new contact is added from the form.\nIt selects the new contact, shows the contact detail view, and triggers a toast.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly added contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelected\n                        \n                    \n                \n            \n            \n                \nonContactSelected()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNoContactVisible\n                        \n                    \n                \n            \n            \n                \nonNoContactVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Hides the contact detail view if no contact is selected and the screen is small.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Called when the slide-in animation of an overlay is completed.\nDelays showing the background overlay to prevent flickering.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe animation transition event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Handles the event emitted by the contact form when it is closed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating the close state (e.g., 'closed').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Determines the animation direction based on screen width.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current window width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startMessageAnimation\n                        \n                    \n                \n            \n            \n                \nstartMessageAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:124\n                        \n                    \n\n\n            \n                \n                        Starts the toast message animation and automatically hides it after 3 seconds.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:54\n                        \n                    \n\n            \n                \n                    Current direction of the animation for overlay transitions.\nIt switches between 'right' for desktop and 'bottom' for mobile views.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:69\n                        \n                    \n\n            \n                \n                    Whether the background overlay is visible behind the form or detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContactDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:79\n                        \n                    \n\n            \n                \n                    Controls whether the contact detail view is visible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:74\n                        \n                    \n\n            \n                \n                    Observable that determines whether the contact form should be shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastAnimationState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\" | \"void\"\n\n                    \n                \n                \n                    \n                        Default value : 'void'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:64\n                        \n                    \n\n            \n                \n                    Controls the current animation state of the toast.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastMessageVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:59\n                        \n                    \n\n            \n                \n                    Whether the toast message is currently visible.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ContactListComponent } from './contact-list/contact-list.component';\nimport { ContactDetailsComponent } from './contact-details/contact-details.component';\nimport { ContactFormComponent } from './contact-form/contact-form.component';\nimport { ContactService, Contact } from './../services/contact.service';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { trigger, style, transition, animate, AnimationEvent } from '@angular/animations';\n\n@Component({\n  selector: 'app-contacts',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ContactListComponent,\n    ContactDetailsComponent,\n    ContactFormComponent,\n  ],\n  templateUrl: './contacts.component.html',\n  styleUrl: './contacts.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition('void => right', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateX(0)', opacity: 1 })),\n      ]),\n      transition('right => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateX(100%)', opacity: 0 })),\n      ]),\n      transition('void => bottom', [\n        style({ transform: 'translateY(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateY(0)', opacity: 1 })),\n      ]),\n      transition('bottom => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateY(100%)', opacity: 0 })),\n      ]),\n    ]),\n  ],\n})\n\nexport class ContactsComponent {\n\n  /**\n   * Current direction of the animation for overlay transitions.\n   * It switches between 'right' for desktop and 'bottom' for mobile views.\n   */\n  animationDirection: 'right' | 'bottom' = 'right';\n\n  /**\n   * Whether the toast message is currently visible.\n   */\n  toastMessageVisible = false;\n\n  /**\n   * Controls the current animation state of the toast.\n   */\n  toastAnimationState: 'right' | 'bottom' | 'void' = 'void';\n\n  /**\n   * Whether the background overlay is visible behind the form or detail view.\n   */\n  backgroundVisible = false;\n\n  /**\n   * Observable that determines whether the contact form should be shown.\n   */\n  showForm$: Observable;\n\n  /**\n   * Controls whether the contact detail view is visible.\n   */\n  showContactDetails = false;\n\n  /**\n   * Initializes the component and subscribes to the form visibility observable.\n   * Also sets up the resize event listener to dynamically adjust the animation direction.\n   * \n   * @param contactService - The service that manages contact data and UI state.\n   */\n  constructor(private contactService: ContactService) {\n    this.showForm$ = this.contactService.showForm$;\n  }\n\n  /**\n   * Lifecycle hook: Sets initial animation direction and attaches resize listener.\n   */\n  ngOnInit() {\n    this.setAnimationDirection(window.innerWidth);\n    window.addEventListener('resize', () => {\n      this.setAnimationDirection(window.innerWidth);\n    });\n  }\n\n  /**\n   * Called when a new contact is added from the form.\n   * It selects the new contact, shows the contact detail view, and triggers a toast.\n   * \n   * @param newContact - The newly added contact.\n   */\n  onContactAdded(newContact: Contact) {\n    this.contactService.selectContact(newContact);\n    this.onContactSelected();\n    this.startMessageAnimation();\n  }\n\n  /**\n   * Determines the animation direction based on screen width.\n   * @param width - The current window width.\n   */\n  setAnimationDirection(width: number) {\n    this.animationDirection = width  {\n      this.toastMessageVisible = false;\n      this.toastAnimationState = 'void';\n    }, 3000);\n  }\n\n  /**\n   * Handles the event emitted by the contact form when it is closed.\n   * @param event - A string indicating the close state (e.g., 'closed').\n   */\n  removeBackground(event: string) {\n    if (event === 'closed') {\n      this.backgroundVisible = false;\n    }\n  }\n\n  /**\n   * Called when the slide-in animation of an overlay is completed.\n   * Delays showing the background overlay to prevent flickering.\n   * \n   * @param event - The animation transition event.\n   */\n  onOverlayAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'right' || event.toState === 'bottom') {\n      setTimeout(() => {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Handles the back button in mobile view, hiding the contact detail component.\n   */\n  onBackToList() {\n    this.showContactDetails = false;\n  }\n\n  /**\n   * Triggers the display of the contact detail component.\n   */\n  onContactSelected() {\n    this.showContactDetails = true;\n  }\n\n  /**\n   * Hides the contact detail view if no contact is selected and the screen is small.\n   */\n  onNoContactVisible() {\n    if (window.innerWidth \n    \n\n    \n        \n    \n     \n    \n     \n      \n    \n\n\n\n  \n    \n  \n\n\n\n  Contact successfully created\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                      Contact successfully created'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DragDropManager.html":{"url":"injectables/DragDropManager.html","title":"injectable - DragDropManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DragDropManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/drag-drop-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                DragDropManager handles all drag-and-drop operations for the BoardComponent.\nThis includes drag delays, drop handling, auto-scrolling, and task status updates.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                getDragDelay\n                            \n                            \n                                    Private\n                                getDropTargetStatus\n                            \n                            \n                                handleDragMove\n                            \n                            \n                                handleDrop\n                            \n                            \n                                    Private\n                                reorderTasks\n                            \n                            \n                                    Private\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/drag-drop-manager.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeTaskStatus\n                        \n                    \n                \n            \n            \n                \nchangeTaskStatus(taskId: string, status: Task, taskList: Task[], reloadCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:125\n                        \n                    \n\n\n            \n                \n                        Updates the status of a task and persists the change via the task service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new status for the task.\n\n\n                                            \n                                        \n                                        \n                                                taskList\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current task list to find the task in.\n\n\n                                            \n                                        \n                                        \n                                                reloadCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to reload tasks after update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDragDelay\n                        \n                    \n                \n            \n            \n                \ngetDragDelay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:22\n                        \n                    \n\n\n            \n                \n                        Returns the delay for starting a drag action based on screen width.\nPrevents accidental drags on small screens.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                Drag delay in milliseconds.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getDropTargetStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDropTargetStatus(containerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:50\n                        \n                    \n\n\n            \n                \n                        Determines the new task status based on the drop container ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                containerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the container where the task was dropped.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :      | undefined\n\n                        \n                            \n                                The corresponding task status, or undefined if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDragMove\n                        \n                    \n                \n            \n            \n                \nhandleDragMove(event: CdkDragMove, scrollSection: ElementRef)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:103\n                        \n                    \n\n\n            \n                \n                        Handles automatic scrolling while dragging near the top or bottom edge\nof the scrollable task section.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        CdkDragMove\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragMove event containing the pointer position.\n\n\n                                            \n                                        \n                                        \n                                                scrollSection\n                                            \n                                                        ElementRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe scrollable section element reference.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDrop\n                        \n                    \n                \n            \n            \n                \nhandleDrop(event: CdkDragDrop, updateCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:33\n                        \n                    \n\n\n            \n                \n                        Handles drag-and-drop actions for tasks using the Angular CDK.\nUpdates the task's status and reorders task lists accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CdkDragDrop\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragDrop event containing task data and drop context.\n\n\n                                            \n                                        \n                                        \n                                                updateCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to update task lists after drop.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        reorderTasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    reorderTasks(event: CdkDragDrop)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:65\n                        \n                    \n\n\n            \n                \n                        Reorders tasks in the same or across different containers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CdkDragDrop\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragDrop event object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateTaskStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTaskStatus(task: Task, newStatus: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:89\n                        \n                    \n\n\n            \n                \n                        Updates the status of a given task and persists the change.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object to update.\n\n\n                                            \n                                        \n                                        \n                                                newStatus\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new status to assign.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ElementRef } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem, CdkDragMove } from '@angular/cdk/drag-drop';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * DragDropManager handles all drag-and-drop operations for the BoardComponent.\n * This includes drag delays, drop handling, auto-scrolling, and task status updates.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DragDropManager {\n  constructor(private taskService: TaskService) { }\n\n  /**\n   * Returns the delay for starting a drag action based on screen width.\n   * Prevents accidental drags on small screens.\n   *\n   * @returns Drag delay in milliseconds.\n   */\n  getDragDelay(): number {\n    return window.innerWidth , updateCallback: () => void): void {\n    const task = event.item.data as Task;\n    const newStatus = this.getDropTargetStatus(event.container.id);\n    if (!newStatus) return;\n    this.reorderTasks(event);\n    if (task.id && task.status !== newStatus) {\n      this.updateTaskStatus(task, newStatus);\n    }\n    updateCallback();\n  }\n\n  /**\n   * Determines the new task status based on the drop container ID.\n   *\n   * @param containerId - The ID of the container where the task was dropped.\n   * @returns The corresponding task status, or undefined if not found.\n   */\n  private getDropTargetStatus(containerId: string): Task['status'] | undefined {\n    const statusMap: Record = {\n      todoList: 'to-do',\n      inprogressList: 'in-progress',\n      awaitfeedbackList: 'await-feedback',\n      doneList: 'done',\n    };\n    return statusMap[containerId];\n  }\n\n  /**\n   * Reorders tasks in the same or across different containers.\n   *\n   * @param event - The CdkDragDrop event object.\n   */\n  private reorderTasks(event: CdkDragDrop): void {\n    const sameContainer = event.previousContainer === event.container;\n    if (sameContainer) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    }\n  }\n\n  /**\n   * Updates the status of a given task and persists the change.\n   *\n   * @param task - The task object to update.\n   * @param newStatus - The new status to assign.\n   */\n  private updateTaskStatus(task: Task, newStatus: Task['status']): void {\n    const updatedTask: Task = { ...task, status: newStatus };\n    this.taskService.updateTask(task.id!, updatedTask).catch((error) => {\n      console.error('Error updating task status:', error);\n    });\n  }\n\n  /**\n   * Handles automatic scrolling while dragging near the top or bottom edge\n   * of the scrollable task section.\n   *\n   * @param event - The CdkDragMove event containing the pointer position.\n   * @param scrollSection - The scrollable section element reference.\n   */\n  handleDragMove(event: CdkDragMove, scrollSection: ElementRef): void {\n    const mouseY = event.pointerPosition.y;\n    const section = scrollSection?.nativeElement;\n    if (!section) return;\n    const { top, bottom } = section.getBoundingClientRect();\n    const threshold = 100;\n    const scrollStep = 30;\n    if (mouseY  void\n  ): void {\n    const task = taskList.find((t) => t.id === taskId);\n    if (!task || task.status === status) return;\n    const updatedTask = { ...task, status };\n    this.taskService.updateTask(taskId, updatedTask).then(reloadCallback);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirestoreTimestamp.html":{"url":"interfaces/FirestoreTimestamp.html","title":"interface - FirestoreTimestamp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FirestoreTimestamp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/summary/summary.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toDate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toDate\n                        \n                    \n                \n            \n            \n                \ntoDate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\n\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showAnimatedGreeting();\n      } else {\n        this.showGreeting = false;\n      }\n    });\n  }\n\n  /**\n   * Animates a greeting sequence for mobile devices.\n   * Hides the greeting after the animation and stores the display state in sessionStorage.\n   */\n  private showAnimatedGreeting(): void {\n    this.showGreeting = true;\n    this.greetingState = 'start';\n    setTimeout(() => {\n      this.greetingState = 'moved';\n      setTimeout(() => {\n        this.showGreeting = false;\n        sessionStorage.setItem('greetingShown', 'true');\n      }, 2000);\n    }, 500);\n  }\n\n  /**\n   * Subscribes to task data and processes statistics and deadline information.\n   */\n  private loadAndProcessTasks(): void {\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n      this.setTaskCounts(tasks);\n      this.setNextDeadline(tasks);\n    });\n  }\n\n  /**\n   * Sets the count of tasks by specific statuses and urgency.\n   * \n   * @param tasks - Array of task objects to be analyzed.\n   */\n  private setTaskCounts(tasks: Task[]): void {\n    this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n    this.doneCount = this.countTasksByStatus(tasks, 'done');\n    this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n    this.awaitingFeedbackCount = this.countTasksByStatus(tasks, 'await-feedback');\n    this.nextDeadlineCount = tasks.filter((t) => t.priority === 'urgent').length;\n  }\n\n  /**\n   * Filters tasks to only include those with a valid future date and not marked as 'done'.\n   * Parses the date string into a Date object.\n   * \n   * @param tasks - Array of task objects.\n   * @param parseDate - A function that parses a date string into a Date object.\n   * @returns An array of tasks with a valid future date, each including a `dateObj` field.\n   */\n  private getFutureTasksWithDateObj(tasks: Task[], parseDate: (date: string) => Date | null): (Task & { dateObj: Date })[] {\n    const now = new Date();\n    return tasks\n    .filter((t) => t.date && t.status !== 'done')\n    .map((t) => {\n      const dateObj = this.parseDate(t.date!);\n      return { ...t, dateObj };\n    })\n    .filter((t): t is Task & { dateObj: Date } => !!t.dateObj && t.dateObj > now);\n  }\n\n  /**\n   * Returns the earliest date from an array of tasks with valid date objects.\n   * \n   * @param tasks - Array of tasks containing a `dateObj` property.\n   * @returns The earliest Date object, or null if the array is empty.\n   */\n  private getEarliestDate(tasks: (Task & { dateObj: Date })[]): Date | null {\n    if (tasks.length === 0) return null;\n    tasks.sort((a, b) => a.dateObj.getTime() - b.dateObj.getTime());\n    return tasks[0].dateObj;\n  }\n\n  /**\n   * Determines and sets the next upcoming deadline from the list of tasks.\n   * \n   * @param tasks - Array of task objects.\n   */\n  private setNextDeadline(tasks: Task[]): void {\n    const futureTasks = this.getFutureTasksWithDateObj(tasks, this.parseDate.bind(this));\n    this.nextDeadlineDate = this.getEarliestDate(futureTasks);\n  }\n\n  /**\n   * Converts a date value of various possible formats into a JavaScript Date object.\n   * \n   * @param date - Date input which could be a string, number, Date, or Firestore timestamp.\n   * @returns A valid Date object or null if conversion is not possible.\n   */\n  private parseDate(date: any): Date | null {\n    if (date instanceof Date) return date;\n    if (this.isFirestoreTimestamp(date)) return date.toDate();\n    if (typeof date === 'string' || typeof date === 'number') return new Date(date);\n    return null;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/footer/footer.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n\n            \n                styleUrl\n                ./footer.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-footer',\n  imports: [ RouterModule ],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss'\n})\n\nexport class FooterComponent {}\n\n    \n\n    \n        \n    \n        \n            Privacy Policy\n        \n        \n            Legal notice\n        \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Privacy Policy                            Legal notice                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormData.html":{"url":"interfaces/FormData.html","title":"interface - FormData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/form-validator.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            dueDate\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dueDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dueDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { CategoryManager } from './category-manager';\n\nexport interface FormData {\n  title: string;\n  description: string;\n  dueDate: string;\n}\n\nexport interface ValidationErrors {\n  showTitleError: boolean;\n  showDateError: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FormValidatorService {\n  \n  /**\n   * Validates all form fields and returns validation errors.\n   */\n  validateForm(formData: FormData, categoryManager: CategoryManager): ValidationErrors {\n    return {\n      showTitleError: this.validateTitle(formData.title),\n      showDateError: this.validateDueDate(formData.dueDate)\n    };\n  }\n\n  /**\n   * Checks if form has any validation errors.\n   */\n  hasFormErrors(formData: FormData, categoryManager: CategoryManager): boolean {\n    const titleError = this.validateTitle(formData.title);\n    const categoryError = this.validateCategory(categoryManager);\n    const dateError = this.validateDueDate(formData.dueDate);\n    \n    categoryManager.showCategoryError = categoryError;\n    return titleError || categoryError || dateError;\n  }\n\n  private validateTitle(title: string): boolean {\n    return !title.trim();\n  }\n\n  private validateCategory(categoryManager: CategoryManager): boolean {\n    return !categoryManager.hasSelectedCategory();\n  }\n\n  private validateDueDate(dueDate: string): boolean {\n    return !dueDate;\n  }\n\n  /**\n   * Returns today's date in ISO format for date input validation.\n   */\n  getTodayDate(): string {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormData-1.html":{"url":"interfaces/FormData-1.html","title":"interface - FormData-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/task-data.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            dueDate\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dueDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dueDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Contact } from '../services/contact.service';\nimport { Task } from '../services/task.service';\nimport { ContactManager } from './contact-manager';\nimport { CategoryManager } from './category-manager';\nimport { PriorityManager } from './priority-manager';\nimport { SubtaskManager } from './subtask-manager';\n\nexport interface FormData {\n  title: string;\n  description: string;\n  dueDate: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskDataService {\n\n  /**\n   * Populates form and managers with data from an existing task.\n   * Returns the original task status.\n   */\n  async populateFromTask(\n    task: any,\n    formData: FormData,\n    priorityManager: PriorityManager,\n    contactManager: ContactManager,\n    subtaskManager: SubtaskManager,\n    contacts: Contact[]\n  ): Promise {\n    this.setBasicFormData(task, formData);\n    this.setDueDate(task.date, formData);\n    priorityManager.setPriorityAndCategory(task);\n    this.setAssignedContacts(task.assignedTo, contactManager, contacts);\n    if (task.id) {\n      subtaskManager.loadAndSetSubtasks(task.id);\n    }\n    return task.status || 'to-do';\n  }\n\n  /**\n   * Builds a task object from current form and manager states.\n   */\n  buildTask(\n    formData: FormData,\n    status: string,\n    priorityManager: PriorityManager,\n    contactManager: ContactManager,\n    categoryManager: CategoryManager,\n    id?: string\n  ): Task {\n    const uniqueContactIds = this.getUniqueAssignedContactIds(contactManager);\n    const task: any = {\n      title: formData.title.trim(),\n      description: formData.description?.trim() || '',\n      date: new Date(formData.dueDate),\n      priority: priorityManager.selectedPriority as 'low' | 'medium' | 'urgent',\n      status,\n      assignedTo: uniqueContactIds,\n      category: categoryManager.getSelectedCategory() as 'technical' | 'user story'\n    };\n    if (id) {\n      task.id = id;\n    }\n    return task as Task;\n  }\n\n  private setBasicFormData(task: any, formData: FormData): void {\n    formData.title = task.title || '';\n    formData.description = task.description || '';\n  }\n\n  private setDueDate(date: any, formData: FormData): void {\n    if (!date) return;\n    let dateValue: Date;\n    if (date.toDate) {\n      dateValue = date.toDate();\n    } else if (date instanceof Date) {\n      dateValue = date;\n    } else {\n      dateValue = new Date(date);\n    }\n    formData.dueDate = dateValue.toISOString().split('T')[0];\n  }\n\n  private setAssignedContacts(assignedToIds: string[], contactManager: ContactManager, contacts: Contact[]): void {\n    if (!assignedToIds || assignedToIds.length === 0) return;\n    const selectedContacts = contacts\n      .filter(contact => contact.id !== undefined)\n      .filter(contact => assignedToIds.includes(contact.id as string));\n    contactManager.setSelectedContacts(selectedContacts);\n  }\n  \n  private getUniqueAssignedContactIds(contactManager: ContactManager): string[] {\n    const contacts = contactManager.getSelectedContacts();\n    return [...new Set(contacts.map(c => c.id).filter(id => id !== undefined))] as string[];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FormValidatorService.html":{"url":"injectables/FormValidatorService.html","title":"injectable - FormValidatorService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FormValidatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/form-validator.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTodayDate\n                            \n                            \n                                hasFormErrors\n                            \n                            \n                                    Private\n                                validateCategory\n                            \n                            \n                                    Private\n                                validateDueDate\n                            \n                            \n                                validateForm\n                            \n                            \n                                    Private\n                                validateTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getTodayDate\n                        \n                    \n                \n            \n            \n                \ngetTodayDate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/form-validator.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Returns today's date in ISO format for date input validation.\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasFormErrors\n                        \n                    \n                \n            \n            \n                \nhasFormErrors(formData: FormData, categoryManager: CategoryManager)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/form-validator.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Checks if form has any validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                formData\n                                            \n                                                            FormData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                categoryManager\n                                            \n                                                            CategoryManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateCategory(categoryManager: CategoryManager)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/form-validator.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryManager\n                                            \n                                                            CategoryManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateDueDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateDueDate(dueDate: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/form-validator.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dueDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateForm\n                        \n                    \n                \n            \n            \n                \nvalidateForm(formData: FormData, categoryManager: CategoryManager)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/form-validator.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Validates all form fields and returns validation errors.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                formData\n                                            \n                                                            FormData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                categoryManager\n                                            \n                                                            CategoryManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationErrors\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateTitle\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTitle(title: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/form-validator.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { CategoryManager } from './category-manager';\n\nexport interface FormData {\n  title: string;\n  description: string;\n  dueDate: string;\n}\n\nexport interface ValidationErrors {\n  showTitleError: boolean;\n  showDateError: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FormValidatorService {\n  \n  /**\n   * Validates all form fields and returns validation errors.\n   */\n  validateForm(formData: FormData, categoryManager: CategoryManager): ValidationErrors {\n    return {\n      showTitleError: this.validateTitle(formData.title),\n      showDateError: this.validateDueDate(formData.dueDate)\n    };\n  }\n\n  /**\n   * Checks if form has any validation errors.\n   */\n  hasFormErrors(formData: FormData, categoryManager: CategoryManager): boolean {\n    const titleError = this.validateTitle(formData.title);\n    const categoryError = this.validateCategory(categoryManager);\n    const dateError = this.validateDueDate(formData.dueDate);\n    \n    categoryManager.showCategoryError = categoryError;\n    return titleError || categoryError || dateError;\n  }\n\n  private validateTitle(title: string): boolean {\n    return !title.trim();\n  }\n\n  private validateCategory(categoryManager: CategoryManager): boolean {\n    return !categoryManager.hasSelectedCategory();\n  }\n\n  private validateDueDate(dueDate: string): boolean {\n    return !dueDate;\n  }\n\n  /**\n   * Returns today's date in ISO format for date input validation.\n   */\n  getTodayDate(): string {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/header/header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isMobile\n                            \n                            \n                                menuOpen\n                            \n                            \n                                    \n                                menuRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUserInitials\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/header/header.component.ts:61\n                            \n                        \n\n                \n                    \n                            Initializes the header component and injects the authentication service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service responsible for user authentication.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:76\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUserInitials\n                        \n                    \n                \n            \n            \n                \ngetCurrentUserInitials()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Returns the initials of the current user (e.g. \"JD\" for \"John Doe\").\nIf no user is found, returns a default label.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The display name, email, or a fallback string ('User').\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Logs the user out by calling the authentication service,\nclears session storage, and closes the menu.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:76\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the mobile menu.\nStops propagation to prevent triggering the outside click handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The click event on the toggle button.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : window.innerWidth \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:56\n                        \n                    \n\n            \n                \n                    Indicates if the current viewport is considered mobile (width \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:51\n                        \n                    \n\n            \n                \n                    Tracks whether the mobile menu is currently open.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        menuRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('menu')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:61\n                        \n                    \n\n            \n                \n                    Reference to the menu DOM element, used for detecting outside clicks.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, ViewChild, ElementRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '200ms ease-out',\n          style({ transform: 'translateX(0)', opacity: 1 })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '200ms ease-in',\n          style({ transform: 'translateX(100%)', opacity: 0 })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class HeaderComponent {\n  /**\n   * Tracks whether the mobile menu is currently open.\n   */\n  menuOpen = false;\n\n  /**\n   * Indicates if the current viewport is considered mobile (width  {\n    await this.authService.signOutUser();\n    sessionStorage.removeItem('greetingShown');\n    this.menuOpen = false;\n  }\n\n  /**\n   * Returns the initials of the current user (e.g. \"JD\" for \"John Doe\").\n   * If no user is found, returns a default label.\n   *\n   * @returns The display name, email, or a fallback string ('User').\n   */\n  getCurrentUserInitials(): string {\n    const user = this.authService.getCurrentUser();\n    const email = user?.email?.toLowerCase() || '';\n    const name = user?.displayName?.toLowerCase() || '';\n    if (email === 'guest@join.com' || name === 'guest user') {\n      return 'G';\n    }\n    if (user?.displayName) {\n      const parts = user.displayName.trim().split(' ');\n      if (parts.length >= 2) {\n        return (parts[0][0] + parts[1][0]).toUpperCase();\n      }\n      return parts[0][0].toUpperCase();\n    }\n    return user?.email ? user.email[0].toUpperCase() : 'U';\n  }\n\n  /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n\n    \n      Kanban Project Management Tool\n    \n\n    \n      \n        \n      \n\n      \n        {{ getCurrentUserInitials() }}\n        \n          Help\n          Privacy Policy\n          Legal notice\n          Log out\n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          Kanban Project Management Tool                                          {{ getCurrentUserInitials() }}                  Help          Privacy Policy          Legal notice          Log out                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HelpComponent.html":{"url":"components/HelpComponent.html","title":"component - HelpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HelpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/help/help.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-help\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./help.component.html\n            \n\n\n\n            \n                styleUrl\n                ./help.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/help/help.component.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of HelpComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/help/help.component.ts:32\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-help',\n  imports: [RouterModule],\n  templateUrl: './help.component.html',\n  styleUrl: './help.component.scss'\n})\n\nexport class HelpComponent {\n\n  /**\n   * Creates an instance of HelpComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n \n     Help\n     \n        \n            \n        \n     \n \n\n  \n    Welcome to the help page for Join, your guide to using our kanban project management tool.\n    Here, we'll provide an overview of what Join is, how it can benefit you, and how to use it.\n  \n\n  \n    What is Join?\n    \n      Join is a kanban-based project management tool designed and built by a group of dedicated\n      students as part of their web development bootcamp at the Developer Akademie.\n    \n    \n      Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit\n      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users\n      manage their tasks and projects in an intuitive, visual interface.\n    \n    \n      It is important to note that Join is designed as an educational exercise and is not intended for extensive\n      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent\n      availability, reliability, accuracy, or other aspects of quality regarding Join.\n    \n  \n\n  \n    How to use it\n    \n      \n        1. Exploring the Board\n        \n          In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you'll find a default board. \n          This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.\n        \n      \n      \n        2. Creating Contacts\n        \n          In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,\n          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board. \n          If you are logged in with your personal account, you will find yourself as a contact within the contact list.\n        \n      \n      \n        3. Adding Cards\n        \n          Now that you've added your contacts, you can start adding new cards. Cards represent individual tasks. Click the\n          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task\n          name, description, due date, assignees, etc.\n        \n      \n      \n        4. Moving Cards\n        \n          As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the\n          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages \n          in the board by clicking the \"...\" button.\n        \n      \n      \n        5. Deleting Cards\n        \n          Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will\n          permanently remove it from the board. Please exercise caution when deleting cards, as this action is\n          irreversible.\n        \n      \n    \n    \n      Remember that using Join effectively requires consistent updates from you and your team to ensure the board\n      reflects the current state of your project.\n    \n  \n\n  \n    Still have questions?\n    \n      Feel free to contact us at info&#64;michelle-puschkarow.de. We're here to help!\n    \n    Enjoy using Join!\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Help                                             Welcome to the help page for Join, your guide to using our kanban project management tool.    Here, we\\'ll provide an overview of what Join is, how it can benefit you, and how to use it.        What is Join?          Join is a kanban-based project management tool designed and built by a group of dedicated      students as part of their web development bootcamp at the Developer Akademie.              Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users      manage their tasks and projects in an intuitive, visual interface.              It is important to note that Join is designed as an educational exercise and is not intended for extensive      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent      availability, reliability, accuracy, or other aspects of quality regarding Join.            How to use it                  1. Exploring the Board                  In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you\\'ll find a default board.           This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.                            2. Creating Contacts                  In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board.           If you are logged in with your personal account, you will find yourself as a contact within the contact list.                            3. Adding Cards                  Now that you\\'ve added your contacts, you can start adding new cards. Cards represent individual tasks. Click the          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task          name, description, due date, assignees, etc.                            4. Moving Cards                  As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages           in the board by clicking the \"...\" button.                            5. Deleting Cards                  Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will          permanently remove it from the board. Please exercise caution when deleting cards, as this action is          irreversible.                            Remember that using Join effectively requires consistent updates from you and your team to ensure the board      reflects the current state of your project.            Still have questions?          Feel free to contact us at info@michelle-puschkarow.de. We\\'re here to help!        Enjoy using Join!  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HelpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegalNoticeComponent.html":{"url":"components/LegalNoticeComponent.html","title":"component - LegalNoticeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LegalNoticeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/legal-notice/legal-notice.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-legal-notice\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./legal-notice.component.html\n            \n\n\n\n            \n                styleUrl\n                ./legal-notice.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/legal-notice/legal-notice.component.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of LegalNoticeComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/legal-notice/legal-notice.component.ts:32\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-legal-notice',\n  imports: [RouterModule],\n  templateUrl: './legal-notice.component.html',\n  styleUrl: './legal-notice.component.scss'\n})\n\nexport class LegalNoticeComponent {\n\n  /**\n   * Creates an instance of LegalNoticeComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n    \n\n    \n        \n  \n     Legal Notice\n     \n        \n            \n        \n     \n  \n\n  \n    Imprint\n    Dr. Michelle Puschkarow\n    Waldingstraße 6\n    22391 Hamburg\n    info&#64;michelle-puschkarow.de\n    Represented by:\n    Marco Palummieri\n    Viktor Naumann\n    Jenny Domsgen\n  \n\n  \n    Acceptance of Terms\n    \n      By accessing and using Join (Product), you acknowledge and agree to the following terms and\n      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.\n      We, the listed students, may update or change the terms and conditions from time to time without notice.\n    \n  \n\n  \n    Scope and Ownership of the Product\n    \n      Join has been developed as part of a student group project in a web development bootcamp at the Developer\n      Akademie GmbH. It has an educational purpose and is not intended for extensive personal &amp; business usage. As\n      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality\n      regarding this Product.\n    \n    \n      The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,\n      distribution, or replication of the design is strictly prohibited.\n    \n  \n\n  \n    Proprietary Right\n    \n      Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in\n      Join, including any associated copyrighted material, trademarks,\n      and other proprietary information.\n    \n  \n\n  \n    Use of the Product\n    \n      Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.\n      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly\n      prohibited. You are solely responsible for your interactions with other users of Join.\n    \n  \n\n  \n    Disclaimer of Warranties and Limitation of Liability\n    \n      Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to\n      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.\n    \n    \n      In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,\n      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of\n      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such\n      damages, arising out of or in connection with the use or performance of Join.\n    \n  \n\n  \n    Indemnity\n    \n      You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our\n      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,\n      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join\n      and/or your breach of this Legal Notice.\n    \n  \n\n  Date: July 17, 2025\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '       Legal Notice                                              Imprint    Dr. Michelle Puschkarow    Waldingstraße 6    22391 Hamburg    info@michelle-puschkarow.de    Represented by:    Marco Palummieri    Viktor Naumann    Jenny Domsgen        Acceptance of Terms          By accessing and using Join (Product), you acknowledge and agree to the following terms and      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.      We, the listed students, may update or change the terms and conditions from time to time without notice.            Scope and Ownership of the Product          Join has been developed as part of a student group project in a web development bootcamp at the Developer      Akademie GmbH. It has an educational purpose and is not intended for extensive personal & business usage. As      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality      regarding this Product.              The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,      distribution, or replication of the design is strictly prohibited.            Proprietary Right          Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in      Join, including any associated copyrighted material, trademarks,      and other proprietary information.            Use of the Product          Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly      prohibited. You are solely responsible for your interactions with other users of Join.            Disclaimer of Warranties and Limitation of Liability          Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.              In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such      damages, arising out of or in connection with the use or performance of Join.            Indemnity          You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join      and/or your breach of this Legal Notice.        Date: July 17, 2025'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LegalNoticeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login/login.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                LoginHeaderComponent\n                                FooterComponent\n                            CommonModule\n                            ReactiveFormsModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                isTouchDevice\n                            \n                            \n                                loginForm\n                            \n                            \n                                logoState\n                            \n                            \n                                pageLoaded\n                            \n                            \n                                showPassword\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkIfTouchDevice\n                            \n                            \n                                getValidationMessage\n                            \n                            \n                                    Private\n                                handleAuthResult\n                            \n                            \n                                    Private\n                                initializeAnimation\n                            \n                            \n                                    Private\n                                initializeForm\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Async\n                                onGuestLogin\n                            \n                            \n                                    Async\n                                onLogin\n                            \n                            \n                                    Private\n                                runLogoAnimationWithDelay\n                            \n                            \n                                    Private\n                                startLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/login/login.component.ts:95\n                            \n                        \n\n                \n                    \n                            Initializes the LoginComponent and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder instance for creating the login form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling authentication\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router for navigation after login\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkIfTouchDevice\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfTouchDevice()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:123\n                        \n                    \n\n\n            \n                \n                        Checks whether the user's device is a touch-enabled device.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:220\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for a given form field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the form control (e.g. 'email' or 'password')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string message describing the validation issue.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleAuthResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleAuthResult(result: literal type, fallbackError: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:202\n                        \n                    \n\n\n            \n                \n                        Handles the result of an authentication attempt.\nNavigates on success or displays a fallback error message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                result\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe result object returned from the auth service.\n\n\n                                            \n                                        \n                                        \n                                                fallbackError\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe fallback error message if no message is provided.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:141\n                        \n                    \n\n\n            \n                \n                        Triggers a delayed logo animation if it hasn't already occurred.\nStores a flag in session storage to prevent repeat animation.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Initializes the reactive login form with validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:232\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: resets the loading state when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: initializes the login form, touch detection,\nand triggers logo animation on first visit.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onGuestLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onGuestLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:181\n                        \n                    \n\n\n            \n                \n                        Logs in as a guest user using the AuthService.\nNavigates to the summary page on success or shows an error.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:165\n                        \n                    \n\n\n            \n                \n                        Handles user login using form credentials.\nDisplays a loading indicator, validates form input,\nand navigates on success or shows an error message.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        runLogoAnimationWithDelay\n                        \n                    \n                \n            \n            \n                \n                        \n                    runLogoAnimationWithDelay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:152\n                        \n                    \n\n\n            \n                \n                        Performs the delayed logo animation and sets the session flag.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        startLoading\n                        \n                    \n                \n            \n            \n                \n                        \n                    startLoading()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:190\n                        \n                    \n\n\n            \n                \n                        Starts loading state and resets the error message.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:80\n                        \n                    \n\n            \n                \n                    Displays the current error message if login fails.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:85\n                        \n                    \n\n            \n                \n                    Shows whether a login request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:95\n                        \n                    \n\n            \n                \n                    Detects if the device supports touch input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:75\n                        \n                    \n\n            \n                \n                    Reactive form group for email and password login fields.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:65\n                        \n                    \n\n            \n                \n                    State of the logo animation. 'start' before animation, 'moved' after.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageLoaded\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:70\n                        \n                    \n\n            \n                \n                    Indicates whether the page has finished loading (used for triggering animation).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:90\n                        \n                    \n\n            \n                \n                    Indicates whether the password should be shown in plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FooterComponent } from '../footer/footer.component';\nimport { LoginHeaderComponent } from '../login-header/login-header.component';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  group\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router, RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    LoginHeaderComponent,\n    FooterComponent,\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n  animations: [\n    trigger('fadeOutWrapper', [\n      state('start', style({\n        opacity: 1\n      })),\n      state('moved', style({\n        opacity: 0\n      })),\n      transition('start => moved', [\n        animate('2s 0.7s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class LoginComponent {\n  /**\n   * State of the logo animation. `'start'` before animation, `'moved'` after.\n   */\n  logoState: 'start' | 'moved' = 'start';\n\n  /**\n   * Indicates whether the page has finished loading (used for triggering animation).\n   */\n  pageLoaded = false;\n\n  /**\n   * Reactive form group for email and password login fields.\n   */\n  loginForm!: FormGroup;\n\n  /**\n   * Displays the current error message if login fails.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Shows whether a login request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Indicates whether the password should be shown in plain text.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Detects if the device supports touch input.\n   */\n  isTouchDevice = false;\n\n  /**\n   * Initializes the LoginComponent and injects required services.\n   * \n   * @param fb FormBuilder instance for creating the login form\n   * @param authService Service for handling authentication\n   * @param router Router for navigation after login\n   */\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n  ) { }\n\n  /**\n   * Lifecycle hook: initializes the login form, touch detection,\n   * and triggers logo animation on first visit.\n   */\n  ngOnInit(): void {\n    this.initializeForm();\n    this.checkIfTouchDevice();\n    this.initializeAnimation();\n  }\n\n  /**\n   * Checks whether the user's device is a touch-enabled device.\n   */\n  private checkIfTouchDevice(): void {\n    this.isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n  }\n\n  /**\n   * Initializes the reactive login form with validators.\n   */\n  private initializeForm(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  /**\n   * Triggers a delayed logo animation if it hasn't already occurred.\n   * Stores a flag in session storage to prevent repeat animation.\n   */\n  private initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoMoved')) {\n      this.runLogoAnimationWithDelay();\n    } else {\n      this.logoState = 'moved';\n    }\n  }\n\n  /**\n   * Performs the delayed logo animation and sets the session flag.\n   */\n  private runLogoAnimationWithDelay(): void {\n    setTimeout(() => {\n      this.pageLoaded = true;\n      this.logoState = 'moved';\n      sessionStorage.setItem('logoMoved', 'true');\n    }, 100);\n  }\n\n  /**\n   * Handles user login using form credentials.\n   * Displays a loading indicator, validates form input,\n   * and navigates on success or shows an error message.\n   */\n  async onLogin(): Promise {\n    if (this.loginForm.invalid) {\n      this.loginForm.markAllAsTouched();\n      return;\n    }\n\n    this.startLoading();\n    const { email, password } = this.loginForm.value;\n    const result = await this.authService.signIn(email, password);\n    this.handleAuthResult(result, 'Login failed');\n  }\n\n  /**\n   * Logs in as a guest user using the AuthService.\n   * Navigates to the summary page on success or shows an error.\n   */\n  async onGuestLogin(): Promise {\n    this.startLoading();\n    const result = await this.authService.signInAsGuest();\n    this.handleAuthResult(result, 'Guest login failed');\n  }\n\n  /**\n   * Starts loading state and resets the error message.\n   */\n  private startLoading(): void {\n    this.isLoading = true;\n    this.errorMessage = '';\n  }\n\n  /**\n   * Handles the result of an authentication attempt.\n   * Navigates on success or displays a fallback error message.\n   *\n   * @param result - The result object returned from the auth service.\n   * @param fallbackError - The fallback error message if no message is provided.\n   */\n  private handleAuthResult(\n    result: { success: boolean; message?: string },\n    fallbackError: string\n  ): void {\n    if (result.success) {\n      this.router.navigate(['/summary']);\n    } else {\n      this.errorMessage = result.message || fallbackError;\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for a given form field.\n   * \n   * @param field The name of the form control (e.g. 'email' or 'password')\n   * @returns A string message describing the validation issue.\n   */\n  getValidationMessage(field: string): string {\n    const control = this.loginForm.get(field);\n    if (!control || !control.touched || !control.errors) return '';\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['email']) return 'Please enter a valid email address';\n    if (control.errors['minlength']) return 'Password must be at least 8 characters long';\n    return '';\n  }\n\n  /**\n   * Lifecycle hook: resets the loading state when the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    this.isLoading = false;\n  }\n}\n\n    \n\n    \n        \n    \n    \n        \n    \n    \n        \n            Log in\n            \n                \n                    \n                        \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('email') }}\n                        \n                    \n                    \n                        \n                            \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('password') }}\n                        \n                    \n                    {{ errorMessage }}\n                \n                \n                    \n                        {{ isLoading ? 'Loading...' : 'Log in' }}\n                    \n                    \n                        {{ isLoading ? 'Loading...' : 'Guest Log in' }}\n                    \n                \n            \n        \n       \n            \n                Not a Join user?\n                \n                    Sign up\n                \n            \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                            Log in                                                                                                                                                                                                                                        {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                                                                    {{ getValidationMessage(\\'password\\') }}                                                                {{ errorMessage }}                                                                            {{ isLoading ? \\'Loading...\\' : \\'Log in\\' }}                                                                {{ isLoading ? \\'Loading...\\' : \\'Guest Log in\\' }}                                                                                           Not a Join user?                                    Sign up                                                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginHeaderComponent.html":{"url":"components/LoginHeaderComponent.html","title":"component - LoginHeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginHeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login-header/login-header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login-header\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login-header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login-header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTouchDevice\n                            \n                            \n                                logoState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initializeAnimation\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \ninitializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Triggers the logo fade-in animation if it hasn’t already played during the session.\nStores a flag in sessionStorage to prevent the animation from repeating.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that initializes the animation state when the component loads.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:54\n                        \n                    \n\n            \n                \n                    Indicates whether the current device supports touch input.\nCurrently unused, but reserved for future enhancements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"appear\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:48\n                        \n                    \n\n            \n                \n                    The current state of the logo animation.\n\n'start': hidden state with opacity 0\n'appear': visible state with opacity 1\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/animations';\n\n@Component({\n  selector: 'app-login-header',\n  imports: [ RouterModule ],\n  templateUrl: './login-header.component.html',\n  styleUrl: './login-header.component.scss',\n  animations: [\n    trigger('fadeOut', [\n      state('start', style({\n        opacity: 0\n      })),\n      state('appear', style({\n        opacity: 1\n      })),\n      transition('start => appear', [\n        animate('1.1s 0.7s ease-in-out')\n      ])\n    ])\n  ]\n})\n\nexport class LoginHeaderComponent {\n  /**\n   * The current state of the logo animation.\n   * - `'start'`: hidden state with opacity 0\n   * - `'appear'`: visible state with opacity 1\n   */\n  logoState: 'start' | 'appear' = 'start';\n\n  /**\n   * Indicates whether the current device supports touch input.\n   * Currently unused, but reserved for future enhancements.\n   */\n  isTouchDevice: boolean = false;\n\n  /**\n   * Lifecycle hook that initializes the animation state when the component loads.\n   */\n  ngOnInit(): void {\n    this.initializeAnimation();\n  }\n\n  /**\n   * Triggers the logo fade-in animation if it hasn’t already played during the session.\n   * Stores a flag in sessionStorage to prevent the animation from repeating.\n   */\n  initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoAppeared')) {\n      setTimeout(() => {\n        this.logoState = 'appear';\n        sessionStorage.setItem('logoAppeared', 'true');\n      }, 100);\n    } else {\n      this.logoState = 'appear';\n    }\n  }\n}\n    \n\n    \n        \n    \n        \n    \n    \n        Not a Join user?\n        \n            Sign up\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Not a Join user?                    Sign up            '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginHeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NavigationHistoryService.html":{"url":"injectables/NavigationHistoryService.html","title":"injectable - NavigationHistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NavigationHistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/navigation-history.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service to keep track of recent navigation history within the Angular application.\nStores the last 3 visited URLs (including the current one) and allows navigation\nback to the previous URL.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                history\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getHistory\n                            \n                            \n                                    Public\n                                getPreviousUrl\n                            \n                            \n                                    Public\n                                navigateBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/navigation-history.service.ts:17\n                            \n                        \n\n                \n                    \n                            Subscribes to Angular Router events and tracks navigation history.\nKeeps the last 3 visited URLs (including the current one), trimming\nthe oldest entry when the limit is reached.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used to listen to navigation events.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns a copy of the navigation history.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of the last visited URLs (maximum of 3).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getPreviousUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPreviousUrl()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Gets the URL visited before the current one.\n\n\n                        \n                            Returns :     string | null\n\n                        \n                            \n                                The previous URL, or null if not available.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        navigateBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous URL if available.\nIf no previous URL is stored, navigates to the root path ('/').\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/services/navigation-history.service.ts:17\n                        \n                    \n\n            \n                \n                    Internal array holding the last 3 visited URLs\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n/**\n * A service to keep track of recent navigation history within the Angular application.\n * \n * Stores the last 3 visited URLs (including the current one) and allows navigation\n * back to the previous URL.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NavigationHistoryService {\n  /** Internal array holding the last 3 visited URLs */\n  private history: string[] = [];\n\n  /**\n   * Subscribes to Angular Router events and tracks navigation history.\n   * \n   * Keeps the last 3 visited URLs (including the current one), trimming\n   * the oldest entry when the limit is reached.\n   * \n   * @param router - Angular Router used to listen to navigation events.\n   */\n  constructor(private router: Router) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        if (this.history.length === 3) {\n          this.history.shift(); // Remove the oldest URL\n        }\n        this.history.push(event.urlAfterRedirects);\n      });\n  }\n\n  /**\n   * Returns a copy of the navigation history.\n   * \n   * @returns An array of the last visited URLs (maximum of 3).\n   */\n  public getHistory(): string[] {\n    return [...this.history];\n  }\n\n  /**\n   * Gets the URL visited before the current one.\n   * \n   * @returns The previous URL, or null if not available.\n   */\n  public getPreviousUrl(): string | null {\n    if (this.history.length > 1) {\n      return this.history[this.history.length - 2];\n    }\n    return null;\n  }\n\n  /**\n   * Navigates back to the previous URL if available.\n   * \n   * If no previous URL is stored, navigates to the root path (`'/'`).\n   */\n  public navigateBack(): void {\n    const previousUrl = this.getPreviousUrl();\n    if (previousUrl) {\n      this.router.navigateByUrl(previousUrl);\n    } else {\n      this.router.navigateByUrl('/');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverlayManager.html":{"url":"injectables/OverlayManager.html","title":"injectable - OverlayManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OverlayManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/overlay-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                OverlayManager handles all overlay-related operations for the BoardComponent.\nThis includes opening/closing overlays, managing animation states, and handling responsive behavior.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                animationDirection\n                            \n                            \n                                    Private\n                                backgroundVisible\n                            \n                            \n                                    Private\n                                overlayVisible\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Private\n                                showAddOrEditTask\n                            \n                            \n                                    Private\n                                showTaskDetails\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDetailsOverlay\n                            \n                            \n                                getAnimationDirection\n                            \n                            \n                                getBackgroundVisible\n                            \n                            \n                                getOverlayVisible\n                            \n                            \n                                getSelectedTask\n                            \n                            \n                                getShowAddOrEditTask\n                            \n                            \n                                getShowTaskDetails\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                openAddOrEditOverlay\n                            \n                            \n                                openTaskDetail\n                            \n                            \n                                removeBackground\n                            \n                            \n                                resetOverlayState\n                            \n                            \n                                resetOverlayStates\n                            \n                            \n                                setAnimationDirection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/overlay-manager.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDetailsOverlay\n                        \n                    \n                \n            \n            \n                \ncloseDetailsOverlay(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:154\n                        \n                    \n\n\n            \n                \n                        Closes the overlay for task details or task form.\nAlso resets relevant state variables and clears editing data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating why the overlay is being closed (e.g., 'close', 'added').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAnimationDirection\n                        \n                    \n                \n            \n            \n                \ngetAnimationDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:30\n                        \n                    \n\n\n            \n                \n                        Gets the current animation direction\n\n\n                        \n                            Returns :     \"right\" | \"bottom\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBackgroundVisible\n                        \n                    \n                \n            \n            \n                \ngetBackgroundVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:37\n                        \n                    \n\n\n            \n                \n                        Gets the background visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayVisible\n                        \n                    \n                \n            \n            \n                \ngetOverlayVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:44\n                        \n                    \n\n\n            \n                \n                        Gets the overlay visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSelectedTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:65\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected task\n\n\n                        \n                            Returns :         Task | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowAddOrEditTask\n                        \n                    \n                \n            \n            \n                \ngetShowAddOrEditTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:58\n                        \n                    \n\n\n            \n                \n                        Gets the add/edit task visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowTaskDetails\n                        \n                    \n                \n            \n            \n                \ngetShowTaskDetails()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:51\n                        \n                    \n\n\n            \n                \n                        Gets the task details visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:97\n                        \n                    \n\n\n            \n                \n                        Callback for when the overlay slide-in animation is finished.\nSlight delay before making the background visible for smooth UX.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAnimationEvent from Angular.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openAddOrEditOverlay\n                        \n                    \n                \n            \n            \n                \nopenAddOrEditOverlay(event: string, status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for adding or editing a task.\nOn small screens, navigates to a separate route; otherwise opens the overlay inline.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nEither 'open' or 'edit', indicating the action type.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to prefill in the add/edit task form.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetail\n                        \n                    \n                \n            \n            \n                \nopenTaskDetail(selectedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:141\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for viewing the details of a selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object to display in detail.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:84\n                        \n                    \n\n\n            \n                \n                        Handles removal of background and overlay if the event indicates closure.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string (expected: 'closed') that triggers background removal.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetOverlayState\n                        \n                    \n                \n            \n            \n                \nresetOverlayState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:129\n                        \n                    \n\n\n            \n                \n                        Reset the overlay state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetOverlayStates\n                        \n                    \n                \n            \n            \n                \nresetOverlayStates()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:168\n                        \n                    \n\n\n            \n                \n                        Resets all overlay states to default values\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:75\n                        \n                    \n\n\n            \n                \n                        Sets the animation direction based on screen width.\nUsed for responsive slide-in overlays.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrent screen width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showAddOrEditTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTaskDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AnimationEvent } from '@angular/animations';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * OverlayManager handles all overlay-related operations for the BoardComponent.\n * This includes opening/closing overlays, managing animation states, and handling responsive behavior.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class OverlayManager {\n  private animationDirection: 'right' | 'bottom' = 'right';\n  private backgroundVisible = false;\n  private overlayVisible = false;\n  private showTaskDetails = false;\n  private showAddOrEditTask: boolean = false;\n  private selectedTask?: Task;\n\n  constructor(\n    private router: Router,\n    private taskService: TaskService\n  ) {}\n\n  /**\n   * Gets the current animation direction\n   */\n  getAnimationDirection(): 'right' | 'bottom' {\n    return this.animationDirection;\n  }\n\n  /**\n   * Gets the background visibility state\n   */\n  getBackgroundVisible(): boolean {\n    return this.backgroundVisible;\n  }\n\n  /**\n   * Gets the overlay visibility state\n   */\n  getOverlayVisible(): boolean {\n    return this.overlayVisible;\n  }\n\n  /**\n   * Gets the task details visibility state\n   */\n  getShowTaskDetails(): boolean {\n    return this.showTaskDetails;\n  }\n\n  /**\n   * Gets the add/edit task visibility state\n   */\n  getShowAddOrEditTask(): boolean {\n    return this.showAddOrEditTask;\n  }\n\n  /**\n   * Gets the currently selected task\n   */\n  getSelectedTask(): Task | undefined {\n    return this.selectedTask;\n  }\n\n  /**\n   * Sets the animation direction based on screen width.\n   * Used for responsive slide-in overlays.\n   *\n   * @param width - Current screen width.\n   */\n  setAnimationDirection(width: number): void {\n    this.animationDirection = width  {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Opens the overlay for adding or editing a task.\n   * On small screens, navigates to a separate route; otherwise opens the overlay inline.\n   *\n   * @param event - Either 'open' or 'edit', indicating the action type.\n   * @param status - The status to prefill in the add/edit task form.\n   */\n  openAddOrEditOverlay(event: string, status: string): void {\n    const isSmallScreen = window.innerWidth \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PriorityManager.html":{"url":"injectables/PriorityManager.html","title":"injectable - PriorityManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PriorityManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/priority-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                PriorityManager handles all priority-related operations for the AddTaskComponent.\nThis includes setting priority management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                categoryManager\n                            \n                            \n                                selectedPriority\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setPriority\n                            \n                            \n                                    Public\n                                setPriorityAndCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryManager: CategoryManager)\n                    \n                \n                        \n                            \n                                Defined in src/app/add-task/priority-manager.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryManager\n                                                  \n                                                        \n                                                                        CategoryManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setPriority\n                        \n                    \n                \n            \n            \n                \nsetPriority(priority: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/priority-manager.ts:23\n                        \n                    \n\n\n            \n                \n                        Sets the task priority.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                priority\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe priority level to set ('low', 'medium', 'urgent').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setPriorityAndCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    setPriorityAndCategory(task: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/priority-manager.ts:32\n                        \n                    \n\n\n            \n                \n                        Sets the selected priority and category in their respective managers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categoryManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryManager\n\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/priority-manager.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedPriority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'medium'\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/priority-manager.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { CategoryManager } from './category-manager';\n\n/**\n * PriorityManager handles all priority-related operations for the AddTaskComponent.\n * This includes setting priority management.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PriorityManager {\n  selectedPriority: string = 'medium';\n\n  constructor(\n    public categoryManager: CategoryManager\n  ) { }\n\n   /**\n   * Sets the task priority.\n   * @param priority - The priority level to set ('low', 'medium', 'urgent').\n   */\n  setPriority(priority: string) {\n    this.selectedPriority = priority;\n  }\n  \n  /**\n   * Sets the selected priority and category in their respective managers.\n   *\n   * @param task - The task object.\n   */\n  public setPriorityAndCategory(task: any): void {\n    this.selectedPriority = task.priority || 'medium';\n    this.categoryManager.setSelectedCategory(task.category || '');\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PrivacyPolicyComponent.html":{"url":"components/PrivacyPolicyComponent.html","title":"component - PrivacyPolicyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PrivacyPolicyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/privacy-policy/privacy-policy.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-privacy-policy\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./privacy-policy.component.html\n            \n\n\n\n            \n                styleUrl\n                ./privacy-policy.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrivacyPolicyComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nA service used to handle navigation history and go back to the previous route.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:32\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-privacy-policy',\n  imports: [RouterModule],\n  templateUrl: './privacy-policy.component.html',\n  styleUrl: './privacy-policy.component.scss'\n})\n\nexport class PrivacyPolicyComponent {\n\n  /**\n   * Creates an instance of PrivacyPolicyComponent.\n   *\n   * @param navigationService - A service used to handle navigation history and go back to the previous route.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n    \n     Privacy Policy\n     \n        \n            \n        \n     \n    \n  Information in accordance with Section 5 of the German Digital Services Act (DDG)\n  Last updated: July 17, 2025\n\n  \n    1. Disclaimer\n    1.1 General Information\n    \n      This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your\n      information when You use Join, and tells You about Your privacy rights and how the law protects You.\n    \n    \n      We use Your Personal data to provide and improve the Service. By using the Service, You agree to the\n      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been\n      created with the help of the Privacy Policy Generator.\n    \n  \n\n  \n    1.2 Note on Data Transmission\n    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.\n  \n\n  \n    2. Interpretation and Definitions\n    2.1 Interpretation\n    \n      The words of which the initial letter is capitalized have meanings defined under the following conditions.\n      The following definitions shall have the same meaning regardless of whether they appear in singular or in\n      plural.\n    \n\n    2.2 Definitions\n    \n      Account\n      A unique account created for You to access the kanban board Join.\n\n      Application\n      Refers to Join, the software program provided by the Company.\n\n      Company\n      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.\n\n      Cookies\n      Small files placed on Your device by a website, containing browsing history details.\n\n      Device\n      Any device that can access the Service (e.g. computer, cellphone, tablet).\n\n      Personal Data\n      Any information relating to an identified or identifiable individual.\n\n      Service\n      The Application or the Website or both - meaning Join.\n\n      Service Provider\n       Any person or company processing data on behalf of the Company to facilitate or provide the Service.\n\n      Usage Data\n       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).\n\n      You\n      \n        The individual or legal entity accessing or using the Service, as applicable.\n      \n    \n  \n\n  \n    3. Collecting and Using Your Personal Data\n\n    3.1 Types of Data Collected\n    3.1.1 Personal Data\n    \n      We may ask You for personally identifiable information, such as email address, first and last name,\n      phone number, address, city, state/province, ZIP/postal code.\n    \n\n    3.1.2 Usage Data\n    \n      Collected automatically, including IP address, browser type and version, pages visited, visit time and date,\n      time spent, unique device identifiers and other diagnostic data.\n      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.\n      This data comes from your browser or mobile device when accessing the Service.\n    \n\n    3.1.3 Tracking Technologies and Cookies\n    \n      We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the\n      Service.\n    \n    \n      Cookies: small files you can reject via browser settings.\n      Web Beacons: pixel files for tracking email opens, page popularity, etc.\n    \n    Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).\n\n    Examples of Cookies Used\n    \n      Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.\n      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.\n      Functionality Cookies (Persistent) – remember login or language preferences.\n    \n    \n      For more details and cookie choices, please visit our Cookies Policy section.\n    \n  \n\n  \n    4. Use of Your Personal Data\n    \n      Provide and maintain our Service, monitor usage.\n      Manage Your Account and registration.\n      Perform contracts (orders, service compliance).\n      Contact You (email, phone, SMS, push notifications).\n      Provide news, offers, events (unless unsubscribed).\n      Manage your requests to Us.\n      Business transfers (merger, sale, restructuring).\n      Other: analytics, usage trends, improve campaigns & Service.\n    \n\n    4.1 Sharing of Personal Information\n    \n      With Service Providers: for analysis and support.\n      For Business Transfers: in events like sale or acquisition.\n      With Affiliates: under this same Privacy Policy.\n      With Business Partners: for related products, services, promotions.\n      With Other Users: any info you share publicly is visible.\n      With Your Consent: for any other purposes.\n    \n  \n\n  \n    4.2 Transfer of Your Personal Data\n    \n      Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We\n      take steps to ensure adequate controls and security are in place.\n    \n  \n\n  \n    4.3 Data Retention and Deletion\n    \n      We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.\n      Usage Data retained for analytics or security.\n      You can delete or request deletion of your data via account settings or by contacting us. We may retain\n      information if legally required.\n    \n  \n\n  \n    4.4 Disclosure of Your Personal Data\n\n    4.4.1 Business Transactions\n    \n      If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify\n      before such changes.\n    \n\n    4.4.2 Law Enforcement & Other Legal Requirements\n    \n      We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.\n    \n  \n\n  \n    5. Security of Your Personal Data\n    \n      We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to\n      internet and electronic storage methods.\n    \n  \n\n  \n    6. Links to Other Websites\n    \n      Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for\n      their policies or content. Please review their Privacy Policies.\n    \n  \n\n  \n    7. Changes to this Privacy Policy\n    \n      We may update this policy from time to time. We'll notify via email or Service notice and update the \"Last\n      updated\" date. Changes take effect when posted. Please review periodically.\n    \n  \n\n  \n    8. Data Storage and Third-Party Services\n    \n      Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.\n      Through the use of Firebase services the following data might be processed:\n    \n    \n      Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.\n      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.\n      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.\n      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.\n    \n    \n      The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to\n      Google´s Privacy Policy and \n      Firebase’s Data Processing and Security Terms\n    \n  \n\n  \n    9. Prohibition of unsolicited contact\n    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted. \n       As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.\n  \n\n  \n    10. Contact Us\n    \n      If there are still questions, please contact us at\n      info&#64;michelle-puschkarow.de.\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '         Privacy Policy                                            Information in accordance with Section 5 of the German Digital Services Act (DDG)  Last updated: July 17, 2025      1. Disclaimer    1.1 General Information          This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your      information when You use Join, and tells You about Your privacy rights and how the law protects You.              We use Your Personal data to provide and improve the Service. By using the Service, You agree to the      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been      created with the help of the Privacy Policy Generator.            1.2 Note on Data Transmission    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.        2. Interpretation and Definitions    2.1 Interpretation          The words of which the initial letter is capitalized have meanings defined under the following conditions.      The following definitions shall have the same meaning regardless of whether they appear in singular or in      plural.        2.2 Definitions          Account      A unique account created for You to access the kanban board Join.      Application      Refers to Join, the software program provided by the Company.      Company      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.      Cookies      Small files placed on Your device by a website, containing browsing history details.      Device      Any device that can access the Service (e.g. computer, cellphone, tablet).      Personal Data      Any information relating to an identified or identifiable individual.      Service      The Application or the Website or both - meaning Join.      Service Provider       Any person or company processing data on behalf of the Company to facilitate or provide the Service.      Usage Data       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).      You              The individual or legal entity accessing or using the Service, as applicable.                  3. Collecting and Using Your Personal Data    3.1 Types of Data Collected    3.1.1 Personal Data          We may ask You for personally identifiable information, such as email address, first and last name,      phone number, address, city, state/province, ZIP/postal code.        3.1.2 Usage Data          Collected automatically, including IP address, browser type and version, pages visited, visit time and date,      time spent, unique device identifiers and other diagnostic data.      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.      This data comes from your browser or mobile device when accessing the Service.        3.1.3 Tracking Technologies and Cookies          We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the      Service.              Cookies: small files you can reject via browser settings.      Web Beacons: pixel files for tracking email opens, page popularity, etc.        Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).    Examples of Cookies Used          Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.      Functionality Cookies (Persistent) – remember login or language preferences.              For more details and cookie choices, please visit our Cookies Policy section.            4. Use of Your Personal Data          Provide and maintain our Service, monitor usage.      Manage Your Account and registration.      Perform contracts (orders, service compliance).      Contact You (email, phone, SMS, push notifications).      Provide news, offers, events (unless unsubscribed).      Manage your requests to Us.      Business transfers (merger, sale, restructuring).      Other: analytics, usage trends, improve campaigns & Service.        4.1 Sharing of Personal Information          With Service Providers: for analysis and support.      For Business Transfers: in events like sale or acquisition.      With Affiliates: under this same Privacy Policy.      With Business Partners: for related products, services, promotions.      With Other Users: any info you share publicly is visible.      With Your Consent: for any other purposes.            4.2 Transfer of Your Personal Data          Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We      take steps to ensure adequate controls and security are in place.            4.3 Data Retention and Deletion          We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.      Usage Data retained for analytics or security.      You can delete or request deletion of your data via account settings or by contacting us. We may retain      information if legally required.            4.4 Disclosure of Your Personal Data    4.4.1 Business Transactions          If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify      before such changes.        4.4.2 Law Enforcement & Other Legal Requirements          We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.            5. Security of Your Personal Data          We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to      internet and electronic storage methods.            6. Links to Other Websites          Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for      their policies or content. Please review their Privacy Policies.            7. Changes to this Privacy Policy          We may update this policy from time to time. We\\'ll notify via email or Service notice and update the \"Last      updated\" date. Changes take effect when posted. Please review periodically.            8. Data Storage and Third-Party Services          Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.      Through the use of Firebase services the following data might be processed:              Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.              The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to      Google´s Privacy Policy and       Firebase’s Data Processing and Security Terms            9. Prohibition of unsolicited contact    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted.        As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.        10. Contact Us          If there are still questions, please contact us at      info@michelle-puschkarow.de.      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PrivacyPolicyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SidebarComponent.html":{"url":"components/SidebarComponent.html","title":"component - SidebarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SidebarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/sidebar/sidebar.component.ts\n\n\n\n    \n        Description\n    \n    \n        Sidebar component for application navigation.\nDisplays navigation links and checks the user's authentication status.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sidebar\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sidebar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sidebar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLoggedIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/sidebar/sidebar.component.ts:20\n                            \n                        \n\n                \n                    \n                            Constructs the SidebarComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing user authentication\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/sidebar/sidebar.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Sidebar component for application navigation.\n * Displays navigation links and checks the user's authentication status.\n */\n@Component({\n  selector: 'app-sidebar',\n  imports: [\n    RouterModule,\n    CommonModule\n  ],\n  templateUrl: './sidebar.component.html',\n  styleUrl: './sidebar.component.scss'\n})\n\nexport class SidebarComponent {\n  /**\n   * Constructs the SidebarComponent.\n   * @param authService - Service for managing user authentication\n   */\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n  \n  \n    \n      \n        \n          \n          Summary\n        \n      \n      \n        \n          \n          Board\n        \n      \n      \n        \n          \n          Add Task\n        \n      \n      \n        \n          \n          Contacts\n        \n      \n    \n  \n  \n    \n      \n        \n          \n          Log In\n        \n      \n    \n    \n      Privacy Policy\n      Legal notice\n    \n  \n  \n    Privacy Policy\n    Legal notice\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                Summary                                                Board                                                Add Task                                                Contacts                                                            Log In                            Privacy Policy      Legal notice            Privacy Policy    Legal notice  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SidebarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/signup/signup.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                                FooterComponent\n                            ReactiveFormsModule\n                \n            \n\n            \n                styleUrls\n                ./signup.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                showConfirmPassword\n                            \n                            \n                                showPassword\n                            \n                            \n                                signupform\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getFieldErrorMessage\n                            \n                            \n                                    Private\n                                getPasswordMismatchMessage\n                            \n                            \n                                getValidationMessage\n                            \n                            \n                                    Private\n                                handleRegistrationResult\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToLogin\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                passwordsMatchValidator\n                            \n                            \n                                saveNewContact\n                            \n                            \n                                    Private\n                                startLoading\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, authService: AuthService, router: Router, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                            \n                        \n\n                \n                    \n                            Initializes the signup form and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder for creating the reactive form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for user registration\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to store new users as contacts\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFieldErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFieldErrorMessage(control: AbstractControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:228\n                        \n                    \n\n\n            \n                \n                        Returns a general validation error message for a given form control.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe FormControl instance to evaluate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The corresponding validation message or an empty string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPasswordMismatchMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPasswordMismatchMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:210\n                        \n                    \n\n\n            \n                \n                        Returns a validation message if the password and confirmation do not match.\nOnly shown if either password field has been touched or changed.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Password mismatch message or empty string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:195\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for the given form field.\nDelegates error interpretation to specialized helper functions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the form control.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A descriptive validation message or empty string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleRegistrationResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleRegistrationResult(result: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:148\n                        \n                    \n\n\n            \n                \n                        Handles the result of the registration process.\nShows success message and redirects on success,\nor displays an error message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                result\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nResult object returned from signUp attempt.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: creates the signup form with all necessary validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToLogin\n                        \n                    \n                \n            \n            \n                \nonBackToLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:181\n                        \n                    \n\n\n            \n                \n                        Navigates the user back to the login screen.\nUses skipLocationChange to avoid adding the redirect to browser history.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Handles the form submission process:\nValidates input, attempts user registration,\nsaves the new user as a contact, and navigates on success.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordsMatchValidator\n                        \n                    \n                \n            \n            \n                \npasswordsMatchValidator(group: AbstractControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Custom validator to ensure password and confirm password fields match.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                group\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form group containing password fields.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationErrors | null\n\n                        \n                            \n                                A validation error object or null if passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveNewContact\n                        \n                    \n                \n            \n            \n                \nsaveNewContact(newName: string, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:168\n                        \n                    \n\n\n            \n                \n                        Creates and stores a new contact based on registration input.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name entered during registration.\n\n                                            \n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email address entered during registration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        startLoading\n                        \n                    \n                \n            \n            \n                \n                        \n                    startLoading()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:135\n                        \n                    \n\n\n            \n                \n                        Sets loading state, clears previous messages.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:49\n                        \n                    \n\n            \n                \n                    Holds the current error message for display on form failure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:59\n                        \n                    \n\n            \n                \n                    Indicates whether a registration request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showConfirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                        \n                    \n\n            \n                \n                    Controls visibility of the confirm password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:64\n                        \n                    \n\n            \n                \n                    Controls visibility of the password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signupform\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:44\n                        \n                    \n\n            \n                \n                    The reactive signup form with fields for name, email, password, etc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:54\n                        \n                    \n\n            \n                \n                    Holds the success message shown after successful registration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ReactiveFormsModule } from '@angular/forms';\nimport { FooterComponent } from '../footer/footer.component';\nimport { RouterModule, Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../services/auth.service';\nimport { Contact, ContactService } from '../../services/contact.service';\n\n@Component({\n  selector: 'app-signup',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    FooterComponent,\n    ReactiveFormsModule\n  ],\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\n\nexport class SignupComponent implements OnInit {\n  /**\n   * The reactive signup form with fields for name, email, password, etc.\n   */\n  signupform!: FormGroup;\n\n  /**\n   * Holds the current error message for display on form failure.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Holds the success message shown after successful registration.\n   */\n  successMessage: string = '';\n\n  /**\n   * Indicates whether a registration request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Controls visibility of the password input field.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Controls visibility of the confirm password input field.\n   */\n  showConfirmPassword: boolean = false;\n\n  /**\n   * Initializes the signup form and injects required services.\n   * \n   * @param form FormBuilder for creating the reactive form\n   * @param authService Service for user registration\n   * @param router Angular Router for navigation\n   * @param contactService Service to store new users as contacts\n   */\n  constructor(\n    private form: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private contactService: ContactService,\n  ) { }\n\n  /**\n   * Lifecycle hook: creates the signup form with all necessary validators.\n   */\n  ngOnInit(): void {\n    this.signupform = this.form.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.pattern(/^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_\\-+=\\[\\]{};:'\"\\\\|,.<>\\/?]).+$/)\n      ]],\n      confirmPassword: ['', Validators.required],\n      privacyPolicy: [false, [Validators.requiredTrue]],\n    }, { validators: this.passwordsMatchValidator });\n  }\n\n  /**\n   * Custom validator to ensure password and confirm password fields match.\n   * \n   * @param group The form group containing password fields.\n   * @returns A validation error object or null if passwords match.\n   */\n  passwordsMatchValidator(group: AbstractControl): ValidationErrors | null {\n    const password = group.get('password')?.value;\n    const confirm = group.get('confirmPassword')?.value;\n    return password === confirm ? null : { passwordsDontMatch: true };\n  }\n\n  /**\n  * Handles the form submission process:\n  * Validates input, attempts user registration,\n  * saves the new user as a contact, and navigates on success.\n  */\n  async onSubmit(): Promise {\n    if (this.signupform.invalid) {\n      this.signupform.markAllAsTouched();\n      return;\n    }\n    this.startLoading();\n    const { name, email, password } = this.signupform.value;\n    const result = await this.authService.signUp(email, password, name);\n    this.saveNewContact(name, email);\n    this.handleRegistrationResult(result);\n  }\n\n  /**\n   * Sets loading state, clears previous messages.\n   */\n  private startLoading(): void {\n    this.isLoading = true;\n    this.errorMessage = '';\n    this.successMessage = '';\n  }\n\n  /**\n   * Handles the result of the registration process.\n   * Shows success message and redirects on success,\n   * or displays an error message.\n   *\n   * @param result - Result object returned from signUp attempt.\n   */\n  private handleRegistrationResult(\n    result: { success: boolean; message?: string }\n  ): void {\n    if (result.success) {\n      this.successMessage = 'Registration successful! You will be redirected...';\n      setTimeout(() => {\n        this.router.navigate(['/summary']);\n      }, 2000);\n    } else {\n      this.errorMessage = result.message || 'Registration failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Creates and stores a new contact based on registration input.\n   * \n   * @param newName Name entered during registration.\n   * @param newEmail Email address entered during registration.\n   */\n  saveNewContact(newName: string, newEmail: string): void {\n    const newContact: Contact = {\n      name: newName,\n      email: newEmail,\n    };\n    this.contactService.addContact(newContact);\n    this.contactService.selectContact(newContact);\n  }\n\n  /**\n   * Navigates the user back to the login screen.\n   * Uses `skipLocationChange` to avoid adding the redirect to browser history.\n   */\n  onBackToLogin(): void {\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\n      this.router.navigate(['/login']);\n    });\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for the given form field.\n   * Delegates error interpretation to specialized helper functions.\n   * \n   * @param field - The name of the form control.\n   * @returns A descriptive validation message or empty string.\n   */\n  getValidationMessage(field: string): string {\n    if (field === 'confirmPassword') {\n      return this.getPasswordMismatchMessage();\n    }\n    const control = this.signupform.get(field);\n    if (!control || !control.touched || !control.errors) return '';\n    return this.getFieldErrorMessage(control);\n  }\n\n  /**\n   * Returns a validation message if the password and confirmation do not match.\n   * Only shown if either password field has been touched or changed.\n   * \n   * @returns Password mismatch message or empty string.\n   */\n  private getPasswordMismatchMessage(): string {\n    const confirmControl = this.signupform.get('confirmPassword');\n    const passwordControl = this.signupform.get('password');\n    const mismatch = this.signupform.errors?.['passwordsDontMatch'];\n    const touched = confirmControl?.touched || passwordControl?.touched;\n    const dirty = confirmControl?.dirty || passwordControl?.dirty;\n    if (mismatch && (touched || dirty)) {\n      return 'Passwords do not match';\n    }\n    return '';\n  }\n\n  /**\n   * Returns a general validation error message for a given form control.\n   * \n   * @param control - The FormControl instance to evaluate.\n   * @returns The corresponding validation message or an empty string.\n   */\n  private getFieldErrorMessage(control: AbstractControl): string {\n    if (control.errors?.['required']) {\n      return 'This field is required';\n    }\n    if (control.errors?.['email']) {\n      return 'Please enter a valid email address';\n    }\n    if (control.errors?.['minlength']) {\n      return `Minimum ${control.errors['minlength'].requiredLength} characters required`;\n    }\n    if (control.errors?.['pattern']) {\n      return 'Password must contain uppercase, numbers and special characters';\n    }\n    if (control.errors?.['requiredTrue']) {\n      return 'You must accept the privacy policy';\n    }\n    return '';\n  }\n}\n    \n\n    \n          \n       \n        \n            \n           \n        \n            \n                \n                    \n                \n                Sign up\n            \n                \n                    \n                        \n                            \n                                \n                                \n                                \n                            \n                            \n                                {{ getValidationMessage('name') }}\n                            \n                        \n                       \n                    \n                        \n                            \n                                \n                                \n                                \n                            \n                            \n                                {{ getValidationMessage('email') }}\n                            \n                        \n                        \n                    \n                        \n                            \n                                \n                                \n                                \n                                \n                            \n                            \n                                {{ getValidationMessage('password') }}\n                            \n                        \n                        \n                     \n                        \n                            \n                                \n                                \n                                \n                                \n                            \n                            \n                                {{ getValidationMessage('confirmPassword') }}\n                            \n                        \n                    \n                        \n                        \n                            \n                            I accept the Privacy policy\n                        \n                        \n                    \n                        \n                            Sign Up\n                            \n                                \n                                Signing up...\n                            \n                        \n                    \n                    {{ successMessage }}\n                    {{ errorMessage }}\n                    \n        \n    \n        \n\n\n\n\n\n    \n\n    \n                \n                    ./signup.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.signup-content {\n    position: relative;\n    max-width: 1440px;\n    margin: 0 auto;\n    height: 100dvh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.dark-logo-wrapper {\n    padding: 32px 40px;\n\n    img {\n        @media (max-width: 768px) {\n            height: 72px;\n            width: 64px;\n        }\n\n        @media (max-width: 406px){\n            height: 48px;\n            width: auto;\n            margin: 0 4px;\n        }\n    }\n\n    @media (max-width: 406px){\n        padding: 12px;\n    }\n\n    @media(min-width: 768px) {\n        height: 180px;\n    }\n}\n\n.signup-frame {\n  background-color: var(--background-light);\n  border-radius: 20px;\n  padding: clamp(32px, calc(1.8vw + 20px), 64px);\n  box-shadow: 0px 4px 24px rgba(0, 0, 0, 0.05);\n  width: clamp(440px, 5vw + 440px, 560px);\n  max-width: 500px;\n  margin: 0 auto;\n  @include flex-center;\n  flex-direction: column;\n  align-items: center;\n  gap: clamp(24px, 2.5vh, 36px);\n  margin-top: 1rem;\n  height: 65dvh;\n  max-height: 650px;\n\n  @media (max-width: 600px){\n    width: 90vw;\n    max-width: 400px;\n    padding: 24px 12px;\n    gap: 20px;\n    box-sizing: border-box;\n    overflow-x: hidden;\n    max-height: 536px;\n  }\n\n\n  @media (max-width: 406px){\n    margin-top: 2rem;\n    overflow-y: auto;\n  }\n\n}  \n\n.signup-header {\n  width: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .btn-back {\n    @include btn();\n    position: absolute;\n    left: 0;\n\n    img {\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n    h2 {\n        @include inter700-fs47;\n        color: var(--text-color-main);\n        position: relative;\n        margin-bottom: 0;\n\n        &::after {\n        content: \"\";\n        display: block;\n        width: 80px;\n        height: 3px;\n        background-color: var(--accent-primary-color);\n        margin: 12px auto 0;\n        border-radius: 3px;\n        }\n\n       @media (max-width: 768px){\n            font-family: \"Inter\";\n            font-weight: 700;\n            font-size: 36px;\n        }\n\n        @media (max-width: 406px){\n            font-family: \"Inter\";\n            font-weight: 700;\n            font-size: 26px;\n        }\n    }\n}    \n\nform {\n    padding: 8px 33px;\n\n}\n\n.form-group-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 20px;\n}\n\n.form-group {\n    @include form-group();\n    background-color: var(--background-light);\n    position: relative;\n    \n\n    input {\n        width: 100%;\n        background-color: transparent;\n        color: var(--text-color-main);\n        padding-right: 28px;\n        @include inter400-fs20();\n        height: 16px;\n        font-size: 16px;\n    }\n\n    input::placeholder {\n        color: var(--text-color-medium);\n        opacity: 1; \n    }\n\n    input.invalid {\n        border: 2px solid var(--text-color-error);\n    }\n\n    .input-icon {\n        position: absolute;\n        right: clamp(12px, 2vw, 18px);\n        top: 50%;\n        transform: translateY(-50%);\n        height: 20px;\n        width: 20px;\n        opacity: 0.6;\n    }\n\n    @media(max-width: 768px) {\n        width: 100%;\n\n        input {\n            font-size: 15px;\n            height: 14px;\n        }\n\n        .input-icon {\n            width: 18px;\n            height: 18px;\n            right: 12px;\n        }\n    }\n\n}\n\n.checkbox-label {\n    @include flex-center;\n    gap: 8px;\n    margin: 8px;\n    margin-top: 16px;\n    width: 100%;\n    @include inter400-fs14();\n    color: var(--text-color-medium);\n    cursor: pointer;\n    position: relative;\n\n    input[type=\"checkbox\"] {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        cursor: pointer;\n        background-image: url(\"./../../../../public/assets/img/icons/checkbox.png\");\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        border: none;\n        margin: 0;\n        padding: 0;\n        flex-shrink: 0;\n    }\n\n    input[type=\"checkbox\"]:checked {\n        background-image: url(\"./../../../../public/assets/img/icons/checkbox-checked.png\");\n    }\n\n    .highlight {\n        color: var(--accent-primary-color);\n        text-decoration: none;\n        cursor: pointer;\n    }\n\n    @media (max-width: 406px){\n        font-size: 12px;\n        gap: 4px;\n        margin: 4px;\n    }\n}\n\n.btn-wrapper {\n    width: 100%;\n    @include flex-center;\n}\n\n.btn-signup {\n    cursor: pointer;\n    height: 44px;\n    border-radius: 8px;\n    border: unset;\n    min-width: 120px;\n    transition: background-color 0.2s ease;\n    justify-content: center;\n    @include btn-dark();\n\n    &:hover {\n        background-color: #29abe2;\n        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);\n    }\n\n    &:disabled {\n        background-color: #ccc;\n        color: #666;\n        cursor: not-allowed;\n        opacity: 0.6;\n    }\n\n    @media (max-width: 406px){\n        font-size: 16px;\n        height: 32px;\n        min-width: 96px;\n    }\n}\n\n.colorError {\n    border: 1px solid var(--text-color-error);\n}\n\n.error-message {\n    @include inter400-fs12;\n    color: var(--text-color-error);\n    display: hidden;\n\n    @media(max-width: 768px) {\n        font-size: 13px;\n    }\n}\n\n.success-message {\n    @include inter400-fs12;\n    color: var(--text-color-success);\n    display: block;\n    margin-top: 16px;\n    text-align: center;\n}\n\n.login-link {\n    @include inter400-fs12;\n    color: var(--text-color-light);\n    text-align: center;\n    margin-top: 16px;\n    \n    a {\n        color: var(--accent-color);\n        text-decoration: none;\n        \n        &:hover {\n            text-decoration: underline;\n        }\n    }\n}\n\ninput:focus {\n    border: unset;\n}\n\n.spinner {\n  border: 2px solid #fff;\n  border-top: 2px solid transparent;\n  border-radius: 50%;\n  width: 14px;\n  height: 14px;\n  display: inline-block;\n  animation: spin 0.8s linear infinite;\n  margin-right: 6px;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.input-icon.toggle-eye {\n    cursor: pointer;\n    right: 16px;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                Sign up                                                                                                                                                                                                                                                                                            {{ getValidationMessage(\\'name\\') }}                                                                                                                                                                                                                                                                                                                                           {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                                                                                                                                                            {{ getValidationMessage(\\'password\\') }}                                                                                                                                                                                                                                                                                                                                                                             {{ getValidationMessage(\\'confirmPassword\\') }}                                                                                                                                                                                I accept the Privacy policy                                                                                                                        Sign Up                                                                                            Signing up...                                                                                            {{ successMessage }}                    {{ errorMessage }}                                        '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask.html":{"url":"interfaces/Subtask.html","title":"interface - Subtask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/subtask-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            completed\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        completed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        completed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\n\nexport interface Subtask {\n  id: string | number;\n  text: string;\n  completed: boolean;\n}\n\n/**\n * SubtaskManager handles all subtask-related operations for the AddTaskComponent.\n * This includes adding, editing, deleting, and managing subtask state.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SubtaskManager {\n  private subtasks: Subtask[] = [];\n  private nextSubtaskId: number = 1;\n  private editingSubtaskId: string | number | null = null;\n  private editingSubtaskText: string = '';\n  private subtaskInput: string = '';\n  private showSubtaskConfirmation: boolean = false;\n  originalSubtasks: Subtask[] = [];\n\n  constructor( private taskService: TaskService ){}\n\n  /**\n   * Gets all subtasks\n   */\n  getSubtasks(): Subtask[] {\n    return this.subtasks;\n  }\n\n  /**\n   * Sets the subtasks array\n   */\n  setSubtasks(subtasks: Subtask[]): void {\n    this.subtasks = subtasks;\n    this.nextSubtaskId = subtasks.length + 1;\n  }\n\n  /**\n   * Gets the current subtask input value\n   */\n  getSubtaskInput(): string {\n    return this.subtaskInput;\n  }\n\n  /**\n   * Sets the subtask input value\n   */\n  setSubtaskInput(value: string): void {\n    this.subtaskInput = value;\n  }\n\n  /**\n   * Gets the subtask confirmation state\n   */\n  getShowSubtaskConfirmation(): boolean {\n    return this.showSubtaskConfirmation;\n  }\n\n  /**\n   * Sets the subtask confirmation state\n   */\n  setShowSubtaskConfirmation(value: boolean): void {\n    this.showSubtaskConfirmation = value;\n  }\n\n  /**\n   * Gets the editing subtask ID\n   */\n  getEditingSubtaskId(): string | number | null {\n    return this.editingSubtaskId;\n  }\n\n  /**\n   * Gets the editing subtask text\n   */\n  getEditingSubtaskText(): string {\n    return this.editingSubtaskText;\n  }\n\n  /**\n   * Sets the editing subtask text\n   */\n  setEditingSubtaskText(value: string): void {\n    this.editingSubtaskText = value;\n  }\n\n  /**\n   * Handles subtask input click to clear the input if confirmation is not shown.\n   */\n  onSubtaskInputClick(): void {\n    if (!this.showSubtaskConfirmation) {\n      this.subtaskInput = '';\n    }\n  }\n\n  /**\n   * Handles Enter key press on subtask input to add the subtask.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEnter(event: Event): void {\n    event.preventDefault();\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      this.addSubtask();\n    }\n  }\n\n  /**\n   * Confirms and adds the subtask.\n   * @param event - The event that triggered the confirmation.\n   */\n  confirmSubtask(event: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.addSubtask();\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Cancels subtask creation and clears the input.\n   */\n  cancelSubtask(): void {\n    this.subtaskInput = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Adds a new subtask to the task.\n   */\n  addSubtask(): void {\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      const newSubtask: Subtask = {\n        id: this.nextSubtaskId++,\n        text: this.subtaskInput.trim(),\n        completed: false\n      };\n      this.subtasks.push(newSubtask);\n      this.subtaskInput = '';\n      this.showSubtaskConfirmation = false;\n    }\n  }\n\n  /**\n   * Deletes a subtask by its ID.\n   * @param id - The ID of the subtask to delete.\n   */\n  deleteSubtask(id: string | number): void {\n    this.subtasks = this.subtasks.filter(subtask => subtask.id !== id);\n  }\n\n  /**\n   * Edits the text of a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param newText - The new text for the subtask.\n   */\n  editSubtask(id: string | number, newText: string): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.text = newText.trim();\n    }\n  }\n\n  /**\n   * Initiates editing mode for a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param currentText - The current text of the subtask.\n   */\n  editSubtaskPrompt(id: string | number, currentText: string): void {\n    this.editingSubtaskId = id;\n    this.editingSubtaskText = currentText;\n    setTimeout(() => {\n      const inputElement = document.querySelector('.subtask-edit-input') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = this.editingSubtaskText;\n        inputElement.focus();\n        inputElement.setSelectionRange(inputElement.value.length, inputElement.value.length);\n      }\n    }, 100);\n  }\n\n  /**\n   * Saves the edited subtask text.\n   */\n  saveSubtaskEdit(): void {\n    if (this.editingSubtaskId !== null) {\n      if (this.editingSubtaskText && this.editingSubtaskText.trim()) {\n        this.editSubtask(this.editingSubtaskId, this.editingSubtaskText.trim());\n      }\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Cancels subtask editing mode.\n   */\n  cancelSubtaskEdit(): void {\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n  }\n\n  /**\n   * Handles keyboard shortcuts for subtask editing.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEditKeydown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.saveSubtaskEdit();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Toggles the completion state of a subtask.\n   * @param id - The ID of the subtask to toggle.\n   */\n  toggleSubtaskCompletion(id: string | number): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.completed = !subtask.completed;\n    }\n  }\n\n  /**\n   * Clears all subtask data and resets to default state.\n   */\n  clearAll(): void {\n    this.subtasks = [];\n    this.subtaskInput = '';\n    this.nextSubtaskId = 1;\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Saves all given subtasks to the task with the specified ID.\n   * \n   * @param taskId - The ID of the task to add subtasks to.\n   * @param subtasks - The list of subtasks to be saved.\n   */\n  public async saveAllSubtasks(taskId: string, subtasks: any[]): Promise {\n    for (const subtask of subtasks) {\n      await this.taskService.addSubtask(taskId, {\n        title: subtask.text,\n        isCompleted: subtask.completed\n      });\n    }\n  }\n\n  /**\n   * Returns a list of original subtasks that have been deleted.\n   * \n   * @param currentSubtasks - The current list of subtasks in the form.\n   */\n  public getDeletedSubtasks(currentSubtasks: any[]): any[] {\n    return this.originalSubtasks.filter(original =>\n      typeof original.id === 'string' &&\n      original.id.length > 0 &&\n      !currentSubtasks.some(current => current.id === original.id)\n    );\n  }\n\n  /**\n   * Deletes the given subtasks from the specified task.\n   * \n   * @param taskId - The ID of the task.\n   * @param subtasks - The subtasks to delete.\n   */\n  public async deleteSubtasks(taskId: string, subtasks: any[]): Promise {\n    for (const subtask of subtasks) {\n      if (typeof subtask.id === 'string') {\n        await this.taskService.deleteSubtask(taskId, subtask.id);\n      }\n    }\n  }\n\n  /**\n   * Syncs all current subtasks (add or update) with the backend.\n   * \n   * @param taskId - The ID of the task to sync with.\n   * @param subtasks - The current list of subtasks in the form.\n   */\n  public async syncSubtasks(taskId: string, subtasks: any[]): Promise {\n    for (const subtask of subtasks) {\n      const subtaskData = {\n        title: subtask.text,\n        isCompleted: subtask.completed\n      };\n      if (typeof subtask.id === 'string' && subtask.id.length > 0) {\n        await this.taskService.updateSubtask(taskId, subtask.id, subtaskData);\n      } else {\n        await this.taskService.addSubtask(taskId, subtaskData);\n      }\n    }\n  }\n\n   /**\n   * Loads subtasks for the given task ID and sets them in the subtask manager.\n   *\n   * @param taskId - The ID of the task whose subtasks should be loaded.\n   */\n  public loadAndSetSubtasks(taskId: string): void {\n    this.taskService.getSubtasks(taskId).subscribe(subtasks => {\n      const mappedSubtasks = subtasks.map(subtask => ({\n        id: subtask.id || '',\n        text: subtask.title,\n        completed: subtask.isCompleted,\n      }));\n      this.setSubtasks(mappedSubtasks);\n      this.originalSubtasks = [...mappedSubtasks];\n    });\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask-1.html":{"url":"interfaces/Subtask-1.html","title":"interface - Subtask-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a subtask belonging to a task.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Completion status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title or label of the subtask\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error('Error adding task:', err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SummaryComponent.html":{"url":"components/SummaryComponent.html","title":"component - SummaryComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SummaryComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/summary/summary.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-summary\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./summary.component.html\n            \n\n\n\n            \n                styleUrl\n                ./summary.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                awaitingFeedbackCount\n                            \n                            \n                                doneCount\n                            \n                            \n                                greeting\n                            \n                            \n                                greetingState\n                            \n                            \n                                inProgressCount\n                            \n                            \n                                isMobile\n                            \n                            \n                                nextDeadlineCount\n                            \n                            \n                                nextDeadlineDate\n                            \n                            \n                                showGreeting\n                            \n                            \n                                taskList\n                            \n                            \n                                todoCount\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                countTasksByStatus\n                            \n                            \n                                    Private\n                                getEarliestDate\n                            \n                            \n                                    Private\n                                getFutureTasksWithDateObj\n                            \n                            \n                                getGreeting\n                            \n                            \n                                goToBoard\n                            \n                            \n                                    Private\n                                isFirestoreTimestamp\n                            \n                            \n                                    Private\n                                loadAndProcessTasks\n                            \n                            \n                                    Private\n                                loadUserGreeting\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                parseDate\n                            \n                            \n                                    Private\n                                setNextDeadline\n                            \n                            \n                                    Private\n                                setTaskCounts\n                            \n                            \n                                    Private\n                                showAnimatedGreeting\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    totalTaskCount\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/summary/summary.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        countTasksByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    countTasksByStatus(tasks: Task[], status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:60\n                        \n                    \n\n\n            \n                \n                        Counts the number of tasks with a specific status.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of tasks.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to count.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of tasks with the given status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getEarliestDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEarliestDate(tasks: ()[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:210\n                        \n                    \n\n\n            \n                \n                        Returns the earliest date from an array of tasks with valid date objects.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of tasks containing a dateObj property.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Date | null\n\n                        \n                            \n                                The earliest Date object, or null if the array is empty.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFutureTasksWithDateObj\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFutureTasksWithDateObj(tasks: Task[], parseDate: (date: string) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:193\n                        \n                    \n\n\n            \n                \n                        Filters tasks to only include those with a valid future date and not marked as 'done'.\nParses the date string into a Date object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of task objects.\n\n\n                                            \n                                        \n                                        \n                                                parseDate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA function that parses a date string into a Date object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     []\n\n                        \n                            \n                                An array of tasks with a valid future date, each including a dateObj field.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGreeting\n                        \n                    \n                \n            \n            \n                \ngetGreeting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:95\n                        \n                    \n\n\n            \n                \n                        Returns a greeting depending on the current time.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The greeting (e.g., \"Good morning,\").\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToBoard\n                        \n                    \n                \n            \n            \n                \ngoToBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Navigates to the board view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isFirestoreTimestamp\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFirestoreTimestamp(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:71\n                        \n                    \n\n\n            \n                \n                        Checks if the given object is a FirestoreTimestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         FirestoreTimestamp\n\n                        \n                            \n                                True if the object is a FirestoreTimestamp.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadAndProcessTasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadAndProcessTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:164\n                        \n                    \n\n\n            \n                \n                        Subscribes to task data and processes statistics and deadline information.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadUserGreeting\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadUserGreeting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Loads current user data and sets a personalized greeting.\nIf on mobile and greeting hasn't been shown in this session,\ntriggers an animated greeting display.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:119\n                        \n                    \n\n\n            \n                \n                        Initializes the component by determining device type,\nloading user greeting, and loading tasks with statistics.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseDate(date: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:232\n                        \n                    \n\n\n            \n                \n                        Converts a date value of various possible formats into a JavaScript Date object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDate input which could be a string, number, Date, or Firestore timestamp.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Date | null\n\n                        \n                            \n                                A valid Date object or null if conversion is not possible.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setNextDeadline\n                        \n                    \n                \n            \n            \n                \n                        \n                    setNextDeadline(tasks: Task[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:221\n                        \n                    \n\n\n            \n                \n                        Determines and sets the next upcoming deadline from the list of tasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of task objects.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setTaskCounts\n                        \n                    \n                \n            \n            \n                \n                        \n                    setTaskCounts(tasks: Task[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:177\n                        \n                    \n\n\n            \n                \n                        Sets the count of tasks by specific statuses and urgency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of task objects to be analyzed.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showAnimatedGreeting\n                        \n                    \n                \n            \n            \n                \n                        \n                    showAnimatedGreeting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Animates a greeting sequence for mobile devices.\nHides the greeting after the animation and stores the display state in sessionStorage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        awaitingFeedbackCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doneCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greeting\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greetingState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inProgressCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showGreeting\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todoCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        totalTaskCount\n                    \n                \n\n                \n                    \n                        gettotalTaskCount()\n                    \n                \n                            \n                                \n                                    Defined in src/app/summary/summary.component.ts:81\n                                \n                            \n                    \n                        \n                                Returns the total number of all tasks.\n\n\n                                \n                                \n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\n\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showAnimatedGreeting();\n      } else {\n        this.showGreeting = false;\n      }\n    });\n  }\n\n  /**\n   * Animates a greeting sequence for mobile devices.\n   * Hides the greeting after the animation and stores the display state in sessionStorage.\n   */\n  private showAnimatedGreeting(): void {\n    this.showGreeting = true;\n    this.greetingState = 'start';\n    setTimeout(() => {\n      this.greetingState = 'moved';\n      setTimeout(() => {\n        this.showGreeting = false;\n        sessionStorage.setItem('greetingShown', 'true');\n      }, 2000);\n    }, 500);\n  }\n\n  /**\n   * Subscribes to task data and processes statistics and deadline information.\n   */\n  private loadAndProcessTasks(): void {\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n      this.setTaskCounts(tasks);\n      this.setNextDeadline(tasks);\n    });\n  }\n\n  /**\n   * Sets the count of tasks by specific statuses and urgency.\n   * \n   * @param tasks - Array of task objects to be analyzed.\n   */\n  private setTaskCounts(tasks: Task[]): void {\n    this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n    this.doneCount = this.countTasksByStatus(tasks, 'done');\n    this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n    this.awaitingFeedbackCount = this.countTasksByStatus(tasks, 'await-feedback');\n    this.nextDeadlineCount = tasks.filter((t) => t.priority === 'urgent').length;\n  }\n\n  /**\n   * Filters tasks to only include those with a valid future date and not marked as 'done'.\n   * Parses the date string into a Date object.\n   * \n   * @param tasks - Array of task objects.\n   * @param parseDate - A function that parses a date string into a Date object.\n   * @returns An array of tasks with a valid future date, each including a `dateObj` field.\n   */\n  private getFutureTasksWithDateObj(tasks: Task[], parseDate: (date: string) => Date | null): (Task & { dateObj: Date })[] {\n    const now = new Date();\n    return tasks\n    .filter((t) => t.date && t.status !== 'done')\n    .map((t) => {\n      const dateObj = this.parseDate(t.date!);\n      return { ...t, dateObj };\n    })\n    .filter((t): t is Task & { dateObj: Date } => !!t.dateObj && t.dateObj > now);\n  }\n\n  /**\n   * Returns the earliest date from an array of tasks with valid date objects.\n   * \n   * @param tasks - Array of tasks containing a `dateObj` property.\n   * @returns The earliest Date object, or null if the array is empty.\n   */\n  private getEarliestDate(tasks: (Task & { dateObj: Date })[]): Date | null {\n    if (tasks.length === 0) return null;\n    tasks.sort((a, b) => a.dateObj.getTime() - b.dateObj.getTime());\n    return tasks[0].dateObj;\n  }\n\n  /**\n   * Determines and sets the next upcoming deadline from the list of tasks.\n   * \n   * @param tasks - Array of task objects.\n   */\n  private setNextDeadline(tasks: Task[]): void {\n    const futureTasks = this.getFutureTasksWithDateObj(tasks, this.parseDate.bind(this));\n    this.nextDeadlineDate = this.getEarliestDate(futureTasks);\n  }\n\n  /**\n   * Converts a date value of various possible formats into a JavaScript Date object.\n   * \n   * @param date - Date input which could be a string, number, Date, or Firestore timestamp.\n   * @returns A valid Date object or null if conversion is not possible.\n   */\n  private parseDate(date: any): Date | null {\n    if (date instanceof Date) return date;\n    if (this.isFirestoreTimestamp(date)) return date.toDate();\n    if (typeof date === 'string' || typeof date === 'number') return new Date(date);\n    return null;\n  }\n}\n    \n\n    \n        \n  \n    Join 360\n    \n    Key Metrics at a Glance\n    \n  \n\n  \n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n  \n    \n      \n        \n          \n            \n            \n              \n            \n            \n              \n            \n          \n\n          \n            {{ todoCount }}\n            To-do\n          \n        \n\n        \n          \n            \n            \n          \n          \n            {{ doneCount }}\n            Done\n          \n        \n      \n\n      \n        \n          \n            \n            \n          \n        \n\n        \n          {{ nextDeadlineCount }}\n          Urgent\n        \n        \n        \n          {{ nextDeadlineDate | date : \"MMMM d, y\" }}\n          Upcoming Deadline\n        \n      \n\n      \n        \n          \n            {{ totalTaskCount }}\n            Tasks inBoard\n          \n        \n        \n          \n            {{ inProgressCount }}\n            Tasks in Progress\n          \n        \n        \n          \n            {{ awaitingFeedbackCount }}\n            Awaiting Feedback\n          \n        \n      \n    \n\n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Join 360        Key Metrics at a Glance                  {{ greeting }}      {{ userName }}                                                                                                                                                            {{ todoCount }}            To-do                                                                                            {{ doneCount }}            Done                                                                                                            {{ nextDeadlineCount }}          Urgent                                  {{ nextDeadlineDate | date : \"MMMM d, y\" }}          Upcoming Deadline                                                  {{ totalTaskCount }}            Tasks inBoard                                                {{ inProgressCount }}            Tasks in Progress                                                {{ awaitingFeedbackCount }}            Awaiting Feedback                                      {{ greeting }}      {{ userName }}      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SummaryComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Task.html":{"url":"interfaces/Task.html","title":"interface - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a task in the system.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            assignedTo\n                                        \n                                \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            priority\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subtask\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        assignedTo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assignedTo:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional list of user IDs assigned to the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:     \"technical\" | \"user story\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"technical\" | \"user story\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Task category\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:     Date | Timestamp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | Timestamp\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Date of the task; may be a native Date object or Firestore Timestamp.\nFirestore stores it as a Timestamp and it needs conversion after reading.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating a task)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:     \"low\" | \"medium\" | \"urgent\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"low\" | \"medium\" | \"urgent\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Priority level of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current status of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtask\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtask:     Subtask[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Subtask[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional array of subtasks (retrieved separately as subcollection)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title of the task\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error('Error adding task:', err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskComponent.html":{"url":"components/TaskComponent.html","title":"component - TaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task/task.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeStatus\n                            \n                            \n                                getAllUniqueContacts\n                            \n                            \n                                getCompletedSubtasksCount\n                            \n                            \n                                    Async\n                                getContactList\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                getUniqueContacts\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                openDotsMenuHandler\n                            \n                            \n                                openTaskDetails\n                            \n                            \n                                percentageCompleted\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                openedMenuTaskId\n                            \n                            \n                                subtaskList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                closeDotsMenu\n                            \n                            \n                                contacts\n                            \n                            \n                                openDotsMenu\n                            \n                            \n                                taskSelected\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isDotsMenuOpen\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task/task.component.ts:93\n                            \n                        \n\n                \n                    \n                            Injects services required for task and contact operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for task data handling.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contact information.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        openedMenuTaskId\n                    \n                \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:75\n                            \n                        \n                \n                    \n                        The ID of the task for which the contextual \"dots\" menu is currently open.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskList\n                    \n                \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:55\n                            \n                        \n                \n                    \n                        The list of subtasks associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:50\n                            \n                        \n                \n                    \n                        The task to be displayed in this component.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changeTaskStatus\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:90\n                            \n                        \n                \n                    \n                        Emits a status change for the task, along with its ID.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:85\n                            \n                        \n                \n                    \n                        Emits an event when the \"dots\" menu should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        contacts\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:65\n                            \n                        \n                \n                    \n                        Emits the list of resolved contacts associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        openDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:80\n                            \n                        \n                \n                    \n                        Emits the ID of the task when the \"dots\" menu is opened.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        taskSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:60\n                            \n                        \n                \n                    \n                        Emits the selected task when the user opens the task detail view.\n\n                    \n                \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:112\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeStatus\n                        \n                    \n                \n            \n            \n                \nchangeStatus(status: string, event: MouseEvent | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:151\n                        \n                    \n\n\n            \n                \n                        Emits a task status change and closes the dots menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new status to assign to the task.\n\n                                            \n                                        \n                                        \n                                                event\n                                            \n                                                        MouseEvent | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Optional mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUniqueContacts\n                        \n                    \n                \n            \n            \n                \ngetAllUniqueContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:237\n                        \n                    \n\n\n            \n                \n                        Returns a unique list of contacts (removes duplicates based on ID)\n\n\n                        \n                            Returns :         Contact[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCompletedSubtasksCount\n                        \n                    \n                \n            \n            \n                \ngetCompletedSubtasksCount(subtaskList: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Returns the number of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of completed subtasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:222\n                        \n                    \n\n\n            \n                \n                        Loads the full contact details for each assigned contact in the task\nand emits the resolved contact list.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:259\n                        \n                    \n\n\n            \n                \n                        Joins the names of remaining contacts into a comma-separated string.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUniqueContacts\n                        \n                    \n                \n            \n            \n                \ngetUniqueContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:249\n                        \n                    \n\n\n            \n                \n                        Returns the first 4 contacts for display.\n\n\n                        \n                            Returns :         Contact[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when any data-bound @Input properties change.\nThis method checks whether the task input has changed (excluding the first change),\nand if so, resets and reloads the contact list based on the updated task data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An object of changed properties with current and previous values.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that loads the contact list for the task on component init.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:112\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDotsMenuHandler\n                        \n                    \n                \n            \n            \n                \nopenDotsMenuHandler(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:209\n                        \n                    \n\n\n            \n                \n                        Toggles the dots menu open or closed for this task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetails\n                        \n                    \n                \n            \n            \n                \nopenTaskDetails(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:190\n                        \n                    \n\n\n            \n                \n                        Emits the selected task to open its detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The task to open.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        percentageCompleted\n                        \n                    \n                \n            \n            \n                \npercentageCompleted(subtaskList: Subtask[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:179\n                        \n                    \n\n\n            \n                \n                        Calculates the percentage of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        Subtask[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The completion percentage as a number between 0 and 100.\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:45\n                        \n                    \n\n            \n                \n                    The full list of contacts assigned to the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:103\n                        \n                    \n\n            \n                \n                    Service for fetching contact information.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:70\n                        \n                    \n\n            \n                \n                    Holds the task currently selected to open its detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:102\n                        \n                    \n\n            \n                \n                    Service for task data handling.\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isDotsMenuOpen\n                    \n                \n\n                \n                    \n                        getisDotsMenuOpen()\n                    \n                \n                            \n                                \n                                    Defined in src/app/board/task/task.component.ts:200\n                                \n                            \n                    \n                        \n                                Checks if the dots menu is currently open for this task.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n} from '@angular/core';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { TaskService } from '../../services/task.service';\nimport { Task } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { SimpleChanges, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-task',\n  imports: [CommonModule],\n  templateUrl: './task.component.html',\n  styleUrl: './task.component.scss',\n})\n\nexport class TaskComponent {\n\n  /**\n   * The full list of contacts assigned to the task.\n   */\n  contactList: Contact[] = [];\n\n  /**\n   * The task to be displayed in this component.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  @Input() subtaskList: Subtask[] = [];\n\n  /**\n   * Emits the selected task when the user opens the task detail view.\n   */\n  @Output() taskSelected = new EventEmitter();\n\n  /**\n   * Emits the list of resolved contacts associated with the task.\n   */\n  @Output() contacts = new EventEmitter();\n\n  /**\n   * Holds the task currently selected to open its detail view.\n   */\n  selectedTask?: Task;\n\n  /**\n   * The ID of the task for which the contextual \"dots\" menu is currently open.\n   */\n  @Input() openedMenuTaskId: string | null = null;\n\n  /**\n   * Emits the ID of the task when the \"dots\" menu is opened.\n   */\n  @Output() openDotsMenu = new EventEmitter();\n\n  /**\n   * Emits an event when the \"dots\" menu should be closed.\n   */\n  @Output() closeDotsMenu = new EventEmitter();\n\n  /**\n   * Emits a status change for the task, along with its ID.\n   */\n  @Output() changeTaskStatus = new EventEmitter();\n\n  /**\n   * Injects services required for task and contact operations.\n   * \n   * @param taskService Service for task data handling.\n   * @param contactService Service for fetching contact information.\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService\n  ) {}\n\n  /**\n   * Detects clicks outside the \"dots\" menu and closes it if open.\n   * \n   * @param event Mouse click event on the document.\n   */\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (\n      !target.closest('.dots-menu-btn') &&\n      !target.closest('.dots-menu-overlay')\n    ) {\n      if (this.isDotsMenuOpen) {\n        this.closeDotsMenu.emit();\n      }\n    }\n  }\n\n  /**\n   * Lifecycle hook that loads the contact list for the task on component init.\n   */\n  ngOnInit(): void {\n    this.getContactList();\n  }\n\n  /**\n   * Lifecycle hook that is called when any data-bound @Input properties change.\n   * This method checks whether the `task` input has changed (excluding the first change),\n   * and if so, resets and reloads the contact list based on the updated task data.\n   *\n   * @param changes An object of changed properties with current and previous values.\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['task'] && !changes['task'].firstChange) {\n      this.contactList = [];\n      this.getContactList();\n    }\n  }\n\n  /**\n   * Emits a task status change and closes the dots menu.\n   * \n   * @param status The new status to assign to the task.\n   * @param event Optional mouse event to stop propagation.\n   */\n  changeStatus(status: string, event: MouseEvent | undefined) {\n    if (event) {\n      event.stopPropagation();\n    }\n    if (this.task.id) {\n      this.changeTaskStatus.emit({ taskId: this.task.id, status });\n      this.closeDotsMenu.emit();\n    }\n  }\n\n  /**\n   * Returns the number of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The number of completed subtasks.\n   */\n  getCompletedSubtasksCount(subtaskList: any[]): number {\n    return Array.isArray(subtaskList)\n      ? subtaskList.filter((el) => el.isCompleted).length\n      : 0;\n  }\n\n  /**\n   * Calculates the percentage of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The completion percentage as a number between 0 and 100.\n   */\n  percentageCompleted(subtaskList: Subtask[]): number {\n    if (!subtaskList || subtaskList.length === 0) return 0;\n    let completed = this.getCompletedSubtasksCount(subtaskList);\n    return Math.round((completed / subtaskList.length) * 100);\n  }\n\n  /**\n   * Emits the selected task to open its detail view.\n   * \n   * @param task The task to open.\n   */\n  openTaskDetails(task: Task) {\n    this.selectedTask = task;\n    this.taskSelected.emit(this.selectedTask);\n  }\n\n  /**\n   * Checks if the dots menu is currently open for this task.\n   * \n   * @returns A boolean indicating if the dots menu is open.\n   */\n  get isDotsMenuOpen() {\n    return this.openedMenuTaskId === this.task.id;\n  }\n\n  /**\n   * Toggles the dots menu open or closed for this task.\n   * \n   * @param event Mouse event to stop propagation.\n   */\n  openDotsMenuHandler(event: MouseEvent) {\n    event.stopPropagation();\n    if (this.isDotsMenuOpen) {\n      this.closeDotsMenu.emit();\n    } else {\n      this.openDotsMenu.emit(this.task.id);\n    }\n  }\n\n  /**\n   * Loads the full contact details for each assigned contact in the task\n   * and emits the resolved contact list.\n   */\n  async getContactList() {\n    this.contactList = [];\n    if (this.task?.assignedTo?.length) {\n      const uniqueContactIds = [...new Set(this.task.assignedTo)];\n      for (let contactId of uniqueContactIds) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) this.contactList.push(contact);\n      }\n      this.contacts.emit(this.contactList);\n    }\n  }\n\n   /**\n   * Returns a unique list of contacts (removes duplicates based on ID)\n   */\n  getAllUniqueContacts(): Contact[] {\n    if (!this.contactList || this.contactList.length === 0) {\n      return [];\n    }\n    return this.contactList.filter((contact, index, self) =>\n      index === self.findIndex(c => c.id === contact.id)\n    );\n  }\n\n  /**\n   * Returns the first 4 contacts for display.\n   */\n  getUniqueContacts(): Contact[] {\n    return this.getAllUniqueContacts().slice(0, 4);\n  }\n\n  /**\n   * Joins the names of remaining contacts into a comma-separated string.\n   * \n   * @param remainingContacts Array of remaining Contact objects.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(): string {\n    const all = this.getAllUniqueContacts();\n    const remaining = all.slice(4);\n    return remaining.map((c) => c.name).join(', ');\n  }\n}\n    \n\n    \n        \n  \n    \n      {{ taskService.capitalize(task.category) }}\n    \n\n    \n      \n      \n      \n    \n\n    \n      To Do\n      In Progress\n      Awaiting Feedback\n      Done\n    \n  \n  \n    {{ taskService.capitalize(task.title) }}\n    \n      {{ taskService.capitalize(task.description) }}\n      …\n    \n     0 ? 'visible' : 'hidden'\n      \"\n    >\n      \n        \n      \n      \n        {{ getCompletedSubtasksCount(subtaskList) }} /\n        {{ subtaskList.length }} Subtasks\n      \n    \n    \n      \n        \n          @for (contact of getUniqueContacts(); track contact.id) {\n          \n            \n              {{ contactService.getInitials(contact.name) }}\n            \n          \n          }\n           4\"\n            [title]=\"getRemainingContactNames()\"\n          >\n            +{{ getAllUniqueContacts().length - 4 }}\n          \n        \n      \n      \n      \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ taskService.capitalize(task.category) }}                                        To Do      In Progress      Awaiting Feedback      Done            {{ taskService.capitalize(task.title) }}          {{ taskService.capitalize(task.description) }}      …         0 ? \\'visible\\' : \\'hidden\\'      \"    >                                  {{ getCompletedSubtasksCount(subtaskList) }} /        {{ subtaskList.length }} Subtasks                                      @for (contact of getUniqueContacts(); track contact.id) {                                    {{ contactService.getInitials(contact.name) }}                                }           4\"            [title]=\"getRemainingContactNames()\"          >            +{{ getAllUniqueContacts().length - 4 }}                                                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskDataService.html":{"url":"injectables/TaskDataService.html","title":"injectable - TaskDataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskDataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/task-data.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildTask\n                            \n                            \n                                    Private\n                                getUniqueAssignedContactIds\n                            \n                            \n                                    Async\n                                populateFromTask\n                            \n                            \n                                    Private\n                                setAssignedContacts\n                            \n                            \n                                    Private\n                                setBasicFormData\n                            \n                            \n                                    Private\n                                setDueDate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildTask\n                        \n                    \n                \n            \n            \n                \nbuildTask(formData: FormData, status: string, priorityManager: PriorityManager, contactManager: ContactManager, categoryManager: CategoryManager, id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/task-data.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Builds a task object from current form and manager states.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                formData\n                                            \n                                                            FormData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                priorityManager\n                                            \n                                                            PriorityManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contactManager\n                                            \n                                                            ContactManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                categoryManager\n                                            \n                                                            CategoryManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getUniqueAssignedContactIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUniqueAssignedContactIds(contactManager: ContactManager)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/task-data.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                contactManager\n                                            \n                                                            ContactManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        populateFromTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    populateFromTask(task: any, formData: FormData, priorityManager: PriorityManager, contactManager: ContactManager, subtaskManager: SubtaskManager, contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/task-data.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Populates form and managers with data from an existing task.\nReturns the original task status.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                formData\n                                            \n                                                            FormData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                priorityManager\n                                            \n                                                            PriorityManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contactManager\n                                            \n                                                            ContactManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subtaskManager\n                                            \n                                                            SubtaskManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAssignedContacts\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAssignedContacts(assignedToIds: string[], contactManager: ContactManager, contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/task-data.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                assignedToIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contactManager\n                                            \n                                                            ContactManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setBasicFormData\n                        \n                    \n                \n            \n            \n                \n                        \n                    setBasicFormData(task: any, formData: FormData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/task-data.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                formData\n                                            \n                                                            FormData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setDueDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDueDate(date: any, formData: FormData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/task-data.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                formData\n                                            \n                                                            FormData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Contact } from '../services/contact.service';\nimport { Task } from '../services/task.service';\nimport { ContactManager } from './contact-manager';\nimport { CategoryManager } from './category-manager';\nimport { PriorityManager } from './priority-manager';\nimport { SubtaskManager } from './subtask-manager';\n\nexport interface FormData {\n  title: string;\n  description: string;\n  dueDate: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskDataService {\n\n  /**\n   * Populates form and managers with data from an existing task.\n   * Returns the original task status.\n   */\n  async populateFromTask(\n    task: any,\n    formData: FormData,\n    priorityManager: PriorityManager,\n    contactManager: ContactManager,\n    subtaskManager: SubtaskManager,\n    contacts: Contact[]\n  ): Promise {\n    this.setBasicFormData(task, formData);\n    this.setDueDate(task.date, formData);\n    priorityManager.setPriorityAndCategory(task);\n    this.setAssignedContacts(task.assignedTo, contactManager, contacts);\n    if (task.id) {\n      subtaskManager.loadAndSetSubtasks(task.id);\n    }\n    return task.status || 'to-do';\n  }\n\n  /**\n   * Builds a task object from current form and manager states.\n   */\n  buildTask(\n    formData: FormData,\n    status: string,\n    priorityManager: PriorityManager,\n    contactManager: ContactManager,\n    categoryManager: CategoryManager,\n    id?: string\n  ): Task {\n    const uniqueContactIds = this.getUniqueAssignedContactIds(contactManager);\n    const task: any = {\n      title: formData.title.trim(),\n      description: formData.description?.trim() || '',\n      date: new Date(formData.dueDate),\n      priority: priorityManager.selectedPriority as 'low' | 'medium' | 'urgent',\n      status,\n      assignedTo: uniqueContactIds,\n      category: categoryManager.getSelectedCategory() as 'technical' | 'user story'\n    };\n    if (id) {\n      task.id = id;\n    }\n    return task as Task;\n  }\n\n  private setBasicFormData(task: any, formData: FormData): void {\n    formData.title = task.title || '';\n    formData.description = task.description || '';\n  }\n\n  private setDueDate(date: any, formData: FormData): void {\n    if (!date) return;\n    let dateValue: Date;\n    if (date.toDate) {\n      dateValue = date.toDate();\n    } else if (date instanceof Date) {\n      dateValue = date;\n    } else {\n      dateValue = new Date(date);\n    }\n    formData.dueDate = dateValue.toISOString().split('T')[0];\n  }\n\n  private setAssignedContacts(assignedToIds: string[], contactManager: ContactManager, contacts: Contact[]): void {\n    if (!assignedToIds || assignedToIds.length === 0) return;\n    const selectedContacts = contacts\n      .filter(contact => contact.id !== undefined)\n      .filter(contact => assignedToIds.includes(contact.id as string));\n    contactManager.setSelectedContacts(selectedContacts);\n  }\n  \n  private getUniqueAssignedContactIds(contactManager: ContactManager): string[] {\n    const contacts = contactManager.getSelectedContacts();\n    return [...new Set(contacts.map(c => c.id).filter(id => id !== undefined))] as string[];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskDetailsComponent.html":{"url":"components/TaskDetailsComponent.html","title":"component - TaskDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task-details/task-details.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task-details\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-details.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-details.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                showContent\n                            \n                            \n                                subtasks\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertDate\n                            \n                            \n                                deleteTask\n                            \n                            \n                                    Async\n                                loadAssignedContacts\n                            \n                            \n                                loadSubtasks\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                onSubtaskToggle\n                            \n                            \n                                openEditTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                closeTaskDetails\n                            \n                            \n                                editTask\n                            \n                            \n                                subtaskChanged\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-details/task-details.component.ts:71\n                            \n                        \n\n                \n                    \n                            Constructor injects task and contact services, and the Angular Router.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tasks and subtasks.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contacts.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation (currently unused).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        contactList\n                    \n                \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:61\n                            \n                        \n                \n                    \n                        The list of contacts assigned to this task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:56\n                            \n                        \n                \n                    \n                        The task whose details are being displayed.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        closeTaskDetails\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:41\n                            \n                        \n                \n                    \n                        Emits an event when the task detail view should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editTask\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:46\n                            \n                        \n                \n                    \n                        Emits an event when the user wants to edit the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:51\n                            \n                        \n                \n                    \n                        Emits the updated subtask list when a subtask is toggled.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Converts a Firebase Timestamp or Date to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The date or timestamp to convert.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the date.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n            \n                \ndeleteTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:131\n                        \n                    \n\n\n            \n                \n                        Deletes the task (if it has a valid ID), and closes the detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loadAssignedContacts\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadAssignedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Fetches detailed contact information for all assigned contact IDs\nand updates the contactList accordingly.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \nloadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:162\n                        \n                    \n\n\n            \n                \n                        Loads subtasks associated with the current task from the database.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook to load assigned contacts and subtasks on component initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Closes the task detail view and emits the close event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskToggle\n                        \n                    \n                \n            \n            \n                \nonSubtaskToggle(subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:148\n                        \n                    \n\n\n            \n                \n                        Toggles a subtask's completion status and updates it in the backend.\nEmits the updated list of subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The subtask to toggle.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openEditTask\n                        \n                    \n                \n            \n            \n                \nopenEditTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Prepares the task for editing and emits the edit event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:82\n                        \n                    \n\n            \n                \n                    Service for fetching contacts.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:66\n                        \n                    \n\n            \n                \n                    Controls whether the detail view content is shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:71\n                        \n                    \n\n            \n                \n                    The list of subtasks associated with the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:81\n                        \n                    \n\n            \n                \n                    Service for handling tasks and subtasks.\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { Task, TaskService } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-task-details',\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  templateUrl: './task-details.component.html',\n  styleUrl: './task-details.component.scss'\n})\n\nexport class TaskDetailsComponent {\n  /**\n   * Emits an event when the task detail view should be closed.\n   */\n  @Output() closeTaskDetails = new EventEmitter();\n\n  /**\n   * Emits an event when the user wants to edit the task.\n   */\n  @Output() editTask = new EventEmitter();\n\n  /**\n   * Emits the updated subtask list when a subtask is toggled.\n   */\n  @Output() subtaskChanged = new EventEmitter();\n\n  /**\n   * The task whose details are being displayed.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of contacts assigned to this task.\n   */\n  @Input() contactList: Contact[] = [];\n\n  /**\n   * Controls whether the detail view content is shown.\n   */\n  showContent = true;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  subtasks: Subtask[] = [];\n\n  /**\n   * Constructor injects task and contact services, and the Angular Router.\n   * \n   * @param taskService Service for handling tasks and subtasks.\n   * @param contactService Service for fetching contacts.\n   * @param router Angular Router for navigation (currently unused).\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService,\n    private router: Router\n  ) {}\n\n  /**\n   * Lifecycle hook to load assigned contacts and subtasks on component initialization.\n   */\n  ngOnInit(): void {\n    this.loadAssignedContacts();\n    this.loadSubtasks();\n  }\n\n  /**\n   * Closes the task detail view and emits the close event.\n   */\n  onClose() {\n    this.showContent = false;\n    this.closeTaskDetails.emit('close');\n  }\n\n  /**\n   * Converts a Firebase Timestamp or Date to a formatted string.\n   * \n   * @param date The date or timestamp to convert.\n   * @returns A string representation of the date.\n   */\n  convertDate(date: Timestamp | Date): string {\n    return this.taskService.convertDate(date);\n  }\n\n  /**\n   * Prepares the task for editing and emits the edit event.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  openEditTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    this.taskService.setEditingTask(this.task);\n    this.editTask.emit(\"edit\");\n  }\n\n  /**\n   * Deletes the task (if it has a valid ID), and closes the detail view.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  deleteTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    if (this.task.id) {\n      this.taskService.deleteTask(this.task.id);\n      this.onClose();\n    }\n  }\n\n  /**\n   * Toggles a subtask's completion status and updates it in the backend.\n   * Emits the updated list of subtasks.\n   * \n   * @param subtask The subtask to toggle.\n   */\n  onSubtaskToggle(subtask: Subtask) {\n    if (!this.task.id || !subtask.id) return;\n    this.taskService.updateSubtask(this.task.id, subtask.id, subtask)\n      .then(() => {\n        this.subtaskChanged.emit(this.subtasks);\n      })\n      .catch(error => {\n        console.error('Error updating subtask:', error);\n      });\n  }\n\n  /**\n   * Loads subtasks associated with the current task from the database.\n   */\n  loadSubtasks() {\n    if (this.task?.id) {\n      this.taskService.getSubtasks(this.task.id).subscribe((subtasks: Subtask[]) => {\n        this.subtasks = subtasks;\n      });\n    }\n  }\n\n  /**\n   * Fetches detailed contact information for all assigned contact IDs\n   * and updates the contactList accordingly.\n   */\n  async loadAssignedContacts() {\n    this.contactList = [];\n    if (this.task?.assignedTo?.length) {\n      for (let contactId of this.task.assignedTo) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) {\n          this.contactList.push(contact);\n        }\n      }\n    }\n  }\n}\n    \n\n    \n        \n    \n        {{taskService.capitalize(task.category)}}\n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n    \n        {{ taskService.capitalize(task.title) }}\n        {{ taskService.capitalize(task.description) }}\n        \n            Due date:\n            {{ convertDate(task.date) }}\n        \n        \n            Priority:\n            {{ task.priority }}\n            \n                \n                \n                \n            \n        \n        \n            Assigned To:\n            No contact selected\n            \n                @for (contact of contactList; track $index) {\n                    \n                        \n                            \n                                {{ contactService.getInitials(contact.name) }}\n                            \n                            {{ contact.name }}\n                        \n                    \n                }\n            \n        \n       \n            Subtasks:\n            No subtasks defined\n            \n                @for (subtask of subtasks; track $index) {\n                    \n                        \n                        \n                        {{ subtask.title }}\n                    \n                }\n            \n        \n        \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Delete\n            \n            \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Edit\n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{taskService.capitalize(task.category)}}                                                                                                                                                                {{ taskService.capitalize(task.title) }}        {{ taskService.capitalize(task.description) }}                    Due date:            {{ convertDate(task.date) }}                            Priority:            {{ task.priority }}                                                                                                    Assigned To:            No contact selected                            @for (contact of contactList; track $index) {                                                                                                        {{ contactService.getInitials(contact.name) }}                                                        {{ contact.name }}                                                            }                                       Subtasks:            No subtasks defined                            @for (subtask of subtasks; track $index) {                                                                                            {{ subtask.title }}                                    }                                                                                                                                                                                                                Delete                                                                                                                                                                                                            Edit                        '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskListManager.html":{"url":"injectables/TaskListManager.html","title":"injectable - TaskListManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskListManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/task-list-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                TaskListManager handles all task list operations for the BoardComponent.\nThis includes loading, filtering, sorting, and managing task lists by status.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                awaitfeedback\n                            \n                            \n                                    Private\n                                done\n                            \n                            \n                                    Private\n                                inprogress\n                            \n                            \n                                    Private\n                                subtasksByTaskId\n                            \n                            \n                                    Private\n                                taskList\n                            \n                            \n                                    Private\n                                todo\n                            \n                            \n                                    Private\n                                unsubTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                destroy\n                            \n                            \n                                    Private\n                                distributeTasksByStatus\n                            \n                            \n                                    Private\n                                emptyArrays\n                            \n                            \n                                    Private\n                                filterTasksBySearchTerm\n                            \n                            \n                                getAwaitFeedbackTasks\n                            \n                            \n                                    Private\n                                getDateValue\n                            \n                            \n                                getDoneTasks\n                            \n                            \n                                getFilteredTasks\n                            \n                            \n                                getInProgressTasks\n                            \n                            \n                                getSubtasksByTaskId\n                            \n                            \n                                getSubtasksForSelectedTask\n                            \n                            \n                                getSubtasksForTask\n                            \n                            \n                                getTaskList\n                            \n                            \n                                    Private\n                                getTasksByStatus\n                            \n                            \n                                getTodoTasks\n                            \n                            \n                                    Private\n                                loadSubtasks\n                            \n                            \n                                loadTasks\n                            \n                            \n                                    Private\n                                sortAllStatusArrays\n                            \n                            \n                                sortTasksByDueDate\n                            \n                            \n                                trackByTaskId\n                            \n                            \n                                updateTaskLists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-list-manager.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        destroy\n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:252\n                        \n                    \n\n\n            \n                \n                        Clears all data and unsubscribes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        distributeTasksByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    distributeTasksByStatus(tasks: Task[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:165\n                        \n                    \n\n\n            \n                \n                        Clears all status arrays and distributes tasks into the appropriate lists.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe full list of tasks to distribute.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emptyArrays\n                        \n                    \n                \n            \n            \n                \n                        \n                    emptyArrays()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:193\n                        \n                    \n\n\n            \n                \n                        Empties all task lists (to-do, in-progress, await-feedback, done).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filterTasksBySearchTerm\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterTasksBySearchTerm(tasks: Task[], searchTerm: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:92\n                        \n                    \n\n\n            \n                \n                        Filters a list of tasks by the provided search term (case-insensitive).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of tasks to filter.\n\n\n                                            \n                                        \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe term to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Filtered tasks array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAwaitFeedbackTasks\n                        \n                    \n                \n            \n            \n                \ngetAwaitFeedbackTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getDateValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDateValue(date: Date | any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:122\n                        \n                    \n\n\n            \n                \n                        Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Date | any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDate input to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDoneTasks\n                        \n                    \n                \n            \n            \n                \ngetDoneTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFilteredTasks\n                        \n                    \n                \n            \n            \n                \ngetFilteredTasks(status: string, searchTerm: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Filters tasks by given status and search term (case-insensitive).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTask status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n\n\n                                            \n                                        \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nSearch term to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Filtered list of tasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInProgressTasks\n                        \n                    \n                \n            \n            \n                \ngetInProgressTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksByTaskId\n                        \n                    \n                \n            \n            \n                \ngetSubtasksByTaskId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:53\n                        \n                    \n\n\n            \n                \n                        Gets subtasks by task ID\n\n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForSelectedTask(selectedTask: Task | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks assigned to the currently selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently selected task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none are found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForTask(taskId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:219\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks for a given task ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to retrieve subtasks for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none exist.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTaskList\n                        \n                    \n                \n            \n            \n                \ngetTaskList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Gets all tasks\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getTasksByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTasksByStatus(status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:75\n                        \n                    \n\n\n            \n                \n                        Returns tasks from the internal status arrays based on status key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStatus key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Array of tasks matching the given status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTodoTasks\n                        \n                    \n                \n            \n            \n                \ngetTodoTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Gets task lists by status\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:203\n                        \n                    \n\n\n            \n                \n                        Loads subtasks for each task and stores them in a lookup table by task ID.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadTasks\n                        \n                    \n                \n            \n            \n                \nloadTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:150\n                        \n                    \n\n\n            \n                \n                        Loads tasks from the task service and distributes them into status-based lists.\nAlso sorts tasks by due date and loads their subtasks.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                A function to unsubscribe from the task observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sortAllStatusArrays\n                        \n                    \n                \n            \n            \n                \n                        \n                    sortAllStatusArrays()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:182\n                        \n                    \n\n\n            \n                \n                        Sorts all status-based task arrays by due date.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortTasksByDueDate\n                        \n                    \n                \n            \n            \n                \nsortTasksByDueDate(tasks: Task[], ascending: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:108\n                        \n                    \n\n\n            \n                \n                        Sorts a list of tasks by their due date.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nArray of tasks to be sorted.\n\n\n                                            \n                                        \n                                        \n                                                ascending\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether to sort in ascending order (default: true).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Sorted task array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trackByTaskId\n                        \n                    \n                \n            \n            \n                \ntrackByTaskId(index: number, task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:140\n                        \n                    \n\n\n            \n                \n                        TrackBy function for use with ngFor to optimize rendering of tasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the item in the array.\n\n\n                                            \n                                        \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                The unique task ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTaskLists\n                        \n                    \n                \n            \n            \n                \nupdateTaskLists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:242\n                        \n                    \n\n\n            \n                \n                        Updates task lists after status changes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        awaitfeedback\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inprogress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtasksByTaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        unsubTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Task, TaskService, Subtask } from '../services/task.service';\nimport { Subscription } from 'rxjs';\n\n/**\n * TaskListManager handles all task list operations for the BoardComponent.\n * This includes loading, filtering, sorting, and managing task lists by status.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskListManager {\n  private taskList: Task[] = [];\n  private subtasksByTaskId: { [taskId: string]: Subtask[] } = {};\n  private unsubTask!: Subscription;\n  private todo: Task[] = [];\n  private inprogress: Task[] = [];\n  private awaitfeedback: Task[] = [];\n  private done: Task[] = [];\n\n  constructor(private taskService: TaskService) { }\n\n  /**\n   * Gets all tasks\n   */\n  getTaskList(): Task[] {\n    return this.taskList;\n  }\n\n  /**\n   * Gets task lists by status\n   */\n  getTodoTasks(): Task[] {\n    return this.todo;\n  }\n\n  getInProgressTasks(): Task[] {\n    return this.inprogress;\n  }\n\n  getAwaitFeedbackTasks(): Task[] {\n    return this.awaitfeedback;\n  }\n\n  getDoneTasks(): Task[] {\n    return this.done;\n  }\n\n  /**\n   * Gets subtasks by task ID\n   */\n  getSubtasksByTaskId(): { [taskId: string]: Subtask[] } {\n    return this.subtasksByTaskId;\n  }\n\n  /**\n   * Filters tasks by given status and search term (case-insensitive).\n   *\n   * @param status - Task status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n   * @param searchTerm - Search term to filter by.\n   * @returns Filtered list of tasks.\n   */\n    getFilteredTasks(status: string, searchTerm: string): Task[] {\n      const tasksForStatus = this.getTasksByStatus(status);\n      return this.filterTasksBySearchTerm(tasksForStatus, searchTerm);\n    }\n\n  /**\n   * Returns tasks from the internal status arrays based on status key.\n   *\n   * @param status - Status key.\n   * @returns Array of tasks matching the given status.\n   */\n  private getTasksByStatus(status: string): Task[] {\n    const statusArrayMap: Record = {\n      'to-do': this.todo,\n      'in-progress': this.inprogress,\n      'await-feedback': this.awaitfeedback,\n      'done': this.done,\n    };\n    return statusArrayMap[status] || [];\n  }\n\n  /**\n   * Filters a list of tasks by the provided search term (case-insensitive).\n   *\n   * @param tasks - The array of tasks to filter.\n   * @param searchTerm - The term to filter by.\n   * @returns Filtered tasks array.\n   */\n  private filterTasksBySearchTerm(tasks: Task[], searchTerm: string): Task[] {\n    const trimmed = searchTerm.trim().toLowerCase();\n    if (!trimmed) return tasks;\n    return tasks.filter(task =>\n      task.title.toLowerCase().includes(trimmed) ||\n      task.description?.toLowerCase().includes(trimmed)\n    );\n  }\n\n  /**\n   * Sorts a list of tasks by their due date.\n   *\n   * @param tasks - Array of tasks to be sorted.\n   * @param ascending - Whether to sort in ascending order (default: true).\n   * @returns Sorted task array.\n   */\n  sortTasksByDueDate(tasks: Task[], ascending: boolean = true): Task[] {\n    return [...tasks].sort((a, b) =>\n      ascending\n        ? this.getDateValue(a.date) - this.getDateValue(b.date)\n        : this.getDateValue(b.date) - this.getDateValue(a.date)\n    );\n  }\n\n  /**\n   * Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n   *\n   * @param date - Date input to convert.\n   * @returns Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n   */\n  private getDateValue(date: Date | any): number {\n    if (date?.toDate instanceof Function) {\n      return date.toDate().getTime();\n    } else if (date instanceof Date) {\n      return date.getTime();\n    } else if (typeof date === 'string') {\n      return new Date(date).getTime();\n    }\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * TrackBy function for use with ngFor to optimize rendering of tasks.\n   *\n   * @param index - The index of the item in the array.\n   * @param task - The task object.\n   * @returns The unique task ID.\n   */\n  trackByTaskId(index: number, task: Task): string | undefined {\n    return task.id;\n  }\n\n  /**\n   * Loads tasks from the task service and distributes them into status-based lists.\n   * Also sorts tasks by due date and loads their subtasks.\n   *\n   * @returns A function to unsubscribe from the task observable.\n   */\n  loadTasks(): () => void {\n    this.unsubTask = this.taskService.getTasks().subscribe((tasks) => {\n      this.taskList = tasks;\n      this.distributeTasksByStatus(tasks);\n      this.sortAllStatusArrays();\n      this.loadSubtasks();\n    });\n    return () => this.unsubTask.unsubscribe();\n  }\n\n  /**\n   * Clears all status arrays and distributes tasks into the appropriate lists.\n   *\n   * @param tasks - The full list of tasks to distribute.\n   */\n  private distributeTasksByStatus(tasks: Task[]): void {\n    this.emptyArrays();\n    for (const task of tasks) {\n      switch (task.status) {\n        case 'to-do': this.todo.push(task); break;\n        case 'in-progress': this.inprogress.push(task); break;\n        case 'await-feedback': this.awaitfeedback.push(task); break;\n        case 'done': this.done.push(task); break;\n        default:\n          console.warn(`Unknown status in task ${task.title}:`, task.status);\n      }\n    }\n  }\n\n  /**\n   * Sorts all status-based task arrays by due date.\n   */\n  private sortAllStatusArrays(): void {\n    this.todo = this.sortTasksByDueDate(this.todo);\n    this.inprogress = this.sortTasksByDueDate(this.inprogress);\n    this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n    this.done = this.sortTasksByDueDate(this.done);\n  }\n\n\n  /**\n   * Empties all task lists (to-do, in-progress, await-feedback, done).\n   */\n  private emptyArrays(): void {\n    this.todo = [];\n    this.inprogress = [];\n    this.awaitfeedback = [];\n    this.done = [];\n  }\n\n  /**\n   * Loads subtasks for each task and stores them in a lookup table by task ID.\n   */\n  private loadSubtasks(): void {\n    for (const task of this.taskList) {\n      if (task.id) {\n        this.taskService.getSubtasks(task.id).subscribe((subtasks) => {\n          this.subtasksByTaskId[task.id!] = subtasks;\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns the subtasks for a given task ID.\n   *\n   * @param taskId - The ID of the task to retrieve subtasks for.\n   * @returns Array of subtasks, or an empty array if none exist.\n   */\n  getSubtasksForTask(taskId: string | undefined): Subtask[] {\n    if (!taskId) {\n      return [];\n    }\n    return this.subtasksByTaskId[taskId] || [];\n  }\n\n  /**\n   * Returns the subtasks assigned to the currently selected task.\n   *\n   * @param selectedTask - The currently selected task.\n   * @returns Array of subtasks, or an empty array if none are found.\n   */\n  getSubtasksForSelectedTask(selectedTask: Task | undefined): Subtask[] {\n    if (selectedTask?.id) {\n      return this.subtasksByTaskId[selectedTask.id] || [];\n    }\n    return [];\n  }\n\n  /**\n   * Updates task lists after status changes\n   */\n  updateTaskLists(): void {\n    this.todo = this.sortTasksByDueDate(this.todo);\n    this.inprogress = this.sortTasksByDueDate(this.inprogress);\n    this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n    this.done = this.sortTasksByDueDate(this.done);\n  }\n\n  /**\n   * Clears all data and unsubscribes\n   */\n  destroy(): void {\n    if (this.unsubTask) {\n      this.unsubTask.unsubscribe();\n    }\n    this.emptyArrays();\n    this.taskList = [];\n    this.subtasksByTaskId = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing tasks and subtasks\nstored in Firestore.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editingTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSubtask\n                            \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                capitalize\n                            \n                            \n                                clearEditingTask\n                            \n                            \n                                convertDate\n                            \n                            \n                                    Async\n                                deleteSubtask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                formatDate\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                getEditingTask\n                            \n                            \n                                getSingleTaskRef\n                            \n                            \n                                getSubtasks\n                            \n                            \n                                getSubtasksRef\n                            \n                            \n                                getTasks\n                            \n                            \n                                getTasksRef\n                            \n                            \n                                setEditingTask\n                            \n                            \n                                    Async\n                                updateSubtask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/task.service.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addSubtask(ColId: string, subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Adds a subtask to a specific task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created subtask with ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addTask(newTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Adds a new task to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task to be added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created task including its generated ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(text: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:298\n                        \n                    \n\n\n            \n                \n                        Capitalizes the first letter of a string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe string to capitalize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Capitalized string or empty string if undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearEditingTask\n                        \n                    \n                \n            \n            \n                \nclearEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:288\n                        \n                    \n\n\n            \n                \n                        Clears the currently edited task.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:248\n                        \n                    \n\n\n            \n                \n                        Converts a Firestore Timestamp or Date object to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Timestamp or Date to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted date string (dd/mm/yyyy).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSubtask(taskId: string, subtaskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Deletes a subtask from a task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask ID to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Deletes a task from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatDate\n                        \n                    \n                \n            \n            \n                \nformatDate(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:262\n                        \n                    \n\n\n            \n                \n                        Formats a Date object into a dd/mm/yyyy string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Date to format.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updated: Task | Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Returns a plain object representation of a Task or Subtask for Firestore updates.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updated\n                                            \n                                                        Task | Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to clean.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { title: string; description: string; date: any; priority: \"low\" | \"medium\" | \"urgent\"; status: string; assignedTo: {}; category: \"technical\" | \"user story\"; isCompleted?: undefined; } | { ...; } | { ...; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingTask\n                        \n                    \n                \n            \n            \n                \ngetEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:281\n                        \n                    \n\n\n            \n                \n                        Returns the task currently being edited.\n\n\n                        \n                            Returns :         Task | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleTaskRef\n                        \n                    \n                \n            \n            \n                \ngetSingleTaskRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Returns a document reference for a specific task by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasks\n                        \n                    \n                \n            \n            \n                \ngetSubtasks(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:125\n                        \n                    \n\n\n            \n                \n                        Observes the subtasks of a given task in real-time.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksRef\n                        \n                    \n                \n            \n            \n                \ngetSubtasksRef(subColId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'subtasks' subcollection for a given task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasks\n                        \n                    \n                \n            \n            \n                \ngetTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:104\n                        \n                    \n\n\n            \n                \n                        Observes all tasks in Firestore and emits updates in real-time.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasksRef\n                        \n                    \n                \n            \n            \n                \ngetTasksRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'tasks' Firestore collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditingTask\n                        \n                    \n                \n            \n            \n                \nsetEditingTask(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:274\n                        \n                    \n\n\n            \n                \n                        Sets the currently edited task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task being edited.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Updates a subtask document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask document ID.\n\n\n                                            \n                                        \n                                        \n                                                updatedSubtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated subtask data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(docId: string, updatedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Updates a task document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task.\n\n\n                                            \n                                        \n                                        \n                                                updatedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated task data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/services/task.service.ts:72\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error('Error adding task:', err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserData.html":{"url":"interfaces/UserData.html","title":"interface - UserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for user data stored in Firestore.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            uid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n  private authInitialized = new BehaviorSubject(false);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n  \n  /**\n   * Observable that emits true once Firebase Auth has finished initializing.\n   */\n  public authInitialized$: Observable = this.authInitialized.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n      if (!this.authInitialized.value) {\n        this.authInitialized.next(true);\n      }\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrors.html":{"url":"interfaces/ValidationErrors.html","title":"interface - ValidationErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/form-validator.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            showDateError\n                                        \n                                \n                                \n                                        \n                                            showTitleError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        showDateError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDateError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showTitleError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showTitleError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { CategoryManager } from './category-manager';\n\nexport interface FormData {\n  title: string;\n  description: string;\n  dueDate: string;\n}\n\nexport interface ValidationErrors {\n  showTitleError: boolean;\n  showDateError: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FormValidatorService {\n  \n  /**\n   * Validates all form fields and returns validation errors.\n   */\n  validateForm(formData: FormData, categoryManager: CategoryManager): ValidationErrors {\n    return {\n      showTitleError: this.validateTitle(formData.title),\n      showDateError: this.validateDueDate(formData.dueDate)\n    };\n  }\n\n  /**\n   * Checks if form has any validation errors.\n   */\n  hasFormErrors(formData: FormData, categoryManager: CategoryManager): boolean {\n    const titleError = this.validateTitle(formData.title);\n    const categoryError = this.validateCategory(categoryManager);\n    const dateError = this.validateDueDate(formData.dueDate);\n    \n    categoryManager.showCategoryError = categoryError;\n    return titleError || categoryError || dateError;\n  }\n\n  private validateTitle(title: string): boolean {\n    return !title.trim();\n  }\n\n  private validateCategory(categoryManager: CategoryManager): boolean {\n    return !categoryManager.hasSelectedCategory();\n  }\n\n  private validateDueDate(dueDate: string): boolean {\n    return !dueDate;\n  }\n\n  /**\n   * Returns today's date in ISO format for date input validation.\n   */\n  getTodayDate(): string {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/add-task/add-task.component.ts\n            \n            component\n            AddTaskComponent\n            \n                64 %\n                (27/42)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            injectable\n            CategoryManager\n            \n                76 %\n                (13/17)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/add-task/contact-manager.ts\n            \n            injectable\n            ContactManager\n            \n                76 %\n                (13/17)\n            \n        \n        \n            \n                \n                src/app/add-task/form-validator.service.ts\n            \n            injectable\n            FormValidatorService\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/add-task/form-validator.service.ts\n            \n            interface\n            FormData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/add-task/form-validator.service.ts\n            \n            interface\n            ValidationErrors\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/add-task/priority-manager.ts\n            \n            injectable\n            PriorityManager\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            injectable\n            SubtaskManager\n            \n                77 %\n                (28/36)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            interface\n            Subtask\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/add-task/task-data.service.ts\n            \n            injectable\n            TaskDataService\n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                src/app/add-task/task-data.service.ts\n            \n            interface\n            FormData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/board.component.ts\n            \n            component\n            BoardComponent\n            \n                71 %\n                (25/35)\n            \n        \n        \n            \n                \n                src/app/board/drag-drop-manager.ts\n            \n            injectable\n            DragDropManager\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/app/board/overlay-manager.ts\n            \n            injectable\n            OverlayManager\n            \n                68 %\n                (15/22)\n            \n        \n        \n            \n                \n                src/app/board/task-details/task-details.component.ts\n            \n            component\n            TaskDetailsComponent\n            \n                94 %\n                (18/19)\n            \n        \n        \n            \n                \n                src/app/board/task-list-manager.ts\n            \n            injectable\n            TaskListManager\n            \n                63 %\n                (19/30)\n            \n        \n        \n            \n                \n                src/app/board/task/task.component.ts\n            \n            component\n            TaskComponent\n            \n                96 %\n                (26/27)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-details/contact-details.component.ts\n            \n            component\n            ContactDetailsComponent\n            \n                58 %\n                (18/31)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-form/contact-form.component.ts\n            \n            component\n            ContactFormComponent\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-list/contact-list.component.ts\n            \n            component\n            ContactListComponent\n            \n                86 %\n                (20/23)\n            \n        \n        \n            \n                \n                src/app/contacts/contacts.component.ts\n            \n            component\n            ContactsComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/app/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/app/login-signup/footer/footer.component.ts\n            \n            component\n            FooterComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/login-signup/login-header/login-header.component.ts\n            \n            component\n            LoginHeaderComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/login-signup/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                src/app/login-signup/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                94 %\n                (17/18)\n            \n        \n        \n            \n                \n                src/app/services/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                86 %\n                (13/15)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            interface\n            UserData\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            injectable\n            ContactService\n            \n                95 %\n                (23/24)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            interface\n            Contact\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/app/services/contact.service.ts\n            \n            function\n            notOnlyWhitespace\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/navigation-history.service.ts\n            \n            injectable\n            NavigationHistoryService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            injectable\n            TaskService\n            \n                90 %\n                (19/21)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Subtask\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Task\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/shared/help/help.component.ts\n            \n            component\n            HelpComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/legal-notice/legal-notice.component.ts\n            \n            component\n            LegalNoticeComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/privacy-policy/privacy-policy.component.ts\n            \n            component\n            PrivacyPolicyComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/sidebar/sidebar.component.ts\n            \n            component\n            SidebarComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            component\n            SummaryComponent\n            \n                48 %\n                (13/27)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            interface\n            FirestoreTimestamp\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.14\n        \n            @angular/cdk : ^19.2.14\n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/fire : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            notOnlyWhitespace   (src/.../contact.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/services/contact.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        notOnlyWhitespace\n                        \n                    \n                \n            \n            \n                \nnotOnlyWhitespace(control: AbstractControl)\n                \n            \n\n\n\n\n            \n                \n                        Custom validator to check that a form input contains more than just whitespace.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form control to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationErrors | null\n\n                        \n                            \n                                A validation error object if invalid, otherwise null.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n  \nJoin\nThis project is a web-based task manager and similar to the Kanban system. With Join you can create, organize, and track all tasks for your project.\nJoin was generated using Angular CLI version 19.2.12. The Firebase CDKs for authentication and the firestore database were used to handle all upcoming data.\nLive demo: Try Join yourself!\n🪄 Features\n👤 Login and User registration. In order to use the board, you need to log in first. You can either register or use the guest log in account.\n📅 Task board. The board represents your projects tasks and contains four default lists: to do, in progress, await feedback and done.\n📝 Summary board. The summary gives an overview about all current tasks and the next upcoming date.\n📒 Contact page. Here, you can add or edit contacts to collaborate on your projects.\n🧭 Single-Page Routing for easy navigation.\n❓ Help: A dedicated Help page with details about the task manager join and how it works.\n⚖️ Impressum & Privacy: A dedicated Impressum page with legal information and privacy details.\n💾 All data are stored in the firestore database.\n📸 Screenshots\nMobile phone preview:\n\nDesktop preview:\n\n⚙️ Technologies Used\n\nAngular version 19.2\nTypeScript\nSCSS for styling\nFirestore Database & Firebase Authentication\nMaterial Design CDKs for Drag & Drop functionality\n\n🚀 Getting Started\n\nClone the repository.\nInstall dependencies:\n\nExample :npm install\nStart the development server:\n\nExample :ng serve\nOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\n\n💡 Code scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --help🛠️ Building\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n💡To-Dos / Ideas\n\n 🖼️ Upload option for user profile or tasks\n\n🤓 Author\nCreated by Michelle Puschkarow. \nIf you like this project, feel free to give it a ⭐️ or contribute!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    10 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes, withHashLocation()),\n    provideFirebaseApp(() =>\n      initializeApp({\n        projectId: 'join-6125f',\n        appId: '1:703986298510:web:8cb9707daf583f2153a3df',\n        storageBucket: 'join-6125f.firebasestorage.app',\n        apiKey: 'AIzaSyAWyoU260eXmo3445mLTsqCjzRhEG6aq9A',\n        authDomain: 'join-6125f.firebaseapp.com',\n        messagingSenderId: '703986298510',\n      })\n    ),\n    provideFirestore(() => getFirestore()),\n    provideAnimations(),\n    provideAuth(() => getAuth()),\n    {\n      provide: CDK_DRAG_CONFIG,\n      useValue: {\n        dragStartThreshold: 5,\n        pointerDirectionChangeThreshold: 5,\n        zIndex: 1000,\n        scrollSpeed: 30,          \n        scrollProximity: 100,\n      },\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
