var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.187,1,0.859]],["body/components/AppComponent.html",[0,0.32,1,1.545,2,1.332,3,0.296,4,0.261,5,1.179,6,1.179,7,1.179,8,0.261,9,3.608,10,1.179,11,1.775,12,1.887,13,1.416,14,2.854,15,1.2,16,1.416,17,5.966,18,1.545,19,1.545,20,2.112,21,1.416,22,5.417,23,1.598,24,5.417,25,0.228,26,0.673,27,5.966,28,4.395,29,0.784,30,2.874,31,3.311,32,2.822,33,0.801,34,5.417,35,2.854,36,4.068,37,5.417,38,1.035,39,3.575,40,4.604,41,4.604,42,4.255,43,5.341,44,2.04,45,2.689,46,3.667,47,0.615,48,0.024,49,0.626,50,0.333,51,0.445,52,0.445,53,4.039,54,1.035,55,3.667,56,3.082,57,4.604,58,4.604,59,2.854,60,0.784,61,0.905,62,4.246,63,2.854,64,1.416,65,3.348,66,3.348,67,2.854,68,3.667,69,1.453,70,4.068,71,0.57,72,2.477,73,3.348,74,0.47,75,0.261,76,5.07,77,1.044,78,4.246,79,4.246,80,1.414,81,2.874,82,2.874,83,2.874,84,3.188,85,0.296,86,0.296,87,0.518,88,0.905,89,3.608,90,4.246,91,1.414,92,2.08,93,3.608,94,4.246,95,4.246,96,4.246,97,1.179,98,1.504,99,1.416,100,1.179,101,1.745,102,1.179,103,0.811,104,0.759,105,1.504,106,1.179,107,0.922,108,1.179,109,1.044,110,1.216,111,1.179,112,1.044,113,1.179,114,1.044,115,1.179,116,1.044,117,1.179,118,1.044,119,1.179,120,1.504,121,1.044,122,1.179,123,1.044,124,1.179,125,1.179,126,1.044,127,1.179,128,1.044,129,1.044,130,1.179,131,1.179,132,1.179,133,1.044,134,1.179,135,0.981,136,1.179,137,1.044,138,1.044,139,0.485,140,0.981,141,1.11,142,1.179,143,0.018,144,0.018]],["title/guards/AuthGuard.html",[145,2.364,146,2.622]],["body/guards/AuthGuard.html",[3,0.341,4,0.301,8,0.301,13,1.277,15,1.214,25,0.262,29,0.856,32,2.85,33,0.794,39,3.757,45,2.529,47,0.707,48,0.024,49,0.512,50,0.301,51,0.512,52,0.62,54,1.129,64,1.545,68,4.002,69,1.366,74,0.443,75,0.301,77,1.201,85,0.341,86,0.341,87,0.566,88,0.987,143,0.019,144,0.019,145,4.002,146,4.959,147,4.885,148,4.151,149,5.023,150,4.002,151,5.023,152,5.023,153,1.69,154,3.757,155,0.856,156,6.873,157,3.668,158,2.316,159,4.885,160,5.023,161,2.529,162,3.362,163,3.114,164,1.968,165,2.703,166,2.529,167,4.885,168,4.438,169,5.911,170,4.438,171,3.114,172,0.513,173,1.284,174,3.114,175,2.226,176,1.563,177,0.794,178,3.668,179,1.356,180,2.573,181,3.668,182,0.856,183,3.307]],["title/injectables/AuthService.html",[158,1.163,177,0.469]],["body/injectables/AuthService.html",[3,0.199,4,0.176,8,0.176,13,0.746,15,1.161,25,0.153,26,0.513,29,0.599,32,2.583,33,0.885,35,2.178,38,1.189,44,1.557,45,1.769,46,2.799,47,0.771,48,0.024,49,0.653,50,0.348,51,0.691,52,0.593,54,0.79,59,2.178,60,0.704,61,0.69,64,1.08,69,1.306,70,3.104,71,0.944,74,0.394,75,0.176,77,0.702,85,0.288,86,0.199,87,0.607,88,1.059,143,0.014,144,0.014,150,2.799,153,1.768,154,3.663,155,0.599,158,1.773,161,1.222,162,3.815,163,2.806,164,2.072,165,1.89,170,3.104,171,2.178,172,0.593,173,0.898,174,2.178,175,1.557,176,1.494,177,0.555,179,0.793,182,1.012,183,1.933,184,1.146,185,2.144,186,2.026,187,2.799,188,3.104,189,4.213,190,3.513,191,1.377,192,3.826,193,3.104,194,1.392,195,2.079,196,4.244,197,4.129,198,2.43,199,4.526,200,3.999,201,4.526,202,4.134,203,3.605,204,4.134,205,4.526,206,4.526,207,2.856,208,5.654,209,3.124,210,4.134,211,4.463,212,3.03,213,2.856,214,1.557,215,1.32,216,2.821,217,4.647,218,2.467,219,4.112,220,2.856,221,1.769,222,1.657,223,2.856,224,3.513,225,1.494,226,3.291,227,3.513,228,2.856,229,3.513,230,3.513,231,3.513,232,3.513,233,3.513,234,4.129,235,2.555,236,3.104,237,2.856,238,1.557,239,4.129,240,3.513,241,4.718,242,2.856,243,5.007,244,2.777,245,2.856,246,3.104,247,2.026,248,2.856,249,1.769,250,3.513,251,5.472,252,2.856,253,3.513,254,1.053,255,1.885,256,1.769,257,2.806,258,2.584,259,3.513,260,3.513,261,2.799,262,2.856,263,2.427,264,2.427,265,2.427,266,2.427,267,2.427,268,2.427,269,2.427,270,1.504,271,2.427,272,1.933,273,2.427,274,1.399,275,1.504,276,1.011,277,0.842,278,1.504,279,4.213,280,4.129,281,4.129,282,1.83,283,2.427,284,2.427,285,3.201,286,1.015,287,3.513,288,1.705,289,3.513,290,3.513,291,3.513,292,4.526,293,3.513,294,3.513,295,2.764,296,2.977,297,4.129,298,3.513,299,3.513,300,3.513,301,3.513,302,3.513,303,2.427,304,2.427,305,2.427,306,4.526,307,2.427,308,2.427,309,2.427,310,2.427,311,2.427,312,2.144,313,4.672,314,3.513,315,2.427,316,2.427,317,2.427,318,2.799,319,2.178,320,2.427,321,2.427,322,2.427,323,1.504,324,2.799,325,2.427,326,3.513,327,2.144,328,2.427,329,2.56,330,3.513,331,2.427,332,2.427,333,1.765,334,1.625,335,2.427,336,2.144,337,2.144,338,1.933,339,2.427]],["title/interfaces/Category.html",[277,0.712,340,1.84]],["body/interfaces/Category.html",[3,0.301,4,0.265,8,0.265,13,1.127,15,0.824,25,0.231,26,0.679,48,0.024,50,0.37,60,0.792,61,1.131,71,0.955,74,0.301,75,0.265,85,0.381,86,0.301,87,0.413,88,1.004,103,0.824,139,0.687,143,0.018,144,0.018,153,1.345,172,0.566,173,1.373,175,1.624,176,1.554,177,0.735,179,1.197,182,0.992,194,1.571,215,1.188,221,2.571,238,1.624,255,1.937,277,0.879,286,0.852,340,3.844,341,2.113,342,2.453,343,3.238,344,1.972,345,3.39,346,3.567,347,3.704,348,1.526,349,2.272,350,1.73,351,1.845,352,2.665,353,5.005,354,2.665,355,3.664,356,3.664,357,4.649,358,3.381,359,3.664,360,3.381,361,3.664,362,2.716,363,3.664,364,5.879,365,2.341,366,3.664,367,1.016,368,2.748,369,3.664,370,5.665,371,3.664,372,2.919,373,3.664,374,3.664,375,2.113,376,3.664,377,3.238,378,2.113,379,3.419,380,3.664,381,3.664,382,2.195,383,3.664,384,4.649,385,4.649,386,3.664,387,3.664,388,3.704,389,3.664,390,3.664,391,1.436,392,1.972,393,2.665]],["title/injectables/CategoryManager.html",[177,0.469,347,2.364]],["body/injectables/CategoryManager.html",[3,0.252,4,0.223,8,0.223,13,0.946,15,0.932,25,0.194,26,0.606,33,0.934,47,0.799,48,0.024,49,0.579,50,0.391,51,0.579,52,0.512,60,0.94,61,1.129,71,0.934,74,0.252,75,0.223,85,0.34,86,0.252,87,0.346,88,1.117,103,0.932,139,0.675,143,0.016,144,0.016,153,1.452,155,0.707,172,0.613,173,1.453,175,1.838,176,1.562,177,0.655,179,1.005,182,0.956,184,1.452,194,1.66,215,1.283,221,2.718,238,1.838,255,2.091,277,0.738,286,0.76,340,3.86,342,3.974,343,5.245,344,1.656,345,3.342,346,3.421,347,3.999,348,1.727,349,2.571,350,1.957,351,2.088,352,3.016,353,5.16,354,3.016,355,4.691,356,4.691,357,5.241,358,3.651,359,4.147,360,3.651,361,4.147,362,2.789,363,5.02,364,5.685,365,2.527,366,4.147,367,1.053,368,2.905,369,5.02,370,5.399,371,4.147,372,3.303,373,5.02,374,3.076,375,2.391,376,5.02,377,3.664,378,2.391,379,3.36,380,4.147,381,3.076,382,2.369,383,5.02,384,4.147,385,4.147,386,3.076,387,5.02,388,3.303,389,3.076,390,5.02,391,1.625,392,2.231,393,3.651,394,4.88,395,4.88,396,4.88,397,3.076,398,2.718,399,3.62,400,3.62,401,3.076,402,3.076,403,3.62,404,3.62,405,3.076,406,3.076,407,3.076,408,2.451,409,2.718,410,2.451]],["title/interfaces/Contact.html",[110,0.712,277,0.712]],["body/interfaces/Contact.html",[3,0.229,4,0.202,8,0.202,13,0.858,15,0.627,25,0.176,26,0.651,29,0.476,48,0.024,49,0.696,50,0.349,51,0.647,52,0.344,54,0.627,61,0.762,64,0.858,65,2.03,71,0.942,74,0.415,75,0.202,85,0.366,86,0.229,87,0.635,88,1.03,104,0.816,110,1.489,140,0.759,143,0.015,144,0.015,158,1.747,161,1.405,166,2.245,172,0.569,175,1.237,177,0.705,178,2.466,179,0.912,182,0.979,191,1.094,194,1.193,195,2.245,198,1.857,209,3.153,214,1.237,215,1.139,216,2.245,218,1.616,222,1.612,225,1.122,244,2.588,254,1.065,255,1.616,257,2.405,258,2.95,261,3.091,270,1.73,272,2.224,274,1.609,275,1.73,276,1.163,277,1.069,285,1.73,286,1.004,288,1.371,296,1.73,323,1.73,334,1.869,341,1.609,345,2.237,362,2.474,367,0.928,368,2.088,379,1.869,391,1.52,411,2.224,412,3.88,413,2.525,414,3.987,415,3.091,416,3.091,417,2.597,418,2.088,419,3.091,420,1.52,421,2.597,422,2.821,423,2.03,424,2.03,425,2.03,426,2.791,427,3.091,428,3.091,429,1.73,430,2.224,431,2.224,432,2.761,433,1.237,434,2.224,435,2.03,436,3.428,437,2.597,438,2.466,439,2.03,440,1.888,441,1.73,442,2.466,443,2.791,444,1.869,445,2.791,446,1.548,447,1.318,448,2.466,449,2.03,450,2.791,451,1.609,452,1.237,453,2.466,454,2.791,455,2.791,456,2.224,457,2.791,458,2.791,459,2.791,460,2.466,461,2.791,462,2.237,463,2.791,464,1.609,465,2.466,466,2.791,467,2.791,468,3.428,469,2.791,470,2.466,471,2.791,472,3.88,473,2.791,474,2.791,475,2.791,476,2.791,477,2.791,478,2.791,479,2.791,480,2.791,481,2.791,482,2.791,483,2.791,484,2.791,485,2.791,486,2.791,487,2.791,488,2.791,489,2.791,490,2.791,491,2.791,492,2.791,493,2.791,494,2.791,495,2.791,496,2.791,497,2.237,498,2.136,499,2.791,500,2.03,501,2.791,502,2.987,503,3.504,504,2.791,505,2.791,506,2.791,507,1.831,508,2.791,509,2.791,510,4.459,511,3.88,512,2.597,513,2.03,514,2.791,515,2.791,516,2.03,517,2.03,518,2.791,519,2.03,520,1.73,521,3.243,522,1.609,523,1.73,524,2.791,525,2.821,526,2.791,527,3.88,528,2.03,529,2.03,530,2.821,531,2.466,532,2.03,533,4.459,534,1.609,535,2.791,536,2.791,537,2.03,538,2.791,539,1.869,540,3.88,541,2.466,542,2.03,543,2.03,544,1.405,545,1.318,546,2.791,547,2.224,548,2.791,549,2.03,550,2.791,551,2.791,552,2.791,553,2.791,554,2.791,555,1.405,556,2.791,557,2.466,558,2.466,559,2.791,560,2.791,561,2.791,562,2.237,563,2.791,564,3.88,565,2.571,566,2.791,567,2.791,568,2.791,569,2.466,570,2.791,571,2.791,572,2.791,573,1.237,574,2.791,575,2.791,576,2.791,577,2.791,578,2.224,579,1.502,580,2.791,581,2.791,582,2.791,583,3.88,584,2.791,585,2.791,586,2.791,587,2.791,588,2.791,589,2.791,590,2.791,591,2.791]],["title/components/ContactDetailsComponent.html",[0,0.187,109,0.859]],["body/components/ContactDetailsComponent.html",[0,0.308,1,0.652,2,0.963,3,0.185,4,0.163,5,0.737,6,0.737,7,0.737,8,0.163,10,0.737,11,1.693,12,1.8,14,2.064,15,1.097,16,1.024,18,0.652,19,0.652,20,1.649,21,1.024,23,1.156,25,0.142,26,0.486,29,0.567,33,0.939,35,1.398,38,0.982,44,0.999,47,0.86,48,0.024,49,0.719,50,0.39,51,0.673,52,0.602,59,1.398,60,0.86,61,0.992,63,1.398,64,0.694,69,0.613,71,0.889,74,0.4,75,0.163,80,0.884,84,1.993,85,0.185,86,0.185,87,0.492,88,0.959,91,2.349,97,0.737,98,1.088,99,1.024,100,0.737,101,1.428,102,0.737,103,0.507,104,0.474,105,1.088,106,0.737,107,0.576,108,0.737,109,1.265,110,1.445,111,0.737,112,0.652,113,0.737,114,0.652,115,0.737,116,0.652,117,0.737,118,0.652,119,0.737,120,1.088,121,0.652,122,0.737,123,0.652,124,0.737,125,0.737,126,0.652,127,0.737,128,0.652,129,0.652,130,0.737,131,0.737,132,0.737,133,0.652,134,0.737,135,0.613,136,0.737,137,0.652,138,0.652,139,0.303,140,1.268,141,0.694,142,0.737,143,0.013,144,0.013,155,0.567,172,0.593,173,0.576,176,1.671,180,2.064,182,0.86,194,0.694,214,1.476,222,0.694,235,2.421,244,1.572,249,1.993,254,0.474,276,0.939,286,0.894,324,1.797,338,3.153,345,2.52,352,2.421,367,1.022,378,2.813,391,1.305,414,2.421,420,0.884,432,1.676,446,1.694,451,1.3,452,2.162,456,2.652,498,1.476,543,2.421,545,1.065,555,1.676,565,2.813,573,1.937,592,4.746,593,5.264,594,1.993,595,2.454,596,3.497,597,3.33,598,3.33,599,4.658,600,4.658,601,3.918,602,4.658,603,4.658,604,3.153,605,3.958,606,3.887,607,5.143,608,2.942,609,2.942,610,3.482,611,1.993,612,4.371,613,5.143,614,2.942,615,5.143,616,3.33,617,4.658,618,2.421,619,3.918,620,4.658,621,2.942,622,2.942,623,3.33,624,2.942,625,3.918,626,1.797,627,4.459,628,3.918,629,3.178,630,2.654,631,2.942,632,1.993,633,3.918,634,4.311,635,3.958,636,3.887,637,3.847,638,4.347,639,2.878,640,3.266,641,2.255,642,3.918,643,3.153,644,4.311,645,4.658,646,4.658,647,3.497,648,2.654,649,2.229,650,3.918,651,2.654,652,2.942,653,2.942,654,3.918,655,3.918,656,2.942,657,2.654,658,3.887,659,3.33,660,2.654,661,2.942,662,3.33,663,2.942,664,2.942,665,2.942,666,2.654,667,2.454,668,2.654,669,1.305,670,2.654,671,2.942,672,2.942,673,2.942,674,2.654,675,3.153,676,3.33,677,3.33,678,2.654,679,1.797,680,2.654,681,2.654,682,2.255,683,2.654,684,2.654,685,2.654,686,2.421,687,2.654,688,2.255,689,2.654,690,2.654,691,2.654,692,1.3,693,1.398,694,1.398,695,3.211,696,1.214,697,2.89,698,1.214,699,2.421,700,1.993,701,1.3,702,2.654,703,2.654,704,2.654,705,3.33,706,3.67,707,3.862,708,2.91,709,3.918,710,2.352,711,3.497,712,1.293,713,2.654,714,1.993,715,3.33,716,2.255,717,2.255,718,3.33,719,2.255,720,2.654,721,2.654,722,2.654,723,2.654,724,2.654,725,1.797,726,4.371,727,2.654,728,2.654,729,2.064,730,2.654,731,1.993,732,2.654,733,1.993,734,2.654,735,2.654,736,2.255,737,3.918,738,5.143,739,4.658,740,4.658,741,4.658,742,5.143,743,1.792,744,2.654,745,0.999,746,3.918,747,2.654,748,1.993,749,2.654,750,2.654,751,2.654,752,2.654,753,2.654,754,2.654,755,2.255,756,2.654,757,2.654,758,2.654,759,3.33,760,2.942,761,3.918,762,2.942,763,3.33,764,2.064,765,3.33,766,4.371,767,3.33,768,3.33,769,3.918,770,3.918]],["title/components/ContactFormComponent.html",[0,0.187,112,0.859]],["body/components/ContactFormComponent.html",[0,0.313,1,0.761,2,1.077,3,0.216,4,0.191,5,0.86,6,0.86,7,0.86,8,0.191,10,0.86,11,1.723,12,1.832,16,1.145,18,0.761,19,0.761,20,1.799,21,1.145,23,1.292,25,0.166,26,0.544,29,0.736,33,0.913,35,2.307,44,1.65,47,0.634,48,0.024,49,0.687,50,0.383,51,0.611,52,0.459,54,1.114,57,3.722,60,0.448,61,0.517,69,0.716,71,0.588,74,0.407,75,0.191,80,1.031,85,0.216,86,0.216,87,0.486,88,0.849,91,1.458,97,0.86,98,1.216,99,1.145,100,0.86,101,1.534,102,0.86,103,0.591,104,1.042,105,1.216,106,0.86,107,0.672,108,0.86,109,0.761,110,1.485,111,0.86,112,1.359,113,0.86,114,0.761,115,0.86,116,0.761,117,0.86,118,0.761,119,0.86,120,1.216,121,0.761,122,0.86,123,0.761,124,0.86,125,0.86,126,0.761,127,0.86,128,0.761,129,0.761,130,0.86,131,0.86,132,0.86,133,0.761,134,0.86,135,0.716,136,0.86,137,0.761,138,0.761,139,0.354,140,0.716,141,0.809,142,0.86,143,0.014,144,0.014,155,0.634,172,0.525,180,2.307,191,1.458,194,1.145,195,2.175,198,1.799,214,1.65,222,1.328,225,1.359,244,2.428,247,2.146,254,0.988,276,1.096,286,0.791,288,0.809,323,2.307,329,2.307,348,1.55,350,2.039,367,0.99,378,2.966,392,2.527,414,3.741,416,2.965,420,1.458,429,1.631,432,3.07,433,1.65,440,1.458,449,2.707,451,2.708,452,2.575,462,2.966,464,2.146,465,3.289,521,2.707,531,3.289,542,2.707,545,1.242,555,2.804,565,2.708,573,1.65,592,4.629,595,2.677,596,3.816,606,4.213,610,3.741,611,2.364,618,2.707,629,3.603,664,3.289,665,3.289,692,2.146,699,3.141,701,1.517,759,3.722,760,3.289,771,5.134,772,2.631,773,3.816,774,4.319,775,4.38,776,4.38,777,5.083,778,5.083,779,5.083,780,5.083,781,5.526,782,4.696,783,4.696,784,4.696,785,5.083,786,5.083,787,2.631,788,4.545,789,4.38,790,3.722,791,4.38,792,2.307,793,3.816,794,5.083,795,3.096,796,3.722,797,3.722,798,4.696,799,3.096,800,3.741,801,3.415,802,5.526,803,4.38,804,3.096,805,3.722,806,5.526,807,3.096,808,3.096,809,4.38,810,2.707,811,4.38,812,2.307,813,3.096,814,3.722,815,3.289,816,3.096,817,3.096,818,4.38,819,2.707,820,2.146,821,3.289,822,3.816,823,3.096,824,2.492,825,3.096,826,3.096,827,3.289,828,3.722,829,4.38,830,2.965,831,3.096,832,4.38,833,4.38,834,4.38,835,3.289,836,2.325,837,3.289,838,1.096,839,3.096,840,2.631,841,3.816,842,2.325,843,3.096,844,3.096,845,4.38,846,3.096,847,4.38,848,3.096,849,3.096,850,3.096,851,3.096,852,3.096,853,3.096,854,4.38,855,3.096,856,3.096,857,3.096,858,3.096,859,3.096,860,3.096,861,4.38,862,3.096,863,3.096,864,3.096,865,3.096,866,3.722,867,3.096,868,1.757,869,4.38,870,5.526,871,4.38,872,4.38,873,4.38,874,4.38,875,4.38,876,3.722,877,4.38]],["title/components/ContactListComponent.html",[0,0.187,114,0.859]],["body/components/ContactListComponent.html",[0,0.27,1,0.537,2,0.832,3,0.351,4,0.135,5,0.607,6,0.607,7,0.607,8,0.135,10,0.607,11,1.649,12,1.753,14,1.782,15,1.018,16,0.884,18,0.537,19,0.537,20,1.465,21,0.884,25,0.181,26,0.42,29,0.675,33,0.891,38,1.097,44,1.274,47,0.772,48,0.024,49,0.707,50,0.4,51,0.559,52,0.559,58,2.875,60,0.872,61,0.928,66,2.091,69,0.505,71,0.865,74,0.372,75,0.135,80,0.728,83,1.48,85,0.152,86,0.152,87,0.532,88,0.928,91,1.127,97,0.607,98,0.939,99,0.884,100,0.607,101,1.673,102,0.607,103,0.418,104,0.994,105,0.939,106,0.607,107,0.475,108,0.607,109,0.537,110,1.477,111,0.607,112,0.537,113,0.607,114,1.146,115,0.607,116,0.537,117,0.607,118,0.537,119,0.607,120,0.939,121,0.537,122,0.607,123,0.537,124,0.607,125,0.607,126,0.537,127,0.607,128,0.537,129,0.537,130,0.607,131,0.607,132,0.607,133,0.537,134,0.607,135,0.505,136,0.607,137,0.537,138,0.537,139,0.25,140,0.505,141,0.571,142,0.607,143,0.011,144,0.011,153,1.598,154,2.651,155,0.49,158,1.912,161,1.448,162,2.651,168,2.54,172,0.559,173,1.012,174,2.455,180,1.782,182,0.73,195,1.771,196,3.108,200,3.499,215,1.308,218,1.649,222,1.667,225,1.018,238,1.274,244,2.23,254,0.994,255,2.171,276,0.774,286,0.725,345,3.252,348,1.198,352,3.435,362,2.365,367,0.918,379,2.651,382,1.869,388,1.48,419,2.29,432,1.448,440,1.127,444,1.243,446,1.739,448,2.54,452,2.402,456,2.802,468,2.54,498,2.402,543,2.091,545,1.66,555,1.448,562,1.658,592,4.518,595,2.181,596,3.108,606,3.991,609,2.54,610,3.155,611,1.994,618,2.091,626,1.48,629,2.558,653,2.54,656,2.54,658,3.608,663,2.54,664,2.54,665,2.54,669,1.963,696,2.131,699,2.091,701,1.071,706,2.091,710,1.893,712,0.607,725,2.29,729,3.534,733,1.641,736,1.858,745,1.755,755,1.858,762,1.641,763,2.875,765,2.875,766,2.875,767,2.875,768,2.875,790,2.875,793,3.108,815,2.54,820,1.658,824,1.925,828,2.875,830,2.29,878,1.858,879,5.011,880,1.858,881,2.875,882,4.139,883,3.383,884,4.139,885,4.139,886,4.139,887,4.139,888,4.139,889,3.383,890,3.383,891,3.383,892,4.66,893,3.383,894,4.139,895,3.383,896,1.925,897,1.925,898,2.186,899,4.66,900,3.383,901,2.186,902,2.131,903,3.383,904,2.186,905,4.139,906,3.383,907,2.283,908,3.383,909,2.875,910,4.66,911,2.875,912,2.54,913,3.383,914,2.186,915,4.66,916,3.383,917,3.383,918,2.186,919,2.186,920,3.383,921,2.186,922,3.108,923,3.383,924,2.186,925,3.383,926,2.186,927,2.186,928,2.186,929,2.186,930,2.186,931,2.186,932,2.54,933,3.383,934,2.091,935,2.186,936,2.875,937,3.383,938,3.383,939,2.186,940,2.186,941,1.151,942,2.186,943,2.186,944,2.186,945,2.186,946,4.66,947,3.383,948,2.186,949,2.186,950,2.186,951,1.243,952,2.186,953,1.858,954,2.186,955,1.858,956,1.858,957,2.186,958,2.186,959,2.186,960,2.558,961,2.186,962,2.186,963,2.186,964,2.186,965,2.186,966,2.186,967,2.186,968,2.186,969,2.186,970,1.641,971,2.186,972,3.383,973,2.186,974,2.186,975,2.29,976,2.186,977,2.186,978,3.383,979,3.383,980,3.383,981,3.383,982,1.858,983,4.88,984,2.186,985,5.118,986,3.383,987,3.383,988,4.312,989,4.283,990,1.641,991,1.641,992,4.88,993,3.499,994,2.186,995,3.96,996,3.294,997,2.875,998,4.518,999,2.875,1000,4.66,1001,4.283,1002,3.518,1003,2.29,1004,3.108,1005,2.186,1006,4.283,1007,4.66,1008,4.283,1009,3.383,1010,2.186,1011,2.186,1012,5.04,1013,2.186,1014,4.529,1015,3.96,1016,3.96,1017,4.88,1018,3.518,1019,3.155,1020,3.518,1021,3.383,1022,3.96,1023,3.518,1024,3.383,1025,3.383,1026,1.858,1027,2.186,1028,2.186,1029,4.283,1030,1.641,1031,2.54,1032,3.499,1033,3.383,1034,4.66,1035,3.518,1036,5.29,1037,3.96,1038,3.96,1039,4.66,1040,4.66,1041,3.96,1042,4.66,1043,3.383,1044,3.96,1045,3.383,1046,3.383,1047,2.186,1048,1.858,1049,4.283,1050,4.675,1051,1.858,1052,3.96,1053,3.383,1054,3.383,1055,1.858,1056,3.383,1057,1.858,1058,2.875,1059,2.54,1060,4.283,1061,3.383,1062,2.875,1063,2.186,1064,3.383,1065,4.139,1066,3.96,1067,1.858,1068,1.858,1069,1.858,1070,2.651,1071,1.351,1072,3.96,1073,2.875,1074,2.186,1075,2.875,1076,1.858,1077,3.383,1078,3.383,1079,3.383,1080,3.383,1081,2.186,1082,1.858,1083,2.186,1084,2.186,1085,1.858,1086,2.186,1087,3.518,1088,1.351,1089,2.186,1090,4.66,1091,3.383,1092,1.858,1093,3.518,1094,2.875,1095,3.383,1096,3.383,1097,2.186,1098,2.186,1099,1.858,1100,2.186,1101,2.875,1102,2.875,1103,2.875,1104,2.186,1105,2.186,1106,1.858,1107,1.858,1108,2.186,1109,2.186,1110,2.186,1111,2.186,1112,2.186]],["title/injectables/ContactManager.html",[177,0.469,1113,2.622]],["body/injectables/ContactManager.html",[3,0.244,4,0.216,8,0.216,11,1.173,13,0.916,15,0.912,25,0.291,26,0.593,29,0.507,33,0.934,47,0.949,48,0.024,49,0.687,50,0.414,51,0.687,52,0.66,60,0.691,61,0.973,71,0.918,74,0.333,75,0.216,85,0.244,86,0.244,87,0.583,88,1.051,103,0.912,110,1.499,143,0.016,144,0.016,155,0.691,161,2.042,172,0.621,173,1.443,175,1.797,176,1.499,177,0.641,179,0.973,182,0.932,184,1.405,194,1.712,215,1.036,221,2.494,238,1.797,255,2.319,286,0.545,342,3.975,344,1.602,345,3.083,348,1.689,349,2.514,350,1.914,351,2.042,352,3.602,353,5.046,354,2.95,362,2.742,365,2.494,367,1.046,368,2.877,375,2.856,379,3.088,382,2.338,391,1.589,392,2.183,393,3.602,398,2.631,408,2.372,452,2.37,498,2.592,507,1.914,558,3.584,608,3.584,626,2.372,653,4.376,658,4.26,701,1.717,712,1.325,733,3.584,838,1.24,1113,4.376,1114,5.937,1115,5.428,1116,5.428,1117,4.773,1118,4.056,1119,5.828,1120,5.828,1121,5.828,1122,4.773,1123,4.056,1124,4.773,1125,4.773,1126,5.828,1127,4.056,1128,2.978,1129,4.773,1130,2.978,1131,4.773,1132,3.504,1133,4.056,1134,2.978,1135,4.953,1136,4.953,1137,4.953,1138,4.953,1139,4.056,1140,2.978,1141,2.978,1142,4.773,1143,2.978,1144,4.773,1145,4.773,1146,2.978,1147,4.773,1148,3.504,1149,3.504,1150,2.978,1151,5.428,1152,6.098,1153,3.504,1154,4.773,1155,3.504,1156,3.504,1157,3.504,1158,2.631,1159,3.504,1160,3.504,1161,2.978,1162,2.978]],["title/injectables/ContactService.html",[177,0.469,452,1.315]],["body/injectables/ContactService.html",[3,0.179,4,0.158,8,0.158,13,0.67,15,0.49,25,0.137,26,0.628,29,0.553,33,0.927,47,0.922,48,0.024,49,0.727,50,0.397,51,0.676,52,0.668,54,0.729,60,0.85,61,1.03,64,0.998,65,2.36,71,0.938,74,0.377,75,0.158,85,0.318,86,0.179,87,0.601,88,1.099,104,0.904,110,1.495,140,0.883,143,0.013,144,0.013,155,0.553,158,1.955,161,1.097,166,2.426,172,0.608,175,0.965,177,0.679,178,1.925,179,0.712,182,0.934,184,1.028,191,1.271,194,1.321,195,2.639,198,2.255,209,3.209,214,1.438,215,1.231,216,2.582,218,1.352,222,1.577,225,1.243,226,1.584,244,2.169,254,1.102,255,1.79,257,1.35,258,3.034,261,3.423,270,1.35,272,1.735,274,1.256,275,1.35,276,0.907,277,0.778,285,1.35,286,0.94,288,1.193,296,1.35,323,2.011,334,2.172,345,2.478,362,2.588,367,0.977,368,2.312,379,2.172,391,1.684,411,1.735,412,2.178,413,2.478,414,3.342,415,1.735,416,1.735,417,1.458,418,1.172,419,2.585,420,0.853,421,2.596,422,2.36,423,1.584,424,1.584,425,1.584,426,2.178,427,2.585,428,2.585,429,1.35,430,1.735,431,1.735,432,2.816,433,0.965,434,1.735,435,1.584,436,2.867,437,2.172,438,1.925,439,1.584,440,2.009,441,1.35,442,1.925,443,2.178,444,1.458,445,2.178,446,1.346,447,1.532,448,2.867,449,2.36,450,3.245,451,1.871,452,1.438,453,2.867,454,3.245,455,3.878,456,3.089,457,3.245,458,3.878,459,3.245,460,3.426,461,3.245,462,2.478,463,3.878,464,1.871,465,3.426,466,3.245,467,3.245,468,3.797,469,3.245,470,2.867,471,3.245,472,4.595,473,3.245,474,3.245,475,3.245,476,3.245,477,3.245,478,3.245,479,3.245,480,3.245,481,3.245,482,3.245,483,3.245,484,3.245,485,3.245,486,3.245,487,3.245,488,3.245,489,3.245,490,3.245,491,3.245,492,3.245,493,3.245,494,3.245,495,3.245,496,3.245,497,2.478,498,2.135,499,4.297,500,1.584,501,3.878,502,3.307,503,3.629,504,3.245,505,2.178,506,3.245,507,2.028,508,4.297,509,2.178,510,3.878,511,3.245,512,2.172,513,1.584,514,2.178,515,2.178,516,1.584,517,1.584,518,2.178,519,1.584,520,2.011,521,3.125,522,1.871,523,2.011,524,3.245,525,2.36,526,2.178,527,3.245,528,1.584,529,1.584,530,2.36,531,2.867,532,2.36,533,4.818,534,1.871,535,3.245,536,2.178,537,1.584,538,2.178,539,2.172,540,4.297,541,2.867,542,2.36,543,2.36,544,1.634,545,1.532,546,3.245,547,2.585,548,3.245,549,2.36,550,3.245,551,3.245,552,2.178,553,2.178,554,2.178,555,1.634,556,3.245,557,2.867,558,2.867,559,2.178,560,4.297,561,2.178,562,2.478,563,4.297,564,3.245,565,2.778,566,3.245,567,3.245,568,2.178,569,2.867,570,4.297,571,2.178,572,2.178,573,1.438,574,3.245,575,2.178,576,2.178,577,3.245,578,2.585,579,1.746,580,3.245,581,3.245,582,3.245,583,3.878,584,3.245,585,3.245,586,2.178,587,2.178,588,2.178,589,2.178,590,2.178,591,2.178,608,2.867,609,2.867,652,1.925,656,1.925,658,2.585,782,3.245,1123,3.245,1163,3.818,1164,3.245,1165,3.818,1166,3.818,1167,3.818,1168,3.818,1169,2.178,1170,2.563,1171,2.563,1172,2.563,1173,2.563,1174,2.563,1175,2.563,1176,2.563,1177,2.178,1178,1.925,1179,2.563,1180,2.563,1181,2.563,1182,2.563,1183,2.563,1184,2.563,1185,1.735,1186,2.563,1187,2.178,1188,2.563,1189,2.563,1190,2.563,1191,2.563,1192,2.563,1193,2.563,1194,2.563,1195,2.563,1196,2.563,1197,2.563,1198,2.563,1199,2.563,1200,2.563]],["title/components/ContactsComponent.html",[0,0.187,116,0.859]],["body/components/ContactsComponent.html",[0,0.343,1,0.724,2,1.039,3,0.205,4,0.181,5,0.818,6,0.818,7,0.818,8,0.181,10,0.818,11,1.714,12,1.822,14,2.227,15,1.032,16,1.105,18,0.724,19,0.724,20,1.75,21,1.105,23,1.247,25,0.158,26,0.525,29,0.427,33,0.917,35,2.227,38,1.137,41,3.593,44,1.592,47,0.828,48,0.024,49,0.643,50,0.386,51,0.6,52,0.6,54,0.808,60,0.828,61,0.955,63,2.846,64,1.64,69,0.681,71,0.768,74,0.437,75,0.181,80,0.981,85,0.205,86,0.205,87,0.547,91,2.186,97,0.818,98,1.174,99,1.105,100,0.818,101,1.5,102,0.818,103,0.563,104,0.527,105,1.174,106,0.818,107,0.64,108,0.818,109,1.328,110,1.462,111,0.818,112,1.328,113,0.818,114,1.328,115,0.818,116,1.328,117,0.818,118,0.724,119,0.818,120,1.174,121,0.724,122,0.818,123,0.724,124,0.818,125,0.818,126,0.724,127,0.818,128,0.724,129,0.724,130,0.818,131,0.818,132,0.818,133,0.724,134,0.818,135,0.681,136,0.818,137,0.724,138,0.724,139,0.337,140,0.681,141,0.77,142,0.818,143,0.014,144,0.014,155,0.612,168,4.057,172,0.554,176,1.571,194,1.556,215,0.918,219,3.056,225,1.039,247,2.072,249,2.312,254,0.966,255,1.497,258,2.805,276,1.043,348,1.913,362,1.696,365,2.312,367,1.063,368,1.933,377,3.175,417,1.676,420,1.646,432,2.774,446,1.594,452,2.31,460,3.713,498,1.592,521,2.613,522,2.647,557,3.175,562,2.647,569,3.713,579,1.933,593,2.212,611,2.312,612,4.591,626,1.995,637,3.339,643,2.862,644,4.057,649,3.689,661,4.057,667,1.552,686,1.821,692,2.072,694,1.552,695,3.231,696,2.261,697,1.552,698,1.347,701,1.444,706,3.68,707,3.175,708,2.918,710,2.471,711,2.212,712,1.174,714,2.212,729,3.231,743,1.347,771,2.212,793,3.175,796,3.593,800,4.248,801,3.535,810,2.613,812,2.227,838,1.043,879,2.212,970,3.175,996,3.878,998,3.658,1003,2.862,1070,3.689,1071,1.821,1201,2.504,1202,4.228,1203,4.228,1204,4.202,1205,4.202,1206,4.945,1207,4.945,1208,4.945,1209,4.228,1210,5.403,1211,5.403,1212,3.593,1213,3.593,1214,3.593,1215,4.945,1216,4.228,1217,5.403,1218,4.228,1219,4.228,1220,4.194,1221,4.712,1222,2.946,1223,2.405,1224,2.405,1225,4.228,1226,2.946,1227,2.405,1228,4.49,1229,4.228,1230,2.946,1231,3.593,1232,6.133,1233,2.946,1234,2.946,1235,3.658,1236,2.862,1237,3.593,1238,4.591,1239,2.946,1240,3.593,1241,2.613,1242,3.593,1243,4.228,1244,4.228,1245,3.593,1246,2.946,1247,4.228,1248,3.175,1249,2.613,1250,3.593,1251,2.946,1252,2.946,1253,2.946,1254,1.995,1255,2.946,1256,2.946,1257,4.228,1258,4.228,1259,3.593,1260,3.593,1261,4.228,1262,2.946,1263,3.68,1264,4.228,1265,2.946,1266,2.405,1267,2.946,1268,2.946,1269,2.946,1270,2.946,1271,2.946,1272,4.228,1273,5.403,1274,2.946,1275,4.228,1276,2.946,1277,2.946,1278,2.946,1279,2.946,1280,4.228,1281,2.946,1282,2.504,1283,2.946,1284,2.946,1285,2.504,1286,2.946,1287,2.946,1288,2.946,1289,3.593,1290,4.228,1291,4.228,1292,4.228]],["title/injectables/DragDropManager.html",[177,0.469,1293,2.622]],["body/injectables/DragDropManager.html",[3,0.268,4,0.237,8,0.237,13,1.006,25,0.206,29,0.557,33,0.845,38,0.735,47,0.877,48,0.024,49,0.635,50,0.373,51,0.635,52,0.635,54,0.735,71,0.813,74,0.397,75,0.237,85,0.268,86,0.268,87,0.486,91,2.153,99,1.329,107,1.104,139,0.823,143,0.017,144,0.017,149,4.32,155,0.736,164,2.295,165,1.76,172,0.572,177,0.683,179,1.069,182,0.824,184,1.544,186,2.491,191,2.016,218,1.363,225,0.946,254,0.688,286,1.054,288,1.006,344,1.76,348,2.228,350,2.039,351,2.175,367,1.064,413,1.45,420,1.693,441,3.189,497,2.491,532,3.518,547,2.606,549,3.518,579,2.325,627,4.546,647,2.89,669,1.282,686,2.379,729,2.678,745,1.45,820,1.886,830,2.606,838,1.363,868,2.039,951,2.19,991,3.817,993,3.817,996,3.142,1032,3.817,1059,3.817,1140,3.271,1150,3.271,1235,3.442,1236,3.442,1242,4.32,1293,4.546,1294,5.494,1295,5.957,1296,6.772,1297,6.054,1298,4.32,1299,6.054,1300,5.084,1301,5.084,1302,2.379,1303,2.435,1304,3.849,1305,3.442,1306,5.692,1307,3.849,1308,3.849,1309,2.89,1310,2.892,1311,3.271,1312,4.32,1313,3.271,1314,2.89,1315,5.145,1316,5.084,1317,3.442,1318,5.084,1319,5.084,1320,4.32,1321,5.084,1322,5.084,1323,6.466,1324,6.054,1325,5.084,1326,4.32,1327,5.084,1328,5.084,1329,6.054,1330,4.855,1331,3.849,1332,6.054,1333,6.054,1334,3.849,1335,3.849,1336,3.849,1337,2.606,1338,3.849,1339,3.817,1340,3.849,1341,5.084,1342,5.084,1343,3.849,1344,2.028,1345,3.849,1346,6.594,1347,3.849,1348,6.054,1349,3.849,1350,3.849,1351,1.886,1352,3.849,1353,2.19,1354,3.849,1355,2.19,1356,3.849,1357,3.849,1358,5.084,1359,5.084,1360,5.084,1361,3.849,1362,3.271,1363,4.32,1364,3.442,1365,3.849,1366,3.849,1367,5.084,1368,3.849,1369,3.849,1370,3.849,1371,3.271,1372,3.849,1373,3.849,1374,3.849,1375,3.849,1376,3.849,1377,3.849,1378,3.849]],["title/interfaces/FirestoreTimestamp.html",[277,0.712,1379,2.364]],["body/interfaces/FirestoreTimestamp.html",[0,0.273,3,0.27,4,0.238,8,0.238,11,0.952,12,1.011,15,1.159,16,1.011,20,1.806,21,1.011,23,1.142,25,0.207,29,0.56,32,2.289,33,0.52,38,0.739,48,0.024,67,2.039,71,0.887,74,0.451,75,0.238,77,0.952,80,1.289,85,0.27,86,0.27,87,0.546,88,1.103,92,1.896,135,0.895,139,0.721,143,0.017,144,0.017,155,0.739,158,1.9,161,1.656,164,2.1,172,0.573,176,1.403,180,2.039,182,0.878,194,1.011,222,1.648,238,1.457,249,1.656,254,1.02,277,0.789,282,2.439,286,0.982,288,1.011,341,1.896,420,2.279,440,1.9,441,2.039,444,3.247,446,1.977,595,2.687,604,2.62,667,2.039,669,1.289,692,1.896,694,2.039,695,3.006,696,1.77,697,2.039,698,1.77,708,2.5,710,1.77,712,1.075,731,2.906,743,2.333,868,2.719,902,2.333,941,2.039,975,2.62,1303,2.149,1305,2.62,1344,2.039,1351,1.896,1353,2.202,1355,2.902,1379,4.384,1380,2.906,1381,5.156,1382,3.87,1383,2.62,1384,3.289,1385,3.289,1386,3.289,1387,2.62,1388,2.906,1389,2.62,1390,4.285,1391,3.289,1392,2.906,1393,3.289,1394,3.289,1395,3.247,1396,3.289,1397,3.289,1398,3.289,1399,4.85,1400,3.289,1401,3.289,1402,3.289,1403,3.289,1404,3.289,1405,3.289,1406,3.289,1407,3.289,1408,4.335,1409,3.289,1410,5.156,1411,3.289,1412,3.289,1413,4.335,1414,3.289,1415,3.289,1416,4.335,1417,4.335,1418,4.335,1419,4.335,1420,3.289,1421,2.039,1422,3.289,1423,3.289,1424,3.289,1425,5.358,1426,3.289,1427,2.392,1428,3.289,1429,3.289,1430,3.289,1431,3.289,1432,3.289,1433,3.289,1434,3.289,1435,3.289,1436,3.289,1437,4.335,1438,3.289,1439,4.85,1440,4.335,1441,3.289,1442,2.906,1443,3.289,1444,2.906,1445,2.906,1446,4.85,1447,3.289,1448,3.831,1449,3.289,1450,4.335,1451,5.358,1452,3.289,1453,5.358,1454,3.289,1455,3.289,1456,3.289,1457,4.335,1458,4.335,1459,3.289,1460,3.289,1461,3.289,1462,3.289,1463,4.335,1464,3.289,1465,4.335,1466,4.335,1467,3.289,1468,3.289,1469,3.289,1470,3.289]],["title/components/FooterComponent.html",[0,0.187,118,0.859]],["body/components/FooterComponent.html",[0,0.342,1,1.21,2,1.46,3,0.343,4,0.303,5,1.367,6,1.367,7,1.367,8,0.303,10,1.367,11,1.795,12,1.908,16,1.552,18,1.21,19,1.21,21,1.552,23,1.752,48,0.024,49,0.623,69,1.138,74,0.414,75,0.303,77,1.21,85,0.343,86,0.343,97,1.367,98,1.649,99,1.552,100,1.367,101,1.839,102,1.367,103,0.94,104,0.88,105,1.649,106,1.367,107,1.069,108,1.367,109,1.21,110,1.3,111,1.367,112,1.21,113,1.367,114,1.21,115,1.367,116,1.21,117,1.367,118,1.628,119,1.367,120,1.649,121,1.21,122,1.367,123,1.21,124,1.771,125,1.367,126,1.21,127,1.367,128,1.21,129,1.21,130,1.771,131,1.367,132,1.367,133,1.21,134,1.367,135,1.138,136,1.367,137,1.21,138,1.21,139,0.563,140,1.138,141,1.286,142,1.367,143,0.02,144,0.02,1471,3.042,1472,4.183,1473,5.938,1474,2.916,1475,5.938,1476,5.938,1477,3.67,1478,3.67]],["title/components/HeaderComponent.html",[0,0.187,19,0.859]],["body/components/HeaderComponent.html",[0,0.312,1,0.861,2,1.173,3,0.244,4,0.216,5,0.973,6,1.325,7,0.973,8,0.216,10,0.973,11,1.745,12,1.855,14,2.514,15,1.113,16,1.247,18,0.861,19,1.433,20,1.921,21,1.247,23,1.408,25,0.188,26,0.593,29,0.507,33,0.918,38,0.912,42,3.675,44,1.32,47,0.911,48,0.024,49,0.717,50,0.375,51,0.66,52,0.66,54,1.037,60,0.844,61,0.797,64,1.523,69,0.81,71,0.783,74,0.425,75,0.216,77,0.861,80,1.167,85,0.244,86,0.244,91,2.351,97,0.973,98,1.325,99,1.419,100,0.973,101,1.618,102,0.973,103,0.669,104,0.626,105,1.325,106,0.973,107,0.761,108,0.973,109,0.861,110,1.106,111,0.973,112,0.861,113,0.973,114,0.861,115,0.973,116,0.861,117,0.973,118,0.861,119,0.973,120,1.325,121,0.861,122,0.973,123,0.861,124,1.507,125,0.973,126,0.861,127,0.973,128,0.861,129,0.861,130,1.507,131,0.973,132,0.973,133,0.861,134,0.973,135,0.81,136,0.973,137,0.861,138,0.861,139,0.401,140,0.81,141,0.916,142,0.973,143,0.016,144,0.016,153,1.718,154,3.315,155,0.691,157,2.631,158,1.941,163,2.859,166,1.499,172,0.593,173,1.036,174,2.514,175,1.797,176,1.499,181,2.631,182,0.691,188,4.076,191,1.589,198,1.689,203,3.946,215,1.366,216,1.499,226,2.95,238,1.797,244,2.338,249,2.494,254,0.853,255,2.063,286,0.545,288,0.916,346,2.514,354,2.95,367,0.845,368,1.602,375,1.717,378,2.66,391,1.167,417,2.715,446,1.408,497,1.717,502,2.514,604,3.946,605,4.613,614,3.584,616,4.056,621,3.584,622,3.584,623,4.056,627,3.584,631,3.584,632,2.631,636,3.946,637,3.768,638,4.498,639,3.602,640,3.315,641,2.978,643,3.946,644,4.376,649,2.715,667,1.846,671,2.631,672,4.076,673,2.631,676,2.978,677,2.978,686,2.165,694,1.846,695,3.07,696,1.602,697,2.859,698,1.602,700,2.631,705,2.978,706,3.354,707,3.584,708,2.66,710,2.183,711,2.631,712,0.973,714,2.631,715,4.056,716,2.978,726,2.978,729,3.07,812,1.846,941,1.846,953,2.978,955,2.978,956,2.978,1003,2.372,1249,2.95,1260,4.056,1474,2.482,1477,2.95,1478,2.95,1479,2.978,1480,4.056,1481,4.056,1482,4.773,1483,5.828,1484,4.773,1485,4.773,1486,2.165,1487,2.165,1488,4.613,1489,4.773,1490,3.584,1491,5.182,1492,4.773,1493,4.056,1494,4.773,1495,3.584,1496,4.773,1497,3.504,1498,4.773,1499,3.504,1500,3.504,1501,2.978,1502,3.504,1503,2.372,1504,2.631,1505,3.504,1506,3.504,1507,3.504,1508,2.631,1509,2.978,1510,3.504,1511,2.372,1512,3.504,1513,2.95,1514,4.773,1515,4.773,1516,3.504,1517,4.056,1518,3.504,1519,3.504,1520,3.504,1521,3.504,1522,3.504,1523,3.584,1524,2.95,1525,4.056,1526,4.773,1527,3.584,1528,3.231]],["title/components/HelpComponent.html",[0,0.187,121,0.859]],["body/components/HelpComponent.html",[0,0.279,1,0.798,2,1.113,3,0.226,4,0.2,5,0.901,6,0.901,7,0.901,8,0.2,10,0.901,11,1.732,12,1.841,16,1.183,18,0.798,19,0.798,21,1.183,23,1.335,25,0.174,29,0.47,30,2.196,31,3.237,33,0.608,38,0.864,39,2.575,40,3.846,47,0.47,48,0.024,49,0.622,50,0.2,51,0.34,52,0.547,53,3.529,54,0.864,56,2.575,60,0.817,67,2.384,69,0.75,72,3.23,74,0.363,75,0.2,77,0.798,81,2.196,82,2.196,85,0.226,86,0.226,87,0.31,97,0.901,98,1.257,99,1.183,100,0.901,101,1.566,102,0.901,103,0.62,104,0.932,105,1.257,106,0.901,107,0.704,108,0.901,109,0.798,110,1.363,111,0.901,112,0.798,113,0.901,114,0.798,115,0.901,116,0.798,117,0.901,118,0.798,119,0.901,120,1.257,121,1.511,122,0.901,123,0.798,124,0.901,125,0.901,126,0.798,127,0.901,128,0.798,129,0.798,130,0.901,131,0.901,132,0.901,133,0.798,134,0.901,135,0.75,136,0.901,137,0.798,138,0.798,139,0.747,140,1.205,141,0.848,142,0.901,143,0.015,144,0.015,153,1.113,155,0.655,166,1.937,171,2.384,172,0.281,174,2.384,189,3.064,191,1.507,192,3.818,194,1.183,212,2.575,254,1.098,277,0.922,282,1.705,288,1.183,295,2.575,319,3.388,329,2.384,354,3.486,367,0.705,418,2.07,434,3.064,470,3.398,498,2.492,522,2.764,573,1.705,578,3.818,579,2.07,635,3.846,637,2.797,638,3.064,640,3.209,669,2.142,693,3.237,712,1.257,760,3.398,764,2.384,792,2.384,819,2.797,820,3.152,824,2.575,838,1.148,868,2.655,876,3.846,896,2.575,907,2.218,1003,3.818,1093,3.846,1158,3.398,1185,3.818,1227,3.209,1241,2.797,1254,3.064,1311,4.793,1317,3.064,1326,3.846,1330,3.398,1339,3.398,1351,2.764,1353,2.575,1355,3.209,1395,2.575,1427,2.797,1448,3.398,1474,2.384,1523,4.83,1524,3.975,1525,4.793,1527,4.969,1528,4.16,1529,2.757,1530,4.526,1531,4.526,1532,4.235,1533,3.244,1534,3.398,1535,3.846,1536,3.244,1537,2.218,1538,2.797,1539,2.436,1540,3.846,1541,4.526,1542,5.64,1543,2.757,1544,3.398,1545,3.064,1546,4.526,1547,5.64,1548,4.526,1549,4.526,1550,3.846,1551,3.846,1552,3.398,1553,3.398,1554,3.846,1555,3.846,1556,3.846,1557,4.526,1558,3.846,1559,3.846,1560,4.526,1561,4.526,1562,4.526,1563,3.846,1564,4.526,1565,5.64,1566,3.846,1567,4.526,1568,4.526,1569,4.526,1570,4.526,1571,4.526,1572,3.846,1573,5.64,1574,4.526,1575,3.846,1576,3.846,1577,5.64,1578,3.846,1579,3.846,1580,3.398,1581,3.398,1582,3.846,1583,4.235,1584,4.526,1585,3.846,1586,4.526,1587,3.398,1588,3.846,1589,3.846,1590,3.846,1591,4.526,1592,3.846,1593,3.846,1594,4.526,1595,4.723,1596,3.846,1597,4.526,1598,4.526,1599,3.244,1600,3.064,1601,4.526,1602,3.398,1603,4.526,1604,3.846,1605,5.64,1606,5.64,1607,3.846,1608,3.398,1609,4.526,1610,3.846,1611,2.764,1612,6.748,1613,3.244,1614,4.526,1615,3.846,1616,3.846,1617,4.526,1618,6.432,1619,3.064,1620,4.526,1621,3.398,1622,3.398,1623,4.526,1624,4.526,1625,4.526,1626,4.793,1627,4.526,1628,4.526,1629,3.846,1630,3.398,1631,3.846,1632,4.526,1633,4.526,1634,4.526,1635,4.526,1636,3.846,1637,4.526,1638,4.526,1639,3.846,1640,4.526,1641,4.526,1642,3.846,1643,3.846,1644,4.526,1645,4.526,1646,2.436,1647,3.398,1648,3.244,1649,4.526,1650,2.757,1651,3.244,1652,3.244,1653,2.436,1654,3.244]],["title/components/LegalNoticeComponent.html",[0,0.187,123,0.859]],["body/components/LegalNoticeComponent.html",[0,0.283,1,0.819,2,1.134,3,0.232,4,0.205,5,0.925,6,0.925,7,0.925,8,0.205,10,0.925,11,1.737,12,1.846,16,1.205,18,0.819,19,0.819,21,1.205,23,1.36,25,0.179,29,0.482,30,2.256,31,3.264,33,0.619,39,2.623,47,0.482,48,0.024,49,0.554,50,0.205,51,0.349,52,0.349,53,3.579,54,0.881,56,2.623,64,1.205,69,0.77,72,3.221,74,0.369,75,0.205,77,0.819,81,2.256,82,2.256,85,0.232,86,0.232,87,0.319,91,1.535,97,0.925,98,1.28,99,1.205,100,0.925,101,1.584,102,0.925,103,0.636,104,0.596,105,1.28,106,0.925,107,0.724,108,0.925,109,0.819,110,1.078,111,0.925,112,0.819,113,0.925,114,0.819,115,0.925,116,0.819,117,0.925,118,0.819,119,0.925,120,1.28,121,0.819,122,0.925,123,1.523,124,1.896,125,0.925,126,0.819,127,0.925,128,0.819,129,0.819,130,0.925,131,0.925,132,0.925,133,0.819,134,0.925,135,0.77,136,0.925,137,0.819,138,0.819,139,0.381,140,0.77,141,0.871,142,0.925,143,0.015,144,0.015,155,0.668,166,2.441,172,0.289,212,2.623,225,1.134,249,2.441,282,1.736,295,2.623,319,3.571,337,3.462,367,0.718,532,2.849,544,2.77,578,3.121,764,2.429,805,4.849,819,2.849,820,2.796,821,3.462,824,2.623,838,1.179,1070,2.623,1227,3.246,1309,3.462,1421,3.411,1474,2.418,1478,4.001,1487,2.849,1524,2.849,1532,4.284,1534,3.462,1535,3.918,1537,2.259,1538,2.849,1539,2.502,1550,5.502,1551,3.918,1552,3.462,1553,3.462,1554,3.918,1555,5.654,1556,5.654,1576,3.918,1578,4.849,1579,3.918,1580,3.462,1581,3.462,1587,3.462,1588,3.918,1589,3.918,1590,3.918,1592,3.918,1593,3.918,1608,3.462,1626,3.918,1646,2.502,1647,3.462,1653,2.502,1655,4.493,1656,4.493,1657,2.832,1658,4.611,1659,4.611,1660,3.332,1661,3.332,1662,4.611,1663,4.611,1664,4.611,1665,4.611,1666,4.611,1667,3.918,1668,4.611,1669,4.611,1670,4.611,1671,4.611,1672,4.611,1673,4.611,1674,4.611,1675,4.611,1676,4.611,1677,3.918,1678,5.266,1679,3.918,1680,6.474,1681,4.611,1682,4.849,1683,3.462,1684,4.849,1685,3.918,1686,4.611,1687,4.611,1688,4.611,1689,4.611,1690,6.474,1691,4.611,1692,4.611,1693,4.611,1694,4.611,1695,6.196,1696,5.706,1697,3.332,1698,4.284,1699,4.611,1700,6.196,1701,5.706,1702,4.611,1703,4.611,1704,4.611,1705,4.611,1706,4.611,1707,5.706,1708,5.706,1709,6.196,1710,4.611,1711,3.918,1712,3.918,1713,3.462,1714,4.611,1715,4.611,1716,4.611,1717,4.611,1718,3.918,1719,3.918,1720,4.611,1721,4.611,1722,4.611,1723,4.611,1724,4.611,1725,4.611,1726,4.611,1727,4.611,1728,3.918,1729,4.611,1730,4.611,1731,3.918,1732,5.706,1733,4.611,1734,5.706,1735,3.918,1736,4.611,1737,4.611,1738,4.611,1739,5.706,1740,5.706,1741,4.611,1742,4.611,1743,4.611,1744,4.611,1745,4.611,1746,4.611,1747,4.611,1748,4.611,1749,4.611,1750,3.918,1751,4.611,1752,4.611,1753,6.196,1754,5.706,1755,4.611,1756,4.611,1757,4.611,1758,4.611,1759,4.611,1760,4.611,1761,4.611,1762,5.706,1763,3.918,1764,4.611,1765,4.611,1766,4.611,1767,4.611,1768,4.611,1769,3.918,1770,3.918,1771,4.611,1772,4.611,1773,4.611,1774,4.611,1775,3.918,1776,4.611,1777,4.611,1778,4.611,1779,4.611,1780,4.611,1781,4.611,1782,3.918,1783,4.611,1784,4.611,1785,3.918,1786,3.918,1787,3.918]],["title/components/LoginComponent.html",[0,0.187,126,0.859]],["body/components/LoginComponent.html",[0,0.299,1,0.682,2,0.995,3,0.193,4,0.171,5,0.771,6,0.771,7,0.771,8,0.171,10,0.771,11,1.702,12,1.809,14,2.133,15,1.114,16,1.058,18,0.682,19,0.682,20,1.692,21,1.058,23,1.194,25,0.149,26,0.503,29,0.586,32,2.566,33,0.909,38,0.773,44,2.197,45,1.732,47,0.586,48,0.024,49,0.612,50,0.371,51,0.425,52,0.425,54,0.773,60,0.845,61,0.974,64,1.613,69,1.606,71,0.845,72,1.851,74,0.43,75,0.171,77,0.682,80,0.924,85,0.193,86,0.193,87,0.503,88,1.095,97,0.771,98,1.124,99,1.058,100,0.771,101,1.459,102,0.771,103,0.53,104,0.496,105,1.124,106,0.771,107,0.603,108,0.771,109,0.682,110,0.974,111,0.771,112,0.682,113,0.771,114,0.682,115,0.771,116,0.682,117,0.771,118,1.292,119,0.771,120,1.124,121,0.682,122,0.771,123,0.682,124,0.771,125,0.771,126,1.434,127,0.771,128,1.292,129,0.682,130,0.771,131,0.771,132,0.771,133,0.682,134,0.771,135,0.641,136,0.771,137,0.682,138,0.682,139,0.317,140,0.641,141,0.725,142,0.771,143,0.013,144,0.013,153,1.518,155,0.586,158,2.13,162,2.303,163,2.768,166,1.732,171,2.768,172,0.563,173,1.141,176,1.594,182,0.845,186,1.984,189,3.782,194,1.46,198,2.065,212,2.303,215,0.879,216,2.248,217,2.741,218,1.86,219,3.605,236,3.04,238,1.525,241,4.331,244,2.416,249,1.187,256,1.732,257,1.462,286,0.818,288,1.058,318,2.741,329,1.462,333,2.502,334,2.303,338,2.741,348,1.433,367,0.996,382,1.624,392,1.851,429,1.462,432,2.856,433,1.525,437,2.989,439,3.247,446,1.194,449,3.247,539,2.303,542,2.502,562,2.575,610,3.557,611,2.248,643,1.879,662,3.44,667,1.462,679,3.949,692,1.984,694,1.462,695,2.518,696,1.269,697,1.462,698,1.269,708,1.984,710,1.269,712,0.771,743,1.269,745,1.045,773,3.589,788,4.38,792,2.133,810,2.502,812,2.133,820,2.575,822,3.589,824,2.719,836,3.589,841,3.04,842,2.084,896,2.719,897,2.303,902,1.851,907,1.984,922,4.804,941,1.462,1031,3.04,1220,4.051,1223,2.989,1224,2.989,1231,4.465,1266,2.303,1351,1.984,1383,2.741,1387,1.879,1388,2.084,1389,1.879,1390,4.523,1392,2.084,1395,3.318,1471,4.205,1474,2.186,1486,2.502,1490,3.04,1495,3.04,1501,3.44,1503,2.741,1504,3.04,1509,3.44,1513,3.247,1528,3.949,1537,1.984,1788,2.358,1789,4.048,1790,4.048,1791,4.748,1792,5.118,1793,4.062,1794,4.78,1795,4.062,1796,4.78,1797,4.062,1798,5.254,1799,3.44,1800,4.465,1801,5.254,1802,5.254,1803,5.254,1804,2.775,1805,4.048,1806,4.78,1807,2.775,1808,4.957,1809,4.048,1810,3.44,1811,2.775,1812,3.44,1813,4.748,1814,4.048,1815,2.775,1816,4.048,1817,4.38,1818,4.048,1819,2.775,1820,2.775,1821,2.775,1822,4.048,1823,3.04,1824,2.775,1825,4.957,1826,2.775,1827,4.048,1828,4.048,1829,4.048,1830,5.254,1831,2.775,1832,2.775,1833,3.44,1834,2.775,1835,2.775,1836,2.741,1837,2.775,1838,3.44,1839,2.775,1840,2.358,1841,2.084,1842,2.775,1843,2.775,1844,2.358,1845,2.775,1846,2.775,1847,2.358,1848,2.775,1849,2.775,1850,2.775,1851,2.775,1852,2.775,1853,2.775,1854,2.775,1855,2.775,1856,3.44,1857,2.775,1858,2.775,1859,2.775,1860,4.748,1861,4.465,1862,2.775,1863,3.44,1864,2.775,1865,3.44,1866,3.44,1867,3.44,1868,2.775,1869,2.775,1870,2.358,1871,2.358,1872,2.358,1873,2.358,1874,1.879,1875,2.084,1876,2.358,1877,2.358,1878,2.358,1879,2.358,1880,2.358,1881,2.358,1882,3.04,1883,2.358,1884,2.358]],["title/components/LoginHeaderComponent.html",[0,0.187,128,0.859]],["body/components/LoginHeaderComponent.html",[0,0.343,1,0.998,2,1.294,3,0.283,4,0.25,5,1.127,6,1.127,7,1.127,8,0.25,10,1.127,11,1.769,12,1.88,15,0.775,16,1.375,18,0.998,19,0.998,21,1.375,23,1.552,25,0.218,26,0.653,33,0.83,38,1.18,42,3.562,44,1.982,48,0.024,49,0.552,50,0.324,60,0.762,61,0.879,64,1.375,66,3.252,69,1.544,72,2.406,74,0.407,75,0.25,77,0.998,85,0.283,86,0.283,97,1.127,98,1.461,99,1.375,100,1.127,101,1.716,102,1.127,103,0.775,104,0.725,105,1.461,106,1.127,107,0.881,108,1.127,109,0.998,110,1.19,111,1.127,112,0.998,113,1.127,114,0.998,115,1.127,116,0.998,117,1.127,118,0.998,119,1.127,120,1.461,121,0.998,122,1.127,123,0.998,124,1.127,125,1.127,126,0.998,127,1.127,128,1.519,129,0.998,130,1.127,131,1.127,132,1.127,133,0.998,134,1.127,135,0.938,136,1.127,137,0.998,138,0.998,139,0.464,140,0.938,141,1.06,142,1.127,143,0.017,144,0.017,153,1.294,155,0.762,172,0.457,173,1.143,176,1.294,194,1.788,215,1.143,249,1.736,256,2.251,318,3.562,367,0.962,433,1.982,446,1.723,562,2.578,595,2.138,611,2.644,667,2.138,679,3.562,694,2.138,695,3.076,696,1.856,697,2.138,698,1.856,708,3.214,710,1.856,712,1.622,743,1.856,745,1.528,810,3.252,812,2.772,1220,4.183,1223,2.993,1224,2.993,1263,3.252,1387,2.747,1389,2.747,1395,3.732,1471,3.956,1474,2.67,1480,4.472,1481,4.472,1495,3.951,1503,3.562,1513,3.252,1793,4.963,1795,4.963,1800,5.251,1808,4.472,1817,4.64,1833,4.472,1841,4.807,1844,3.448,1847,3.448,1856,4.472,1882,3.951,1885,5.44,1886,3.448,1887,4.058,1888,5.262,1889,5.262,1890,5.262,1891,4.472,1892,5.262,1893,5.262,1894,4.058,1895,3.252,1896,4.058,1897,4.472,1898,5.262,1899,5.262,1900,5.262,1901,5.675,1902,4.058,1903,4.058,1904,4.058,1905,4.058,1906,4.058,1907,4.058]],["title/injectables/NavigationHistoryService.html",[31,1.84,177,0.469]],["body/injectables/NavigationHistoryService.html",[3,0.289,4,0.255,8,0.255,13,1.543,25,0.223,26,0.663,29,0.601,31,2.813,32,2.797,33,0.866,35,2.813,36,4.68,38,1.261,45,2.964,47,0.601,48,0.024,49,0.435,50,0.329,51,0.435,52,0.56,54,1.02,56,3.908,60,0.601,61,0.693,71,0.886,73,3.3,74,0.412,75,0.255,76,5.017,77,1.021,83,2.81,84,3.117,85,0.289,86,0.289,87,0.397,88,0.986,89,3.527,91,1.382,92,2.034,93,3.527,143,0.018,144,0.018,155,0.773,165,3.018,166,2.285,172,0.582,177,0.717,179,1.153,182,0.855,184,1.665,195,2.939,221,2.285,222,1.685,256,2.285,278,2.813,286,0.646,367,0.831,372,4.219,507,2.5,544,2.667,712,1.153,815,4.009,838,1.469,1088,3.3,1185,4.468,1227,3.545,1254,4.651,1517,4.538,1537,3.054,1538,4.203,1566,4.538,1602,3.117,1610,4.538,1636,3.527,1836,3.615,1908,5.609,1909,3.527,1910,4.538,1911,5.34,1912,5.779,1913,5.886,1914,6.8,1915,5.34,1916,6.974,1917,6.232,1918,6.232,1919,6.232,1920,3.527,1921,5.34,1922,5.34,1923,5.34,1924,5.903,1925,5.34,1926,5.34,1927,4.151,1928,5.34,1929,5.34,1930,4.151,1931,4.151,1932,5.34,1933,5.34,1934,5.34,1935,4.151,1936,5.34,1937,4.151,1938,4.151,1939,4.151,1940,4.151,1941,5.34,1942,4.151,1943,4.151,1944,3.527]],["title/injectables/OverlayManager.html",[177,0.469,1945,2.622]],["body/injectables/OverlayManager.html",[3,0.239,4,0.211,8,0.211,13,0.896,15,0.655,25,0.184,26,0.584,29,0.681,32,2.507,33,0.949,38,1.103,39,2.675,47,0.927,48,0.024,49,0.671,50,0.419,51,0.694,52,0.671,60,0.905,61,1.011,71,0.915,74,0.403,75,0.211,77,0.843,85,0.239,86,0.239,87,0.514,88,1.18,91,2.081,107,1.021,139,0.81,140,1.335,143,0.015,144,0.015,155,0.681,164,2.081,165,1.568,166,2.012,172,0.595,173,1.453,175,1.771,176,1.603,177,0.632,179,0.952,182,0.905,184,1.375,186,2.304,194,1.729,215,1.021,221,2.915,225,0.843,255,1.214,286,0.534,344,1.568,348,1.9,349,2.477,350,1.886,351,2.012,362,2.153,365,2.012,367,1.03,368,2.981,378,1.68,391,1.142,392,2.151,397,2.914,409,2.575,410,2.321,420,1.787,432,2.297,440,1.142,447,1.886,451,2.63,453,2.575,464,1.68,522,1.68,545,1.886,562,1.68,565,2.304,579,2.151,639,2.906,675,4.097,686,2.119,692,1.68,698,1.568,729,3.372,800,4.671,801,2.906,912,2.575,996,3.569,998,4.097,1070,3.556,1071,2.119,1130,2.914,1204,4.561,1205,4.561,1212,3.996,1213,3.996,1214,3.996,1220,3.956,1221,4.337,1228,2.321,1235,3.91,1236,3.184,1237,2.914,1238,4.908,1240,4.561,1245,2.914,1248,4.03,1249,2.119,1250,3.996,1263,2.119,1285,3.996,1289,3.996,1303,2.411,1312,2.914,1315,2.914,1317,3.184,1320,3.996,1344,1.806,1513,2.119,1537,2.304,1611,2.304,1836,2.321,1838,2.914,1920,2.914,1945,4.337,1946,6.02,1947,4.703,1948,5.776,1949,5.367,1950,5.776,1951,3.996,1952,5.367,1953,4.337,1954,5.367,1955,5.367,1956,4.703,1957,5.776,1958,5.776,1959,5.776,1960,5.776,1961,5.776,1962,5.776,1963,4.703,1964,4.703,1965,5.367,1966,3.531,1967,3.429,1968,3.429,1969,2.914,1970,2.575,1971,3.429,1972,3.429,1973,2.914,1974,3.429,1975,3.429,1976,5.776,1977,3.429,1978,3.429,1979,3.429,1980,3.429,1981,3.429,1982,4.703,1983,4.703,1984,3.996,1985,4.703,1986,3.429,1987,3.429,1988,3.429,1989,4.703,1990,3.429,1991,3.429,1992,3.429,1993,3.429,1994,2.914,1995,2.914,1996,3.429,1997,3.429,1998,3.429,1999,3.429,2000,2.914,2001,3.429]],["title/components/PrivacyPolicyComponent.html",[0,0.187,129,0.859]],["body/components/PrivacyPolicyComponent.html",[0,0.218,1,0.524,2,0.815,3,0.284,4,0.131,5,0.591,6,0.591,7,0.591,8,0.131,10,1.13,11,1.643,12,1.777,16,0.866,18,0.524,19,0.524,21,0.866,23,0.978,25,0.114,29,0.308,30,1.442,31,2.778,33,0.617,36,3.96,39,2.614,45,1.419,46,3.57,47,0.308,48,0.023,49,0.522,50,0.339,51,0.223,52,0.223,53,2.756,54,1.349,55,2.244,56,2.614,59,2.778,63,1.747,64,0.866,69,0.941,72,2.734,73,3.259,74,0.284,75,0.131,77,0.524,81,1.442,82,1.442,85,0.148,86,0.148,87,0.204,97,0.591,98,0.921,99,0.866,100,0.591,101,1.276,102,0.591,103,0.407,104,0.381,105,0.921,106,0.591,107,0.462,108,0.591,109,0.524,110,1.306,111,0.591,112,0.524,113,0.591,114,0.524,115,0.591,116,0.524,117,0.591,118,0.524,119,0.591,120,0.921,121,0.524,122,0.591,123,0.524,124,1.691,125,0.591,126,0.524,127,0.591,128,0.524,129,1.297,130,1.901,131,0.591,132,0.591,133,0.524,134,0.591,135,0.492,136,0.591,137,0.524,138,0.524,139,0.569,140,1.352,141,0.557,142,0.591,143,0.011,144,0.011,150,3.57,151,2.817,152,2.817,153,1.13,155,0.764,163,2.421,166,1.966,171,1.747,172,0.185,187,2.244,191,1.104,192,4.048,193,3.45,195,1.419,209,2.101,211,3.854,212,1.886,225,1.774,235,2.049,244,2.482,247,2.251,257,2.999,278,2.421,282,1.73,295,3,319,3.407,327,2.489,329,3.259,333,2.049,336,3.45,349,2.778,350,1.33,367,0.516,413,1.249,414,2.84,415,3.57,417,2.614,420,1.104,421,2.614,435,2.84,437,1.886,447,1.33,498,1.249,523,1.747,532,2.84,534,2.251,544,1.419,549,2.049,562,1.625,573,1.249,636,2.244,637,2.84,675,2.244,679,4.378,692,2.79,712,0.921,745,1.249,748,2.489,764,3.594,812,1.747,819,2.049,820,3.031,821,2.489,830,3.854,838,0.754,868,1.843,896,2.614,897,3.239,907,1.625,934,2.049,970,2.489,1004,2.489,1019,2.244,1030,2.489,1070,1.886,1088,2.049,1227,2.614,1236,3.111,1249,2.049,1254,2.244,1263,2.049,1317,2.244,1330,3.45,1421,3.259,1427,2.84,1474,1.862,1477,4.217,1478,3.259,1503,3.57,1504,3.45,1523,2.489,1524,2.049,1527,2.489,1532,3.45,1537,1.625,1538,2.84,1539,1.599,1543,1.81,1544,4.49,1552,2.489,1559,3.905,1572,4.481,1575,3.905,1580,4.275,1581,4.763,1582,2.817,1583,3.45,1585,2.817,1587,2.489,1595,2.244,1602,2.489,1604,2.817,1607,2.817,1608,4.991,1615,3.905,1616,3.905,1619,2.244,1621,2.489,1622,2.489,1629,2.817,1639,3.905,1642,2.817,1643,2.817,1646,1.599,1647,2.489,1650,1.81,1653,1.599,1667,2.817,1677,3.905,1678,2.817,1679,3.905,1682,2.817,1683,3.96,1684,2.817,1685,4.481,1698,4.275,1711,2.817,1712,3.905,1718,4.481,1719,3.905,1728,2.817,1731,2.817,1735,4.481,1769,2.817,1770,2.817,1775,2.817,1782,2.817,1785,2.817,1786,2.817,1787,2.817,1823,3.96,1836,2.244,1877,2.817,1879,2.817,1901,2.817,1910,2.817,1912,4.481,1913,2.817,1969,2.817,2002,3.46,2003,3.46,2004,1.81,2005,3.315,2006,3.315,2007,2.129,2008,3.315,2009,2.129,2010,3.315,2011,3.315,2012,3.315,2013,3.315,2014,3.315,2015,3.315,2016,3.315,2017,3.315,2018,4.595,2019,3.315,2020,5.273,2021,3.315,2022,5.273,2023,3.315,2024,3.315,2025,4.595,2026,4.595,2027,6.344,2028,3.315,2029,2.817,2030,3.315,2031,4.595,2032,4.595,2033,4.595,2034,5.273,2035,3.315,2036,3.315,2037,2.244,2038,3.315,2039,3.315,2040,4.595,2041,3.315,2042,3.315,2043,3.315,2044,3.315,2045,4.595,2046,3.315,2047,3.315,2048,6.187,2049,3.905,2050,6.715,2051,4.481,2052,3.315,2053,4.595,2054,3.315,2055,3.315,2056,3.315,2057,3.315,2058,3.315,2059,4.595,2060,3.315,2061,3.315,2062,4.595,2063,3.315,2064,3.315,2065,5.273,2066,4.595,2067,4.188,2068,3.315,2069,3.315,2070,3.315,2071,3.315,2072,3.315,2073,3.315,2074,3.315,2075,3.315,2076,3.315,2077,3.315,2078,3.315,2079,2.489,2080,4.595,2081,3.315,2082,4.595,2083,3.315,2084,4.595,2085,3.315,2086,5.273,2087,3.315,2088,3.315,2089,3.315,2090,4.595,2091,4.595,2092,3.315,2093,3.315,2094,3.315,2095,3.315,2096,4.595,2097,3.315,2098,3.315,2099,3.315,2100,5.273,2101,3.315,2102,3.315,2103,3.315,2104,3.315,2105,3.905,2106,3.315,2107,3.315,2108,3.315,2109,4.595,2110,3.315,2111,3.315,2112,3.315,2113,3.315,2114,3.315,2115,3.315,2116,4.595,2117,3.315,2118,3.315,2119,3.315,2120,3.315,2121,3.315,2122,3.315,2123,3.315,2124,3.315,2125,3.315,2126,4.595,2127,4.595,2128,5.273,2129,3.315,2130,5.273,2131,3.315,2132,3.315,2133,3.315,2134,3.315,2135,3.315,2136,3.315,2137,4.595,2138,3.315,2139,3.315,2140,3.315,2141,3.315,2142,4.595,2143,3.315,2144,3.315,2145,4.595,2146,3.315,2147,5.273,2148,3.315,2149,3.315,2150,3.315,2151,3.315,2152,3.315,2153,3.315,2154,3.315,2155,4.595,2156,3.315,2157,3.315,2158,3.315,2159,3.315,2160,3.315,2161,3.315,2162,3.315,2163,3.315,2164,3.315,2165,4.595,2166,3.315,2167,3.315,2168,3.315,2169,4.595,2170,3.315,2171,3.315,2172,3.315,2173,3.315,2174,3.315,2175,3.315,2176,3.905,2177,3.315,2178,3.315,2179,3.315,2180,3.315,2181,3.315,2182,4.595,2183,2.817,2184,3.315,2185,3.315,2186,3.315,2187,2.817,2188,3.315,2189,3.315,2190,3.315,2191,3.315,2192,3.315,2193,3.315,2194,2.817,2195,3.315,2196,2.049,2197,3.315,2198,3.315,2199,4.595,2200,3.905,2201,3.315,2202,2.817,2203,3.315,2204,3.315,2205,2.489,2206,4.595,2207,3.45,2208,2.817,2209,2.244,2210,2.817,2211,3.315,2212,2.817,2213,3.315,2214,3.315,2215,3.315,2216,3.315,2217,3.315,2218,3.315,2219,3.315,2220,3.315,2221,3.315,2222,5.273,2223,3.315,2224,4.595,2225,3.315,2226,3.315,2227,3.315,2228,3.315,2229,3.315]],["title/components/SidebarComponent.html",[0,0.187,18,0.859]],["body/components/SidebarComponent.html",[0,0.353,1,1.091,2,1.37,3,0.309,4,0.273,5,1.232,6,1.232,7,1.232,8,0.273,10,1.232,11,1.782,12,1.894,15,1.064,16,1.456,18,1.651,19,1.091,20,2.156,21,1.456,23,1.644,25,0.238,29,0.643,33,0.748,43,5.428,45,2.733,47,0.643,48,0.024,49,0.639,50,0.273,51,0.465,52,0.584,54,1.064,64,1.456,69,1.026,73,3.443,74,0.445,75,0.273,77,1.091,80,1.478,85,0.309,86,0.309,87,0.425,97,1.232,98,1.547,99,1.456,100,1.232,101,1.774,102,1.232,103,0.848,104,1.089,105,1.547,106,1.232,107,0.964,108,1.232,109,1.091,110,1.241,111,1.232,112,1.091,113,1.232,114,1.091,115,1.232,116,1.091,117,1.232,118,1.091,119,1.232,120,1.547,121,1.091,122,1.232,123,1.091,124,1.691,125,1.232,126,1.091,127,1.232,128,1.091,129,1.091,130,1.691,131,1.232,132,1.232,133,1.091,134,1.232,135,1.026,136,1.232,137,1.091,138,1.091,139,0.696,140,1.026,141,1.16,142,1.232,143,0.018,144,0.018,153,1.651,154,3.169,155,0.807,157,3.332,158,2.269,160,4.735,162,3.169,163,3.365,164,1.855,172,0.483,173,1.21,174,2.935,175,2.098,176,1.37,181,3.332,182,0.643,203,4.324,215,1.21,238,2.405,447,2.235,498,2.098,838,1.571,941,2.338,1383,3.772,1474,2.785,1477,3.443,1478,3.443,1528,3.772,1595,3.772,1825,4.735,2176,4.735,2230,3.771,2231,5.571,2232,5.571,2233,4.438,2234,4.438]],["title/components/SignupComponent.html",[0,0.187,133,0.859]],["body/components/SignupComponent.html",[0,0.214,1,0.508,2,0.796,3,0.144,4,0.127,5,0.574,6,0.574,7,0.574,8,0.127,10,0.574,11,1.636,12,1.739,14,1.706,15,0.938,16,0.846,18,0.508,19,0.508,20,1.414,21,0.846,25,0.111,26,0.402,29,0.469,32,2.378,33,0.836,38,0.619,42,1.399,44,1.22,45,1.934,47,0.655,48,0.024,49,0.674,50,0.365,51,0.474,52,0.474,54,0.863,55,2.192,56,1.842,60,0.711,61,0.82,63,2.381,64,0.846,66,2.468,69,1.045,70,4.611,71,0.871,74,0.393,75,0.127,77,0.508,80,0.688,85,0.144,86,0.144,87,0.539,88,0.755,97,0.574,98,0.899,99,0.846,100,0.574,101,1.814,102,0.574,103,0.395,104,0.369,105,0.899,106,0.574,107,0.449,108,0.574,109,0.508,110,1.181,111,0.574,112,0.508,113,0.574,114,0.508,115,0.574,116,0.508,117,0.574,118,1.111,119,0.574,120,0.899,121,0.508,122,0.574,123,0.508,124,0.574,125,0.574,126,0.508,127,0.574,128,0.508,129,0.508,130,1.255,131,0.574,132,0.574,133,1.111,134,0.574,135,0.478,136,0.574,137,0.508,138,0.508,139,0.236,140,0.478,141,0.54,142,0.574,143,0.011,144,0.011,153,1.386,155,0.469,158,1.877,165,1.481,172,0.514,173,1.131,176,1.425,180,1.706,182,0.858,183,1.399,186,1.587,187,4.353,198,1.414,215,0.703,216,1.386,217,3.525,218,1.995,219,3.664,222,1.283,241,4.422,244,2.324,254,0.808,255,1.995,256,1.386,257,2.104,286,0.902,288,0.54,295,1.842,324,1.399,329,1.088,333,2.001,334,1.175,345,3.363,346,1.088,348,1.146,351,1.386,367,0.811,368,2.067,382,2.528,388,1.399,427,3.06,428,2.703,429,1.088,430,2.192,431,2.192,432,2.898,433,2.276,437,2.571,439,3.483,440,1.078,446,1.837,449,2.793,452,2.123,498,1.22,521,1.277,541,1.551,542,3.218,543,2.001,544,1.386,549,2.001,579,1.481,595,2.104,611,1.934,696,0.945,701,1.012,706,2.468,708,1.957,710,0.945,712,0.574,725,3.323,729,3.643,743,0.945,745,2.05,773,2.998,784,3.841,787,1.756,788,3.91,792,1.706,797,3.393,798,2.752,810,3.218,819,2.793,822,2.998,824,3.097,836,3.394,840,1.756,841,3.394,842,1.551,878,1.756,881,2.752,896,2.571,897,1.842,902,1.481,932,3.394,941,1.088,982,1.756,983,5.135,985,5.292,988,3.686,989,3.393,990,1.551,991,3.686,992,5.413,993,4.232,995,4.626,996,2.001,997,1.756,998,4.267,999,3.393,1001,2.752,1002,2.752,1004,4.611,1006,1.756,1008,3.841,1014,4.789,1015,4.172,1016,3.393,1017,5.135,1018,2.752,1019,3.06,1020,4.172,1022,4.789,1023,1.756,1026,2.752,1029,4.789,1030,2.432,1031,2.432,1032,4.232,1035,1.756,1036,5.135,1037,2.752,1038,2.752,1041,2.752,1044,4.789,1048,2.752,1049,3.841,1050,4.611,1051,1.756,1052,3.841,1055,1.756,1057,4.172,1058,4.425,1059,3.686,1060,3.841,1062,2.752,1066,3.393,1067,4.172,1068,3.393,1069,2.752,1070,2.793,1071,3.034,1072,4.425,1073,2.752,1075,4.172,1076,2.752,1082,3.393,1085,4.924,1087,1.756,1092,3.393,1094,2.752,1101,3.841,1102,2.752,1103,2.752,1106,1.756,1107,1.756,1187,1.756,1220,1.277,1221,2.432,1223,1.842,1224,1.842,1227,2.272,1235,2.192,1266,1.842,1282,1.756,1351,1.587,1442,1.551,1471,3.895,1474,1.826,1477,2.468,1486,2.001,1513,2.001,1537,1.587,1583,2.432,1611,1.587,1621,2.432,1750,3.393,1791,4.172,1792,3.393,1797,3.393,1799,2.752,1810,2.752,1812,2.752,1813,5.038,1817,1.551,1840,1.756,1860,3.393,1861,2.752,1863,1.756,1865,1.756,1866,1.756,1867,1.756,1870,1.756,1871,1.756,1872,1.756,1873,1.756,1874,1.399,1875,1.551,1876,1.756,1878,2.752,1880,1.756,1881,1.756,1882,3.394,1883,1.756,1884,1.756,1891,3.841,1944,1.756,1984,1.756,2067,2.192,2105,2.752,2187,2.752,2194,4.172,2208,2.752,2235,1.756,2236,3.993,2237,3.238,2238,3.993,2239,3.993,2240,4.909,2241,4.52,2242,3.238,2243,3.238,2244,3.238,2245,2.066,2246,3.238,2247,3.238,2248,2.001,2249,2.066,2250,2.066,2251,3.993,2252,3.238,2253,2.066,2254,3.238,2255,3.238,2256,2.066,2257,5.207,2258,4.909,2259,3.238,2260,4.909,2261,2.066,2262,3.993,2263,4.52,2264,2.066,2265,2.192,2266,2.066,2267,2.066,2268,2.066,2269,2.066,2270,2.066,2271,2.066,2272,2.066,2273,2.066,2274,2.066,2275,3.238,2276,2.066,2277,2.066,2278,2.066,2279,2.066,2280,2.066,2281,2.066,2282,2.066,2283,2.066,2284,3.238,2285,2.066,2286,2.066,2287,2.066,2288,2.066,2289,2.066,2290,2.066,2291,3.238,2292,2.066,2293,3.238,2294,2.066,2295,2.066,2296,3.238,2297,2.066,2298,2.066,2299,2.066,2300,2.066,2301,2.066,2302,2.066,2303,2.066,2304,3.993,2305,2.066,2306,2.066,2307,3.238,2308,2.066,2309,2.066,2310,3.993,2311,5.207,2312,2.066,2313,3.238,2314,5.207,2315,2.066,2316,2.066,2317,2.066,2318,2.066,2319,3.993,2320,2.066,2321,2.066,2322,2.066,2323,2.066,2324,2.066,2325,3.238,2326,2.066,2327,2.066,2328,2.066,2329,3.238,2330,2.066,2331,2.066,2332,2.066,2333,2.066,2334,2.066,2335,2.066,2336,2.066,2337,2.066,2338,3.238,2339,3.238,2340,3.993,2341,3.238,2342,3.238,2343,2.066,2344,2.066,2345,2.066,2346,2.066,2347,2.066,2348,2.192,2349,2.066,2350,3.238,2351,3.993,2352,3.238,2353,3.238,2354,3.993,2355,2.066,2356,2.066,2357,2.066,2358,3.238,2359,2.066,2360,2.066,2361,2.066,2362,2.066,2363,2.066,2364,2.066,2365,3.993,2366,2.066,2367,3.238,2368,2.066,2369,2.066,2370,2.066,2371,2.066,2372,2.066,2373,2.066,2374,2.066,2375,2.066,2376,2.066,2377,2.066,2378,2.066,2379,3.238,2380,2.066,2381,2.066,2382,2.066,2383,2.066,2384,2.066,2385,2.066,2386,2.066,2387,2.066,2388,2.066]],["title/interfaces/Subtask.html",[277,0.712,2389,1.401]],["body/interfaces/Subtask.html",[3,0.245,4,0.216,8,0.216,13,0.918,25,0.188,26,0.594,38,0.914,48,0.024,50,0.335,60,0.509,61,1.019,71,0.951,74,0.245,75,0.216,85,0.333,86,0.245,87,0.636,88,1.052,91,2.214,103,0.671,104,0.628,139,0.402,143,0.016,144,0.016,173,1.368,176,1.548,177,0.642,179,0.976,182,0.884,194,1.595,214,1.324,221,2.612,222,1.646,225,0.864,254,0.855,277,0.716,286,0.908,341,1.722,342,1.999,344,1.607,348,2.066,349,1.851,350,1.41,351,1.504,365,2.497,367,1.092,375,1.722,382,2.722,391,1.592,392,1.607,393,2.172,413,2.66,420,2.239,433,2.427,447,1.41,451,3.157,462,1.722,507,1.41,520,2.519,565,2.664,573,1.324,634,2.639,640,1.999,693,1.851,712,1.51,743,1.607,745,1.324,827,3.591,835,2.639,960,2.172,1241,3.772,1266,1.999,1511,2.379,1611,1.722,1874,3.238,2205,2.639,2389,2.917,2390,2.639,2391,3.238,2392,2.859,2393,2.987,2394,2.987,2395,2.987,2396,2.987,2397,2.987,2398,2.639,2399,4.382,2400,2.987,2401,4.62,2402,2.987,2403,2.987,2404,5.572,2405,2.987,2406,4.959,2407,2.987,2408,5.476,2409,2.987,2410,2.987,2411,5.187,2412,2.987,2413,5.476,2414,2.987,2415,2.987,2416,2.987,2417,4.62,2418,2.987,2419,4.382,2420,4.62,2421,4.064,2422,2.987,2423,2.987,2424,2.379,2425,4.064,2426,2.987,2427,2.639,2428,2.987,2429,2.987,2430,2.987,2431,2.987,2432,2.639,2433,2.987,2434,4.064,2435,2.987,2436,4.064,2437,4.064,2438,2.987,2439,2.987,2440,2.987,2441,4.62,2442,2.987,2443,4.064,2444,2.987,2445,2.987,2446,2.987,2447,2.987,2448,2.987,2449,2.987,2450,2.987,2451,2.987,2452,4.064,2453,2.987,2454,4.064,2455,2.987,2456,2.987,2457,2.987,2458,2.987,2459,4.064,2460,2.987,2461,2.987,2462,1.851,2463,2.987,2464,4.064]],["title/interfaces/Subtask-1.html",[277,0.595,712,0.81,2389,1.171]],["body/interfaces/Subtask-1.html",[3,0.212,4,0.187,8,0.187,13,0.796,25,0.163,26,0.537,28,4.422,38,0.582,48,0.024,50,0.31,51,0.664,52,0.575,54,0.582,67,2.281,71,0.961,74,0.351,75,0.187,85,0.351,86,0.212,87,0.665,88,0.509,92,2.121,104,0.544,139,0.828,143,0.014,144,0.014,153,1.064,164,1.929,172,0.559,173,1.094,177,0.581,179,0.846,182,1.013,191,1.826,198,2.131,209,3.152,214,1.63,215,1.094,216,1.852,218,1.942,222,1.654,225,1.064,247,2.121,254,0.9,256,1.303,258,2.303,270,1.604,274,1.492,275,1.604,276,1.078,277,0.882,278,1.604,282,2.596,285,2.281,286,1.055,288,1.574,296,2.281,340,2.889,341,1.492,346,2.281,358,1.882,360,1.882,365,1.303,382,1.737,391,1.014,413,2.663,418,1.393,421,2.463,422,1.882,423,1.882,424,1.882,425,1.882,440,1.929,446,1.277,447,1.222,462,2.688,464,2.121,497,2.468,500,1.882,502,3.172,503,3.39,507,1.222,512,3.12,513,2.675,516,2.675,517,2.675,519,2.675,520,2.281,522,1.492,523,2.889,525,3.581,528,2.675,529,2.675,530,1.882,534,2.839,537,2.675,539,1.733,544,1.303,545,1.737,555,1.303,573,1.63,669,1.014,693,1.604,792,2.653,838,1.078,868,2.415,902,1.98,907,1.492,934,1.882,951,2.463,1303,1.147,1310,2.865,1337,2.931,1364,2.931,1421,2.281,1487,1.882,1600,3.41,1611,1.492,2037,2.062,2196,1.882,2209,2.931,2248,1.882,2265,2.931,2348,2.062,2389,2.853,2392,2.95,2462,2.281,2465,2.062,2466,3.251,2467,4.521,2468,3.912,2469,2.287,2470,2.287,2471,2.287,2472,2.287,2473,3.41,2474,2.287,2475,2.287,2476,2.062,2477,2.062,2478,3.251,2479,2.287,2480,2.287,2481,4.119,2482,2.287,2483,2.287,2484,3.251,2485,4.351,2486,2.287,2487,2.287,2488,2.287,2489,2.287,2490,3.251,2491,2.287,2492,3.251,2493,2.287,2494,3.251,2495,2.287,2496,2.287,2497,2.287,2498,2.287,2499,2.287,2500,2.287,2501,3.782,2502,2.287,2503,2.287,2504,2.287,2505,2.287,2506,2.287,2507,2.287,2508,2.287,2509,2.287,2510,2.287,2511,2.287,2512,2.287,2513,2.287,2514,4.119,2515,3.251,2516,2.287,2517,3.251,2518,3.251,2519,2.287,2520,2.287,2521,2.287,2522,2.287,2523,2.287,2524,2.062,2525,2.287,2526,2.287,2527,3.251,2528,2.287,2529,2.287,2530,2.287,2531,2.287,2532,2.287,2533,2.287,2534,2.287,2535,1.882,2536,2.931,2537,1.882,2538,3.251,2539,2.062,2540,2.287,2541,2.287,2542,2.062,2543,2.287,2544,2.287,2545,2.287,2546,2.287,2547,2.287,2548,2.287,2549,2.287,2550,2.287,2551,2.287,2552,2.287,2553,2.287,2554,3.782,2555,2.287,2556,2.287,2557,2.287,2558,2.287,2559,2.287,2560,2.287,2561,2.287]],["title/injectables/SubtaskManager.html",[177,0.469,2391,2.364]],["body/injectables/SubtaskManager.html",[3,0.184,4,0.162,8,0.162,13,0.689,25,0.141,26,0.484,33,0.943,38,0.979,47,0.928,48,0.024,49,0.672,50,0.416,51,0.672,52,0.638,60,0.881,61,1.121,71,0.958,74,0.184,75,0.162,85,0.272,86,0.184,87,0.594,88,1.134,91,2.272,103,0.745,104,0.697,139,0.446,143,0.013,144,0.013,155,0.564,172,0.599,173,1.321,176,1.457,177,0.524,179,0.732,182,0.792,184,1.057,194,1.652,214,1.468,221,2.704,222,1.624,225,0.958,254,0.916,277,0.537,286,0.798,342,4.003,344,1.205,348,2.154,349,2.054,350,1.564,351,1.668,365,2.603,367,1.105,375,1.91,382,2.653,391,1.707,392,1.783,393,3.168,398,1.979,402,2.24,406,2.24,407,2.24,408,1.784,409,1.979,410,1.784,413,2.632,420,2.272,433,2.469,447,1.564,451,3.241,462,1.91,507,1.564,520,2.7,565,2.681,573,1.468,634,2.927,640,2.218,693,2.054,712,1.423,743,1.205,745,0.993,827,3.849,835,2.927,960,2.409,1128,2.24,1141,2.24,1143,2.24,1146,2.24,1241,2.409,1266,2.218,1314,1.979,1511,2.639,1611,1.91,1874,3.141,1966,1.979,2205,2.927,2389,2.926,2390,5.284,2391,3.47,2392,3.044,2393,3.942,2394,3.942,2395,3.942,2396,3.942,2397,3.942,2398,3.849,2399,3.849,2400,3.313,2401,3.942,2402,2.24,2403,4.356,2404,5.17,2405,3.313,2406,5.17,2407,4.356,2408,5.036,2409,3.313,2410,4.356,2411,4.649,2412,4.356,2413,5.036,2414,3.313,2415,4.356,2416,3.313,2417,4.867,2418,3.313,2419,3.849,2420,3.942,2421,3.313,2422,3.313,2423,3.313,2424,1.784,2425,4.356,2426,4.356,2427,3.849,2428,2.24,2429,2.24,2430,3.313,2431,2.24,2432,1.979,2433,3.313,2434,4.356,2435,3.313,2436,3.313,2437,3.313,2438,2.24,2439,2.24,2440,3.313,2441,4.649,2442,3.313,2443,3.313,2444,2.24,2445,2.24,2446,2.24,2447,2.24,2448,2.24,2449,2.24,2450,3.313,2451,4.356,2452,3.313,2453,2.24,2454,3.313,2455,4.356,2456,3.313,2457,3.313,2458,3.942,2459,3.313,2460,2.24,2461,2.24,2462,2.054,2463,3.313,2464,3.313,2562,3.898,2563,3.313,2564,3.898,2565,3.898,2566,3.898,2567,3.898,2568,3.898,2569,3.898,2570,3.898,2571,3.898,2572,3.898,2573,2.636,2574,2.636,2575,2.636,2576,2.636,2577,2.636,2578,2.636,2579,2.24,2580,2.636,2581,2.636,2582,2.636,2583,2.24,2584,2.636,2585,2.636,2586,2.636,2587,2.636]],["title/components/SummaryComponent.html",[0,0.187,135,0.807]],["body/components/SummaryComponent.html",[0,0.287,1,0.713,2,1.027,3,0.202,4,0.178,5,0.805,6,0.805,7,0.805,8,0.178,10,0.805,11,1.711,12,1.819,15,1.131,16,1.092,18,0.713,19,0.713,20,1.735,21,1.092,23,1.233,25,0.155,26,0.519,29,0.605,32,2.448,33,0.928,38,0.798,44,1.092,47,0.709,48,0.024,49,0.596,50,0.411,51,0.514,52,0.438,60,0.957,61,1.104,63,1.527,67,2.201,69,0.67,71,0.888,72,1.911,74,0.413,75,0.178,77,0.713,80,0.965,85,0.202,86,0.202,87,0.469,88,1.093,92,1.42,97,0.805,98,1.16,99,1.092,100,0.805,101,1.489,102,0.805,103,0.554,104,0.518,105,1.16,106,0.805,107,0.63,108,0.805,109,0.713,110,0.999,111,0.805,112,0.713,113,0.805,114,0.713,115,0.805,116,0.713,117,0.805,118,0.713,119,0.805,120,1.16,121,0.713,122,0.805,123,0.713,124,0.805,125,0.805,126,0.713,127,0.805,128,0.713,129,0.713,130,0.805,131,0.805,132,0.805,133,0.713,134,0.805,135,1.24,136,0.805,137,0.713,138,0.713,139,0.728,140,0.67,141,0.758,142,0.805,143,0.014,144,0.014,153,0.713,155,0.605,158,2.032,161,1.788,164,2.151,172,0.583,176,1.319,180,2.201,182,0.776,194,0.758,222,1.595,225,0.713,238,1.574,249,1.24,254,0.876,255,1.026,277,0.591,282,2.353,286,0.885,288,0.758,367,0.651,420,2.309,440,1.972,441,1.527,444,2.787,446,1.968,595,2.581,604,3.317,611,2.097,624,3.138,649,1.649,667,1.527,669,1.391,692,2.048,694,1.527,695,2.581,696,1.326,697,1.527,698,1.326,708,2.048,710,1.326,712,0.805,731,2.177,743,1.911,868,2.771,902,2.452,941,1.527,960,2.582,975,1.963,990,3.138,1302,1.791,1303,2.23,1305,3.317,1344,1.527,1351,2.401,1353,2.787,1355,3.051,1379,4.23,1380,2.177,1381,2.463,1383,2.829,1384,3.551,1385,3.551,1386,2.463,1387,1.963,1388,2.177,1389,1.963,1390,4.027,1391,2.463,1392,2.177,1393,5.187,1394,4.164,1395,3.234,1396,4.164,1397,4.831,1398,4.831,1399,5.618,1400,4.831,1401,4.831,1402,4.831,1403,4.831,1404,3.551,1405,3.551,1406,3.551,1407,2.463,1408,3.551,1409,2.463,1410,4.831,1411,3.551,1412,2.463,1413,4.164,1414,2.463,1415,4.831,1416,3.551,1417,3.551,1418,3.551,1419,3.551,1420,3.551,1421,2.201,1422,3.551,1423,3.551,1424,4.557,1425,4.831,1426,2.463,1427,1.791,1428,2.463,1429,2.463,1430,2.463,1431,2.463,1432,2.463,1433,2.463,1434,2.463,1435,2.463,1436,2.463,1437,3.551,1438,2.463,1439,4.164,1440,3.551,1441,2.463,1442,2.177,1443,2.463,1444,2.177,1445,2.177,1446,4.164,1447,2.463,1448,3.138,1449,2.463,1450,3.551,1451,4.831,1452,2.463,1453,4.831,1454,2.463,1455,2.463,1456,2.463,1457,3.551,1458,3.551,1459,2.463,1460,2.463,1461,2.463,1462,2.463,1463,3.551,1464,2.463,1465,3.551,1466,3.551,1467,2.463,1468,2.463,1469,2.463,1470,2.463,1537,1.42,1540,2.463,1595,1.963,1895,1.791,2202,2.463,2476,2.829,2588,4.179,2589,4.9,2590,4.179,2591,4.179,2592,2.899,2593,2.899,2594,2.899,2595,2.899,2596,2.899,2597,2.463,2598,2.899,2599,2.899,2600,2.899,2601,2.899,2602,2.899,2603,2.899,2604,2.899,2605,2.899,2606,2.899,2607,2.899,2608,2.899,2609,2.899,2610,2.899,2611,4.179,2612,4.179,2613,4.179,2614,4.179,2615,4.179,2616,4.179,2617,4.179,2618,4.179,2619,3.551]],["title/interfaces/Task.html",[139,0.399,277,0.712]],["body/interfaces/Task.html",[3,0.202,4,0.178,8,0.178,13,0.757,25,0.155,26,0.518,28,4.373,38,0.798,48,0.024,50,0.392,51,0.718,52,0.655,54,0.553,67,2.2,71,0.965,74,0.341,75,0.178,85,0.341,86,0.202,87,0.661,88,0.484,92,2.046,104,0.518,139,0.83,143,0.014,144,0.014,153,1.397,164,2.08,172,0.552,173,0.629,177,0.561,179,0.804,182,1.007,191,1.785,198,2.096,209,3.159,214,1.573,215,1.063,216,1.787,218,1.897,222,1.632,225,1.027,247,2.046,254,0.875,256,1.787,258,2.239,270,1.526,274,1.419,275,1.526,276,1.025,277,0.851,278,1.526,282,2.644,285,2.2,286,1.047,288,1.547,296,2.2,340,3.29,341,1.419,346,1.526,358,3.026,360,3.026,365,1.239,382,1.675,391,0.964,413,2.65,418,1.91,421,2.376,422,1.79,423,1.79,424,1.79,425,1.79,440,1.971,446,1.232,447,1.162,462,2.627,464,2.046,497,2.4,500,1.79,502,3.119,503,3.313,507,1.675,512,3.049,513,2.581,516,2.581,517,2.581,519,2.581,520,2.2,522,1.419,523,2.824,525,3.512,528,2.581,529,2.581,530,1.79,534,2.784,537,2.581,539,1.647,544,1.239,545,1.675,555,1.239,573,1.573,669,1.39,693,1.526,792,2.58,838,1.025,868,2.375,902,1.91,907,1.419,934,1.79,951,2.376,1303,1.091,1310,2.786,1337,2.827,1364,2.827,1421,2.2,1487,1.79,1600,3.315,1611,1.419,2037,1.961,2196,2.581,2209,2.827,2248,1.79,2265,2.827,2348,3.315,2389,2.851,2392,2.99,2462,1.526,2465,1.961,2466,2.175,2467,3.677,2468,4.085,2469,3.136,2470,3.136,2471,3.136,2472,3.136,2473,4.131,2474,3.136,2475,3.677,2476,3.315,2477,2.827,2478,4.267,2479,3.136,2480,3.136,2481,4.267,2482,2.175,2483,2.175,2484,3.136,2485,4.267,2486,2.175,2487,2.175,2488,2.175,2489,2.175,2490,3.136,2491,2.175,2492,3.136,2493,2.175,2494,3.136,2495,2.175,2496,2.175,2497,2.175,2498,2.175,2499,2.175,2500,2.175,2501,3.677,2502,2.175,2503,2.175,2504,2.175,2505,2.175,2506,2.175,2507,2.175,2508,2.175,2509,2.175,2510,2.175,2511,2.175,2512,2.175,2513,2.175,2514,4.025,2515,3.136,2516,2.175,2517,3.136,2518,3.136,2519,2.175,2520,2.175,2521,2.175,2522,2.175,2523,2.175,2524,1.961,2525,2.175,2526,2.175,2527,3.136,2528,2.175,2529,2.175,2530,2.175,2531,2.175,2532,2.175,2533,2.175,2534,2.175,2535,1.79,2536,2.827,2537,1.79,2538,3.136,2539,1.961,2540,2.175,2541,2.175,2542,1.961,2543,2.175,2544,2.175,2545,2.175,2546,2.175,2547,2.175,2548,2.175,2549,2.175,2550,2.175,2551,2.175,2552,2.175,2553,2.175,2554,3.677,2555,2.175,2556,2.175,2557,2.175,2558,2.175,2559,2.175,2560,2.175,2561,2.175]],["title/components/TaskComponent.html",[0,0.187,137,0.859]],["body/components/TaskComponent.html",[0,0.309,1,0.595,2,0.899,3,0.169,4,0.149,5,0.672,6,0.672,7,0.672,8,0.149,10,0.672,11,1.673,12,1.778,16,0.956,18,0.595,19,0.595,20,1.56,21,0.956,23,1.079,25,0.236,26,0.689,29,0.529,33,0.927,38,0.698,47,0.896,48,0.024,49,0.668,50,0.419,51,0.683,52,0.649,54,1.06,59,1.926,60,0.638,61,0.736,64,0.956,65,2.26,66,2.26,69,0.559,71,0.844,74,0.414,75,0.225,80,0.806,85,0.169,86,0.169,87,0.601,91,2.275,97,0.672,98,1.015,99,0.956,100,0.672,101,1.364,102,0.672,103,0.462,104,0.432,105,1.015,106,0.672,107,0.525,108,0.672,109,0.595,110,1.431,111,0.672,112,0.595,113,0.672,114,0.595,115,0.672,116,0.595,117,0.672,118,0.595,119,0.672,120,1.015,121,0.595,122,0.672,123,0.595,124,0.672,125,0.672,126,0.595,127,0.672,128,0.595,129,0.595,130,0.672,131,0.672,132,0.672,133,0.595,134,0.672,135,0.559,136,0.672,137,1.208,138,0.595,139,0.828,140,1.019,141,0.632,142,0.672,143,0.012,144,0.012,153,0.899,155,0.529,164,2.021,172,0.574,173,0.525,182,0.764,186,2.16,195,2.374,198,1.56,215,1.205,222,1.284,225,1.416,238,1.85,254,1.03,286,0.569,288,0.632,350,1.467,362,2.225,367,0.923,375,1.792,378,2.585,392,1.672,413,2.089,418,2.246,419,3.326,420,2.06,433,2.234,440,1.217,446,1.699,452,2.368,498,2.286,502,2.322,507,1.467,534,1.792,545,1.768,555,2.831,579,1.672,611,2.102,614,2.746,618,2.26,621,2.746,622,2.746,624,2.746,629,3.885,631,1.817,632,1.817,636,2.984,638,4.538,639,4.089,640,2.507,649,3.156,661,2.746,669,2.203,671,2.746,672,1.817,673,2.746,675,2.475,699,3.428,700,1.817,701,1.792,717,2.056,718,2.056,719,2.056,725,1.638,745,1.66,764,2.322,800,1.638,801,3.036,896,2.08,897,2.08,907,1.792,912,2.746,932,2.746,1088,2.26,1118,3.107,1133,3.107,1135,4.175,1136,4.175,1137,4.175,1138,4.175,1139,3.107,1158,2.746,1161,2.056,1162,2.056,1178,1.817,1223,2.795,1224,2.795,1228,3.756,1241,3.56,1248,1.817,1259,3.107,1263,2.26,1298,3.746,1302,1.495,1303,2.33,1309,4.453,1310,1.376,1344,2.322,1351,1.792,1353,2.08,1355,2.08,1486,2.26,1488,5.258,1490,3.31,1491,3.746,1493,4.895,1508,3.689,1538,2.26,1563,3.107,1622,4.166,1630,2.746,1713,3.689,1895,3.036,1953,3.31,2000,2.056,2389,2.225,2392,3.19,2424,2.475,2462,1.926,2597,3.107,2619,3.107,2620,2.056,2621,3.656,2622,3.656,2623,3.746,2624,3.656,2625,3.656,2626,4.912,2627,3.656,2628,3.656,2629,3.656,2630,3.656,2631,3.107,2632,4.408,2633,5.931,2634,4.408,2635,4.408,2636,4.408,2637,4.408,2638,2.419,2639,3.746,2640,2.419,2641,3.656,2642,6.617,2643,2.419,2644,2.419,2645,2.419,2646,3.656,2647,2.419,2648,2.419,2649,4.912,2650,2.419,2651,3.656,2652,2.419,2653,3.656,2654,3.656,2655,2.419,2656,4.175,2657,4.912,2658,2.419,2659,4.912,2660,2.419,2661,2.419,2662,3.656,2663,3.656,2664,3.656,2665,4.912,2666,2.419,2667,3.656,2668,4.912,2669,3.656,2670,3.656,2671,2.419,2672,3.656,2673,3.656,2674,2.419,2675,3.656,2676,2.419,2677,3.656,2678,2.419,2679,4.912,2680,2.419,2681,2.419,2682,2.419,2683,2.419,2684,2.419,2685,2.419,2686,2.419,2687,3.656,2688,3.656,2689,4.408,2690,3.656,2691,2.419,2692,2.419,2693,2.056,2694,3.746,2695,2.419,2696,2.419,2697,2.419,2698,2.419,2699,4.912,2700,2.419,2701,2.419,2702,2.419,2703,2.419,2704,2.419,2705,2.056,2706,2.056,2707,2.056,2708,2.056,2709,2.419,2710,3.107,2711,3.107,2712,3.107,2713,3.656,2714,3.107,2715,3.656,2716,3.656]],["title/components/TaskDetailsComponent.html",[0,0.187,138,0.859]],["body/components/TaskDetailsComponent.html",[0,0.301,1,0.689,2,1.002,3,0.195,4,0.172,5,0.778,6,0.778,7,0.778,8,0.172,10,0.778,11,1.704,12,1.811,15,0.779,16,1.066,18,0.689,19,0.689,20,1.701,21,1.066,23,1.203,25,0.301,26,0.506,29,0.764,32,2.635,33,0.927,38,0.779,45,1.744,47,0.812,48,0.024,49,0.633,50,0.408,51,0.662,52,0.588,54,1.118,60,0.875,61,0.803,63,2.148,64,1.066,65,2.52,69,0.648,71,0.786,74,0.44,75,0.172,77,0.689,80,0.933,85,0.195,86,0.195,87,0.578,88,0.468,91,2.329,97,0.778,98,1.132,99,1.066,100,0.778,101,1.466,102,0.778,103,0.535,104,0.501,105,1.132,106,0.778,107,0.608,108,0.778,109,0.689,110,1.395,111,0.778,112,0.689,113,0.778,114,0.689,115,0.778,116,0.689,117,0.778,118,0.689,119,0.778,120,1.132,121,0.689,122,0.778,123,0.689,124,0.778,125,0.778,126,0.689,127,0.778,128,0.689,129,0.689,130,0.778,131,0.778,132,0.778,133,0.689,134,0.778,135,0.648,136,0.778,137,0.689,138,1.298,139,0.814,140,1.297,141,0.732,142,0.778,143,0.013,144,0.013,153,1.002,155,0.59,164,1.358,165,2.414,172,0.548,176,0.689,182,0.59,186,2.355,191,1.758,195,2.504,198,1.701,211,2.76,214,1.535,215,0.885,218,0.992,254,0.859,274,1.373,282,2.497,286,0.436,288,0.732,362,1.635,367,0.94,375,1.998,378,2.586,413,1.535,418,2.831,429,1.476,433,1.81,451,1.998,452,2.446,464,1.998,498,2.275,534,2.586,547,1.897,555,2.81,565,2.868,573,1.535,594,2.104,597,3.465,598,3.465,611,2.258,618,2.52,629,3.733,647,3.061,649,3.521,652,3.061,669,2.061,682,2.381,688,3.465,699,3.262,701,1.998,762,3.061,764,2.148,774,4.084,783,4.485,801,2.52,812,2.781,814,3.465,866,2.381,868,1.928,897,2.319,951,1.594,1019,2.76,1088,3.262,1177,3.465,1178,2.104,1223,2.319,1224,2.319,1228,4.191,1249,2.52,1266,2.319,1302,1.732,1303,2.415,1344,2.148,1486,2.52,1508,3.963,1511,2.76,1619,2.76,1713,3.963,1875,3.061,1895,2.52,1897,3.465,1951,4.485,2200,3.465,2210,3.465,2389,2.759,2392,3.396,2399,2.104,2419,3.061,2424,2.76,2432,3.061,2462,2.148,2468,3.825,2473,2.76,2477,2.76,2524,2.76,2535,2.52,2536,2.76,2537,2.52,2539,2.76,2623,5.134,2631,3.465,2639,4.084,2656,4.485,2693,2.381,2694,3.465,2705,2.381,2706,2.381,2707,2.381,2708,2.381,2710,3.465,2711,3.465,2712,3.465,2714,3.465,2717,5.164,2718,5.845,2719,4.806,2720,3.465,2721,3.465,2722,5.278,2723,4.485,2724,4.077,2725,4.077,2726,4.806,2727,4.806,2728,4.806,2729,2.802,2730,2.802,2731,4.077,2732,2.802,2733,2.802,2734,2.802,2735,4.077,2736,2.802,2737,4.077,2738,2.802,2739,2.802,2740,3.465,2741,2.802,2742,2.802,2743,4.077,2744,2.802,2745,4.077,2746,2.802,2747,4.077,2748,4.077,2749,2.802,2750,4.077,2751,2.802,2752,2.802,2753,2.802,2754,2.381,2755,2.802,2756,2.802,2757,2.802,2758,2.802,2759,2.802,2760,2.802,2761,2.802,2762,2.802,2763,2.802,2764,2.802,2765,2.802,2766,4.077,2767,4.077,2768,4.077]],["title/injectables/TaskListManager.html",[177,0.469,2769,2.622]],["body/injectables/TaskListManager.html",[3,0.181,4,0.16,8,0.16,13,0.678,15,0.972,25,0.291,26,0.478,29,0.376,33,0.934,47,0.854,48,0.024,49,0.618,50,0.412,51,0.618,52,0.618,54,0.736,59,2.03,60,0.912,61,0.985,64,1.007,71,0.905,74,0.32,75,0.16,83,3.443,85,0.181,86,0.181,87,0.592,88,1.176,92,1.271,107,0.837,139,0.836,143,0.013,144,0.013,155,0.558,164,2.229,172,0.608,173,0.998,177,0.517,179,0.72,182,0.99,184,1.041,191,1.283,209,1.762,215,1.105,221,2.436,225,0.947,226,2.381,246,2.893,254,0.464,256,1.648,258,1.762,276,0.918,282,2.564,286,0.918,288,1.488,312,1.948,313,4.276,319,2.03,323,2.03,344,1.186,348,1.364,350,1.545,351,1.648,362,2.04,367,0.963,391,1.283,401,2.205,405,2.205,408,1.756,410,1.756,413,2.371,415,2.608,418,1.762,420,1.81,433,1.451,440,1.283,441,3,444,2.192,447,1.545,507,2.645,512,2.192,545,2.429,579,1.762,606,3.111,663,2.893,669,2.353,838,0.918,868,2.743,902,2.326,909,3.274,911,2.205,922,2.893,936,3.274,960,1.603,975,1.756,988,3.819,1127,2.205,1134,2.205,1302,1.603,1303,2.145,1305,3.111,1310,3.092,1314,2.893,1339,4.728,1344,1.367,1351,2.79,1353,3.239,1355,3.52,1362,3.274,1363,3.274,1444,1.948,1445,3.819,1558,4.323,1596,3.274,1619,3.443,1630,2.893,1895,3.519,1953,2.893,1966,1.948,1973,2.205,1994,2.205,1995,2.205,2248,3.143,2389,2.365,2392,3.301,2468,3.519,2535,2.381,2537,2.381,2542,2.608,2579,2.205,2583,2.205,2717,5.239,2723,4.323,2754,2.205,2769,3.819,2770,3.853,2771,4.596,2772,4.596,2773,4.596,2774,4.596,2775,4.596,2776,5.086,2777,5.086,2778,5.086,2779,3.853,2780,5.086,2781,3.853,2782,5.086,2783,5.086,2784,3.853,2785,3.853,2786,5.086,2787,5.086,2788,5.086,2789,3.853,2790,3.853,2791,5.086,2792,2.594,2793,3.853,2794,3.853,2795,3.853,2796,3.853,2797,4.596,2798,2.594,2799,3.853,2800,5.086,2801,2.594,2802,3.853,2803,5.086,2804,3.853,2805,3.853,2806,2.594,2807,2.594,2808,3.853,2809,2.594,2810,3.853,2811,2.594,2812,3.853,2813,2.594,2814,3.853,2815,3.274,2816,2.594,2817,3.853,2818,5.086,2819,3.853,2820,5.896,2821,5.086,2822,3.853,2823,3.853,2824,2.594,2825,3.853,2826,3.853,2827,3.853,2828,3.853,2829,3.853,2830,2.594,2831,5.435,2832,5.435,2833,5.435,2834,5.435,2835,3.853,2836,2.594,2837,3.853,2838,2.594,2839,2.594,2840,2.594,2841,2.594,2842,2.594,2843,2.594,2844,2.594,2845,2.594,2846,4.596,2847,2.594,2848,4.596,2849,2.594,2850,2.594,2851,2.594,2852,2.594,2853,2.594,2854,3.853,2855,3.853,2856,2.594,2857,5.086,2858,2.594,2859,2.594,2860,2.594,2861,2.594,2862,2.594,2863,2.594,2864,2.594,2865,3.853,2866,3.853,2867,3.853,2868,3.853,2869,3.853,2870,2.594,2871,2.594,2872,2.594,2873,2.594,2874,2.594]],["title/injectables/TaskService.html",[177,0.469,1303,1.315]],["body/injectables/TaskService.html",[3,0.168,4,0.148,8,0.148,13,0.629,25,0.129,26,0.452,28,3.893,29,0.349,33,0.909,38,0.46,47,0.95,48,0.024,49,0.688,50,0.407,51,0.71,52,0.706,54,0.696,60,0.349,61,0.402,67,2.581,71,0.972,74,0.306,75,0.148,85,0.306,86,0.168,87,0.644,88,0.734,92,1.785,104,0.651,139,0.832,143,0.012,144,0.012,153,1.08,155,0.527,164,1.753,172,0.609,173,0.523,177,0.489,179,0.668,182,0.985,184,0.966,191,1.972,198,2.371,209,3.182,214,1.845,215,1.202,216,2.097,218,1.734,222,1.683,225,1.205,247,2.401,254,0.876,256,1.03,258,2.407,270,1.268,274,1.18,275,1.268,276,0.852,277,0.742,278,1.919,282,2.627,285,1.919,286,1.012,288,1.447,296,1.919,340,2.773,346,1.268,358,2.251,360,2.251,365,1.559,367,0.567,382,1.763,391,1.213,413,2.654,418,1.101,421,2.5,422,1.488,423,1.488,424,1.488,425,1.488,440,2.019,446,1.074,447,1.461,462,2.902,464,2.401,497,2.713,500,1.488,502,3.353,503,3.554,507,0.966,512,2.787,513,2.251,516,2.251,517,2.251,519,2.251,520,2.581,522,1.785,523,2.581,525,3.253,528,2.251,529,2.251,530,1.488,534,2.902,537,2.251,539,2.072,544,1.559,545,2.221,555,1.559,573,1.845,669,0.802,693,1.268,792,1.919,838,0.852,868,2.432,902,2.241,907,1.785,934,2.251,951,2.072,1164,3.095,1169,2.046,1303,1.372,1310,3.15,1337,3.317,1364,3.317,1421,2.581,1487,2.251,1600,2.466,1611,1.18,2037,2.466,2196,1.488,2209,3.317,2248,2.251,2265,3.317,2348,2.466,2389,2.858,2392,2.971,2398,2.735,2427,2.735,2462,1.268,2465,1.63,2466,1.808,2467,3.679,2468,3.933,2469,1.808,2470,1.808,2471,1.808,2472,1.808,2473,3.317,2474,1.808,2475,2.735,2476,2.466,2477,1.63,2478,3.3,2479,1.808,2480,1.808,2481,4.318,2482,3.3,2483,3.679,2484,3.3,2485,4.64,2486,2.735,2487,1.808,2488,2.735,2489,1.808,2490,3.679,2491,3.679,2492,2.735,2493,1.808,2494,2.735,2495,1.808,2496,1.808,2497,2.735,2498,1.808,2499,1.808,2500,1.808,2501,3.679,2502,2.735,2503,1.808,2504,1.808,2505,1.808,2506,2.735,2507,2.735,2508,1.808,2509,1.808,2510,1.808,2511,2.735,2512,1.808,2513,1.808,2514,4.447,2515,3.679,2516,2.735,2517,2.735,2518,2.735,2519,1.808,2520,2.735,2521,1.808,2522,2.735,2523,1.808,2524,2.466,2525,2.735,2526,2.735,2527,2.735,2528,1.808,2529,1.808,2530,1.808,2531,1.808,2532,1.808,2533,1.808,2534,1.808,2535,2.251,2536,3.317,2537,2.251,2538,3.679,2539,2.466,2540,1.808,2541,1.808,2542,2.466,2543,2.735,2544,2.735,2545,1.808,2546,1.808,2547,1.808,2548,1.808,2549,1.808,2550,1.808,2551,1.808,2552,1.808,2553,2.735,2554,3.3,2555,3.679,2556,3.679,2557,2.735,2558,3.679,2559,2.735,2560,1.808,2561,1.808,2563,3.095,2720,3.095,2721,3.095,2875,3.643,2876,3.643,2877,3.643,2878,3.643,2879,3.643,2880,3.643,2881,3.643,2882,3.643,2883,2.407,2884,2.407,2885,2.407,2886,2.407,2887,2.407,2888,2.407,2889,2.407,2890,2.407,2891,2.407,2892,2.407,2893,2.407,2894,2.407,2895,2.407,2896,2.407,2897,2.407,2898,2.407,2899,2.407,2900,2.407]],["title/interfaces/UserData.html",[277,0.712,279,2.364]],["body/interfaces/UserData.html",[3,0.232,4,0.205,8,0.205,13,0.871,15,1.184,25,0.179,26,0.572,29,0.482,32,2.403,35,1.755,38,1.09,44,1.255,45,1.426,46,2.256,48,0.024,49,0.484,50,0.351,51,0.598,52,0.349,54,0.636,59,1.755,60,0.482,64,0.871,69,1.222,71,0.936,74,0.418,75,0.205,77,0.819,85,0.321,86,0.232,87,0.629,88,1,143,0.015,144,0.015,150,2.256,153,1.759,154,3.408,158,1.535,161,1.426,162,3.614,163,2.429,164,1.9,165,1.524,170,2.502,171,1.755,172,0.562,173,0.724,174,1.755,175,1.255,176,1.523,177,0.619,179,0.925,182,1.028,183,2.256,185,2.502,186,1.633,187,2.256,188,2.502,189,4.055,190,2.832,191,1.109,192,3.579,193,2.502,194,1.205,195,1.426,196,3.97,197,2.832,198,2.193,199,2.832,200,2.502,201,2.832,203,2.256,205,2.832,206,2.832,208,5.398,209,3.043,211,4.195,212,2.623,214,1.255,215,1.239,216,2.651,217,4.652,218,2.432,219,4.062,221,1.426,222,1.619,224,2.832,225,1.473,226,3.267,227,2.832,229,2.832,230,2.832,231,2.832,232,2.832,233,2.832,234,3.918,235,2.059,236,2.502,238,1.255,239,3.918,240,2.832,241,4.652,243,4.493,244,2.797,246,2.502,247,1.633,249,1.426,250,2.832,251,5.712,253,2.832,254,1.02,255,1.632,256,1.426,257,2.785,258,2.418,259,2.832,260,2.832,261,2.256,263,2.832,264,2.832,265,2.832,266,2.832,267,2.832,268,2.832,269,2.832,270,1.755,271,2.832,272,2.256,273,2.832,274,1.633,275,1.755,276,1.179,277,1.078,278,2.429,279,4.45,280,5.266,281,5.266,282,2.256,283,2.832,284,2.832,285,3.346,286,1.046,287,3.918,288,1.757,289,3.918,290,3.918,291,3.918,292,4.849,293,3.918,294,3.918,295,3.008,296,3.156,297,4.493,298,3.918,299,3.918,300,3.918,301,3.918,302,3.918,303,2.832,304,2.832,305,2.832,306,4.849,307,2.832,308,2.832,309,2.832,310,2.832,311,2.832,312,2.502,313,4.862,314,3.918,315,2.832,316,2.832,317,2.832,318,3.121,319,2.429,320,2.832,321,2.832,322,2.832,323,1.755,324,3.121,325,2.832,326,3.918,327,2.502,328,2.832,329,2.785,330,3.918,331,2.832,332,2.832,333,2.059,334,1.895,335,2.832,336,2.502,337,2.502,338,2.256,339,2.832,341,1.633]],["title/coverage.html",[2901,4.047]],["body/coverage.html",[0,0.387,1,1.102,8,0.276,9,3.809,18,1.102,19,1.102,31,2.362,48,0.024,50,0.276,103,0.856,107,0.973,109,1.102,110,0.914,112,1.102,114,1.102,116,1.102,118,1.102,121,1.102,123,1.102,126,1.102,128,1.102,129,1.102,133,1.102,135,1.036,137,1.102,138,1.102,139,0.513,143,0.018,144,0.018,145,3.035,146,3.366,148,3.809,158,1.493,177,0.942,185,4.21,254,0.801,277,1.392,279,3.035,340,2.362,342,3.83,343,4.21,344,3.158,347,3.035,411,4.142,416,3.035,441,2.362,446,1.947,452,1.688,592,4.142,593,3.366,594,4.21,669,1.493,745,2.572,771,3.366,772,3.809,837,3.366,879,3.366,880,3.809,1071,2.77,1113,3.366,1114,3.809,1201,3.809,1293,3.366,1294,3.809,1295,3.809,1303,1.688,1379,3.035,1380,4.21,1471,3.961,1472,3.809,1479,3.809,1529,3.809,1655,3.809,1656,3.809,1657,3.809,1788,3.809,1841,3.366,1885,3.809,1886,3.809,1908,3.809,1909,3.809,1945,3.366,1946,3.809,2002,3.809,2003,3.809,2004,3.809,2230,3.809,2235,3.809,2389,2.249,2390,4.21,2391,3.035,2465,4.142,2620,3.809,2717,4.21,2718,3.809,2769,3.366,2815,3.809,2901,3.809,2902,4.483,2903,4.483,2904,4.483,2905,4.483,2906,4.483,2907,4.483,2908,5.607,2909,4.483,2910,5.607,2911,4.483,2912,4.483,2913,4.483,2914,4.483,2915,4.483,2916,4.483,2917,3.809,2918,4.483,2919,3.809,2920,5.607,2921,4.483,2922,4.483,2923,4.483,2924,4.483,2925,4.483,2926,6.41,2927,4.483,2928,6.118,2929,4.483,2930,4.483,2931,4.483,2932,4.483,2933,4.483,2934,4.483,2935,4.483,2936,4.483,2937,4.483,2938,4.483,2939,5.607,2940,6.118,2941,5.607,2942,4.483,2943,4.483,2944,5.607,2945,4.483,2946,4.483,2947,4.483,2948,4.483,2949,4.483,2950,4.483,2951,4.483,2952,4.483,2953,4.483,2954,4.483,2955,4.483,2956,6.118,2957,4.483,2958,4.483,2959,4.483,2960,4.483]],["title/dependencies.html",[2961,2.48,2962,3.569]],["body/dependencies.html",[48,0.024,75,0.338,77,1.349,80,1.827,143,0.021,144,0.021,276,1.943,429,2.891,698,2.51,2067,4.287,2212,4.664,2962,4.664,2963,6.332,2964,5.488,2965,7.157,2966,5.488,2967,5.488,2968,6.332,2969,5.488,2970,5.488,2971,5.488,2972,5.488,2973,5.488]],["title/miscellaneous/functions.html",[2207,3.153,2974,1.976]],["body/miscellaneous/functions.html",[25,0.295,47,0.798,48,0.023,49,0.578,50,0.339,51,0.578,52,0.578,143,0.021,144,0.021,161,2.357,172,0.478,175,2.075,218,1.95,222,1.658,323,2.902,411,3.729,427,4.296,428,3.729,430,3.729,431,3.729,432,2.715,433,2.075,434,3.729,435,3.404,436,4.136,437,3.61,438,4.136,439,3.404,440,1.834,442,4.136,837,4.765,2207,4.136,2974,3.729,2975,5.509]],["title/index.html",[25,0.156,2976,2.919,2977,2.919]],["body/index.html",[0,0.345,2,1.238,4,0.31,48,0.02,55,3.408,60,0.871,72,2.302,73,3.719,141,1.316,143,0.02,144,0.02,165,3.051,171,2.652,235,3.719,254,0.9,319,2.652,351,2.154,372,3.408,417,2.863,435,3.111,497,2.466,523,2.652,544,2.154,639,3.111,659,5.471,669,1.676,764,2.652,820,2.949,1185,3.408,1313,4.278,1395,2.863,1524,3.979,1534,3.78,1545,3.408,1553,4.519,1631,4.278,1683,3.78,1698,3.78,1763,4.278,1823,3.78,2029,4.278,2051,4.278,2067,3.408,2079,3.78,2196,3.111,2740,4.278,2978,6.819,2979,5.034,2980,6.438,2981,5.034,2982,6.819,2983,6.921,2984,6.921,2985,5.034,2986,6.018,2987,5.034,2988,5.034,2989,5.034,2990,6.018,2991,5.034,2992,5.034,2993,5.034,2994,5.034,2995,5.034,2996,5.034,2997,6.438,2998,5.034,2999,5.034,3000,5.034,3001,5.034,3002,5.034,3003,5.034,3004,5.034,3005,5.034,3006,6.018,3007,6.438,3008,5.034,3009,5.034,3010,5.034,3011,5.034,3012,6.438,3013,5.034,3014,6.921,3015,5.034,3016,6.018,3017,5.034,3018,5.034,3019,5.034,3020,5.034,3021,5.034,3022,5.034,3023,5.034]],["title/modules.html",[3024,4.047]],["body/modules.html",[48,0.021,143,0.021,144,0.021,3024,4.858]],["title/overview.html",[1545,3.224]],["body/overview.html",[2,1.394,48,0.021,143,0.021,144,0.021,145,3.839,184,2.275,341,2.779,712,1.575,748,4.258,1545,3.839,2183,4.819,3025,5.671]],["title/properties.html",[26,0.521,2961,2.48]],["body/properties.html",[26,0.708,48,0.022,143,0.021,144,0.021,2079,4.279,3026,5.699]],["title/miscellaneous/variables.html",[1970,3.153,2974,1.976]],["body/miscellaneous/variables.html",[15,1.022,25,0.287,48,0.024,50,0.329,60,0.775,61,0.894,72,3.021,143,0.02,144,0.02,745,2.015,1050,4.018,1099,4.547,1371,4.547,1427,3.856,1544,4.018,1970,4.018,2049,4.547,2917,4.547,2919,5.302,2974,3.622,3027,5.351,3028,5.351,3029,5.351,3030,5.351,3031,5.351,3032,5.351,3033,5.351,3034,5.351,3035,5.351,3036,5.351,3037,5.351,3038,5.351,3039,5.351,3040,5.351,3041,5.351,3042,5.351,3043,5.351,3044,5.351,3045,5.351,3046,5.351,3047,5.351,3048,5.351,3049,5.351,3050,5.351,3051,5.351,3052,5.351,3053,5.351,3054,5.351,3055,5.351,3056,5.351,3057,5.351,3058,5.351]],["title/routes.html",[68,3.224]],["body/routes.html",[48,0.021,68,3.87,143,0.021,144,0.021]]],"invertedIndex":[["",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":446,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":3026,"title":{},"body":{"properties.html":{}}}],["0.05",{"_index":2320,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.15.0",{"_index":2973,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":2369,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.2s",{"_index":1023,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["0.3",{"_index":1104,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.3s",{"_index":1105,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.4",{"_index":1108,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0.5rem",{"_index":2333,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.5s",{"_index":1392,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["0.6",{"_index":2353,"title":{},"body":{"components/SignupComponent.html":{}}}],["0.7s",{"_index":1905,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["0.8s",{"_index":2380,"title":{},"body":{"components/SignupComponent.html":{}}}],["0/1",{"_index":2920,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2959,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2910,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":1045,"title":{},"body":{"components/ContactListComponent.html":{}}}],["0038ff",{"_index":361,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["007cee",{"_index":1081,"title":{},"body":{"components/ContactListComponent.html":{}}}],["00bcd4",{"_index":478,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0118acff",{"_index":490,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0288d1",{"_index":491,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["049484ff",{"_index":493,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["084c6bff",{"_index":495,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["0px",{"_index":2319,"title":{},"body":{"components/SignupComponent.html":{}}}],["1",{"_index":712,"title":{"interfaces/Subtask-1.html":{}},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":2549,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["1.1",{"_index":2014,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.2",{"_index":2024,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["1.5vw",{"_index":1046,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1/1",{"_index":2950,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2946,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":748,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"overview.html":{}}}],["10/10",{"_index":2955,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":745,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":1099,"title":{},"body":{"components/ContactListComponent.html":{},"miscellaneous/variables.html":{}}}],["1000px",{"_index":1083,"title":{},"body":{"components/ContactListComponent.html":{}}}],["100px",{"_index":987,"title":{},"body":{"components/ContactListComponent.html":{}}}],["10px",{"_index":1061,"title":{},"body":{"components/ContactListComponent.html":{}}}],["12",{"_index":1428,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["12/13",{"_index":2941,"title":{},"body":{"coverage.html":{}}}],["12/15",{"_index":2909,"title":{},"body":{"coverage.html":{}}}],["120px",{"_index":2368,"title":{},"body":{"components/SignupComponent.html":{}}}],["12px",{"_index":1075,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["12vw",{"_index":1011,"title":{},"body":{"components/ContactListComponent.html":{}}}],["13/14",{"_index":2943,"title":{},"body":{"coverage.html":{}}}],["13/16",{"_index":2912,"title":{},"body":{"coverage.html":{}}}],["13/26",{"_index":2934,"title":{},"body":{"coverage.html":{}}}],["13px",{"_index":2373,"title":{},"body":{"components/SignupComponent.html":{}}}],["14/15",{"_index":2936,"title":{},"body":{"coverage.html":{}}}],["14/21",{"_index":2927,"title":{},"body":{"coverage.html":{}}}],["1440px",{"_index":2309,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":2354,"title":{},"body":{"components/SignupComponent.html":{}}}],["15/26",{"_index":2931,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":1055,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["16/17",{"_index":2939,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":1022,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["17",{"_index":1786,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["17/20",{"_index":2938,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":1047,"title":{},"body":{"components/ContactListComponent.html":{}}}],["18",{"_index":1429,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["18/19",{"_index":2929,"title":{},"body":{"coverage.html":{}}}],["18px",{"_index":2351,"title":{},"body":{"components/SignupComponent.html":{}}}],["19",{"_index":3025,"title":{},"body":{"overview.html":{}}}],["19.2.0",{"_index":2965,"title":{},"body":{"dependencies.html":{}}}],["19.2.12",{"_index":2979,"title":{},"body":{"index.html":{}}}],["19.2.14",{"_index":2963,"title":{},"body":{"dependencies.html":{}}}],["19/21",{"_index":2953,"title":{},"body":{"coverage.html":{}}}],["190px",{"_index":1084,"title":{},"body":{"components/ContactListComponent.html":{}}}],["1976d2",{"_index":486,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["1:703986298510:web:8cb9707daf583f2153a3df",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1fd7c1",{"_index":359,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["1px",{"_index":1051,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["1rem",{"_index":2328,"title":{},"body":{"components/SignupComponent.html":{}}}],["1vw",{"_index":1054,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2",{"_index":1602,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["2.1",{"_index":2035,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.2",{"_index":2044,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["2.3.0",{"_index":2971,"title":{},"body":{"dependencies.html":{}}}],["2.5vh",{"_index":2327,"title":{},"body":{"components/SignupComponent.html":{}}}],["2.5vw",{"_index":1021,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2/3",{"_index":2956,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2945,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":1442,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["200ms",{"_index":715,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["2025",{"_index":1787,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["20px",{"_index":1044,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2196f3",{"_index":474,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["21px",{"_index":1096,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22.5px",{"_index":1013,"title":{},"body":{"components/ContactListComponent.html":{}}}],["22391",{"_index":1668,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["23/24",{"_index":2948,"title":{},"body":{"coverage.html":{}}}],["23/29",{"_index":2914,"title":{},"body":{"coverage.html":{}}}],["24/25",{"_index":2933,"title":{},"body":{"coverage.html":{}}}],["24px",{"_index":1008,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["25/35",{"_index":2923,"title":{},"body":{"coverage.html":{}}}],["25/42",{"_index":2907,"title":{},"body":{"coverage.html":{}}}],["250ms",{"_index":709,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["26",{"_index":2957,"title":{},"body":{"coverage.html":{}}}],["26px",{"_index":2343,"title":{},"body":{"components/SignupComponent.html":{}}}],["28px",{"_index":2345,"title":{},"body":{"components/SignupComponent.html":{}}}],["29abe2",{"_index":1106,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2a3647",{"_index":1064,"title":{},"body":{"components/ContactListComponent.html":{}}}],["2px",{"_index":1066,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["2vw",{"_index":1035,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["3",{"_index":1254,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["3.1",{"_index":2070,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.1",{"_index":2072,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.2",{"_index":2078,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3.1.3",{"_index":2089,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["3/3",{"_index":2944,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2916,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1371,"title":{},"body":{"injectables/DragDropManager.html":{},"miscellaneous/variables.html":{}}}],["3000",{"_index":1288,"title":{},"body":{"components/ContactsComponent.html":{}}}],["30px",{"_index":1095,"title":{},"body":{"components/ContactListComponent.html":{}}}],["32px",{"_index":1073,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["33px",{"_index":2344,"title":{},"body":{"components/SignupComponent.html":{}}}],["352px",{"_index":1009,"title":{},"body":{"components/ContactListComponent.html":{}}}],["360",{"_index":2611,"title":{},"body":{"components/SummaryComponent.html":{}}}],["36px",{"_index":1048,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["388e3c",{"_index":485,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3f51b5",{"_index":482,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["3px",{"_index":2339,"title":{},"body":{"components/SignupComponent.html":{}}}],["3vw",{"_index":1007,"title":{},"body":{"components/ContactListComponent.html":{}}}],["4",{"_index":1622,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["4.1",{"_index":2133,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.2",{"_index":2143,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.3",{"_index":2151,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4",{"_index":2159,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.1",{"_index":2160,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4.4.2",{"_index":2166,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["4/4",{"_index":2954,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":2942,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1042,"title":{},"body":{"components/ContactListComponent.html":{}}}],["406px",{"_index":2314,"title":{},"body":{"components/SignupComponent.html":{}}}],["440px",{"_index":2323,"title":{},"body":{"components/SignupComponent.html":{}}}],["44px",{"_index":2366,"title":{},"body":{"components/SignupComponent.html":{}}}],["456px",{"_index":984,"title":{},"body":{"components/ContactListComponent.html":{}}}],["45px",{"_index":1074,"title":{},"body":{"components/ContactListComponent.html":{}}}],["46px",{"_index":1100,"title":{},"body":{"components/ContactListComponent.html":{}}}],["48px",{"_index":2315,"title":{},"body":{"components/SignupComponent.html":{}}}],["4caf50",{"_index":476,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["4px",{"_index":1072,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["4vw",{"_index":1025,"title":{},"body":{"components/ContactListComponent.html":{}}}],["5",{"_index":1427,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"miscellaneous/variables.html":{}}}],["5/19",{"_index":2958,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":2949,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":2925,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1071,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["500",{"_index":1443,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["5191daff",{"_index":480,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["536px",{"_index":2332,"title":{},"body":{"components/SignupComponent.html":{}}}],["560px",{"_index":2324,"title":{},"body":{"components/SignupComponent.html":{}}}],["56px",{"_index":1012,"title":{},"body":{"components/ContactListComponent.html":{}}}],["57",{"_index":2930,"title":{},"body":{"coverage.html":{}}}],["59",{"_index":2906,"title":{},"body":{"coverage.html":{}}}],["5c0582ff",{"_index":487,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["5vw",{"_index":2322,"title":{},"body":{"components/SignupComponent.html":{}}}],["6",{"_index":1667,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["6/6",{"_index":2951,"title":{},"body":{"coverage.html":{}}}],["6125f",{"_index":3035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebaseapp.com",{"_index":3043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6125f.firebasestorage.app",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["64px",{"_index":2313,"title":{},"body":{"components/SignupComponent.html":{}}}],["66",{"_index":2926,"title":{},"body":{"coverage.html":{}}}],["666",{"_index":2370,"title":{},"body":{"components/SignupComponent.html":{}}}],["6bb604ff",{"_index":496,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["6px",{"_index":1107,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["7",{"_index":2183,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"overview.html":{}}}],["7.8.0",{"_index":2969,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":2342,"title":{},"body":{"components/SignupComponent.html":{}}}],["703986298510",{"_index":3045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["71",{"_index":2922,"title":{},"body":{"coverage.html":{}}}],["72px",{"_index":2312,"title":{},"body":{"components/SignupComponent.html":{}}}],["75",{"_index":2915,"title":{},"body":{"coverage.html":{}}}],["768px",{"_index":2311,"title":{},"body":{"components/SignupComponent.html":{}}}],["780px",{"_index":1086,"title":{},"body":{"components/ContactListComponent.html":{}}}],["79",{"_index":2913,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1877,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["80",{"_index":2908,"title":{},"body":{"coverage.html":{}}}],["80px",{"_index":997,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["81",{"_index":2911,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":2924,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2937,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":1049,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["9",{"_index":2220,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["90",{"_index":2952,"title":{},"body":{"coverage.html":{}}}],["90vw",{"_index":2330,"title":{},"body":{"components/SignupComponent.html":{}}}],["92",{"_index":2940,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":2935,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":2928,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":2947,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":2932,"title":{},"body":{"coverage.html":{}}}],["96px",{"_index":2371,"title":{},"body":{"components/SignupComponent.html":{}}}],["9c27b0",{"_index":473,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["9e9e9e",{"_index":756,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["9px",{"_index":994,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.dateobj!.gettime",{"_index":1461,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["a.key.localecompare(b.key",{"_index":977,"title":{},"body":{"components/ContactListComponent.html":{}}}],["a.name.localecompare(b.name",{"_index":976,"title":{},"body":{"components/ContactListComponent.html":{}}}],["absolute",{"_index":1069,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["abstractcontrol",{"_index":427,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["abuses",{"_index":2229,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accent",{"_index":2340,"title":{},"body":{"components/SignupComponent.html":{}}}],["accept",{"_index":2304,"title":{},"body":{"components/SignupComponent.html":{}}}],["acceptable",{"_index":2174,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["acceptance",{"_index":1677,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["access",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["accessing",{"_index":1679,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accessors",{"_index":624,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["accidental",{"_index":1318,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["accordance",{"_index":1719,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["accordingly",{"_index":647,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["account",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["accounts",{"_index":2197,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["accuracy",{"_index":1590,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["acknowledge",{"_index":1681,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["acquisition",{"_index":2137,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["act",{"_index":2012,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["action",{"_index":1317,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["actions",{"_index":1335,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["activated",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{}}}],["active",{"_index":828,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["activities",{"_index":1723,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["activity",{"_index":2094,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["actual_component",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["add",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["add/edit",{"_index":1976,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["addcontact",{"_index":1163,"title":{},"body":{"injectables/ContactService.html":{}}}],["addcontact(newcontact",{"_index":524,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc",{"_index":423,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(contactsref",{"_index":526,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["adddoc(subtasksref",{"_index":2510,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["adddoc(tasksref",{"_index":2505,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["added",{"_index":522,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addedcontact",{"_index":785,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["adding",{"_index":1611,"title":{},"body":{"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["additional",{"_index":1631,"title":{},"body":{"components/HelpComponent.html":{},"index.html":{}}}],["address",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["addresses",{"_index":2192,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adds",{"_index":520,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addsubtask",{"_index":2427,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskService.html":{}}}],["addsubtask(colid",{"_index":2507,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtask",{"_index":2875,"title":{},"body":{"injectables/TaskService.html":{}}}],["addtask(newtask",{"_index":2502,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["addtaskcomponent",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["adequate",{"_index":2149,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["adjust",{"_index":1219,"title":{},"body":{"components/ContactsComponent.html":{}}}],["adjusts",{"_index":645,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["advertising",{"_index":2224,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["advised",{"_index":1760,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["affiliates",{"_index":1769,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["again",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["against",{"_index":1775,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["agents",{"_index":1773,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["agree",{"_index":1682,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["aizasyawyou260exmo3445mltsqcjzrheg6aq9a",{"_index":3041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["akademie",{"_index":1556,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["align",{"_index":1015,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["allcontacts.find((contact",{"_index":732,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["allowed",{"_index":541,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["allows",{"_index":1915,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["along",{"_index":2646,"title":{},"body":{"components/TaskComponent.html":{}}}],["alphabetical",{"_index":938,"title":{},"body":{"components/ContactListComponent.html":{}}}],["alphabetically",{"_index":906,"title":{},"body":{"components/ContactListComponent.html":{}}}],["already",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"interfaces/UserData.html":{}}}],["amendments",{"_index":1687,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["amp",{"_index":1697,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["analysis",{"_index":2135,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["analytics",{"_index":2130,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["and/or",{"_index":1783,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["angular",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["angular's",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/ContactFormComponent.html":{}}}],["angular/animations",{"_index":698,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SummaryComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":2964,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/drag",{"_index":1343,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["angular/common",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":2966,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":2967,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/auth",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["angular/fire/firestore",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["angular/forms",{"_index":429,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":2968,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["animate",{"_index":697,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["animate('1.5s",{"_index":1391,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["animate('250ms",{"_index":1273,"title":{},"body":{"components/ContactsComponent.html":{}}}],["animate('2s",{"_index":1844,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["animation",{"_index":1220,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["animationdirection",{"_index":1204,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animationevent",{"_index":1238,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["animations",{"_index":667,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["animationstate",{"_index":599,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["anonymized",{"_index":2201,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["another",{"_index":1626,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["apikey",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["app.component.html",{"_index":22,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":24,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":2919,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appear",{"_index":1901,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["appearance",{"_index":2358,"title":{},"body":{"components/SignupComponent.html":{}}}],["appid",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applicable",{"_index":821,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["application",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"index.html":{}}}],["applicationconfig",{"_index":3028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appropriate",{"_index":1617,"title":{},"body":{"components/HelpComponent.html":{}}}],["arguments",{"_index":631,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["arising",{"_index":1762,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["array",{"_index":507,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["array.isarray(subtasklist",{"_index":2696,"title":{},"body":{"components/TaskComponent.html":{}}}],["arrays",{"_index":911,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["artifacts",{"_index":3000,"title":{},"body":{"index.html":{}}}],["ascending",{"_index":2820,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["aside",{"_index":1710,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ask",{"_index":2073,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["aspect",{"_index":1699,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["aspects",{"_index":1591,"title":{},"body":{"components/HelpComponent.html":{}}}],["asset",{"_index":2163,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["assign",{"_index":1158,"title":{},"body":{"injectables/ContactManager.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["assigned",{"_index":418,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["assignedto",{"_index":2478,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["assignees",{"_index":1620,"title":{},"body":{"components/HelpComponent.html":{}}}],["associated",{"_index":1713,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["assume",{"_index":2180,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["async",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["attaches",{"_index":1225,"title":{},"body":{"components/ContactsComponent.html":{}}}],["attempts",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth.service",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["auth/email",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/invalid",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/network",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/too",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/user",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/weak",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["auth/wrong",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["authdomain",{"_index":3042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":2107,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["authenticated",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["authentication",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["authguard",{"_index":146,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["authservice",{"_index":158,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["auto",{"_index":991,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["automatic",{"_index":1325,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["automatically",{"_index":417,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["availability",{"_index":1588,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["available",{"_index":372,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/NavigationHistoryService.html":{},"index.html":{}}}],["avatar",{"_index":468,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["avatarcolors",{"_index":472,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["avoid",{"_index":543,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["await",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["awaitfeedback",{"_index":2771,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["awaitfeedbacklist",{"_index":1352,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["awaiting",{"_index":2619,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["awaitingfeedbackcount",{"_index":1403,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b",{"_index":975,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["b.dateobj!.gettime",{"_index":1462,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["b3c511ff",{"_index":483,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["back",{"_index":1227,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["backend",{"_index":2210,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["background",{"_index":998,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["backgroundvisible",{"_index":1205,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["backtolist",{"_index":619,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["based",{"_index":579,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["beacons",{"_index":2091,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["before",{"_index":1836,"title":{},"body":{"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["behalf",{"_index":2063,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["behavior",{"_index":1951,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskDetailsComponent.html":{}}}],["behaviorsubject",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["behaviorsubject(false",{"_index":459,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["behaviorsubject(null",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["behind",{"_index":1264,"title":{},"body":{"components/ContactsComponent.html":{}}}],["bei",{"_index":2863,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["being",{"_index":464,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["belonging",{"_index":2466,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["benefit",{"_index":1546,"title":{},"body":{"components/HelpComponent.html":{}}}],["best",{"_index":1584,"title":{},"body":{"components/HelpComponent.html":{}}}],["better",{"_index":759,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{}}}],["between",{"_index":1259,"title":{},"body":{"components/ContactsComponent.html":{},"components/TaskComponent.html":{}}}],["billboard",{"_index":1560,"title":{},"body":{"components/HelpComponent.html":{}}}],["block",{"_index":1092,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["board",{"_index":1595,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{}}}],["board'},{'name",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["boardcomponent",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["boolean",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["bootcamp",{"_index":1554,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["border",{"_index":1050,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["both",{"_index":2060,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["bottom",{"_index":996,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["bound",{"_index":2667,"title":{},"body":{"components/TaskComponent.html":{}}}],["box",{"_index":1101,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["breach",{"_index":1784,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["break",{"_index":2857,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["brightness(0",{"_index":1111,"title":{},"body":{"components/ContactListComponent.html":{}}}],["browser",{"_index":2067,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"dependencies.html":{},"index.html":{}}}],["browsing",{"_index":2054,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["btn",{"_index":725,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["build",{"_index":2997,"title":{},"body":{"index.html":{}}}],["builder",{"_index":791,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["buildthis",{"_index":2998,"title":{},"body":{"index.html":{}}}],["built",{"_index":1548,"title":{},"body":{"components/HelpComponent.html":{}}}],["business",{"_index":1580,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["button",{"_index":1003,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["c.email",{"_index":949,"title":{},"body":{"components/ContactListComponent.html":{}}}],["c.id",{"_index":1154,"title":{},"body":{"injectables/ContactManager.html":{}}}],["c.value",{"_index":385,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["c2185b",{"_index":492,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c303aaff",{"_index":489,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c44314ff",{"_index":479,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["c90d0dff",{"_index":488,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calc(1.8vw",{"_index":2318,"title":{},"body":{"components/SignupComponent.html":{}}}],["calc(100",{"_index":1005,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calc(100dvh",{"_index":986,"title":{},"body":{"components/ContactListComponent.html":{}}}],["calculate",{"_index":582,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["calculates",{"_index":2597,"title":{},"body":{"components/SummaryComponent.html":{},"components/TaskComponent.html":{}}}],["callback",{"_index":1312,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["called",{"_index":661,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/TaskComponent.html":{}}}],["calling",{"_index":1502,"title":{},"body":{"components/HeaderComponent.html":{}}}],["campaigns",{"_index":2132,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["canactivate",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cancel",{"_index":802,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["cancels",{"_index":2425,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["cancelsubtask",{"_index":2426,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["cancelsubtaskedit",{"_index":2455,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["capitalize",{"_index":2558,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalize(text",{"_index":2559,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalized",{"_index":2037,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["capitalizes",{"_index":2557,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["card",{"_index":1618,"title":{},"body":{"components/HelpComponent.html":{}}}],["cards",{"_index":1612,"title":{},"body":{"components/HelpComponent.html":{}}}],["case",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["catch",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["catch(error",{"_index":2763,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["categories",{"_index":357,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category",{"_index":340,"title":{"interfaces/Category.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["category.color",{"_index":389,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.label",{"_index":386,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["category.value",{"_index":381,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["categorymanager",{"_index":347,"title":{"injectables/CategoryManager.html":{}},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"coverage.html":{}}}],["caution",{"_index":1637,"title":{},"body":{"components/HelpComponent.html":{}}}],["ccc",{"_index":388,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["cdk",{"_index":1336,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdk_drag_config",{"_index":3051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cdkdragdrop",{"_index":1332,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cdkdragmove",{"_index":1323,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["cellphone",{"_index":2056,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["center",{"_index":1017,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["certain",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["change",{"_index":1309,"title":{},"body":{"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/TaskComponent.html":{}}}],["changed",{"_index":2668,"title":{},"body":{"components/TaskComponent.html":{}}}],["changes",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["changes['task",{"_index":2691,"title":{},"body":{"components/TaskComponent.html":{}}}],["changes['task'].firstchange",{"_index":2692,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus",{"_index":2624,"title":{},"body":{"components/TaskComponent.html":{}}}],["changestatus(status",{"_index":2654,"title":{},"body":{"components/TaskComponent.html":{}}}],["changetaskstatus",{"_index":1298,"title":{},"body":{"injectables/DragDropManager.html":{},"components/TaskComponent.html":{}}}],["changetaskstatus(taskid",{"_index":1304,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["character",{"_index":908,"title":{},"body":{"components/ContactListComponent.html":{}}}],["characters",{"_index":1878,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["check",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["checkbox",{"_index":2355,"title":{},"body":{"components/SignupComponent.html":{}}}],["checked.png",{"_index":2363,"title":{},"body":{"components/SignupComponent.html":{}}}],["checkiftouchdevice",{"_index":1798,"title":{},"body":{"components/LoginComponent.html":{}}}],["checks",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"interfaces/UserData.html":{}}}],["choices",{"_index":2113,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["choose",{"_index":3020,"title":{},"body":{"index.html":{}}}],["city",{"_index":2075,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["claim",{"_index":1776,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["clamp(12px",{"_index":1006,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["clamp(14px",{"_index":1043,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(20px",{"_index":1024,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(24px",{"_index":2326,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(32px",{"_index":2317,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(440px",{"_index":2321,"title":{},"body":{"components/SignupComponent.html":{}}}],["clamp(48px",{"_index":1010,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(4px",{"_index":1053,"title":{},"body":{"components/ContactListComponent.html":{}}}],["clamp(8px",{"_index":1034,"title":{},"body":{"components/ContactListComponent.html":{}}}],["class",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["clean",{"_index":2525,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["cleans",{"_index":809,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clear",{"_index":835,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["clearall",{"_index":393,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["cleareditingtask",{"_index":2556,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["clearinputs",{"_index":781,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["clears",{"_index":391,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["clearselection",{"_index":560,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["cli",{"_index":2978,"title":{},"body":{"index.html":{}}}],["click",{"_index":640,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{}}}],["clicking",{"_index":635,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HelpComponent.html":{}}}],["clicks",{"_index":1491,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["close",{"_index":1249,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closecontactdetails",{"_index":607,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["closed",{"_index":801,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closedetailsoverlay",{"_index":1956,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedetailsoverlay(event",{"_index":1967,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["closedotsmenu",{"_index":2634,"title":{},"body":{"components/TaskComponent.html":{}}}],["closeoverlay",{"_index":786,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closes",{"_index":378,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["closetaskdetails",{"_index":2726,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["closing",{"_index":806,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["closure",{"_index":1990,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["cloud",{"_index":2206,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["code",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["codes",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["colid",{"_index":2506,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collaborate",{"_index":1603,"title":{},"body":{"components/HelpComponent.html":{}}}],["collect",{"_index":2084,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collected",{"_index":2065,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collecting",{"_index":2069,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["collection",{"_index":421,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.firestore",{"_index":500,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["collection(this.gettasksref",{"_index":2487,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["color",{"_index":345,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["colorerror",{"_index":2372,"title":{},"body":{"components/SignupComponent.html":{}}}],["colors",{"_index":469,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["column",{"_index":2325,"title":{},"body":{"components/SignupComponent.html":{}}}],["combinelatest",{"_index":702,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["come",{"_index":3018,"title":{},"body":{"index.html":{}}}],["comes",{"_index":2088,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["comma",{"_index":1135,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["command",{"_index":3012,"title":{},"body":{"index.html":{}}}],["commercially",{"_index":2173,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["commonmodule",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["company",{"_index":2048,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["compare",{"_index":916,"title":{},"body":{"components/ContactListComponent.html":{}}}],["compile",{"_index":2999,"title":{},"body":{"index.html":{}}}],["complete",{"_index":2029,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["completed",{"_index":1241,"title":{},"body":{"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{}}}],["completion",{"_index":2462,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["compliance",{"_index":2119,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{},"overview.html":{}}}],["computer",{"_index":2055,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["conditions",{"_index":1684,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["confirm",{"_index":2257,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirmation",{"_index":2406,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["confirmpassword",{"_index":2275,"title":{},"body":{"components/SignupComponent.html":{}}}],["confirms",{"_index":2422,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["confirmsubtask",{"_index":2562,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["confirmsubtask(event",{"_index":2423,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["connection",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"components/LegalNoticeComponent.html":{},"interfaces/UserData.html":{}}}],["consent",{"_index":2142,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["consequential",{"_index":1751,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["considered",{"_index":1515,"title":{},"body":{"components/HeaderComponent.html":{}}}],["consistent",{"_index":578,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["console.error('error",{"_index":951,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["console.error(err",{"_index":530,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["console.log(err",{"_index":576,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["console.warn",{"_index":2861,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["const",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["constructor",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["constructor(auth",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["constructor(contactservice",{"_index":626,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{}}}],["constructor(fb",{"_index":1804,"title":{},"body":{"components/LoginComponent.html":{}}}],["constructor(firestore",{"_index":1169,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["constructor(form",{"_index":787,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(navigationservice",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["constructor(private",{"_index":838,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["constructor(router",{"_index":1920,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{}}}],["constructor(taskservice",{"_index":1302,"title":{},"body":{"injectables/DragDropManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["constructs",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"components/SidebarComponent.html":{}}}],["contact",{"_index":110,"title":{"interfaces/Contact.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contact's",{"_index":653,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["contact.email",{"_index":765,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["contact.id",{"_index":733,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["contact.name",{"_index":762,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contact.name).join",{"_index":1162,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["contact.name.charat(0).touppercase",{"_index":971,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact.phone",{"_index":769,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["contact?.email",{"_index":981,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contact?.name",{"_index":980,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactdetailscomponent",{"_index":109,"title":{"components/ContactDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactform",{"_index":777,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactformcomponent",{"_index":112,"title":{"components/ContactFormComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactid",{"_index":1178,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacting",{"_index":2157,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["contactlist",{"_index":2623,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactlist.length",{"_index":2716,"title":{},"body":{"components/TaskComponent.html":{}}}],["contactlist.slice(0",{"_index":2713,"title":{},"body":{"components/TaskComponent.html":{}}}],["contactlistcomponent",{"_index":114,"title":{"components/ContactListComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactmanager",{"_index":1113,"title":{"injectables/ContactManager.html":{}},"body":{"injectables/ContactManager.html":{},"coverage.html":{}}}],["contactname",{"_index":580,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactref",{"_index":586,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contacts",{"_index":498,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacts'},{'name",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contacts.component.html",{"_index":1202,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.component.scss",{"_index":1203,"title":{},"body":{"components/ContactsComponent.html":{}}}],["contacts.filter(contact",{"_index":968,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.find(c",{"_index":948,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacts.push",{"_index":515,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactscomponent",{"_index":116,"title":{"components/ContactsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactselected",{"_index":894,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice",{"_index":452,"title":{"injectables/ContactService.html":{}},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["contactservice.getinitials(contact.name",{"_index":2714,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["contactservice.getinitials(contact?.name",{"_index":979,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contactservice.getinitials(contacttoedit.name",{"_index":869,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactsref",{"_index":510,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contactssubscription",{"_index":884,"title":{},"body":{"components/ContactListComponent.html":{}}}],["contacttoedit",{"_index":778,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["contactvisible",{"_index":600,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["contact’s",{"_index":581,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["contain",{"_index":1030,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["container",{"_index":1091,"title":{},"body":{"components/ContactListComponent.html":{}}}],["containing",{"_index":549,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["contains",{"_index":434,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1019,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["context",{"_index":1340,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["contextual",{"_index":2641,"title":{},"body":{"components/TaskComponent.html":{}}}],["contracts",{"_index":2117,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["control",{"_index":437,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["control.errors",{"_index":1871,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['email",{"_index":1873,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['minlength",{"_index":1876,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['minlength'].requiredlength",{"_index":2300,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['pattern",{"_index":2301,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.errors['required",{"_index":1872,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.errors['requiredtrue",{"_index":2303,"title":{},"body":{"components/SignupComponent.html":{}}}],["control.touched",{"_index":1870,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["control.value",{"_index":443,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["control?.dirty",{"_index":2297,"title":{},"body":{"components/SignupComponent.html":{}}}],["control?.touched",{"_index":2294,"title":{},"body":{"components/SignupComponent.html":{}}}],["controls",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["conversion",{"_index":2471,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["convert",{"_index":2537,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["convertdate",{"_index":2720,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(date",{"_index":2539,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["convertdate(task.date",{"_index":2766,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["converts",{"_index":2535,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["cookie",{"_index":2109,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["cookies",{"_index":2050,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["copy",{"_index":1928,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["copyrighted",{"_index":1714,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["corresponding",{"_index":654,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["corresponds",{"_index":1496,"title":{},"body":{"components/HeaderComponent.html":{}}}],["cost",{"_index":1779,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["count",{"_index":1405,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counts",{"_index":1404,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["counttasksbystatus",{"_index":2588,"title":{},"body":{"components/SummaryComponent.html":{}}}],["counttasksbystatus(tasks",{"_index":1406,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["coverage",{"_index":2901,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":876,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{}}}],["created",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["createdat",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createerror",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creates",{"_index":819,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["createuserwithemailandpassword",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["createuserwithemailandpassword(this.auth",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["creating",{"_index":792,"title":{},"body":{"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["creation",{"_index":2205,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["credentials",{"_index":1827,"title":{},"body":{"components/LoginComponent.html":{}}}],["crud",{"_index":794,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["current",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["currently",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["currenttext",{"_index":2441,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["currentuser",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["currentuser.uid",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["currentuseremail",{"_index":885,"title":{},"body":{"components/ContactListComponent.html":{}}}],["currentusersubject",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["cursor",{"_index":1058,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["custom",{"_index":430,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["d",{"_index":2615,"title":{},"body":{"components/SummaryComponent.html":{}}}],["damage",{"_index":1778,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["damages",{"_index":1753,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["dark",{"_index":1001,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["data",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["database",{"_index":2200,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["date",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["date().gethours",{"_index":1426,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date(date).gettime",{"_index":2853,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date(t.date",{"_index":1456,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["date.getfullyear",{"_index":2551,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["date.gettime",{"_index":2852,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date.todate",{"_index":2850,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["date.todate().gettime",{"_index":2851,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["datea",{"_index":2846,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["dateb",{"_index":2848,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["dateobj",{"_index":1453,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["day",{"_index":2545,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["day}/${month}/${year",{"_index":2552,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["dd/mm/yyyy",{"_index":2538,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["ddg",{"_index":2013,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["deadline",{"_index":2617,"title":{},"body":{"components/SummaryComponent.html":{}}}],["decoration",{"_index":2365,"title":{},"body":{"components/SignupComponent.html":{}}}],["decorators",{"_index":672,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["dedicated",{"_index":1549,"title":{},"body":{"components/HelpComponent.html":{}}}],["default",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":1766,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["defined",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["definitions",{"_index":2034,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["delay",{"_index":1315,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["delayed",{"_index":1816,"title":{},"body":{"components/LoginComponent.html":{}}}],["delays",{"_index":1242,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{}}}],["delete",{"_index":573,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deleteaccount",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deletecontact",{"_index":782,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["deletecontact(docid",{"_index":574,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deleted",{"_index":2099,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["deletedoc",{"_index":425,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(docref).catch(err",{"_index":2521,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletedoc(this.getsinglecontactsref(docid)).catch((err",{"_index":575,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["deletedoc(this.getsingletaskref(docid)).catch(console.error",{"_index":2523,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletes",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["deletesubtask",{"_index":2563,"title":{},"body":{"injectables/SubtaskManager.html":{},"injectables/TaskService.html":{}}}],["deletesubtask(id",{"_index":2430,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["deletesubtask(taskid",{"_index":2520,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletetask",{"_index":2721,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["deletetask(docid",{"_index":2522,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletetask(event",{"_index":2737,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["deleteuser",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleteuser(user",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["deleting",{"_index":693,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["deletion",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["demand",{"_index":1777,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["dependencies",{"_index":2962,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":1420,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["describes",{"_index":2016,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["describing",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["description",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["descriptive",{"_index":2247,"title":{},"body":{"components/SignupComponent.html":{}}}],["deselect",{"_index":1144,"title":{},"body":{"injectables/ContactManager.html":{}}}],["design",{"_index":1700,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["designed",{"_index":1547,"title":{},"body":{"components/HelpComponent.html":{}}}],["desktop",{"_index":1260,"title":{},"body":{"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["destroy",{"_index":2776,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["destroyed",{"_index":662,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/LoginComponent.html":{}}}],["destruction",{"_index":811,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["detail",{"_index":1228,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["detailed",{"_index":2740,"title":{},"body":{"components/TaskDetailsComponent.html":{},"index.html":{}}}],["details",{"_index":140,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details'},{'name",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component",{"_index":1270,"title":{},"body":{"components/ContactsComponent.html":{}}}],["details.component.html",{"_index":597,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.scss",{"_index":598,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.ts",{"_index":594,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["details.component.ts:107",{"_index":2736,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:114",{"_index":642,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:116",{"_index":2749,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:125",{"_index":678,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:130",{"_index":2738,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:136",{"_index":691,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:143",{"_index":666,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:147",{"_index":2746,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:162",{"_index":2741,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:174",{"_index":2739,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:197",{"_index":660,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:206",{"_index":674,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:217",{"_index":670,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:232",{"_index":657,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:242",{"_index":651,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:250",{"_index":648,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:257",{"_index":668,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:40",{"_index":2732,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:45",{"_index":2733,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:50",{"_index":2734,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:55",{"_index":2730,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:60",{"_index":2729,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:65",{"_index":682,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.ts:66",{"_index":681,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:67",{"_index":680,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:68",{"_index":684,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:69",{"_index":685,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:70",{"_index":688,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["details.component.ts:71",{"_index":687,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:72",{"_index":689,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:73",{"_index":683,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:75",{"_index":630,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:76",{"_index":628,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:80",{"_index":2752,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:81",{"_index":2751,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:88",{"_index":2742,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details.component.ts:90",{"_index":633,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["details.component.ts:96",{"_index":2744,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["details/contact",{"_index":593,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["details/task",{"_index":2718,"title":{},"body":{"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["detecting",{"_index":1519,"title":{},"body":{"components/HeaderComponent.html":{}}}],["detection",{"_index":1822,"title":{},"body":{"components/LoginComponent.html":{}}}],["detects",{"_index":1490,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/TaskComponent.html":{}}}],["determine",{"_index":37,"title":{},"body":{"components/AppComponent.html":{}}}],["determines",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["developed",{"_index":1693,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["developer",{"_index":1555,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["development",{"_index":1553,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["device",{"_index":679,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["devices",{"_index":1629,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["diagnostic",{"_index":2083,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["diagnostics",{"_index":2087,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["different",{"_index":2795,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["digital",{"_index":2011,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["direct",{"_index":1747,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["direction",{"_index":1221,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["directive",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["directives",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["directly",{"_index":900,"title":{},"body":{"components/ContactListComponent.html":{}}}],["directors",{"_index":1772,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["directory",{"_index":3002,"title":{},"body":{"index.html":{}}}],["dirty",{"_index":2296,"title":{},"body":{"components/SignupComponent.html":{}}}],["disabled",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["disclaimer",{"_index":1731,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["disclose",{"_index":2168,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["disclosure",{"_index":2018,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["display",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["displayed",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["displayname",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["displays",{"_index":1825,"title":{},"body":{"components/LoginComponent.html":{},"components/SidebarComponent.html":{}}}],["disputes",{"_index":2154,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["dist",{"_index":3001,"title":{},"body":{"index.html":{}}}],["distance",{"_index":3058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distributes",{"_index":2817,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["distribution",{"_index":1705,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["doc",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["doc(collection(this.firestore",{"_index":2489,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.firestore",{"_index":2517,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc(this.getcontactsref",{"_index":505,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["doc.data",{"_index":517,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["doc.id",{"_index":516,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docid",{"_index":503,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref",{"_index":525,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["docref.id",{"_index":528,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["document",{"_index":502,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{}}}],["document.queryselector('.subtask",{"_index":2444,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["document:click",{"_index":622,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["document:click(event",{"_index":632,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["documentation",{"_index":2902,"title":{},"body":{"coverage.html":{}}}],["documentdata",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["domsgen",{"_index":1676,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["done",{"_index":1355,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["donecount",{"_index":1401,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["donelist",{"_index":1354,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["don´t",{"_index":874,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["dots",{"_index":2642,"title":{},"body":{"components/TaskComponent.html":{}}}],["dr",{"_index":1663,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["drag",{"_index":1296,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dragdropmanager",{"_index":1293,"title":{"injectables/DragDropManager.html":{}},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["dragging",{"_index":1326,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["drags",{"_index":1319,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["dragstartthreshold",{"_index":3053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drop",{"_index":1295,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["dropdown",{"_index":353,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{}}}],["dropping",{"_index":1628,"title":{},"body":{"components/HelpComponent.html":{}}}],["due",{"_index":1619,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["duration",{"_index":2204,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["during",{"_index":1891,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["dynamic",{"_index":2212,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1218,"title":{},"body":{"components/ContactsComponent.html":{}}}],["e",{"_index":767,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["e.g",{"_index":692,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["e2e",{"_index":3015,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":3017,"title":{},"body":{"index.html":{}}}],["e91e63",{"_index":481,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["each",{"_index":1630,"title":{},"body":{"components/HelpComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["ease",{"_index":710,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["edge",{"_index":1328,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["edit",{"_index":565,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["editcontact",{"_index":465,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["editcontactsubject",{"_index":463,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["editcontactsubscription",{"_index":779,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["edited",{"_index":462,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["editing",{"_index":451,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["editingsubtaskid",{"_index":2394,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editingsubtasktext",{"_index":2395,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editingtask",{"_index":2482,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["edits",{"_index":2433,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editsubtask",{"_index":2564,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["editsubtask(id",{"_index":2435,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["editsubtaskprompt",{"_index":2565,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["editsubtaskprompt(id",{"_index":2442,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["edittask",{"_index":2727,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["educational",{"_index":1576,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["effect",{"_index":2184,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["effective",{"_index":1562,"title":{},"body":{"components/HelpComponent.html":{}}}],["effectively",{"_index":1640,"title":{},"body":{"components/HelpComponent.html":{}}}],["efficiency",{"_index":1568,"title":{},"body":{"components/HelpComponent.html":{}}}],["el.iscompleted).length",{"_index":2698,"title":{},"body":{"components/TaskComponent.html":{}}}],["electronic",{"_index":2175,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["element",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["elementref",{"_index":627,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{}}}],["ellipsis",{"_index":1080,"title":{},"body":{"components/ContactListComponent.html":{}}}],["elsewhere",{"_index":1492,"title":{},"body":{"components/HeaderComponent.html":{}}}],["email",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["email.trim",{"_index":859,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["emits",{"_index":555,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["emitted",{"_index":1247,"title":{},"body":{"components/ContactsComponent.html":{}}}],["emitting",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["employees",{"_index":1774,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["empties",{"_index":2793,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["empty",{"_index":2248,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["emptyarrays",{"_index":2777,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["enabled",{"_index":1809,"title":{},"body":{"components/LoginComponent.html":{}}}],["encrypted",{"_index":2193,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["end",{"_index":3014,"title":{},"body":{"index.html":{}}}],["enforcement",{"_index":2155,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["enhancements",{"_index":1900,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["enjoy",{"_index":1649,"title":{},"body":{"components/HelpComponent.html":{}}}],["ensure",{"_index":1583,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["enter",{"_index":1874,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["entered",{"_index":2263,"title":{},"body":{"components/SignupComponent.html":{}}}],["entity",{"_index":2068,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["entry",{"_index":815,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["err",{"_index":529,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["error",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["errorcode",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["errormessage",{"_index":1791,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["errors",{"_index":1829,"title":{},"body":{"components/LoginComponent.html":{}}}],["escape",{"_index":2461,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["essential",{"_index":2106,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["etc",{"_index":1621,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["evaluate",{"_index":2659,"title":{},"body":{"components/TaskComponent.html":{}}}],["even",{"_index":1759,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["event",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.container",{"_index":1357,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.container.data",{"_index":1358,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.container.id",{"_index":1348,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.currentindex",{"_index":1360,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.item.data",{"_index":1345,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.key",{"_index":2459,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["event.pointerposition.y",{"_index":1368,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.preventdefault",{"_index":2419,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["event.previouscontainer",{"_index":1356,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previouscontainer.data",{"_index":1361,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.previousindex",{"_index":1359,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["event.stoppropagation",{"_index":2424,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["event.target",{"_index":718,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskComponent.html":{}}}],["event.tostate",{"_index":1290,"title":{},"body":{"components/ContactsComponent.html":{}}}],["event.urlafterredirects",{"_index":96,"title":{},"body":{"components/AppComponent.html":{}}}],["eventcoalescing",{"_index":3030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":629,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["events",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["example",{"_index":2983,"title":{},"body":{"index.html":{}}}],["examples",{"_index":2104,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["excluding",{"_index":2669,"title":{},"body":{"components/TaskComponent.html":{}}}],["execute",{"_index":3008,"title":{},"body":{"index.html":{}}}],["exemplary",{"_index":1752,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["exercise",{"_index":1577,"title":{},"body":{"components/HelpComponent.html":{}}}],["exist",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["existing",{"_index":531,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{}}}],["expected",{"_index":1991,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["experience",{"_index":1586,"title":{},"body":{"components/HelpComponent.html":{}}}],["expiry",{"_index":2103,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["exploring",{"_index":1594,"title":{},"body":{"components/HelpComponent.html":{}}}],["export",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["express",{"_index":1738,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["extensive",{"_index":1579,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["extra",{"_index":546,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["extracts",{"_index":1184,"title":{},"body":{"injectables/ContactService.html":{}}}],["eye",{"_index":2386,"title":{},"body":{"components/SignupComponent.html":{}}}],["f44336",{"_index":477,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["f5f5f5",{"_index":1063,"title":{},"body":{"components/ContactListComponent.html":{}}}],["fab",{"_index":1090,"title":{},"body":{"components/ContactListComponent.html":{}}}],["facilitate",{"_index":2064,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["fade",{"_index":1888,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["failed",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["fails",{"_index":1830,"title":{},"body":{"components/LoginComponent.html":{}}}],["failure",{"_index":2265,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["fallback",{"_index":1498,"title":{},"body":{"components/HeaderComponent.html":{}}}],["false",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["family",{"_index":1037,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["fb",{"_index":1806,"title":{},"body":{"components/LoginComponent.html":{}}}],["features",{"_index":2213,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["feedback",{"_index":1353,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["feel",{"_index":1644,"title":{},"body":{"components/HelpComponent.html":{}}}],["fees",{"_index":1781,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fetches",{"_index":1177,"title":{},"body":{"injectables/ContactService.html":{},"components/TaskDetailsComponent.html":{}}}],["fetching",{"_index":2639,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["ff5722",{"_index":484,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ff9800",{"_index":475,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["ffa000",{"_index":494,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["fff",{"_index":2378,"title":{},"body":{"components/SignupComponent.html":{}}}],["ffffff",{"_index":1065,"title":{},"body":{"components/ContactListComponent.html":{}}}],["field",{"_index":1813,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["fields",{"_index":542,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["files",{"_index":2051,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["fill",{"_index":1605,"title":{},"body":{"components/HelpComponent.html":{}}}],["fills",{"_index":834,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["filter",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/TaskListManager.html":{}}}],["filter((t",{"_index":1450,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["filtered",{"_index":2805,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filtering",{"_index":2770,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["filters",{"_index":2802,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["find",{"_index":1311,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{}}}],["finished",{"_index":1838,"title":{},"body":{"components/LoginComponent.html":{},"injectables/OverlayManager.html":{}}}],["firebase",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["firebase’s",{"_index":2219,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["firestore",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["firestoretimestamp",{"_index":1379,"title":{"interfaces/FirestoreTimestamp.html":{}},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["first",{"_index":907,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{}}}],["firstload",{"_index":601,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["fitness",{"_index":1742,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["fixed",{"_index":1097,"title":{},"body":{"components/ContactListComponent.html":{}}}],["flag",{"_index":1495,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["flex",{"_index":1014,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["flickering",{"_index":1244,"title":{},"body":{"components/ContactsComponent.html":{}}}],["flow",{"_index":1569,"title":{},"body":{"components/HelpComponent.html":{}}}],["following",{"_index":1683,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["font",{"_index":1036,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["footer",{"_index":1473,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer'},{'name",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["footer.component.html",{"_index":1475,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.component.scss",{"_index":1476,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer/footer.component",{"_index":1840,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["footercomponent",{"_index":118,"title":{"components/FooterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["forget",{"_index":875,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form",{"_index":432,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["form'},{'name",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["form.component",{"_index":1271,"title":{},"body":{"components/ContactsComponent.html":{}}}],["form.component.html",{"_index":775,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.scss",{"_index":776,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts",{"_index":772,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{}}}],["form.component.ts:102",{"_index":816,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:113",{"_index":817,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:139",{"_index":804,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:146",{"_index":807,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:32",{"_index":795,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:38",{"_index":799,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:43",{"_index":823,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:48",{"_index":826,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:53",{"_index":789,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:60",{"_index":825,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:66",{"_index":813,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:79",{"_index":831,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form.component.ts:93",{"_index":808,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["form/contact",{"_index":771,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["format",{"_index":2543,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["formatdate",{"_index":2876,"title":{},"body":{"injectables/TaskService.html":{}}}],["formatdate(date",{"_index":2544,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["formats",{"_index":2542,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["formatted",{"_index":2536,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["formbuilder",{"_index":788,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formgroup",{"_index":822,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["formsmodule",{"_index":774,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["found",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["four",{"_index":1601,"title":{},"body":{"components/HelpComponent.html":{}}}],["frame",{"_index":2316,"title":{},"body":{"components/SignupComponent.html":{}}}],["framework",{"_index":3019,"title":{},"body":{"index.html":{}}}],["fraud",{"_index":2108,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["free",{"_index":1645,"title":{},"body":{"components/HelpComponent.html":{}}}],["friendly",{"_index":1812,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["fs12",{"_index":1068,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["fs14",{"_index":2356,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs20",{"_index":2346,"title":{},"body":{"components/SignupComponent.html":{}}}],["fs47",{"_index":2337,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":419,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/TaskComponent.html":{}}}],["fullcontact",{"_index":527,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["function",{"_index":441,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["functionality",{"_index":2110,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["functions",{"_index":2207,"title":{"miscellaneous/functions.html":{}},"body":{"components/PrivacyPolicyComponent.html":{},"miscellaneous/functions.html":{}}}],["future",{"_index":1899,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["futuretasks",{"_index":1449,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.filter",{"_index":1467,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.length",{"_index":1459,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks.sort((a",{"_index":1460,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["futuretasks[0].dateobj",{"_index":1464,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["gap",{"_index":1020,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["general",{"_index":2015,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["generate",{"_index":659,"title":{},"body":{"components/ContactDetailsComponent.html":{},"index.html":{}}}],["generated",{"_index":523,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["generates",{"_index":577,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["generator",{"_index":2023,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["german",{"_index":2010,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["getanimationdirection",{"_index":1957,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getauth",{"_index":3050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getawaitfeedbacktasks",{"_index":2778,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getbackgroundvisible",{"_index":1958,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getcategories",{"_index":373,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorycolor",{"_index":387,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcategorytext",{"_index":383,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getcleanjson",{"_index":1164,"title":{},"body":{"injectables/ContactService.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updated",{"_index":2526,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getcleanjson(updatedcontact",{"_index":550,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcompletedsubtaskscount",{"_index":2625,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcompletedsubtaskscount(subtasklist",{"_index":2657,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontactbyid",{"_index":1165,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactbyid(contactid",{"_index":1175,"title":{},"body":{"injectables/ContactService.html":{}}}],["getcontactcolor",{"_index":608,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["getcontactcolor(contact",{"_index":1129,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactcolor(contactname",{"_index":585,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactcolor(name",{"_index":650,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["getcontactinitials",{"_index":1117,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactinitials(contact",{"_index":1131,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getcontactlist",{"_index":2626,"title":{},"body":{"components/TaskComponent.html":{}}}],["getcontacts",{"_index":508,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcontactsref",{"_index":499,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getcurrentuser",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"interfaces/UserData.html":{}}}],["getcurrentuserdata",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getcurrentusername",{"_index":1483,"title":{},"body":{"components/HeaderComponent.html":{}}}],["getcurrentusername().charat(0).touppercase",{"_index":1526,"title":{},"body":{"components/HeaderComponent.html":{}}}],["getdatatoedit",{"_index":780,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["getdatevalue",{"_index":2779,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdatevalue(date",{"_index":2794,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdoc",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/UserData.html":{}}}],["getdoc(contactref).then(snapshot",{"_index":588,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdoc(doc(this.firestore",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getdocs",{"_index":426,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getdonetasks",{"_index":2780,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getdragdelay",{"_index":1299,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["geteditingsubtaskid",{"_index":2410,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["geteditingsubtasktext",{"_index":2412,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["geteditingtask",{"_index":2555,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["geterrormessage",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["geterrormessage(errorcode",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["getfilteredtasks",{"_index":2781,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfilteredtasks(status",{"_index":2799,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getfirestore",{"_index":3047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getgreeting",{"_index":1424,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["gethistory",{"_index":1917,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getinitials",{"_index":609,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinitials(contact.name",{"_index":761,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["getinitials(name",{"_index":656,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["getinprogresstasks",{"_index":2782,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getisanimationdisabled",{"_index":690,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["getisdotsmenuopen",{"_index":2684,"title":{},"body":{"components/TaskComponent.html":{}}}],["getoverlayvisible",{"_index":1959,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getpreviousurl",{"_index":1918,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["getremainingcontactnames",{"_index":1118,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["getremainingcontactnames(remainingcontacts",{"_index":1133,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["gets",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["getselectedcategory",{"_index":363,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getselectedcontacts",{"_index":1119,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedcontactstext",{"_index":1120,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getselectedtask",{"_index":1960,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowaddoredittask",{"_index":1961,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getshowcategorydropdown",{"_index":369,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["getshowcontactdropdown",{"_index":1121,"title":{},"body":{"injectables/ContactManager.html":{}}}],["getshowsubtaskconfirmation",{"_index":2407,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["getshowtaskdetails",{"_index":1962,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["getsinglecontactsref",{"_index":1166,"title":{},"body":{"injectables/ContactService.html":{}}}],["getsinglecontactsref(docid",{"_index":504,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["getsingletaskref",{"_index":2877,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskref(docid",{"_index":2488,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtaskinput",{"_index":2403,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["getsubtasks",{"_index":2398,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskService.html":{}}}],["getsubtasks(taskid",{"_index":2497,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getsubtasksbytaskid",{"_index":2783,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask",{"_index":2784,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksforselectedtask(selectedtask",{"_index":2808,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask",{"_index":2785,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksfortask(taskid",{"_index":2810,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["getsubtasksref",{"_index":2878,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsubtasksref(subcolid",{"_index":2486,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasklist",{"_index":2786,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettasks",{"_index":2491,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["gettasksref",{"_index":2483,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["getting",{"_index":2976,"title":{"index.html":{}},"body":{}}],["gettodotasks",{"_index":2787,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["gettotaltaskcount",{"_index":2609,"title":{},"body":{"components/SummaryComponent.html":{}}}],["getvalidationmessage",{"_index":1799,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('confirmpassword",{"_index":2306,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('email",{"_index":1880,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage('name",{"_index":2305,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage('password",{"_index":1881,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'confirmpassword",{"_index":2388,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'email",{"_index":1883,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'name",{"_index":2387,"title":{},"body":{"components/SignupComponent.html":{}}}],["getvalidationmessage(\\'password",{"_index":1884,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["getvalidationmessage(field",{"_index":1810,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["given",{"_index":902,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["glance",{"_index":2613,"title":{},"body":{"components/SummaryComponent.html":{}}}],["gmbh",{"_index":1695,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["go",{"_index":1604,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["goback",{"_index":1532,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["good",{"_index":1422,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["goodwill",{"_index":1756,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["google",{"_index":2188,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google´s",{"_index":2218,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["google’s",{"_index":2214,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["gotoboard",{"_index":2589,"title":{},"body":{"components/SummaryComponent.html":{}}}],["greeting",{"_index":1399,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingshown",{"_index":1437,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["greetingstate",{"_index":1394,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["group",{"_index":824,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["group.get('confirmpassword')?.value",{"_index":2280,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.get('password')?.value",{"_index":2279,"title":{},"body":{"components/SignupComponent.html":{}}}],["group.key",{"_index":978,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial",{"_index":889,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupbyinitial(contacts",{"_index":903,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouped",{"_index":933,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groupedcontacts",{"_index":886,"title":{},"body":{"components/ContactListComponent.html":{}}}],["grouping",{"_index":923,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups",{"_index":905,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial",{"_index":972,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].push(contact",{"_index":973,"title":{},"body":{"components/ContactListComponent.html":{}}}],["groups[initial].sort((a",{"_index":974,"title":{},"body":{"components/ContactListComponent.html":{}}}],["guarantee",{"_index":1587,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["guard",{"_index":145,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guest",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["guest123",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guest@join.com",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guestemail",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guestpassword",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["guide",{"_index":1541,"title":{},"body":{"components/HelpComponent.html":{}}}],["guidelines",{"_index":1686,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["h2",{"_index":2335,"title":{},"body":{"components/SignupComponent.html":{}}}],["h4",{"_index":1033,"title":{},"body":{"components/ContactListComponent.html":{}}}],["hamburg",{"_index":1669,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["handle",{"_index":2008,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["handledragmove",{"_index":1300,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledragmove(event",{"_index":1322,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop",{"_index":1301,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handledrop(event",{"_index":1331,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["handler",{"_index":1510,"title":{},"body":{"components/HeaderComponent.html":{}}}],["handles",{"_index":348,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["handling",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["harass",{"_index":1724,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harm",{"_index":1725,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["harmless",{"_index":1768,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["hash",{"_index":583,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hasn't",{"_index":1818,"title":{},"body":{"components/LoginComponent.html":{}}}],["hasn’t",{"_index":1889,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["hasselectedcategory",{"_index":390,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["header",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["header'},{'name",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["header.component",{"_index":1842,"title":{},"body":{"components/LoginComponent.html":{}}}],["header.component.html",{"_index":1480,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.scss",{"_index":1481,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["header.component.ts",{"_index":1886,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["header.component.ts:50",{"_index":1902,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:56",{"_index":1896,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:61",{"_index":1894,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header.component.ts:69",{"_index":1887,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["header/header.component",{"_index":79,"title":{},"body":{"components/AppComponent.html":{}}}],["header/login",{"_index":1841,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["headercomponent",{"_index":19,"title":{"components/HeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["height",{"_index":985,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["help",{"_index":1527,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["help'},{'name",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["help.component.html",{"_index":1530,"title":{},"body":{"components/HelpComponent.html":{}}}],["help.component.scss",{"_index":1531,"title":{},"body":{"components/HelpComponent.html":{}}}],["helpbuilding",{"_index":2996,"title":{},"body":{"index.html":{}}}],["helpcomponent",{"_index":121,"title":{"components/HelpComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["helper",{"_index":937,"title":{},"body":{"components/ContactListComponent.html":{}}}],["here",{"_index":1542,"title":{},"body":{"components/HelpComponent.html":{}}}],["hex",{"_index":655,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["hexadecimal",{"_index":584,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hidden",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hideform",{"_index":570,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["hides",{"_index":569,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["hiding",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/ContactsComponent.html":{}}}],["highlight",{"_index":2364,"title":{},"body":{"components/SignupComponent.html":{}}}],["highly",{"_index":1561,"title":{},"body":{"components/HelpComponent.html":{}}}],["history",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["history.service",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["history.service.ts",{"_index":1909,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["history.service.ts:16",{"_index":1921,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:42",{"_index":1927,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:51",{"_index":1930,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["history.service.ts:63",{"_index":1931,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["hold",{"_index":1767,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["holding",{"_index":1934,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["holds",{"_index":932,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["hook",{"_index":1224,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["hostlistener",{"_index":700,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('document:click",{"_index":673,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hostlistener('window:resize",{"_index":677,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["hostlisteners",{"_index":621,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["hour",{"_index":1425,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["hover",{"_index":1062,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["html",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["htmlelement",{"_index":719,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskComponent.html":{}}}],["htmlinputelement",{"_index":2445,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["http://localhost:4200",{"_index":2987,"title":{},"body":{"index.html":{}}}],["human",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["icon",{"_index":2350,"title":{},"body":{"components/SignupComponent.html":{}}}],["icon.toggle",{"_index":2385,"title":{},"body":{"components/SignupComponent.html":{}}}],["id",{"_index":413,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["identifiable",{"_index":2059,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identification",{"_index":471,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["identified",{"_index":2058,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifier",{"_index":416,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"coverage.html":{}}}],["identifiers",{"_index":2082,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["identifying",{"_index":899,"title":{},"body":{"components/ContactListComponent.html":{}}}],["ids",{"_index":2477,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["illegal",{"_index":1722,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["image",{"_index":1026,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["img",{"_index":1094,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["implements",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["implied",{"_index":1739,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["important",{"_index":1093,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{}}}],["imports",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["imprint",{"_index":1662,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["improve",{"_index":2022,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["inboard",{"_index":2618,"title":{},"body":{"components/SummaryComponent.html":{}}}],["incidental",{"_index":1749,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["include",{"_index":1004,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["includes",{"_index":351,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"index.html":{}}}],["including",{"_index":544,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["indemnify",{"_index":1765,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["indemnity",{"_index":1764,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1513,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["indicating",{"_index":1248,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["indicator",{"_index":1828,"title":{},"body":{"components/LoginComponent.html":{}}}],["indirect",{"_index":1748,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["individual",{"_index":1615,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["infinite",{"_index":2382,"title":{},"body":{"components/SignupComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["info&#64;michelle",{"_index":1646,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["info@michelle",{"_index":1653,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["information",{"_index":764,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"index.html":{}}}],["infrastructure",{"_index":2215,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["infringement",{"_index":1745,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["init",{"_index":2672,"title":{},"body":{"components/TaskComponent.html":{}}}],["initial",{"_index":970,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["initialization",{"_index":2743,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["initializeanimation",{"_index":1800,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["initializeapp",{"_index":3033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializeform",{"_index":1801,"title":{},"body":{"components/LoginComponent.html":{}}}],["initializes",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["initials",{"_index":658,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["initiates",{"_index":2440,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["injectable",{"_index":177,"title":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["injectables",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"overview.html":{}}}],["injecting",{"_index":790,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["injects",{"_index":1486,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["inline",{"_index":1984,"title":{},"body":{"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["inprogress",{"_index":2772,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["inprogresscount",{"_index":1402,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["inprogresslist",{"_index":1350,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["input",{"_index":433,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"miscellaneous/functions.html":{}}}],["input.invalid",{"_index":2349,"title":{},"body":{"components/SignupComponent.html":{}}}],["input::placeholder",{"_index":2347,"title":{},"body":{"components/SignupComponent.html":{}}}],["input:focus",{"_index":2376,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox",{"_index":2357,"title":{},"body":{"components/SignupComponent.html":{}}}],["input[type=\"checkbox\"]:checked",{"_index":2361,"title":{},"body":{"components/SignupComponent.html":{}}}],["inputelement",{"_index":2443,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.focus",{"_index":2447,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.setselectionrange(inputelement.value.length",{"_index":2448,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.value",{"_index":2446,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputelement.value.length",{"_index":2449,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["inputs",{"_index":2631,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["insensitive",{"_index":2804,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["instance",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["instanceof",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["intangible",{"_index":1757,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intended",{"_index":1578,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["inter",{"_index":1038,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["inter400",{"_index":1067,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["inter700",{"_index":2336,"title":{},"body":{"components/SignupComponent.html":{}}}],["interact",{"_index":1607,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["interaction",{"_index":454,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["interactions",{"_index":1730,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["interface",{"_index":277,"title":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["interfaces",{"_index":341,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Contact.html":{},"interfaces/FirestoreTimestamp.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"interfaces/UserData.html":{},"overview.html":{}}}],["internal",{"_index":1933,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["internet",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["interpretation",{"_index":2033,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["intimidate",{"_index":1727,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["intuitive",{"_index":1574,"title":{},"body":{"components/HelpComponent.html":{}}}],["invalid",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["invert(1",{"_index":1112,"title":{},"body":{"components/ContactListComponent.html":{}}}],["investigate",{"_index":2170,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["ip",{"_index":2066,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["irreversible",{"_index":1638,"title":{},"body":{"components/HelpComponent.html":{}}}],["isanimationdisabled",{"_index":625,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["iscompleted",{"_index":2467,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["iscontactchange",{"_index":739,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["iscontactselected",{"_index":1122,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscontactselected(contact",{"_index":1142,"title":{},"body":{"injectables/ContactManager.html":{}}}],["iscurrentuser",{"_index":890,"title":{},"body":{"components/ContactListComponent.html":{}}}],["iscurrentuser(contact",{"_index":913,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isdeleting",{"_index":602,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["isdotsmenuopen",{"_index":2637,"title":{},"body":{"components/TaskComponent.html":{}}}],["isediting",{"_index":603,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["isfirestoretimestamp",{"_index":2590,"title":{},"body":{"components/SummaryComponent.html":{}}}],["isfirestoretimestamp(obj",{"_index":1411,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["isloading",{"_index":1792,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["isloggedin",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["ismobile",{"_index":604,"title":{},"body":{"components/ContactDetailsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["isselected",{"_index":891,"title":{},"body":{"components/ContactListComponent.html":{}}}],["isselected(contact",{"_index":917,"title":{},"body":{"components/ContactListComponent.html":{}}}],["issmallscreen",{"_index":2001,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["issue",{"_index":1814,"title":{},"body":{"components/LoginComponent.html":{}}}],["istouchdevice",{"_index":1793,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["item",{"_index":2829,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["items",{"_index":1016,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["japanese",{"_index":1557,"title":{},"body":{"components/HelpComponent.html":{}}}],["jenny",{"_index":1675,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["join",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["joins",{"_index":2662,"title":{},"body":{"components/TaskComponent.html":{}}}],["json",{"_index":540,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["july",{"_index":1785,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["jurisdiction",{"_index":2146,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["justify",{"_index":1018,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["kanban",{"_index":1523,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["karma",{"_index":3009,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1910,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["keeps",{"_index":1922,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["keine",{"_index":766,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["key",{"_index":960,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["keyasc",{"_index":887,"title":{},"body":{"components/ContactListComponent.html":{}}}],["keyboard",{"_index":2417,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["keyboardevent",{"_index":2458,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["keyframes",{"_index":2383,"title":{},"body":{"components/SignupComponent.html":{}}}],["keys",{"_index":910,"title":{},"body":{"components/ContactListComponent.html":{}}}],["kind",{"_index":1737,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["label",{"_index":346,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["language",{"_index":2111,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["last",{"_index":1912,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["later",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["law",{"_index":2020,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["lawful",{"_index":1717,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["laws",{"_index":1720,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["layout",{"_index":646,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["leaks",{"_index":665,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["left",{"_index":2334,"title":{},"body":{"components/SignupComponent.html":{}}}],["legal",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["legally",{"_index":2158,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["legalnoticecomponent",{"_index":123,"title":{"components/LegalNoticeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["legend",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["length",{"_index":1470,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["letter",{"_index":934,"title":{},"body":{"components/ContactListComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["level",{"_index":2474,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["leverages",{"_index":1570,"title":{},"body":{"components/HelpComponent.html":{}}}],["liability",{"_index":1734,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["liable",{"_index":1746,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["lifecycle",{"_index":1223,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["light",{"_index":999,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["limit",{"_index":1566,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["limitation",{"_index":1733,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["limited",{"_index":1740,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["linear",{"_index":2381,"title":{},"body":{"components/SignupComponent.html":{}}}],["link",{"_index":2374,"title":{},"body":{"components/SignupComponent.html":{}}}],["links",{"_index":2176,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["list",{"_index":669,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{},"index.html":{}}}],["list'},{'name",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["list.component",{"_index":1269,"title":{},"body":{"components/ContactsComponent.html":{}}}],["list.component.html",{"_index":883,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.scss",{"_index":882,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts",{"_index":880,"title":{},"body":{"components/ContactListComponent.html":{},"coverage.html":{}}}],["list.component.ts:109",{"_index":914,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:117",{"_index":926,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:127",{"_index":918,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:134",{"_index":924,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:143",{"_index":904,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:157",{"_index":935,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:164",{"_index":901,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:27",{"_index":921,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:48",{"_index":898,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:61",{"_index":931,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:66",{"_index":939,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:71",{"_index":930,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:76",{"_index":929,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:78",{"_index":928,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:79",{"_index":940,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:84",{"_index":895,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:92",{"_index":927,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list.component.ts:99",{"_index":919,"title":{},"body":{"components/ContactListComponent.html":{}}}],["list/contact",{"_index":879,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"coverage.html":{}}}],["listed",{"_index":1690,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["listen",{"_index":1926,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["listener",{"_index":1217,"title":{},"body":{"components/ContactsComponent.html":{}}}],["lists",{"_index":1339,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["literal",{"_index":909,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["llc",{"_index":2189,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["load",{"_index":814,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["loadassignedcontacts",{"_index":2722,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["loading",{"_index":922,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"injectables/TaskListManager.html":{}}}],["loads",{"_index":1895,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadsubtasks",{"_index":2723,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["loadtasks",{"_index":2788,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["local",{"_index":2981,"title":{},"body":{"index.html":{}}}],["log",{"_index":1528,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{}}}],["logged",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["login",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["login'},{'name",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["login.component.html",{"_index":1789,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":1790,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":126,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["loginform",{"_index":1794,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginheadercomponent",{"_index":128,"title":{"components/LoginHeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["logins",{"_index":2198,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["logo",{"_index":1817,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["logostate",{"_index":1795,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["logout",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"interfaces/UserData.html":{}}}],["logs",{"_index":1501,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["long",{"_index":1879,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["lookup",{"_index":2814,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["loss",{"_index":1754,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["losses",{"_index":1758,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["low",{"_index":2475,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["mail",{"_index":768,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["main",{"_index":2338,"title":{},"body":{"components/SignupComponent.html":{}}}],["maintain",{"_index":2114,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["making",{"_index":1979,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manage",{"_index":1572,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["management",{"_index":354,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["manager.ts",{"_index":344,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["manager.ts:101",{"_index":2582,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:102",{"_index":1307,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:104",{"_index":403,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:105",{"_index":1134,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:111",{"_index":397,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{}}}],["manager.ts:112",{"_index":1128,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:12",{"_index":1150,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{}}}],["manager.ts:123",{"_index":2824,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:124",{"_index":2574,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:129",{"_index":1987,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:13",{"_index":1127,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:132",{"_index":2573,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:133",{"_index":2816,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:14",{"_index":1994,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:142",{"_index":1968,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:149",{"_index":2577,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:15",{"_index":1995,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:156",{"_index":1992,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:158",{"_index":2578,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:16",{"_index":1996,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:17",{"_index":409,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:170",{"_index":2579,"title":{},"body":{"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:18",{"_index":410,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:180",{"_index":2813,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:186",{"_index":2584,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:19",{"_index":1966,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:196",{"_index":2811,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:198",{"_index":2575,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:20",{"_index":408,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:207",{"_index":2581,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:209",{"_index":2809,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:21",{"_index":1314,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:219",{"_index":2830,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:22",{"_index":2587,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:221",{"_index":2586,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:229",{"_index":2792,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:231",{"_index":2576,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:27",{"_index":1146,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:28",{"_index":401,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:29",{"_index":1971,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:32",{"_index":1334,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["manager.ts:34",{"_index":1141,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:35",{"_index":405,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:36",{"_index":1972,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:39",{"_index":2806,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:41",{"_index":1148,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:42",{"_index":402,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:43",{"_index":1973,"title":{},"body":{"injectables/OverlayManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:47",{"_index":2798,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:48",{"_index":1149,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:49",{"_index":406,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:50",{"_index":1977,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:54",{"_index":2807,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:56",{"_index":398,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:57",{"_index":1975,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:63",{"_index":407,"title":{},"body":{"injectables/CategoryManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:64",{"_index":1974,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:65",{"_index":2801,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["manager.ts:70",{"_index":1143,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/SubtaskManager.html":{}}}],["manager.ts:71",{"_index":404,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:74",{"_index":1993,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:77",{"_index":2580,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:78",{"_index":1140,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{}}}],["manager.ts:80",{"_index":400,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:83",{"_index":1988,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["manager.ts:84",{"_index":2585,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["manager.ts:87",{"_index":1132,"title":{},"body":{"injectables/ContactManager.html":{}}}],["manager.ts:91",{"_index":2583,"title":{},"body":{"injectables/SubtaskManager.html":{},"injectables/TaskListManager.html":{}}}],["manager.ts:92",{"_index":399,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["manager.ts:96",{"_index":1130,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{}}}],["manages",{"_index":793,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{}}}],["managing",{"_index":447,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["many",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["map",{"_index":703,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["map((t",{"_index":1452,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["maps",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["marco",{"_index":1671,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["margin",{"_index":992,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["match",{"_index":2258,"title":{},"body":{"components/SignupComponent.html":{}}}],["matchedcontact",{"_index":947,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matches",{"_index":915,"title":{},"body":{"components/ContactListComponent.html":{}}}],["matching",{"_index":144,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["material",{"_index":1715,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["math.round((completed",{"_index":2701,"title":{},"body":{"components/TaskComponent.html":{}}}],["max",{"_index":983,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["maximize",{"_index":1567,"title":{},"body":{"components/HelpComponent.html":{}}}],["maximum",{"_index":1929,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["meaning",{"_index":1559,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["meanings",{"_index":2038,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["media",{"_index":1085,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["media(max",{"_index":1082,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["medium",{"_index":2348,"title":{},"body":{"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["memory",{"_index":664,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["menu",{"_index":638,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["menuopen",{"_index":605,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["menuref",{"_index":1482,"title":{},"body":{"components/HeaderComponent.html":{}}}],["merchantability",{"_index":1741,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["merger",{"_index":2127,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["message",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["messages",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["messagingsenderid",{"_index":3044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["method",{"_index":1563,"title":{},"body":{"components/HelpComponent.html":{},"components/TaskComponent.html":{}}}],["methods",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["metrics",{"_index":2612,"title":{},"body":{"components/SummaryComponent.html":{}}}],["michelle",{"_index":1664,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["milliseconds",{"_index":1321,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["min",{"_index":1076,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["minimum",{"_index":2299,"title":{},"body":{"components/SignupComponent.html":{}}}],["miscellaneous",{"_index":2974,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mismatched",{"_index":2246,"title":{},"body":{"components/SignupComponent.html":{}}}],["missing",{"_index":872,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["mmmm",{"_index":2614,"title":{},"body":{"components/SummaryComponent.html":{}}}],["mobile",{"_index":637,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["mobilemenu",{"_index":720,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mobilemenu?.contains(target",{"_index":727,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mobileoptions",{"_index":722,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mobileoptions?.contains(target",{"_index":728,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["mode",{"_index":827,"title":{},"body":{"components/ContactFormComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["modification",{"_index":1704,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["modify",{"_index":2989,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3024,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monitor",{"_index":2115,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["month",{"_index":2547,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["more",{"_index":435,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["morning",{"_index":1423,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["mouse",{"_index":1493,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mouseevent",{"_index":1488,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["mousey",{"_index":1367,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["move",{"_index":1634,"title":{},"body":{"components/HelpComponent.html":{}}}],["moved",{"_index":1390,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["moveiteminarray",{"_index":1341,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["moves",{"_index":1624,"title":{},"body":{"components/HelpComponent.html":{}}}],["moving",{"_index":1623,"title":{},"body":{"components/HelpComponent.html":{}}}],["name",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["name.trim",{"_index":858,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["namefor",{"_index":2993,"title":{},"body":{"index.html":{}}}],["names",{"_index":1138,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["native",{"_index":2470,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["naumann",{"_index":1674,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["navigate",{"_index":1534,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"index.html":{}}}],["navigateback",{"_index":1919,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["navigates",{"_index":1537,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["navigation",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["navigationend",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["navigationhistoryservice",{"_index":31,"title":{"injectables/NavigationHistoryService.html":{}},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["navigationservice",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["navigator.maxtouchpoints",{"_index":1850,"title":{},"body":{"components/LoginComponent.html":{}}}],["near",{"_index":1327,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["necessary",{"_index":2105,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["need",{"_index":1597,"title":{},"body":{"components/HelpComponent.html":{}}}],["needs",{"_index":2196,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["network",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["new",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"index.html":{}}}],["newcontact",{"_index":521,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["newemail",{"_index":2260,"title":{},"body":{"components/SignupComponent.html":{}}}],["newly",{"_index":796,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{}}}],["newname",{"_index":2262,"title":{},"body":{"components/SignupComponent.html":{}}}],["news",{"_index":2123,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["newstatus",{"_index":1346,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["newsubtask",{"_index":2428,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["newtask",{"_index":2501,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["newtext",{"_index":2434,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["newtext.trim",{"_index":2439,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["next",{"_index":736,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["nextdate",{"_index":1463,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdate.gettime",{"_index":1469,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdeadlinecount",{"_index":1398,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextdeadlinedate",{"_index":1397,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nextsubtaskid",{"_index":2393,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["ng",{"_index":2984,"title":{},"body":{"index.html":{}}}],["ngfor",{"_index":2826,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["ngonchanges",{"_index":2627,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngonchanges(changes",{"_index":2664,"title":{},"body":{"components/TaskComponent.html":{}}}],["ngondestroy",{"_index":610,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{}}}],["ngoninit",{"_index":611,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["nice",{"_index":1433,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["nocontactvisible",{"_index":620,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["non",{"_index":1744,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["none",{"_index":988,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"injectables/TaskListManager.html":{}}}],["note",{"_index":1575,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["notice",{"_index":1478,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{}}}],["notice'},{'name",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["notice.component.html",{"_index":1658,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.scss",{"_index":1659,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts",{"_index":1657,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notice.component.ts:19",{"_index":1660,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice.component.ts:31",{"_index":1661,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["notice/legal",{"_index":1656,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["notifications",{"_index":2122,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notify",{"_index":2165,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["notonlywhitespace",{"_index":837,"title":{},"body":{"components/ContactFormComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["notonlywhitespace(control",{"_index":442,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["now",{"_index":1448,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/SummaryComponent.html":{}}}],["nowrap",{"_index":1079,"title":{},"body":{"components/ContactListComponent.html":{}}}],["null",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":420,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["number.max_safe_integer",{"_index":2797,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["numbers",{"_index":2302,"title":{},"body":{"components/SignupComponent.html":{}}}],["numeric",{"_index":2796,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["obj",{"_index":1410,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["obj.todate",{"_index":1412,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["object",{"_index":440,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["objects",{"_index":2663,"title":{},"body":{"components/TaskComponent.html":{}}}],["obligations",{"_index":2153,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["observable",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["observable((observer",{"_index":509,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observable(observer",{"_index":2492,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.error(error",{"_index":519,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(contacts",{"_index":518,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["observer.next(subtasks",{"_index":2500,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observer.next(tasks",{"_index":2496,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["observes",{"_index":2490,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["occurred",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/LoginComponent.html":{},"interfaces/UserData.html":{}}}],["offers",{"_index":2124,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["officers",{"_index":1771,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["oh",{"_index":873,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["oldest",{"_index":1924,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["onaddnewcontact",{"_index":892,"title":{},"body":{"components/ContactListComponent.html":{}}}],["onauthstatechanged",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onauthstatechanged(this.auth",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["onbacktolist",{"_index":612,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{}}}],["onbacktologin",{"_index":2241,"title":{},"body":{"components/SignupComponent.html":{}}}],["once",{"_index":1606,"title":{},"body":{"components/HelpComponent.html":{}}}],["onchanges",{"_index":2686,"title":{},"body":{"components/TaskComponent.html":{}}}],["onclose",{"_index":783,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["oncontactadded",{"_index":1209,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactadded(newcontact",{"_index":1229,"title":{},"body":{"components/ContactsComponent.html":{}}}],["oncontactselect",{"_index":893,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselect(contact",{"_index":925,"title":{},"body":{"components/ContactListComponent.html":{}}}],["oncontactselected",{"_index":1210,"title":{},"body":{"components/ContactsComponent.html":{}}}],["ondeletecontact",{"_index":613,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["ondestroy",{"_index":596,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{}}}],["ondocumentclick",{"_index":614,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["ondocumentclick(event",{"_index":671,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/TaskComponent.html":{}}}],["one",{"_index":1185,"title":{},"body":{"injectables/ContactService.html":{},"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{},"index.html":{}}}],["oneditcontact",{"_index":615,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["onguestlogin",{"_index":1802,"title":{},"body":{"components/LoginComponent.html":{}}}],["oninit",{"_index":595,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["onlogin",{"_index":1803,"title":{},"body":{"components/LoginComponent.html":{}}}],["onnocontactvisible",{"_index":1211,"title":{},"body":{"components/ContactsComponent.html":{}}}],["onoverlayanimationdone",{"_index":1212,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onoverlayanimationdone(event",{"_index":1237,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["onresize",{"_index":616,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["onresize(event",{"_index":676,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["onsnapshot",{"_index":422,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.getsubtasksref(taskid",{"_index":2498,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsnapshot(this.gettasksref",{"_index":2493,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["onsubmit",{"_index":784,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["onsubtaskeditkeydown",{"_index":2566,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["onsubtaskeditkeydown(event",{"_index":2457,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["onsubtaskenter",{"_index":2567,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["onsubtaskenter(event",{"_index":2418,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["onsubtaskinputclick",{"_index":2415,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["onsubtasktoggle",{"_index":2724,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["onsubtasktoggle(subtask",{"_index":2745,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["ontouchstart",{"_index":1849,"title":{},"body":{"components/LoginComponent.html":{}}}],["oops",{"_index":870,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["opacity",{"_index":708,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["open",{"_index":639,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"index.html":{}}}],["openaddoreditoverlay",{"_index":1963,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["openaddoreditoverlay(event",{"_index":1982,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opendotsmenu",{"_index":2635,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler",{"_index":2628,"title":{},"body":{"components/TaskComponent.html":{}}}],["opendotsmenuhandler(event",{"_index":2673,"title":{},"body":{"components/TaskComponent.html":{}}}],["opened",{"_index":2651,"title":{},"body":{"components/TaskComponent.html":{}}}],["openedittask",{"_index":2725,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedittask(event",{"_index":2748,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["openedmenutaskid",{"_index":2632,"title":{},"body":{"components/TaskComponent.html":{}}}],["opening/closing",{"_index":1947,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opens",{"_index":675,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["opentaskdetail",{"_index":1964,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetail(selectedtask",{"_index":1986,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["opentaskdetails",{"_index":2629,"title":{},"body":{"components/TaskComponent.html":{}}}],["opentaskdetails(task",{"_index":2675,"title":{},"body":{"components/TaskComponent.html":{}}}],["operational",{"_index":2216,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["operations",{"_index":350,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["operator",{"_index":2226,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["optimize",{"_index":2827,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["optimizes",{"_index":3004,"title":{},"body":{"index.html":{}}}],["option",{"_index":1632,"title":{},"body":{"components/HelpComponent.html":{}}}],["optional",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":724,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["order",{"_index":1596,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["orders",{"_index":2118,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["os",{"_index":2085,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["otherwise",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["output",{"_index":699,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outputs",{"_index":618,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["outside",{"_index":636,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["over",{"_index":2026,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["overflow",{"_index":989,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["overlay",{"_index":800,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["overlaymanager",{"_index":1945,"title":{"injectables/OverlayManager.html":{}},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["overlays",{"_index":1948,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overlayvisible",{"_index":1952,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["overview",{"_index":1545,"title":{"overview.html":{}},"body":{"components/HelpComponent.html":{},"index.html":{},"overview.html":{}}}],["owned",{"_index":1701,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["ownership",{"_index":1692,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["package",{"_index":2961,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":995,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["page",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["pageloaded",{"_index":1796,"title":{},"body":{"components/LoginComponent.html":{}}}],["pages",{"_index":2080,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["palummieri",{"_index":1672,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["param",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":2485,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["part",{"_index":1551,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["partial",{"_index":551,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["particular",{"_index":1743,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["partners",{"_index":1770,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["party",{"_index":2032,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["password",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["passwordmismatch",{"_index":2291,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwords",{"_index":2194,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["passwordsdontmatch",{"_index":2281,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator",{"_index":2242,"title":{},"body":{"components/SignupComponent.html":{}}}],["passwordsmatchvalidator(group",{"_index":2255,"title":{},"body":{"components/SignupComponent.html":{}}}],["path",{"_index":1932,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["percentage",{"_index":2679,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted",{"_index":2630,"title":{},"body":{"components/TaskComponent.html":{}}}],["percentagecompleted(subtasklist",{"_index":2677,"title":{},"body":{"components/TaskComponent.html":{}}}],["perform",{"_index":2116,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["performance",{"_index":1763,"title":{},"body":{"components/LegalNoticeComponent.html":{},"index.html":{}}}],["periodically",{"_index":2186,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["permanently",{"_index":1635,"title":{},"body":{"components/HelpComponent.html":{}}}],["permitted",{"_index":2225,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persistent",{"_index":2100,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["persists",{"_index":1308,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["person",{"_index":1728,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["person.svg",{"_index":1028,"title":{},"body":{"components/ContactListComponent.html":{}}}],["personal",{"_index":1608,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["personally",{"_index":2074,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["phone",{"_index":414,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["phone.trim",{"_index":860,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["pipe(filter((event",{"_index":90,"title":{},"body":{"components/AppComponent.html":{}}}],["pipe(filter(event",{"_index":1935,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["pipes",{"_index":2995,"title":{},"body":{"index.html":{}}}],["pixel",{"_index":2097,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["place",{"_index":2150,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["placed",{"_index":2052,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["plain",{"_index":539,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["played",{"_index":1890,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["please",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"components/ContactFormComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["plural",{"_index":2043,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["pointer",{"_index":1059,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["pointerdirectionchangethreshold",{"_index":3054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["policies",{"_index":1685,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["policy",{"_index":1477,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["policy'},{'name",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["policy.component.html",{"_index":2005,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.scss",{"_index":2006,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts",{"_index":2004,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["policy.component.ts:19",{"_index":2007,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy.component.ts:31",{"_index":2009,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["policy/privacy",{"_index":2003,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["popularity",{"_index":2098,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["position",{"_index":1032,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["position:relative",{"_index":2308,"title":{},"body":{"components/SignupComponent.html":{}}}],["possibility",{"_index":1761,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["possible",{"_index":1585,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["posted",{"_index":2185,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["powerful",{"_index":2991,"title":{},"body":{"index.html":{}}}],["pre",{"_index":833,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["preferences",{"_index":2112,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["prefill",{"_index":1985,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["prefilled",{"_index":566,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["prepares",{"_index":2750,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["presented",{"_index":1689,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["preset",{"_index":467,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["press",{"_index":2416,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["prevent",{"_index":812,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["prevents",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/DragDropManager.html":{}}}],["previous",{"_index":1538,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["previousurl",{"_index":1941,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["primary",{"_index":2341,"title":{},"body":{"components/SignupComponent.html":{}}}],["principles",{"_index":1571,"title":{},"body":{"components/HelpComponent.html":{}}}],["priority",{"_index":2473,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["privacy",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["privacypolicy",{"_index":2276,"title":{},"body":{"components/SignupComponent.html":{}}}],["privacypolicycomponent",{"_index":129,"title":{"components/PrivacyPolicyComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["private",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["procedures",{"_index":2017,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["process",{"_index":2208,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["processed",{"_index":2145,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["processing",{"_index":2062,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["product",{"_index":1680,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["production",{"_index":3003,"title":{},"body":{"index.html":{}}}],["products",{"_index":2138,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["profile",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["profits",{"_index":1755,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["program",{"_index":2047,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["progress",{"_index":1351,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["prohibited",{"_index":1708,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["prohibition",{"_index":2221,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["project",{"_index":1524,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["projectid",{"_index":3034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects",{"_index":1573,"title":{},"body":{"components/HelpComponent.html":{}}}],["promise",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["promotions",{"_index":2139,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["propagation",{"_index":1508,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["properties",{"_index":26,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"properties.html":{}}}],["proprietary",{"_index":1709,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["protect",{"_index":2169,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protection",{"_index":2030,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["protects",{"_index":2021,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["provide",{"_index":1544,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":3048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":3049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":1735,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["providedin",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["providefirebaseapp",{"_index":3032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":3046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":2061,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["providerouter(routes",{"_index":3031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":2049,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":448,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["providezonechangedetection",{"_index":3029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["publicly",{"_index":2141,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["purpose",{"_index":1696,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["purposes",{"_index":1718,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["puschkarow",{"_index":1665,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["puschkarow.de",{"_index":1647,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["push",{"_index":2121,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["quality",{"_index":1592,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["questions",{"_index":1643,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["radius",{"_index":1060,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["reached",{"_index":1925,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["reactive",{"_index":449,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["reactiveformsmodule",{"_index":773,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["readable",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["reading",{"_index":2472,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["readonly",{"_index":1414,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["real",{"_index":2209,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["reasonable",{"_index":1780,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["receive",{"_index":829,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["receives",{"_index":832,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["recent",{"_index":1911,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["rect",{"_index":1373,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["redirect",{"_index":2252,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirected",{"_index":2288,"title":{},"body":{"components/SignupComponent.html":{}}}],["redirects",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["refer",{"_index":2217,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reference",{"_index":497,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["references",{"_index":3023,"title":{},"body":{"index.html":{}}}],["refers",{"_index":2045,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["reflect",{"_index":1627,"title":{},"body":{"components/HelpComponent.html":{}}}],["reflects",{"_index":1641,"title":{},"body":{"components/HelpComponent.html":{}}}],["regarding",{"_index":1593,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["regardless",{"_index":2041,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["register",{"_index":1598,"title":{},"body":{"components/HelpComponent.html":{}}}],["registers",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["registration",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["regulations",{"_index":1721,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["reject",{"_index":2095,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["related",{"_index":349,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["relating",{"_index":1782,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["relative",{"_index":1057,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["relevant",{"_index":1969,"title":{},"body":{"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["reliability",{"_index":1589,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["reload",{"_index":1313,"title":{},"body":{"injectables/DragDropManager.html":{},"index.html":{}}}],["reloadcallback",{"_index":1306,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["reloads",{"_index":2670,"title":{},"body":{"components/TaskComponent.html":{}}}],["remain",{"_index":2101,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["remaining",{"_index":1137,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remainingcontacts",{"_index":1139,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remainingcontacts.map((contact",{"_index":1161,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["remember",{"_index":1639,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["removal",{"_index":1989,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["remove",{"_index":1636,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["removebackground",{"_index":1213,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["removebackground(event",{"_index":1245,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["rendering",{"_index":2828,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["reorders",{"_index":1338,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["repeat",{"_index":1031,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["repeating",{"_index":1893,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["replication",{"_index":1706,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["represent",{"_index":1614,"title":{},"body":{"components/HelpComponent.html":{}}}],["representation",{"_index":2524,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["represented",{"_index":1670,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["representing",{"_index":412,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["represents",{"_index":1600,"title":{},"body":{"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["reproduction",{"_index":1703,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["request",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["requests",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["required",{"_index":896,"title":{},"body":{"components/ContactListComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{}}}],["requirements",{"_index":2167,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["requires",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{}}}],["reserved",{"_index":1898,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["reserves",{"_index":2227,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["resetoverlaystates",{"_index":1965,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["resets",{"_index":392,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{}}}],["resize",{"_index":644,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["resolved",{"_index":2649,"title":{},"body":{"components/TaskComponent.html":{}}}],["resolving",{"_index":1179,"title":{},"body":{"injectables/ContactService.html":{}}}],["resources",{"_index":3022,"title":{},"body":{"index.html":{}}}],["responsibility",{"_index":2181,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["responsible",{"_index":1487,"title":{},"body":{"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["responsive",{"_index":1950,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["restructuring",{"_index":2129,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["result",{"_index":1863,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.message",{"_index":1867,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["result.success",{"_index":1865,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["results",{"_index":143,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retain",{"_index":1711,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["retained",{"_index":2156,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retention",{"_index":2152,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["retrieve",{"_index":2812,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["retrieved",{"_index":2479,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["retrieves",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["return",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["returns",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":2182,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["rgba(0",{"_index":1103,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["right",{"_index":1070,"title":{},"body":{"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["rights",{"_index":1712,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["root",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["root'},{'name",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["rotate(360deg",{"_index":2384,"title":{},"body":{"components/SignupComponent.html":{}}}],["route",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["router",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"interfaces/UserData.html":{}}}],["routermodule",{"_index":1474,"title":{},"body":{"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{}}}],["routeroutlet",{"_index":17,"title":{},"body":{"components/AppComponent.html":{}}}],["routes",{"_index":68,"title":{"routes.html":{}},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"routes.html":{}}}],["routing",{"_index":1535,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["run",{"_index":2982,"title":{},"body":{"index.html":{}}}],["runner",{"_index":3011,"title":{},"body":{"index.html":{}}}],["running",{"_index":2986,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["s.id",{"_index":2437,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["safety",{"_index":2172,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sale",{"_index":2128,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["same",{"_index":2040,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sanitize",{"_index":548,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["sans",{"_index":1039,"title":{},"body":{"components/ContactListComponent.html":{}}}],["save",{"_index":877,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["savenewcontact",{"_index":2243,"title":{},"body":{"components/SignupComponent.html":{}}}],["savenewcontact(newname",{"_index":2259,"title":{},"body":{"components/SignupComponent.html":{}}}],["saves",{"_index":2450,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["savesubtaskedit",{"_index":2451,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["saving",{"_index":2254,"title":{},"body":{"components/SignupComponent.html":{}}}],["scaffolding",{"_index":2990,"title":{},"body":{"index.html":{}}}],["scale(0.95",{"_index":1110,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scale(1.1",{"_index":1109,"title":{},"body":{"components/ContactListComponent.html":{}}}],["schematics",{"_index":2994,"title":{},"body":{"index.html":{}}}],["scope",{"_index":1691,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["screen",{"_index":1235,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["screens",{"_index":1320,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{}}}],["scripts",{"_index":2093,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["scrollable",{"_index":1329,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollbar",{"_index":1000,"title":{},"body":{"components/ContactListComponent.html":{}}}],["scrolling",{"_index":1297,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollproximity",{"_index":3057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollsection",{"_index":1324,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollsection?.nativeelement",{"_index":1372,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["scrollspeed",{"_index":3056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrollstep",{"_index":1370,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["search",{"_index":2803,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchlower",{"_index":2840,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm",{"_index":2800,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm.tolowercase",{"_index":2841,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["searchterm.trim",{"_index":2839,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["seconds",{"_index":1255,"title":{},"body":{"components/ContactsComponent.html":{}}}],["section",{"_index":1330,"title":{},"body":{"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["section.getboundingclientrect",{"_index":1374,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["securely",{"_index":2199,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["security",{"_index":2027,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["see",{"_index":1434,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["seems",{"_index":871,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["select",{"_index":379,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcategory",{"_index":394,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["selectcategory(category",{"_index":380,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectcontact",{"_index":1123,"title":{},"body":{"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selectcontact(contact",{"_index":558,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{}}}],["selected",{"_index":362,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedcategory",{"_index":355,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["selectedcontact",{"_index":456,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{}}}],["selectedcontact.id",{"_index":734,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["selectedcontacts",{"_index":1115,"title":{},"body":{"injectables/ContactManager.html":{}}}],["selectedcontactsubject",{"_index":455,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["selectedtask",{"_index":1953,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{}}}],["selectedtask?.id",{"_index":2873,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["selection",{"_index":352,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{}}}],["selectionsubscription",{"_index":888,"title":{},"body":{"components/ContactListComponent.html":{}}}],["selector",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["selects",{"_index":377,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactsComponent.html":{}}}],["sending",{"_index":2223,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["separate",{"_index":1983,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["separated",{"_index":1136,"title":{},"body":{"injectables/ContactManager.html":{},"components/TaskComponent.html":{}}}],["separately",{"_index":2480,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["serif",{"_index":1040,"title":{},"body":{"components/ContactListComponent.html":{}}}],["serveonce",{"_index":2985,"title":{},"body":{"index.html":{}}}],["server",{"_index":2980,"title":{},"body":{"index.html":{}}}],["service",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["services",{"_index":897,"title":{},"body":{"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["services/auth.service",{"_index":941,"title":{},"body":{"components/ContactListComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["services/contact.service",{"_index":701,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["services/navigation",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["services/task.service",{"_index":1344,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["session",{"_index":1503,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["sessionstorage",{"_index":1892,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.getitem('greetingshown",{"_index":1438,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.getitem('logoappeared",{"_index":1906,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.getitem('logomoved",{"_index":1854,"title":{},"body":{"components/LoginComponent.html":{}}}],["sessionstorage.removeitem('greetingshown",{"_index":1522,"title":{},"body":{"components/HeaderComponent.html":{}}}],["sessionstorage.setitem('greetingshown",{"_index":1441,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["sessionstorage.setitem('logoappeared",{"_index":1907,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["sessionstorage.setitem('logomoved",{"_index":1857,"title":{},"body":{"components/LoginComponent.html":{}}}],["setanimationdirection",{"_index":1214,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setanimationdirection(width",{"_index":1250,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["setdoc",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["setdoc(doc(this.firestore",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["seteditingsubtasktext",{"_index":2568,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["seteditingsubtasktext(value",{"_index":2414,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["seteditingtask",{"_index":2879,"title":{},"body":{"injectables/TaskService.html":{}}}],["seteditingtask(task",{"_index":2553,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["sets",{"_index":365,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["setselectedcategory",{"_index":395,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setselectedcategory(category",{"_index":366,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setselectedcontacts",{"_index":1124,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setselectedcontacts(contacts",{"_index":1145,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcategorydropdown",{"_index":396,"title":{},"body":{"injectables/CategoryManager.html":{}}}],["setshowcategorydropdown(value",{"_index":371,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["setshowcontactdropdown",{"_index":1125,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowcontactdropdown(value",{"_index":1147,"title":{},"body":{"injectables/ContactManager.html":{}}}],["setshowsubtaskconfirmation",{"_index":2569,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["setshowsubtaskconfirmation(value",{"_index":2409,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["setsubtaskinput",{"_index":2570,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["setsubtaskinput(value",{"_index":2405,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["setsubtasks",{"_index":2571,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["setsubtasks(subtasks",{"_index":2400,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["settimeout",{"_index":743,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{}}}],["settings",{"_index":2096,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shadow",{"_index":1102,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["shall",{"_index":2039,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["share",{"_index":2140,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sharing",{"_index":2134,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["shortcuts",{"_index":2456,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["show",{"_index":556,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddform",{"_index":563,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showaddoredittask",{"_index":1954,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["showcategorydropdown",{"_index":356,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["showconfirmpassword",{"_index":2238,"title":{},"body":{"components/SignupComponent.html":{}}}],["showcontactdetails",{"_index":1206,"title":{},"body":{"components/ContactsComponent.html":{}}}],["showcontactdropdown",{"_index":1116,"title":{},"body":{"injectables/ContactManager.html":{}}}],["showcontent",{"_index":2719,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["showeditform",{"_index":1167,"title":{},"body":{"injectables/ContactService.html":{}}}],["showeditform(contact",{"_index":567,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showform",{"_index":460,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["showformsubject",{"_index":458,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["showgreeting",{"_index":1396,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["showheaderandsidebar",{"_index":27,"title":{},"body":{"components/AppComponent.html":{}}}],["showing",{"_index":1243,"title":{},"body":{"components/ContactsComponent.html":{}}}],["shown",{"_index":1266,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["showpassword",{"_index":1797,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["shows",{"_index":1231,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginComponent.html":{}}}],["showsubtaskconfirmation",{"_index":2397,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["showtaskdetails",{"_index":1955,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["shrink",{"_index":2360,"title":{},"body":{"components/SignupComponent.html":{}}}],["sidebar",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/SidebarComponent.html":{}}}],["sidebar'},{'name",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["sidebar.component.html",{"_index":2231,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar.component.scss",{"_index":2232,"title":{},"body":{"components/SidebarComponent.html":{}}}],["sidebar/sidebar.component",{"_index":78,"title":{},"body":{"components/AppComponent.html":{}}}],["sidebarcomponent",{"_index":18,"title":{"components/SidebarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["sign",{"_index":1882,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["signed",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signin",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(email",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinasguest",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signing",{"_index":2307,"title":{},"body":{"components/SignupComponent.html":{}}}],["signinwithemailandpassword",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signinwithemailandpassword(this.auth",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signout(this.auth",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signoutuser",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signs",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{}}}],["signup'].includes",{"_index":95,"title":{},"body":{"components/AppComponent.html":{}}}],["signup'},{'name",{"_index":134,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["signup(email",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["signup.component.html",{"_index":2237,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.scss",{"_index":2236,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/footer/footer.component.ts",{"_index":1472,"title":{},"body":{"components/FooterComponent.html":{},"coverage.html":{}}}],["signup/login",{"_index":1885,"title":{},"body":{"components/LoginHeaderComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts",{"_index":1788,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["signup/login/login.component.ts:113",{"_index":1821,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:122",{"_index":1807,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:129",{"_index":1819,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:140",{"_index":1815,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:156",{"_index":1826,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:177",{"_index":1824,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:195",{"_index":1811,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:207",{"_index":1820,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:64",{"_index":1835,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:69",{"_index":1837,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:74",{"_index":1834,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:79",{"_index":1831,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:84",{"_index":1832,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:89",{"_index":1839,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/login/login.component.ts:94",{"_index":1805,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup/signup/signup.component.ts",{"_index":2235,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["signup/signup/signup.component.ts:109",{"_index":2256,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:119",{"_index":2253,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:147",{"_index":2261,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:160",{"_index":2250,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:174",{"_index":2245,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:44",{"_index":2268,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:49",{"_index":2264,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:54",{"_index":2269,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:59",{"_index":2266,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:64",{"_index":2267,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:69",{"_index":2244,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup/signup/signup.component.ts:89",{"_index":2249,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":133,"title":{"components/SignupComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["signupform",{"_index":2239,"title":{},"body":{"components/SignupComponent.html":{}}}],["similar",{"_index":2086,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["simplechanges",{"_index":2665,"title":{},"body":{"components/TaskComponent.html":{}}}],["single",{"_index":501,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["singular",{"_index":2042,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["sites",{"_index":2179,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["size",{"_index":1029,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sizing",{"_index":2331,"title":{},"body":{"components/SignupComponent.html":{}}}],["skiplocationchange",{"_index":2251,"title":{},"body":{"components/SignupComponent.html":{}}}],["slide",{"_index":1240,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["slight",{"_index":1978,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["small",{"_index":1236,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["smooth",{"_index":1980,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["sms",{"_index":2120,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["snapshot",{"_index":513,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.data",{"_index":591,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.exists",{"_index":589,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach((doc",{"_index":514,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["snapshot.foreach(doc",{"_index":2494,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["snapshot.id",{"_index":590,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["software",{"_index":2046,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["solely",{"_index":1729,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["solid",{"_index":1052,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["sort",{"_index":2822,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorted",{"_index":2821,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorting",{"_index":936,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["sorts",{"_index":2818,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate",{"_index":2789,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["sorttasksbyduedate(tasks",{"_index":2819,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["space",{"_index":1078,"title":{},"body":{"components/ContactListComponent.html":{}}}],["spam",{"_index":2228,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["special",{"_index":1750,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/SignupComponent.html":{}}}],["specific",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["speed",{"_index":3005,"title":{},"body":{"index.html":{}}}],["spent",{"_index":2081,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["spin",{"_index":2379,"title":{},"body":{"components/SignupComponent.html":{}}}],["spinner",{"_index":2377,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/.../app.config.ts",{"_index":3027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contact.service.ts",{"_index":2975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/add",{"_index":342,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"coverage.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:30",{"_index":62,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:35",{"_index":34,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":2917,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/board/board.component.ts",{"_index":2921,"title":{},"body":{"coverage.html":{}}}],["src/app/board/drag",{"_index":1294,"title":{},"body":{"injectables/DragDropManager.html":{},"coverage.html":{}}}],["src/app/board/overlay",{"_index":1946,"title":{},"body":{"injectables/OverlayManager.html":{},"coverage.html":{}}}],["src/app/board/task",{"_index":2717,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts",{"_index":2620,"title":{},"body":{"components/TaskComponent.html":{},"coverage.html":{}}}],["src/app/board/task/task.component.ts:103",{"_index":2683,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:104",{"_index":2681,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:113",{"_index":2653,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:128",{"_index":2671,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:139",{"_index":2666,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:152",{"_index":2655,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:168",{"_index":2658,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:180",{"_index":2678,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:191",{"_index":2676,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:201",{"_index":2685,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:210",{"_index":2674,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:223",{"_index":2660,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:239",{"_index":2661,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:44",{"_index":2680,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:51",{"_index":2644,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:56",{"_index":2643,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:61",{"_index":2652,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:66",{"_index":2648,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:71",{"_index":2682,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:76",{"_index":2640,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:81",{"_index":2650,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:86",{"_index":2647,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:91",{"_index":2645,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/board/task/task.component.ts:94",{"_index":2638,"title":{},"body":{"components/TaskComponent.html":{}}}],["src/app/contacts/contact",{"_index":592,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts",{"_index":1201,"title":{},"body":{"components/ContactsComponent.html":{},"coverage.html":{}}}],["src/app/contacts/contacts.component.ts:106",{"_index":1230,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:116",{"_index":1251,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:123",{"_index":1252,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:137",{"_index":1246,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:149",{"_index":1239,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:160",{"_index":1226,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:167",{"_index":1233,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:174",{"_index":1234,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:53",{"_index":1256,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:58",{"_index":1268,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:63",{"_index":1267,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:68",{"_index":1262,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:73",{"_index":1265,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:78",{"_index":1216,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/contacts/contacts.component.ts:93",{"_index":1222,"title":{},"body":{"components/ContactsComponent.html":{}}}],["src/app/header/header.component.ts",{"_index":1479,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/header/header.component.ts:108",{"_index":1506,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:117",{"_index":1500,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:129",{"_index":1497,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:138",{"_index":1499,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:52",{"_index":1516,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:57",{"_index":1512,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:62",{"_index":1485,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:77",{"_index":1494,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:92",{"_index":1489,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/login",{"_index":1471,"title":{},"body":{"components/FooterComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts:12",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.guard.ts:30",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/services/auth.service.ts",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts:108",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:138",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:147",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:159",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:167",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:176",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:203",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:40",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:45",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:71",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:95",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/contact.service.ts",{"_index":411,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/services/contact.service.ts:103",{"_index":1181,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:129",{"_index":1171,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:147",{"_index":1193,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:161",{"_index":1174,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:175",{"_index":1190,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:182",{"_index":1172,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:189",{"_index":1191,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:198",{"_index":1192,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:206",{"_index":1189,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:216",{"_index":1173,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:228",{"_index":1180,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:242",{"_index":1183,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:255",{"_index":1176,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:54",{"_index":1198,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:56",{"_index":1197,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:59",{"_index":1200,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:61",{"_index":1199,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:64",{"_index":1196,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:66",{"_index":1195,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:69",{"_index":1194,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:75",{"_index":1170,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:85",{"_index":1182,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/contact.service.ts:94",{"_index":1188,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/app/services/navigation",{"_index":1908,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts",{"_index":2465,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["src/app/services/task.service.ts:103",{"_index":2896,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:124",{"_index":2894,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:144",{"_index":2884,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:162",{"_index":2883,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:179",{"_index":2900,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:191",{"_index":2899,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:202",{"_index":2888,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:212",{"_index":2889,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:221",{"_index":2891,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:247",{"_index":2887,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:261",{"_index":2890,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:273",{"_index":2898,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:280",{"_index":2892,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:287",{"_index":2886,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:297",{"_index":2885,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:71",{"_index":2882,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:78",{"_index":2897,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:87",{"_index":2895,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/services/task.service.ts:96",{"_index":2893,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/shared/help/help.component.ts",{"_index":1529,"title":{},"body":{"components/HelpComponent.html":{},"coverage.html":{}}}],["src/app/shared/help/help.component.ts:19",{"_index":1533,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/help/help.component.ts:31",{"_index":1536,"title":{},"body":{"components/HelpComponent.html":{}}}],["src/app/shared/legal",{"_index":1655,"title":{},"body":{"components/LegalNoticeComponent.html":{},"coverage.html":{}}}],["src/app/shared/privacy",{"_index":2002,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts",{"_index":2230,"title":{},"body":{"components/SidebarComponent.html":{},"coverage.html":{}}}],["src/app/sidebar/sidebar.component.ts:19",{"_index":2233,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/sidebar/sidebar.component.ts:30",{"_index":2234,"title":{},"body":{"components/SidebarComponent.html":{}}}],["src/app/summary/summary.component.ts",{"_index":1380,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"coverage.html":{}}}],["src/app/summary/summary.component.ts:113",{"_index":2594,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:121",{"_index":2596,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:15",{"_index":1382,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{}}}],["src/app/summary/summary.component.ts:32",{"_index":2606,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:33",{"_index":2608,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:35",{"_index":2600,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:36",{"_index":2605,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:37",{"_index":2602,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:39",{"_index":2604,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:40",{"_index":2603,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:41",{"_index":2599,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:43",{"_index":2607,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:44",{"_index":2598,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:45",{"_index":2601,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:46",{"_index":2591,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:62",{"_index":2592,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:73",{"_index":2595,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:83",{"_index":2610,"title":{},"body":{"components/SummaryComponent.html":{}}}],["src/app/summary/summary.component.ts:97",{"_index":2593,"title":{},"body":{"components/SummaryComponent.html":{}}}],["stage",{"_index":1625,"title":{},"body":{"components/HelpComponent.html":{}}}],["stages",{"_index":1633,"title":{},"body":{"components/HelpComponent.html":{}}}],["standalone",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["start",{"_index":1395,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{},"index.html":{}}}],["started",{"_index":2977,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1316,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["startmessageanimation",{"_index":1215,"title":{},"body":{"components/ContactsComponent.html":{}}}],["starts",{"_index":1253,"title":{},"body":{"components/ContactsComponent.html":{}}}],["state",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/UserData.html":{}}}],["state('appear",{"_index":1904,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["state('moved",{"_index":1388,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SummaryComponent.html":{}}}],["state('start",{"_index":1387,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["state/province",{"_index":2076,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["statements",{"_index":2903,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1949,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["statistics",{"_index":2202,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SummaryComponent.html":{}}}],["status",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["status).length",{"_index":1409,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["statusarraymap",{"_index":2836,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["statusarraymap[status",{"_index":2838,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["steps",{"_index":2148,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["still",{"_index":1642,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["stop",{"_index":2656,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["stops",{"_index":1507,"title":{},"body":{"components/HeaderComponent.html":{}}}],["storage",{"_index":1504,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["storagebucket",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"index.html":{}}}],["stored",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["stores",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["storing",{"_index":2190,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["story",{"_index":360,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["stream",{"_index":506,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["streams",{"_index":450,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["strictly",{"_index":1707,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["string",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["string(date.getdate()).padstart(2",{"_index":2546,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["string(date.getmonth",{"_index":2548,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["strive",{"_index":1582,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["student",{"_index":1694,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["students",{"_index":1550,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["style",{"_index":695,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["styles",{"_index":878,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styles.scss",{"_index":982,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["styleurl",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["styleurls",{"_index":881,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["subcolid",{"_index":2484,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subcollection",{"_index":2481,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["submission",{"_index":798,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["submit",{"_index":803,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["subscribe",{"_index":735,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["subscribe((event",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["subscribes",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"injectables/NavigationHistoryService.html":{},"interfaces/UserData.html":{}}}],["subscribing",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"components/ContactListComponent.html":{}}}],["subscription",{"_index":606,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["subscriptions",{"_index":920,"title":{},"body":{"components/ContactListComponent.html":{}}}],["subtask",{"_index":2389,"title":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{}},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["subtask's",{"_index":2747,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtask.completed",{"_index":2464,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtask.id",{"_index":2432,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["subtask.text",{"_index":2438,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtask.title",{"_index":2768,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtaskchanged",{"_index":2728,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["subtaskid",{"_index":2514,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtaskinput",{"_index":2396,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtasklist",{"_index":2633,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.filter((el",{"_index":2697,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtasklist.length",{"_index":2699,"title":{},"body":{"components/TaskComponent.html":{}}}],["subtaskmanager",{"_index":2391,"title":{"injectables/SubtaskManager.html":{}},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"coverage.html":{}}}],["subtasks",{"_index":2392,"title":{},"body":{"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["subtasks.length",{"_index":2402,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["subtasks.push",{"_index":2499,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["subtasksbytaskid",{"_index":2773,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["subtasksref",{"_index":2508,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["success",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["successful",{"_index":797,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["successfully",{"_index":1292,"title":{},"body":{"components/ContactsComponent.html":{}}}],["successmessage",{"_index":2240,"title":{},"body":{"components/SignupComponent.html":{}}}],["such",{"_index":1698,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["suits",{"_index":3021,"title":{},"body":{"index.html":{}}}],["summary",{"_index":1383,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"components/SummaryComponent.html":{}}}],["summary'},{'name",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["summary.component.html",{"_index":1384,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summary.component.scss",{"_index":1385,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["summarycomponent",{"_index":135,"title":{"components/SummaryComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["support",{"_index":2136,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["supports",{"_index":1833,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["switch",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["switches",{"_index":1258,"title":{},"body":{"components/ContactsComponent.html":{}}}],["system",{"_index":2469,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["t",{"_index":1457,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.date",{"_index":1451,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.date.todate",{"_index":1455,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.dateobj",{"_index":1458,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.dateobj!.gettime",{"_index":1468,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["t.id",{"_index":1376,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["t.status",{"_index":1408,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["table",{"_index":2815,"title":{},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2960,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":2057,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tags",{"_index":2092,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["take",{"_index":2147,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["target",{"_index":717,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/TaskComponent.html":{}}}],["target.closest('.dots",{"_index":2687,"title":{},"body":{"components/TaskComponent.html":{}}}],["task",{"_index":139,"title":{"interfaces/Task.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["task's",{"_index":1337,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["task'},{'name",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["task.component.html",{"_index":2621,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.scss",{"_index":2622,"title":{},"body":{"components/TaskComponent.html":{}}}],["task.component.ts",{"_index":2905,"title":{},"body":{"coverage.html":{}}}],["task.description?.tolowercase().includes(searchlower",{"_index":2844,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task.id",{"_index":1362,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["task.priority",{"_index":2767,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["task.status",{"_index":1363,"title":{},"body":{"injectables/DragDropManager.html":{},"injectables/TaskListManager.html":{}}}],["task.title",{"_index":2864,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task.title.tolowercase().includes(searchlower",{"_index":2843,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["task/add",{"_index":2904,"title":{},"body":{"coverage.html":{}}}],["task/category",{"_index":343,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"coverage.html":{}}}],["task/contact",{"_index":1114,"title":{},"body":{"injectables/ContactManager.html":{},"coverage.html":{}}}],["task/subtask",{"_index":2390,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"coverage.html":{}}}],["task['status",{"_index":1347,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["taskcomponent",{"_index":137,"title":{"components/TaskComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskdetailscomponent",{"_index":138,"title":{"components/TaskDetailsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"coverage.html":{}}}],["taskid",{"_index":1310,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["tasklist",{"_index":1305,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["tasklist.find((t",{"_index":1375,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["tasklistmanager",{"_index":2769,"title":{"injectables/TaskListManager.html":{}},"body":{"injectables/TaskListManager.html":{},"coverage.html":{}}}],["tasks",{"_index":868,"title":{},"body":{"components/ContactFormComponent.html":{},"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["tasks.filter((t",{"_index":1407,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["tasks.push",{"_index":2495,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks/${taskid}/subtasks/${subtaskid",{"_index":2518,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["tasks].sort((a",{"_index":2845,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["taskselected",{"_index":2636,"title":{},"body":{"components/TaskComponent.html":{}}}],["taskservice",{"_index":1303,"title":{"injectables/TaskService.html":{}},"body":{"injectables/DragDropManager.html":{},"interfaces/FirestoreTimestamp.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskservice.capitalize(task.category",{"_index":2710,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.description",{"_index":2712,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["taskservice.capitalize(task.title",{"_index":2711,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["tasksforstatus",{"_index":2837,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasksforstatus.filter",{"_index":2842,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tasksref",{"_index":2503,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["team",{"_index":760,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/HelpComponent.html":{}}}],["technical",{"_index":358,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["technologies",{"_index":2090,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["telefonnummer",{"_index":770,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["tells",{"_index":2019,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["term",{"_index":1558,"title":{},"body":{"components/HelpComponent.html":{},"injectables/TaskListManager.html":{}}}],["terms",{"_index":1678,"title":{},"body":{"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["test",{"_index":3010,"title":{},"body":{"index.html":{}}}],["testing",{"_index":3016,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":3013,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3007,"title":{},"body":{"index.html":{}}}],["text",{"_index":382,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.charat(0).touppercase",{"_index":2560,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["text.slice(1",{"_index":2561,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["thereto",{"_index":1688,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["therfore",{"_index":2211,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third",{"_index":2031,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["third‑party",{"_index":2178,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["this.addedcontact.emit(newcontact",{"_index":864,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.addsubtask",{"_index":2421,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.animationdirection",{"_index":1285,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.animationstate",{"_index":747,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.auth.currentuser",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.authservice.getcurrentuser",{"_index":953,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["this.authservice.isloggedin",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{},"components/HeaderComponent.html":{},"components/SidebarComponent.html":{}}}],["this.authservice.signin(email",{"_index":1864,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signinasguest",{"_index":1868,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signoutuser",{"_index":1521,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.authservice.signup(email",{"_index":2286,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.awaitfeedback",{"_index":2833,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitfeedback.push(task",{"_index":2859,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.awaitingfeedbackcount",{"_index":1418,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.backgroundvisible",{"_index":1289,"title":{},"body":{"components/ContactsComponent.html":{},"injectables/OverlayManager.html":{}}}],["this.backtolist.emit",{"_index":758,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.cancelsubtaskedit",{"_index":2454,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.categories",{"_index":374,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.categories.find(c",{"_index":384,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.changetaskstatus.emit",{"_index":2695,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.checkiftouchdevice",{"_index":1846,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.clearinputs",{"_index":865,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closedotsmenu.emit",{"_index":2689,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.closeoverlay.emit('closed",{"_index":855,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.closetaskdetails.emit('close",{"_index":2756,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.contact",{"_index":738,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contact?.id",{"_index":752,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactform",{"_index":839,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.patchvalue",{"_index":848,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.reset",{"_index":854,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.valid",{"_index":856,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactform.value",{"_index":857,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactlist",{"_index":2693,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactlist.push(contact",{"_index":2708,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contacts.emit(this.contactlist",{"_index":2709,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.contactselected.emit",{"_index":964,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.addcontact(contact",{"_index":863,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.addcontact(newcontact",{"_index":2289,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.contactservice.clearselection",{"_index":754,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.deletecontact(this.contact.id",{"_index":753,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.deletecontact(this.contacttoedit.id",{"_index":867,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.editcontact$.subscribe(this.getdatatoedit",{"_index":846,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.getcontactbyid(contactid",{"_index":2707,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.contactservice.getcontactcolor(contact.name",{"_index":1160,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getcontactcolor(name",{"_index":757,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.getcontacts().subscribe",{"_index":943,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.getinitials(contact.name",{"_index":1159,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.contactservice.getinitials(name",{"_index":755,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["this.contactservice.hideform",{"_index":853,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactservice.selectcontact(contact",{"_index":963,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.selectcontact(newcontact",{"_index":1282,"title":{},"body":{"components/ContactsComponent.html":{},"components/SignupComponent.html":{}}}],["this.contactservice.selectedcontact$.subscribe",{"_index":958,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showaddform",{"_index":966,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactservice.showeditform(this.contact",{"_index":751,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.contactservice.showform",{"_index":1279,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.contactservice.updatecontact(this.contacttoedit.id",{"_index":862,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactssubscription",{"_index":942,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contactssubscription.unsubscribe",{"_index":961,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.contacttoedit",{"_index":847,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.email",{"_index":850,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.name",{"_index":849,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit.phone",{"_index":851,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contacttoedit?.id",{"_index":861,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.contactvisible",{"_index":742,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.counttasksbystatus",{"_index":1447,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.counttasksbystatus(tasks",{"_index":1446,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.currentuser",{"_index":954,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentuseremail",{"_index":946,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.currentusersubject.asobservable",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.currentusersubject.next(user",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.done",{"_index":2834,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.done.push(task",{"_index":2860,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.donecount",{"_index":1419,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.editcontactsubject.asobservable",{"_index":466,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(contact",{"_index":568,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubject.next(null",{"_index":572,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.editcontactsubscription",{"_index":845,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editcontactsubscription.unsubscribe",{"_index":852,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["this.editingsubtaskid",{"_index":2411,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.editingsubtasktext",{"_index":2413,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.editingsubtasktext.trim",{"_index":2452,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.editingtask",{"_index":2554,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.editsubtask(this.editingsubtaskid",{"_index":2453,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.edittask.emit(\"edit",{"_index":2759,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.elementref.nativeelement.queryselector",{"_index":723,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.elementref.nativeelement.queryselector('.mobile",{"_index":721,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.emptyarrays",{"_index":2855,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.errormessage",{"_index":1861,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.fb.group",{"_index":1852,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.firstload",{"_index":746,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.form.group",{"_index":840,"title":{},"body":{"components/ContactFormComponent.html":{},"components/SignupComponent.html":{}}}],["this.formatdate(date",{"_index":2541,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.formatdate(date.todate",{"_index":2540,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcleanjson(updatedcontact)).catch((err",{"_index":538,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcleanjson(updatedsubtask)).catch(console.error",{"_index":2519,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcleanjson(updatedtask)).catch(console.error",{"_index":2513,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getcompletedsubtaskscount(subtasklist",{"_index":2700,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactlist",{"_index":2690,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.getcontactsref",{"_index":511,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getcurrentuser",{"_index":952,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.getdatevalue(a.date",{"_index":2847,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.getdatevalue(b.date",{"_index":2849,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.geterrormessage(createerror.code",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.geterrormessage(error.code",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["this.getgreeting",{"_index":1436,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.getpreviousurl",{"_index":1942,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.getsinglecontactsref(contactid",{"_index":587,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsinglecontactsref(docid",{"_index":536,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.getsingletaskref(docid",{"_index":2512,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.getsubtasksref(colid",{"_index":2509,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.gettasksref",{"_index":2504,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["this.greeting",{"_index":1435,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.greetingstate",{"_index":1440,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.groupbyinitial(contacts",{"_index":945,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.groupedcontacts",{"_index":944,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.history",{"_index":1939,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.length",{"_index":1936,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.push(event.urlafterredirects",{"_index":1938,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history.shift",{"_index":1937,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.history[this.history.length",{"_index":1940,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.initializeanimation",{"_index":1847,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.initializeform",{"_index":1845,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.inprogress",{"_index":2832,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogress.push(task",{"_index":2858,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.inprogresscount",{"_index":1417,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isdeleting",{"_index":740,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.isdotsmenuopen",{"_index":2688,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.isediting",{"_index":741,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.isfirestoretimestamp(t.date",{"_index":1454,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.isloading",{"_index":1860,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.ismobile",{"_index":731,"title":{},"body":{"components/ContactDetailsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.istouchdevice",{"_index":1848,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loadassignedcontacts",{"_index":2753,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.loadsubtasks",{"_index":2754,"title":{},"body":{"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.loginform",{"_index":1851,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.get(field",{"_index":1869,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.invalid",{"_index":1858,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.markallastouched",{"_index":1859,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.value",{"_index":1862,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.logostate",{"_index":1856,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["this.menuopen",{"_index":726,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["this.navigationservice.navigateback",{"_index":1539,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["this.nextdeadlinecount",{"_index":1466,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextdeadlinedate",{"_index":1465,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.nextsubtaskid",{"_index":2401,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.nocontactvisible.emit",{"_index":744,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.onclose",{"_index":866,"title":{},"body":{"components/ContactFormComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.oncontactselect(matchedcontact",{"_index":950,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.oncontactselected",{"_index":1283,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.opendotsmenu.emit(this.task.id",{"_index":2704,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.openedmenutaskid",{"_index":2703,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.overlayvisible",{"_index":1997,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.pageloaded",{"_index":1855,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.passwordsmatchvalidator",{"_index":2278,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.events",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["this.router.navigate(['/login",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["this.router.navigate(['/summary",{"_index":1866,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl",{"_index":1944,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/SignupComponent.html":{}}}],["this.router.navigatebyurl(previousurl",{"_index":1943,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["this.savenewcontact(name",{"_index":2287,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.savesubtaskedit",{"_index":2460,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.selectedcategory",{"_index":364,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.selectedcontact",{"_index":959,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontact?.id",{"_index":965,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectedcontacts",{"_index":1151,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.findindex(c",{"_index":1153,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.push(contact",{"_index":1155,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.some(c",{"_index":1157,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontacts.splice(index",{"_index":1156,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.selectedcontactsubject.asobservable",{"_index":457,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(contact",{"_index":559,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedcontactsubject.next(null",{"_index":561,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.selectedtask",{"_index":2000,"title":{},"body":{"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["this.selectionsubscription",{"_index":957,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.selectionsubscription.unsubscribe",{"_index":962,"title":{},"body":{"components/ContactListComponent.html":{}}}],["this.setanimationdirection(window.innerwidth",{"_index":1280,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showaddoredittask",{"_index":1999,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.showcategorydropdown",{"_index":370,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["this.showcontactdetails",{"_index":1291,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showcontactdropdown",{"_index":1152,"title":{},"body":{"injectables/ContactManager.html":{}}}],["this.showcontent",{"_index":2755,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.showform",{"_index":1278,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.showformsubject.asobservable",{"_index":461,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(false",{"_index":571,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showformsubject.next(true",{"_index":564,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["this.showgreeting",{"_index":1439,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.showheaderandsidebar",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["this.showsubtaskconfirmation",{"_index":2408,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.showtaskdetails",{"_index":1998,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["this.signupform",{"_index":2270,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.errors?.['passwordsdontmatch",{"_index":2292,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('password')?.dirty",{"_index":2298,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('password')?.touched",{"_index":2295,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get(field",{"_index":2290,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.invalid",{"_index":2282,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.markallastouched",{"_index":2283,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.value",{"_index":2285,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.sorttasksbyduedate(this.awaitfeedback",{"_index":2867,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.done",{"_index":2868,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.inprogress",{"_index":2866,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.sorttasksbyduedate(this.todo",{"_index":2865,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.startmessageanimation",{"_index":1284,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.subscription",{"_index":749,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.subscription.unsubscribe",{"_index":750,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["this.subtaskchanged.emit(this.subtasks",{"_index":2762,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.subtaskinput",{"_index":2404,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtaskinput.trim",{"_index":2420,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasks",{"_index":2399,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["this.subtasks.filter(subtask",{"_index":2431,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasks.find(s",{"_index":2436,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasks.push(newsubtask",{"_index":2429,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["this.subtasksbytaskid",{"_index":2835,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[selectedtask.id",{"_index":2874,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[task.id",{"_index":2871,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.subtasksbytaskid[taskid",{"_index":2872,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.successmessage",{"_index":2284,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.task.assignedto",{"_index":2706,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task.id",{"_index":2694,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.assignedto?.length",{"_index":2705,"title":{},"body":{"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["this.task?.id",{"_index":2764,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.tasklist",{"_index":1445,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskselected.emit(this.selectedtask",{"_index":2702,"title":{},"body":{"components/TaskComponent.html":{}}}],["this.taskservice.convertdate(date",{"_index":2757,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.deletetask(this.task.id",{"_index":2760,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.getsubtasks(task.id).subscribe((subtasks",{"_index":2870,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.taskservice.getsubtasks(this.task.id).subscribe((subtasks",{"_index":2765,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.gettasks().subscribe((tasks",{"_index":1444,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["this.taskservice.seteditingtask(this.task",{"_index":2758,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatesubtask(this.task.id",{"_index":2761,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["this.taskservice.updatetask(task.id",{"_index":1365,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.taskservice.updatetask(taskid",{"_index":1377,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["this.toastanimationstate",{"_index":1287,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.toastmessagevisible",{"_index":1286,"title":{},"body":{"components/ContactsComponent.html":{}}}],["this.todo",{"_index":2831,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todo.push(task",{"_index":2856,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.todocount",{"_index":1416,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["this.unsubtask",{"_index":2854,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.unsubtask.unsubscribe",{"_index":2869,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["this.username",{"_index":1430,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["threaten",{"_index":1726,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["threshold",{"_index":1369,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["through",{"_index":2191,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["thumb",{"_index":1089,"title":{},"body":{"components/ContactListComponent.html":{}}}],["time",{"_index":1421,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["timestamp",{"_index":2468,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["title",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["title]=\"getremainingcontactnames(contactlist.slice(4",{"_index":2715,"title":{},"body":{"components/TaskComponent.html":{}}}],["toast",{"_index":1232,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastanimationstate",{"_index":1207,"title":{},"body":{"components/ContactsComponent.html":{}}}],["toastmessagevisible",{"_index":1208,"title":{},"body":{"components/ContactsComponent.html":{}}}],["todate",{"_index":1381,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["todo",{"_index":2774,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["todocount",{"_index":1400,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["todolist",{"_index":1349,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["toggle",{"_index":1511,"title":{},"body":{"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskDetailsComponent.html":{}}}],["togglecategorydropdown",{"_index":376,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{}}}],["togglecontactdropdown",{"_index":1126,"title":{},"body":{"injectables/ContactManager.html":{}}}],["toggled",{"_index":2735,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["togglemenu",{"_index":1484,"title":{},"body":{"components/HeaderComponent.html":{}}}],["togglemenu(event",{"_index":1505,"title":{},"body":{"components/HeaderComponent.html":{}}}],["togglemobilemenu",{"_index":617,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["toggles",{"_index":375,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"injectables/ContactManager.html":{},"components/HeaderComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["togglesubtaskcompletion",{"_index":2572,"title":{},"body":{"injectables/SubtaskManager.html":{}}}],["togglesubtaskcompletion(id",{"_index":2463,"title":{},"body":{"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["tokens",{"_index":2195,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["tool",{"_index":1525,"title":{},"body":{"components/HeaderComponent.html":{},"components/HelpComponent.html":{}}}],["tools",{"_index":2992,"title":{},"body":{"index.html":{}}}],["top",{"_index":993,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/SignupComponent.html":{}}}],["total",{"_index":1413,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["totaltaskcount",{"_index":1415,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["touch",{"_index":1808,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{}}}],["touched",{"_index":2293,"title":{},"body":{"components/SignupComponent.html":{}}}],["track",{"_index":1088,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["trackby",{"_index":2825,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid",{"_index":2790,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["trackbytaskid(index",{"_index":2823,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["tracking",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/UserData.html":{}}}],["tracks",{"_index":1517,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["trademarks",{"_index":1716,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["transactions",{"_index":2161,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfer",{"_index":2144,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transferarrayitem",{"_index":1342,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["transferred",{"_index":2164,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transfers",{"_index":2126,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transform",{"_index":706,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SignupComponent.html":{}}}],["transition",{"_index":696,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["transition(':enter",{"_index":705,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["transition(':increment",{"_index":713,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["transition(':leave",{"_index":716,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["transition('bottom",{"_index":1277,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('right",{"_index":1274,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transition('start",{"_index":1389,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["transition('void",{"_index":1272,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transitions",{"_index":1257,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatex(0",{"_index":711,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatex(100",{"_index":707,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["translatey",{"_index":2352,"title":{},"body":{"components/SignupComponent.html":{}}}],["translatey(0",{"_index":1276,"title":{},"body":{"components/ContactsComponent.html":{}}}],["translatey(100",{"_index":1275,"title":{},"body":{"components/ContactsComponent.html":{}}}],["transmission",{"_index":2025,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["transparent",{"_index":1002,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["trends",{"_index":2131,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["trigger",{"_index":694,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeout",{"_index":1903,"title":{},"body":{"components/LoginHeaderComponent.html":{}}}],["trigger('fadeoutgreeting",{"_index":1386,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["trigger('fadeoutwrapper",{"_index":1843,"title":{},"body":{"components/LoginComponent.html":{}}}],["trigger('slideinfromright",{"_index":704,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["trigger('slideinout",{"_index":714,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{}}}],["triggered",{"_index":634,"title":{},"body":{"components/ContactDetailsComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{}}}],["triggering",{"_index":1509,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["triggers",{"_index":562,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["trimming",{"_index":1923,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["true",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"interfaces/FirestoreTimestamp.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["tslib",{"_index":2970,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1186,"title":{},"body":{"injectables/ContactService.html":{}}}],["type",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"interfaces/Subtask-1.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":444,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{},"injectables/TaskListManager.html":{}}}],["types",{"_index":2071,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["ui",{"_index":557,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{}}}],["uid",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["unauthorized",{"_index":1702,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["unbekannt",{"_index":763,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{}}}],["unbekannter",{"_index":2862,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["undefined",{"_index":545,"title":{},"body":{"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["under",{"_index":1616,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["undergoes",{"_index":2162,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["underline",{"_index":2375,"title":{},"body":{"components/SignupComponent.html":{}}}],["understand",{"_index":2203,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unique",{"_index":415,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{}}}],["unit",{"_index":3006,"title":{},"body":{"index.html":{}}}],["unless",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"components/PrivacyPolicyComponent.html":{}}}],["unset",{"_index":2367,"title":{},"body":{"components/SignupComponent.html":{}}}],["unsolicited",{"_index":2222,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribe",{"_index":512,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["unsubscribed",{"_index":2125,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unsubscribes",{"_index":663,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"injectables/TaskListManager.html":{}}}],["unsubtask",{"_index":2775,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["until",{"_index":2102,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["unused",{"_index":1897,"title":{},"body":{"components/LoginHeaderComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["up",{"_index":810,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactsComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/SignupComponent.html":{}}}],["upcoming",{"_index":2616,"title":{},"body":{"components/SummaryComponent.html":{}}}],["update",{"_index":532,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["updatecallback",{"_index":1333,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatecontact",{"_index":1168,"title":{},"body":{"injectables/ContactService.html":{}}}],["updatecontact(docid",{"_index":535,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updated",{"_index":534,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{}}}],["updated.assignedto",{"_index":2532,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.category",{"_index":2533,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.date",{"_index":2529,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.description",{"_index":2528,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.iscompleted",{"_index":2534,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.priority",{"_index":2530,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.status",{"_index":2531,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updated.title",{"_index":2527,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedcontact",{"_index":533,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.email",{"_index":553,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.name",{"_index":552,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedcontact.phone",{"_index":554,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["updatedoc",{"_index":424,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedoc(docref",{"_index":537,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedsubtask",{"_index":2515,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask",{"_index":1364,"title":{},"body":{"injectables/DragDropManager.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatedtask).catch((error",{"_index":1366,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updatedtask).then",{"_index":1378,"title":{},"body":{"injectables/DragDropManager.html":{}}}],["updateprofile",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updateprofile(user",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["updates",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactFormComponent.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{},"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["updatesubtask",{"_index":2880,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatesubtask(taskid",{"_index":2516,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetask",{"_index":2881,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(docid",{"_index":2511,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["updatetasklists",{"_index":2791,"title":{},"body":{"injectables/TaskListManager.html":{}}}],["updating",{"_index":547,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/DragDropManager.html":{},"components/TaskDetailsComponent.html":{}}}],["uppercase",{"_index":1187,"title":{},"body":{"injectables/ContactService.html":{},"components/SignupComponent.html":{}}}],["urgent",{"_index":2476,"title":{},"body":{"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["url",{"_index":1916,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["url(\"../../../../public/assets/img/svg/add",{"_index":1027,"title":{},"body":{"components/ContactListComponent.html":{}}}],["url(\"/assets/img/icons/checkbox",{"_index":2362,"title":{},"body":{"components/SignupComponent.html":{}}}],["url(\"/assets/img/icons/checkbox.png",{"_index":2359,"title":{},"body":{"components/SignupComponent.html":{}}}],["urls",{"_index":1914,"title":{},"body":{"injectables/NavigationHistoryService.html":{}}}],["usage",{"_index":1581,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["use",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{},"index.html":{}}}],["used",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["user",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"components/ContactListComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask-1.html":{},"components/SummaryComponent.html":{},"interfaces/Task.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskService.html":{},"interfaces/UserData.html":{}}}],["user's",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ContactListComponent.html":{},"components/LoginComponent.html":{},"components/SidebarComponent.html":{},"interfaces/UserData.html":{}}}],["user.email",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user.uid",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["user?.displayname",{"_index":955,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["user?.email",{"_index":956,"title":{},"body":{"components/ContactListComponent.html":{},"components/HeaderComponent.html":{}}}],["usercredential",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["usercredential.user",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdata",{"_index":279,"title":{"interfaces/UserData.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["userdata.displayname",{"_index":1432,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdata?.displayname?.trim",{"_index":1431,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["userdoc",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.data",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["userdoc.exists",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["username",{"_index":1393,"title":{},"body":{"interfaces/FirestoreTimestamp.html":{},"components/SummaryComponent.html":{}}}],["users",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/UserData.html":{}}}],["uses",{"_index":2187,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{}}}],["usevalue",{"_index":3052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":820,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["ux",{"_index":1981,"title":{},"body":{"injectables/OverlayManager.html":{}}}],["valid",{"_index":1875,"title":{},"body":{"components/LoginComponent.html":{},"components/SignupComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["validate",{"_index":438,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["validates",{"_index":818,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validation",{"_index":439,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validationerrors",{"_index":428,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":431,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["validators",{"_index":836,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.email",{"_index":842,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.min(10",{"_index":843,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.minlength(2",{"_index":2271,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.minlength(6",{"_index":1853,"title":{},"body":{"components/LoginComponent.html":{}}}],["validators.minlength(8",{"_index":2272,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^(?=.*[a",{"_index":2273,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.pattern(/^\\d",{"_index":844,"title":{},"body":{"components/ContactFormComponent.html":{}}}],["validators.required",{"_index":841,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LoginComponent.html":{},"components/SignupComponent.html":{}}}],["validators.requiredtrue",{"_index":2277,"title":{},"body":{"components/SignupComponent.html":{}}}],["validcontacts",{"_index":967,"title":{},"body":{"components/ContactListComponent.html":{}}}],["validcontacts.reduce((groups",{"_index":969,"title":{},"body":{"components/ContactListComponent.html":{}}}],["value",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{},"miscellaneous/variables.html":{}}}],["value.trim().length",{"_index":445,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{}}}],["values",{"_index":912,"title":{},"body":{"components/ContactListComponent.html":{},"injectables/OverlayManager.html":{},"components/TaskComponent.html":{}}}],["var",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["variable",{"_index":2918,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1970,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OverlayManager.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":2079,"title":{},"body":{"components/PrivacyPolicyComponent.html":{},"index.html":{},"properties.html":{}}}],["via",{"_index":830,"title":{},"body":{"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/DragDropManager.html":{},"components/PrivacyPolicyComponent.html":{}}}],["view",{"_index":649,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{}}}],["viewchild",{"_index":1520,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild('menu",{"_index":1518,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewing",{"_index":453,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"injectables/OverlayManager.html":{}}}],["viewport",{"_index":1514,"title":{},"body":{"components/HeaderComponent.html":{}}}],["views",{"_index":1261,"title":{},"body":{"components/ContactsComponent.html":{}}}],["viktor",{"_index":1673,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["visibility",{"_index":368,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["visible",{"_index":1263,"title":{},"body":{"components/ContactsComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/TaskComponent.html":{}}}],["visit",{"_index":1823,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyPolicyComponent.html":{},"index.html":{}}}],["visited",{"_index":1913,"title":{},"body":{"injectables/NavigationHistoryService.html":{},"components/PrivacyPolicyComponent.html":{}}}],["visual",{"_index":470,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"components/HelpComponent.html":{}}}],["visualize",{"_index":1564,"title":{},"body":{"components/HelpComponent.html":{}}}],["void",{"_index":367,"title":{},"body":{"interfaces/Category.html":{},"injectables/CategoryManager.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"components/ContactFormComponent.html":{},"components/ContactListComponent.html":{},"injectables/ContactManager.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"injectables/NavigationHistoryService.html":{},"injectables/OverlayManager.html":{},"components/PrivacyPolicyComponent.html":{},"components/SignupComponent.html":{},"interfaces/Subtask.html":{},"injectables/SubtaskManager.html":{},"components/SummaryComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"injectables/TaskService.html":{}}}],["vulnerabilities",{"_index":2028,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["waldingstraße",{"_index":1666,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranties",{"_index":1732,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["warranty",{"_index":1736,"title":{},"body":{"components/LegalNoticeComponent.html":{}}}],["wasempty",{"_index":737,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["we'll",{"_index":1543,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we're",{"_index":1648,"title":{},"body":{"components/HelpComponent.html":{}}}],["we\\'ll",{"_index":1650,"title":{},"body":{"components/HelpComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["we\\'re",{"_index":1654,"title":{},"body":{"components/HelpComponent.html":{}}}],["weak",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["web",{"_index":1552,"title":{},"body":{"components/HelpComponent.html":{},"components/LegalNoticeComponent.html":{},"components/PrivacyPolicyComponent.html":{}}}],["webkit",{"_index":1087,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["website",{"_index":2053,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["websites",{"_index":2177,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["weight",{"_index":1041,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{}}}],["welcome",{"_index":1540,"title":{},"body":{"components/HelpComponent.html":{},"components/SummaryComponent.html":{}}}],["whenever",{"_index":2988,"title":{},"body":{"index.html":{}}}],["whether",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"components/ContactDetailsComponent.html":{},"injectables/ContactService.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LegalNoticeComponent.html":{},"components/LoginComponent.html":{},"components/LoginHeaderComponent.html":{},"components/PrivacyPolicyComponent.html":{},"components/SidebarComponent.html":{},"components/SignupComponent.html":{},"components/TaskComponent.html":{},"components/TaskDetailsComponent.html":{},"injectables/TaskListManager.html":{},"interfaces/UserData.html":{}}}],["white",{"_index":1077,"title":{},"body":{"components/ContactListComponent.html":{}}}],["whitespace",{"_index":436,"title":{},"body":{"interfaces/Contact.html":{},"injectables/ContactService.html":{},"miscellaneous/functions.html":{}}}],["whose",{"_index":2731,"title":{},"body":{"components/TaskDetailsComponent.html":{}}}],["width",{"_index":729,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactListComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{},"components/SignupComponent.html":{}}}],["window",{"_index":643,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{}}}],["window).innerwidth",{"_index":730,"title":{},"body":{"components/ContactDetailsComponent.html":{}}}],["window.addeventlistener('resize",{"_index":1281,"title":{},"body":{"components/ContactsComponent.html":{}}}],["window.innerwidth",{"_index":686,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/ContactsComponent.html":{},"injectables/DragDropManager.html":{},"components/HeaderComponent.html":{},"injectables/OverlayManager.html":{}}}],["window:resize",{"_index":623,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["window:resize(event",{"_index":641,"title":{},"body":{"components/ContactDetailsComponent.html":{},"components/HeaderComponent.html":{}}}],["within",{"_index":1610,"title":{},"body":{"components/HelpComponent.html":{},"injectables/NavigationHistoryService.html":{}}}],["without",{"_index":805,"title":{},"body":{"components/ContactFormComponent.html":{},"components/LegalNoticeComponent.html":{}}}],["words",{"_index":2036,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["work",{"_index":1565,"title":{},"body":{"components/HelpComponent.html":{}}}],["wrap",{"_index":1056,"title":{},"body":{"components/ContactListComponent.html":{}}}],["wrapper",{"_index":2310,"title":{},"body":{"components/SignupComponent.html":{}}}],["wrong",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserData.html":{}}}],["wrongdoing",{"_index":2171,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["x",{"_index":2329,"title":{},"body":{"components/SignupComponent.html":{}}}],["y",{"_index":990,"title":{},"body":{"components/ContactListComponent.html":{},"components/SignupComponent.html":{},"components/SummaryComponent.html":{}}}],["year",{"_index":2550,"title":{},"body":{"interfaces/Subtask-1.html":{},"interfaces/Task.html":{},"injectables/TaskService.html":{}}}],["yes",{"_index":652,"title":{},"body":{"components/ContactDetailsComponent.html":{},"injectables/ContactService.html":{},"components/TaskDetailsComponent.html":{}}}],["you'll",{"_index":1599,"title":{},"body":{"components/HelpComponent.html":{}}}],["you've",{"_index":1613,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ll",{"_index":1651,"title":{},"body":{"components/HelpComponent.html":{}}}],["you\\'ve",{"_index":1652,"title":{},"body":{"components/HelpComponent.html":{}}}],["yourself",{"_index":1609,"title":{},"body":{"components/HelpComponent.html":{}}}],["z",{"_index":1098,"title":{},"body":{"components/ContactListComponent.html":{}}}],["z])(?=.*\\d)(?=.*[!@#$%^&*()_",{"_index":2274,"title":{},"body":{"components/SignupComponent.html":{}}}],["zindex",{"_index":3055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zip/postal",{"_index":2077,"title":{},"body":{"components/PrivacyPolicyComponent.html":{}}}],["zone.js",{"_index":2972,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                SidebarComponent\n                                HeaderComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                showHeaderAndSidebar\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:35\n                            \n                        \n\n                \n                    \n                            Subscribes to router events to determine if the current route\nrequires hiding the header and sidebar. Also initializes navigation tracking.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to store navigation history.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's router for subscribing to route changes.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        showHeaderAndSidebar\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:30\n                        \n                    \n\n            \n                \n                    Controls whether the header and sidebar should be displayed.\nHidden on specific routes like login or signup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'join'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:35\n                        \n                    \n\n            \n                \n                    The title of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet, Router, NavigationEnd } from '@angular/router';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { HeaderComponent } from './header/header.component';\nimport { CommonModule } from '@angular/common';\nimport { NavigationHistoryService } from './services/navigation-history.service';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, SidebarComponent, HeaderComponent, CommonModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n\n  /**\n   * Controls whether the header and sidebar should be displayed.\n   * Hidden on specific routes like login or signup.\n   */\n  showHeaderAndSidebar = true;\n\n  /**\n   * The title of the application.\n   */\n  title = 'join';\n\n  /**\n   * Subscribes to router events to determine if the current route\n   * requires hiding the header and sidebar. Also initializes navigation tracking.\n   *\n   * @param navigationService - Service to store navigation history.\n   * @param router - Angular's router for subscribing to route changes.\n   */\n  constructor(\n    private navigationService: NavigationHistoryService,\n    private router: Router\n  ) {\n    this.router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        this.showHeaderAndSidebar = !['/login', '/', '/signup'].includes(\n          event.urlAfterRedirects\n        );\n      });\n  }\n}\n\n\n    \n\n    \n        \n  \n  \n    \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/services/auth.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Route guard that prevents access to certain routes\nunless the user is authenticated.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.guard.ts:12\n                            \n                        \n\n                \n                    \n                            Constructs the AuthGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to check the user's authentication status\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.guard.ts:30\n                        \n                    \n\n\n            \n                \n                        Determines whether a route can be activated.\nIf the user is not authenticated, redirects to the login page.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is logged in, otherwise false\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n/**\n * Route guard that prevents access to certain routes\n * unless the user is authenticated.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  /**\n   * Constructs the AuthGuard.\n   * @param authService - Service to check the user's authentication status\n   * @param router - Angular Router used for navigation\n   */\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  /**\n   * Determines whether a route can be activated.\n   * If the user is not authenticated, redirects to the login page.\n   *\n   * @returns True if the user is logged in, otherwise false\n   */\n  canActivate(): boolean {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication service for handling user registration, login, logout,\nguest access, profile updates, account deletion, and state tracking.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentUser$\n                            \n                            \n                                    Private\n                                currentUserSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                getCurrentUser\n                            \n                            \n                                    Async\n                                getCurrentUserData\n                            \n                            \n                                    Private\n                                getErrorMessage\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInAsGuest\n                            \n                            \n                                    Async\n                                signOutUser\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: Auth, firestore: Firestore, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.service.ts:45\n                            \n                        \n\n                \n                    \n                            Initializes the AuthService and subscribes to authentication state changes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Auth instance\n\n\n                                                        \n                                                \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFirebase Firestore instance\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router for navigation\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAccount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Deletes the currently authenticated user account.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Gets the current authenticated Firebase user.\n\n\n                        \n                            Returns :     User | null\n\n                        \n                            \n                                The current user or null if not logged in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCurrentUserData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Retrieves the current user's data from Firestore.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The user's Firestore data or null if not found\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorMessage(errorCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Maps Firebase Auth error codes to human-readable error messages.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                errorCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFirebase Auth error code\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string describing the error\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Checks whether a user is currently authenticated.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a user is signed in, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Signs in a user with email and password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signInAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInAsGuest()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Signs in as a guest user. If guest user does not exist, it will be created.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Signs out the currently authenticated user and redirects to the login page.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(email: string, password: string, displayName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Registers a new user with email, password, and display name.\nStores user data in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's email address\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's password\n\n\n                                            \n                                        \n                                        \n                                                displayName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's display name\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A success status and optional error message\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentUser$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentUserSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:45\n                        \n                    \n\n            \n                \n                    Observable emitting the current authenticated Firebase user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category.html":{"url":"interfaces/Category.html","title":"interface - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryManager {\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  \n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryManager.html":{"url":"injectables/CategoryManager.html","title":"injectable - CategoryManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/category-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                CategoryManager handles all category-related operations for the AddTaskComponent.\nThis includes category selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                categories\n                            \n                            \n                                    Private\n                                selectedCategory\n                            \n                            \n                                    Private\n                                showCategoryDropdown\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getCategories\n                            \n                            \n                                getCategoryColor\n                            \n                            \n                                getCategoryText\n                            \n                            \n                                getSelectedCategory\n                            \n                            \n                                getShowCategoryDropdown\n                            \n                            \n                                hasSelectedCategory\n                            \n                            \n                                selectCategory\n                            \n                            \n                                setSelectedCategory\n                            \n                            \n                                setShowCategoryDropdown\n                            \n                            \n                                toggleCategoryDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:111\n                        \n                    \n\n\n            \n                \n                        Clears the selected category and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategories\n                        \n                    \n                \n            \n            \n                \ngetCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Gets all available categories\n\n\n                        \n                            Returns :         Category[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryColor\n                        \n                    \n                \n            \n            \n                \ngetCategoryColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:92\n                        \n                    \n\n\n            \n                \n                        Returns the color for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category color or default color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryText\n                        \n                    \n                \n            \n            \n                \ngetCategoryText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:80\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for the selected category.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The category label or default text.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedCategory\n                        \n                    \n                \n            \n            \n                \ngetSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:28\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected category\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:42\n                        \n                    \n\n\n            \n                \n                        Gets the category dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSelectedCategory\n                        \n                    \n                \n            \n            \n                \nhasSelectedCategory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:104\n                        \n                    \n\n\n            \n                \n                        Checks if a category is currently selected.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if a category is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectCategory\n                        \n                    \n                \n            \n            \n                \nselectCategory(category: Category)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:71\n                        \n                    \n\n\n            \n                \n                        Selects a category and closes the dropdown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            Category\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe category to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedCategory\n                        \n                    \n                \n            \n            \n                \nsetSelectedCategory(category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:35\n                        \n                    \n\n\n            \n                \n                        Sets the selected category\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowCategoryDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowCategoryDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:49\n                        \n                    \n\n\n            \n                \n                        Sets the category dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleCategoryDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleCategoryDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/category-manager.ts:63\n                        \n                    \n\n\n            \n                \n                        Toggles the category dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showCategoryDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/category-manager.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Category {\n  value: string;\n  label: string;\n  color: string;\n}\n\n/**\n * CategoryManager handles all category-related operations for the AddTaskComponent.\n * This includes category selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryManager {\n  private selectedCategory: string = '';\n  private showCategoryDropdown: boolean = false;\n  \n  private categories: Category[] = [\n    { value: 'technical', label: 'Technical Task', color: '#1FD7C1' },\n    { value: 'user story', label: 'User Story', color: '#0038FF' }\n  ];\n\n  /**\n   * Gets the currently selected category\n   */\n  getSelectedCategory(): string {\n    return this.selectedCategory;\n  }\n\n  /**\n   * Sets the selected category\n   */\n  setSelectedCategory(category: string): void {\n    this.selectedCategory = category;\n  }\n\n  /**\n   * Gets the category dropdown visibility state\n   */\n  getShowCategoryDropdown(): boolean {\n    return this.showCategoryDropdown;\n  }\n\n  /**\n   * Sets the category dropdown visibility state\n   */\n  setShowCategoryDropdown(value: boolean): void {\n    this.showCategoryDropdown = value;\n  }\n\n  /**\n   * Gets all available categories\n   */\n  getCategories(): Category[] {\n    return this.categories;\n  }\n\n  /**\n   * Toggles the category dropdown visibility.\n   */\n  toggleCategoryDropdown(): void {\n    this.showCategoryDropdown = !this.showCategoryDropdown;\n  }\n\n  /**\n   * Selects a category and closes the dropdown.\n   * @param category - The category to select.\n   */\n  selectCategory(category: Category): void {\n    this.selectedCategory = category.value;\n    this.showCategoryDropdown = false;\n  }\n\n  /**\n   * Returns the text to display for the selected category.\n   * @returns The category label or default text.\n   */\n  getCategoryText(): string {\n    if (!this.selectedCategory) {\n      return 'Select task category';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.label : 'Select task category';\n  }\n\n  /**\n   * Returns the color for the selected category.\n   * @returns The category color or default color.\n   */\n  getCategoryColor(): string {\n    if (!this.selectedCategory) {\n      return '#ccc';\n    }\n    const category = this.categories.find(c => c.value === this.selectedCategory);\n    return category ? category.color : '#ccc';\n  }\n\n  /**\n   * Checks if a category is currently selected.\n   * @returns True if a category is selected, false otherwise.\n   */\n  hasSelectedCategory(): boolean {\n    return !!this.selectedCategory;\n  }\n\n  /**\n   * Clears the selected category and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedCategory = '';\n    this.showCategoryDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact.html":{"url":"interfaces/Contact.html","title":"interface - Contact","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a contact.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email address of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Unique identifier (automatically assigned by Firestore)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Full name of the contact\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional phone number of the contact\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n * Updates an existing contact in Firestore.\n *\n * @param docId - The Firestore document ID of the contact to update.\n * @param updatedContact - The updated contact data.\n */\nasync updateContact(docId: string, updatedContact: Contact): Promise {\n  let docRef = this.getSingleContactsRef(docId);\n  await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n    console.error(err);\n  });\n}\n\n/**\n * Returns a plain JSON object with only the allowed contact fields.\n * This is used to avoid including undefined or extra properties when updating Firestore.\n *\n * @param updatedContact - The contact object to sanitize.\n * @returns A JSON object containing name, email, and phone.\n */\ngetCleanJson(updatedContact: Contact): Partial {\n  return {\n    name: updatedContact.name,\n    email: updatedContact.email,\n    phone: updatedContact.phone,\n  };\n}\n\n/**\n * Emits a contact to the selected contact observable.\n * Used to show the contact details in the UI.\n *\n * @param contact - The contact to select.\n */\nselectContact(contact: Contact): void {\n  this.selectedContactSubject.next(contact);\n}\n\n/**\n * Clears the currently selected contact.\n */\nclearSelection(): void {\n  this.selectedContactSubject.next(null);\n}\n\n/**\n * Triggers the display of the add contact form.\n */\nshowAddForm(): void {\n  this.showFormSubject.next(true);\n}\n\n/**\n * Triggers the display of the edit contact form with a prefilled contact.\n *\n * @param contact - The contact to edit.\n */\nshowEditForm(contact: Contact): void {\n  this.editContactSubject.next(contact);\n  this.showFormSubject.next(true);\n}\n\n/**\n * Hides the contact form and clears the edit state.\n */\nhideForm(): void {\n  this.showFormSubject.next(false);\n  this.editContactSubject.next(null);\n}\n\n/**\n * Deletes a contact from Firestore.\n *\n * @param docId - The Firestore document ID of the contact to delete.\n */\nasync deleteContact(docId: string): Promise {\n  await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n    console.log(err);\n  });\n}\n\n/**\n * Generates a consistent avatar color for a contact based on their name.\n *\n * @param contactName - The contact’s name used to calculate a hash.\n * @returns A hexadecimal color string from the avatarColors array.\n */\ngetContactColor(contactName: string): string {\n  let hash = 0;\n  for (let i = 0; i  {\n  const contactRef = this.getSingleContactsRef(contactId);\n  return getDoc(contactRef).then(snapshot => {\n    if (snapshot.exists()) {\n      return { id: snapshot.id, ...snapshot.data() } as Contact;\n    }\n    return null;\n  });\n}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactDetailsComponent.html":{"url":"components/ContactDetailsComponent.html","title":"component - ContactDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-details/contact-details.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-details\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contact-details.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contact-details.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                animationState\n                            \n                            \n                                    Optional\n                                contact\n                            \n                            \n                                contactVisible\n                            \n                            \n                                    Private\n                                firstLoad\n                            \n                            \n                                isDeleting\n                            \n                            \n                                isEditing\n                            \n                            \n                                isMobile\n                            \n                            \n                                menuOpen\n                            \n                            \n                                    Private\n                                    Optional\n                                subscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeContactDetails\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getInitials\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToList\n                            \n                            \n                                onDeleteContact\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                onEditContact\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMobileMenu\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                backToList\n                            \n                            \n                                noContactVisible\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isAnimationDisabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, elementRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:76\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        backToList\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-details/contact-details.component.ts:75\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        noContactVisible\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-details/contact-details.component.ts:76\n                            \n                        \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Triggered when clicking outside the mobile menu.\nCloses the menu if it is open and the click occurred outside.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe click event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Triggered on window resize.\nAdjusts the mobile layout and menu accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe resize event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeContactDetails\n                        \n                    \n                \n            \n            \n                \ncloseContactDetails()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:250\n                        \n                    \n\n\n            \n                \n                        Closes the contact details view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:242\n                        \n                    \n\n\n            \n                \n                        Returns the color for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe contact's name.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The corresponding color as a hex code.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns the initials of a name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe name from which to generate initials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The initials.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:197\n                        \n                    \n\n\n            \n                \n                        Called when the component is destroyed.\nUnsubscribes from the subscription to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Initializes the component, subscribes to contact changes, and controls animations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToList\n                        \n                    \n                \n            \n            \n                \nonBackToList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:257\n                        \n                    \n\n\n            \n                \n                        Emits the event to return to the contact list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDeleteContact\n                        \n                    \n                \n            \n            \n                \nonDeleteContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:217\n                        \n                    \n\n\n            \n                \n                        Deletes the current contact and clears the selection.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Triggered when clicking outside the mobile menu.\nCloses the menu if it is open and the click occurred outside.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe click event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEditContact\n                        \n                    \n                \n            \n            \n                \nonEditContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:206\n                        \n                    \n\n\n            \n                \n                        Opens the edit form for the current contact.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Triggered on window resize.\nAdjusts the mobile layout and menu accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe resize event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMobileMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMobileMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-details/contact-details.component.ts:125\n                        \n                    \n\n\n            \n                \n                        Opens or closes the mobile menu when on a mobile device.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        animationState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contact\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contactVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        firstLoad\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleting\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEditing\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : window.innerWidth \n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        subscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-details/contact-details.component.ts:72\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isAnimationDisabled\n                    \n                \n\n                \n                    \n                        getisAnimationDisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/app/contacts/contact-details/contact-details.component.ts:136\n                                \n                            \n                    \n                        \n                                Returns whether animations are disabled (e.g., when deleting or editing).\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {\n  Component,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy,\n  HostListener,\n  ElementRef,\n} from '@angular/core';\nimport { ContactService, Contact } from '../../services/contact.service';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-contact-details',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './contact-details.component.html',\n  styleUrl: './contact-details.component.scss',\n\n  animations: [\n    trigger('slideInFromRight', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '250ms ease-in-out',\n          style({ transform: 'translateX(0%)', opacity: 1 })\n        ),\n      ]),\n      transition(':increment', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '250ms ease-in-out',\n          style({ transform: 'translateX(0%)', opacity: 1 })\n        ),\n      ]),\n    ],),\n\n    trigger('slideInOut', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '200ms ease-out',\n          style({ transform: 'translateX(0)', opacity: 1 })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '200ms ease-in',\n          style({ transform: 'translateX(100%)', opacity: 0 })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class ContactDetailsComponent implements OnInit, OnDestroy {\n  contactVisible = false;\n  contact?: Contact;\n  animationState = 0;\n  isDeleting = false;\n  isEditing = false;\n  menuOpen = false;\n  isMobile = window.innerWidth ();\n  @Output() noContactVisible = new EventEmitter();\n\n  constructor(\n    private contactService: ContactService,\n    private elementRef: ElementRef\n  ) {}\n\n  /**\n   * Triggered when clicking outside the mobile menu.\n   * Closes the menu if it is open and the click occurred outside.\n   *\n   * @param {Event} event - The click event.\n   */\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: Event) {\n    const target = event.target as HTMLElement;\n    const mobileMenu =\n      this.elementRef.nativeElement.querySelector('.mobile-menu');\n    const mobileOptions = this.elementRef.nativeElement.querySelector(\n      '.mobile-options-btn'\n    );\n\n    if (\n      this.menuOpen &&\n      !mobileMenu?.contains(target) &&\n      !mobileOptions?.contains(target)\n    ) {\n      this.menuOpen = false;\n    }\n  }\n\n  /**\n   * Triggered on window resize.\n   * Adjusts the mobile layout and menu accordingly.\n   *\n   * @param {Event} event - The resize event.\n   */\n  @HostListener('window:resize', ['$event'])\n  onResize(event: Event) {\n    const width = (event.target as Window).innerWidth;\n    this.isMobile = width  {\n          if (!selectedContact) return null;\n          return (\n            allContacts.find((contact) => contact.id === selectedContact.id) ||\n            selectedContact\n          );\n        })\n      )\n\n      .subscribe({\n        next: (contact) => {\n          const wasEmpty = !this.contact;\n          const isContactChange = contact && contact !== this.contact;\n\n          this.contact = contact || undefined;\n\n          if (!contact) {\n            this.isDeleting = false;\n            this.isEditing = false;\n            this.contactVisible = false;\n\n            setTimeout(() => {\n              this.noContactVisible.emit();\n            }, 100);\n          } else if (isContactChange) {\n            this.isEditing = false;\n\n            if (\n              !this.isDeleting &&\n              (this.firstLoad || wasEmpty || isContactChange)\n            ) {\n              this.contactVisible = false;\n\n              setTimeout(() => {\n                this.contactVisible = true;\n                this.animationState++;\n                this.firstLoad = false;\n              }, 10);\n            }\n          }\n        },\n      });\n  }\n\n  /**\n   * Called when the component is destroyed.\n   * Unsubscribes from the subscription to avoid memory leaks.\n   */\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Opens the edit form for the current contact.\n   */\n  onEditContact(): void {\n    if (this.contact) {\n      this.isEditing = true;\n      this.contactService.showEditForm(this.contact);\n      this.menuOpen = false;\n    }\n  }\n\n  /**\n   * Deletes the current contact and clears the selection.\n   */\n  onDeleteContact(): void {\n    if (this.contact?.id) {\n      this.isDeleting = true;\n      this.menuOpen = false;\n      this.contactService.deleteContact(this.contact.id);\n      this.contactService.clearSelection();\n    }\n  }\n\n  /**\n   * Returns the initials of a name.\n   *\n   * @param {string} [name] - The name from which to generate initials.\n   * @returns {string} The initials.\n   */\n  getInitials(name?: string): string {\n    return this.contactService.getInitials(name);\n  }\n\n  /**\n   * Returns the color for a contact.\n   *\n   * @param {string} [name] - The contact's name.\n   * @returns {string} The corresponding color as a hex code.\n   */\n  getContactColor(name?: string): string {\n    if (!name) return '#9E9E9E';\n    return this.contactService.getContactColor(name);\n  }\n\n  /**\n   * Closes the contact details view.\n   */\n  closeContactDetails(): void {\n    this.contactVisible = false;\n  }\n\n  /**\n   * Emits the event to return to the contact list.\n   */\n  onBackToList() {\n    this.backToList.emit();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Contacts\n      \n      Better with a team\n      \n        \n      \n    \n\n    \n      \n        \n          {{ getInitials(contact.name) }}\n        \n        \n          {{ contact.name || \"Unbekannt\" }}\n\n          \n            \n              \n              \n              Edit\n            \n\n            \n              \n              \n              Delete\n            \n          \n        \n      \n\n      \n        Contact Information\n\n        \n          Email\n          {{ contact.email || \"Keine E-Mail\" }}\n        \n\n        \n          Phone\n          \n            {{ contact.phone || \"Keine Telefonnummer\" }}\n          \n        \n      \n    \n\n    \n      \n      \n    \n\n    \n      \n        \n        \n        Edit\n      \n\n      \n        \n        \n        Delete\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Contacts            Better with a team                                                    {{ getInitials(contact.name) }}                          {{ contact.name || \"Unbekannt\" }}                                                                Edit                                                                  Delete                                                  Contact Information                  Email          {{ contact.email || \"Keine E-Mail\" }}                          Phone                      {{ contact.phone || \"Keine Telefonnummer\" }}                                                                                  Edit                                    Delete            '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactFormComponent.html":{"url":"components/ContactFormComponent.html","title":"component - ContactFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-form/contact-form.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-form\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contact-form.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contact-form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactForm\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                contactToEdit\n                            \n                            \n                                    Private\n                                    Optional\n                                editContactSubscription\n                            \n                            \n                                getDataToEdit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearInputs\n                            \n                            \n                                deleteContact\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                addedContact\n                            \n                            \n                                closeOverlay\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:53\n                            \n                        \n\n                \n                    \n                            Constructor injecting the form builder and contact service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular's FormBuilder for creating the form.\n\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService that manages contact CRUD operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        addedContact\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:32\n                            \n                        \n                \n                    \n                        Emits a newly created contact after successful form submission.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeOverlay\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-form/contact-form.component.ts:38\n                            \n                        \n                \n                    \n                        Emits when the form overlay is closed (e.g., after cancel or submit).\nEmits the string 'closed' as an identifier.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearInputs\n                        \n                    \n                \n            \n            \n                \nclearInputs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:139\n                        \n                    \n\n\n            \n                \n                        Resets the form without closing the overlay.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteContact\n                        \n                    \n                \n            \n            \n                \ndeleteContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Deletes the contact being edited (if any) and closes the form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:93\n                        \n                    \n\n\n            \n                \n                        Cleans up the subscription on component destruction to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:66\n                        \n                    \n\n\n            \n                \n                        Initializes the form and subscribes to editContact$ to load contact data\nwhen editing an existing entry.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:102\n                        \n                    \n\n\n            \n                \n                        Closes the contact form, resets its state, and emits a closing event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-form/contact-form.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Handles form submission. Validates input, creates or updates the contact\nusing the ContactService, emits the new contact (if applicable),\nand closes the form.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:43\n                        \n                    \n\n            \n                \n                    The reactive form group for the contact form.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:60\n                        \n                    \n\n            \n                \n                    - Service that manages contact CRUD operations.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:48\n                        \n                    \n\n            \n                \n                    The contact to edit, if editing mode is active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        editContactSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:53\n                        \n                    \n\n            \n                \n                    Subscription to receive the contact data to be edited via the ContactService.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDataToEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-form/contact-form.component.ts:79\n                        \n                    \n\n            \n                \n                    Receives a contact to be edited and pre-fills the form fields.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    contact\n                                                    \n                                                            \nThe contact object or null to clear the form.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact, notOnlyWhitespace } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-contact-form',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  templateUrl: './contact-form.component.html',\n  styleUrl: './contact-form.component.scss',\n})\nexport class ContactFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * Emits a newly created contact after successful form submission.\n   */\n  @Output() addedContact = new EventEmitter();\n\n  /**\n   * Emits when the form overlay is closed (e.g., after cancel or submit).\n   * Emits the string 'closed' as an identifier.\n   */\n  @Output() closeOverlay = new EventEmitter();\n\n  /**\n   * The reactive form group for the contact form.\n   */\n  contactForm!: FormGroup;\n\n  /**\n   * The contact to edit, if editing mode is active.\n   */\n  contactToEdit?: Contact;\n\n  /**\n   * Subscription to receive the contact data to be edited via the ContactService.\n   */\n  private editContactSubscription?: Subscription;\n\n  /**\n   * Constructor injecting the form builder and contact service.\n   * @param form - Angular's FormBuilder for creating the form.\n   * @param contactService - Service that manages contact CRUD operations.\n   */\n  constructor(private form: FormBuilder, public contactService: ContactService) { }\n\n  /**\n   * Initializes the form and subscribes to editContact$ to load contact data\n   * when editing an existing entry.\n   */\n  ngOnInit(): void {\n    this.contactForm = this.form.group({\n      name: ['', [Validators.required, notOnlyWhitespace]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.required, Validators.min(10), Validators.pattern(/^\\d+$/)]]\n    });\n    this.editContactSubscription = this.contactService.editContact$.subscribe(this.getDataToEdit);\n  }\n\n  /**\n   * Receives a contact to be edited and pre-fills the form fields.\n   * @param contact - The contact object or null to clear the form.\n   */\n  getDataToEdit = (contact: Contact | null) => {\n    this.contactToEdit = contact || undefined;\n    if (this.contactToEdit) {\n      this.contactForm.patchValue({\n        name: this.contactToEdit.name,\n        email: this.contactToEdit.email,\n        phone: this.contactToEdit.phone\n      });\n    }\n  }\n\n  /**\n   * Cleans up the subscription on component destruction to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    if (this.editContactSubscription) {\n      this.editContactSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Closes the contact form, resets its state, and emits a closing event.\n   */\n  onClose(): void {\n    this.contactService.hideForm();\n    this.contactForm.reset();\n    this.closeOverlay.emit('closed');\n  }\n\n  /**\n   * Handles form submission. Validates input, creates or updates the contact\n   * using the ContactService, emits the new contact (if applicable),\n   * and closes the form.\n   */\n  async onSubmit() {\n    if (this.contactForm.valid) {\n      const { name, email, phone } = this.contactForm.value;\n      const contact: Contact = {\n        name: name.trim(),\n        email: email.trim(),\n        phone: phone.trim()\n      };\n\n      if (this.contactToEdit?.id) {\n        this.contactService.updateContact(this.contactToEdit.id, contact);\n      } else {\n        const newContact = await this.contactService.addContact(contact);\n        if (newContact) {\n          this.addedContact.emit(newContact);\n        }\n      }\n\n      this.clearInputs();\n      this.onClose();\n    }\n  }\n\n  /**\n   * Resets the form without closing the overlay.\n   */\n  clearInputs() {\n    this.contactForm.reset();\n  }\n\n  /**\n   * Deletes the contact being edited (if any) and closes the form.\n   */\n  deleteContact() {\n    if (this.contactToEdit?.id) {\n      this.contactService.deleteContact(this.contactToEdit.id);\n      this.onClose();\n    }\n  }\n}\n\n\n    \n\n    \n        \n    \n        \n          \n              \n              \n              \n              \n              \n               \n            \n        \n     \n    \n        \n        Add contact\n        Edit contact\n        Tasks are better with a team!\n        \n    \n    \n        \n            \n                \n                {{ contactService.getInitials(contactToEdit.name) }}\n            \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! Please add a name.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oops! This email seems invalid or missing.\n                \n                \n                    \n                        \n                        \n                        \n                    \n                    Oh! Don´t forget the phone number.\n                                \n                 \n                    \n                        Cancel\n                         \n                            \n                            \n                            \n                            \n                            \n                            \n                        \n                    \n                     \n                        Delete\n                    \n                    \n                        Create contact\n                        \n                    \n                    \n                        Save\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                        Add contact        Edit contact        Tasks are better with a team!                                                                    {{ contactService.getInitials(contactToEdit.name) }}                                                                                                                                                                            Oops! Please add a name.                                                                                                                                                                    Oops! This email seems invalid or missing.                                                                                                                                                                    Oh! Don´t forget the phone number.                                                                                             Cancel                                                                                                                                                                                                                                                                                          Delete                                                                Create contact                                                                                        Save                                                                                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactListComponent.html":{"url":"components/ContactListComponent.html","title":"component - ContactListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contact-list/contact-list.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact-list\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./contact-list.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./contact-list.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Private\n                                contactsSubscription\n                            \n                            \n                                currentUser\n                            \n                            \n                                currentUserEmail\n                            \n                            \n                                groupedContacts\n                            \n                            \n                                keyAsc\n                            \n                            \n                                selectedContact\n                            \n                            \n                                    Private\n                                selectionSubscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUser\n                            \n                            \n                                getInitials\n                            \n                            \n                                groupByInitial\n                            \n                            \n                                isCurrentUser\n                            \n                            \n                                isSelected\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAddNewContact\n                            \n                            \n                                onContactSelect\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactSelected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:84\n                            \n                        \n\n                \n                    \n                            Constructor injecting required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nManages contact data and selection.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nProvides the currently logged-in user's info.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        contactSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/contacts/contact-list/contact-list.component.ts:84\n                            \n                        \n                \n                    \n                        Emits an event when a contact is selected.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:48\n                        \n                    \n\n\n            \n                \n                        Identifying the current user to directly select this user in the contact list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:164\n                        \n                    \n\n\n            \n                \n                        Returns the initials of the given name using ContactService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Initials string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupByInitial\n                        \n                    \n                \n            \n            \n                \ngroupByInitial(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Groups contacts alphabetically by the first character of their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of contacts to group.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object with initials as keys and arrays of contacts as values.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCurrentUser\n                        \n                    \n                \n            \n            \n                \nisCurrentUser(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Checks if the given contact matches the current logged-in user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to compare with the current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact's email matches the user's email.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSelected\n                        \n                    \n                \n            \n            \n                \nisSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Determines if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:99\n                        \n                    \n\n\n            \n                \n                        Unsubscribes from all subscriptions to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:27\n                        \n                    \n\n\n            \n                \n                        Initializes the component by loading and grouping contacts,\nidentifying the current user, and subscribing to contact selection.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAddNewContact\n                        \n                    \n                \n            \n            \n                \nonAddNewContact()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:134\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the \"add contact\" form via the ContactService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelect\n                        \n                    \n                \n            \n            \n                \nonContactSelect(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contact-list/contact-list.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Handles selection of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:92\n                        \n                    \n\n            \n                \n                    - Manages contact data and selection.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        contactsSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:76\n                        \n                    \n\n            \n                \n                    The display name of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUserEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:71\n                        \n                    \n\n            \n                \n                    The email of the currently authenticated user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:61\n                        \n                    \n\n            \n                \n                    Holds the contacts grouped by the first letter of their name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keyAsc\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:157\n                        \n                    \n\n            \n                \n                    Sorting helper for alphabetical keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedContact\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:66\n                        \n                    \n\n            \n                \n                    The currently selected contact (if any).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectionSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contact-list/contact-list.component.ts:79\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContactService, Contact } from '../../services/contact.service';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-contact-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './contact-list.component.html',\n  styleUrls: ['./contact-list.component.scss']\n})\nexport class ContactListComponent implements OnInit, OnDestroy {\n\n    /**\n   * Initializes the component by loading and grouping contacts,\n   * identifying the current user, and subscribing to contact selection.\n   */\n  ngOnInit(): void {\n    this.contactsSubscription = this.contactService.getContacts().subscribe({\n      next: (contacts) => {\n        this.groupedContacts = this.groupByInitial(contacts);\n        if (this.currentUserEmail) {\n          const matchedContact = contacts.find(c => c.email === this.currentUserEmail);\n          if (matchedContact) {\n            this.onContactSelect(matchedContact);\n          }\n        }\n      },\n      error: (error) => {\n        console.error('Error loading contacts:', error);\n      }\n    });\n    this.getCurrentUser();\n  }\n\n  /**\n   * Identifying the current user to directly select this user in the contact list.\n   */\n  getCurrentUser(){\n    const user = this.authService.getCurrentUser();\n    this.currentUser = user?.displayName || null;\n    this.currentUserEmail = user?.email || null;\n\n    this.selectionSubscription = this.contactService.selectedContact$.subscribe(\n      contact => this.selectedContact = contact\n    );\n  }\n\n  /**\n   * Holds the contacts grouped by the first letter of their name.\n   */\n  groupedContacts: { [key: string]: Contact[] } = {};\n\n  /**\n   * The currently selected contact (if any).\n   */\n  selectedContact: Contact | null = null;\n\n  /**\n   * The email of the currently authenticated user.\n   */\n  currentUserEmail: string | null = null;\n\n  /**\n   * The display name of the currently authenticated user.\n   */\n  currentUser: string | null = null;\n\n  private contactsSubscription: Subscription = new Subscription();\n  private selectionSubscription: Subscription = new Subscription();\n\n  /**\n   * Emits an event when a contact is selected.\n   */\n  @Output() contactSelected = new EventEmitter();\n\n  /**\n   * Constructor injecting required services.\n   * @param contactService - Manages contact data and selection.\n   * @param authService - Provides the currently logged-in user's info.\n   */\n  constructor(\n    public contactService: ContactService,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Unsubscribes from all subscriptions to avoid memory leaks.\n   */\n  ngOnDestroy(): void {\n    this.contactsSubscription.unsubscribe();\n    this.selectionSubscription.unsubscribe();\n  }\n\n  /**\n   * Checks if the given contact matches the current logged-in user.\n   * @param contact - The contact to compare with the current user.\n   * @returns True if the contact's email matches the user's email.\n   */\n  isCurrentUser(contact: Contact): boolean {\n    return typeof contact.email === 'string' && contact.email === this.currentUserEmail;\n  }\n\n  /**\n   * Handles selection of a contact.\n   * @param contact - The contact to select.\n   */\n  onContactSelect(contact: Contact): void {\n    this.contactService.selectContact(contact);\n    this.contactSelected.emit();\n  }\n\n  /**\n   * Determines if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected.\n   */\n  isSelected(contact: Contact): boolean {\n    return this.selectedContact?.id === contact.id;\n  }\n\n  /**\n   * Triggers the display of the \"add contact\" form via the ContactService.\n   */\n  onAddNewContact(): void {\n    this.contactService.showAddForm();\n  }\n\n  /**\n   * Groups contacts alphabetically by the first character of their name.\n   * @param contacts - The list of contacts to group.\n   * @returns An object with initials as keys and arrays of contacts as values.\n   */\n  groupByInitial(contacts: Contact[]): { [key: string]: Contact[] } {\n    const validContacts = contacts.filter(contact => contact && contact.name);\n    return validContacts.reduce((groups, contact) => {\n      const initial = contact.name.charAt(0).toUpperCase();\n      groups[initial] = groups[initial] || [];\n      groups[initial].push(contact);\n      groups[initial].sort((a, b) => a.name.localeCompare(b.name));\n      return groups;\n    }, {} as { [key: string]: Contact[] });\n  }\n\n  /**\n   * Sorting helper for alphabetical keys.\n   */\n  keyAsc = (a: any, b: any) => a.key.localeCompare(b.key);\n\n  /**\n   * Returns the initials of the given name using ContactService.\n   * @param name - The full name of the contact.\n   * @returns Initials string.\n   */\n  getInitials(name: string | undefined): string {\n    return this.contactService.getInitials(name);\n  }\n}\n\n    \n\n    \n        \n  \n    Add new contact\n  \n\n  \n    {{ group.key }}\n    \n      \n        {{ contactService.getInitials(contact?.name) }}\n      \n      Me\n      \n        \n          {{ contact?.name || \"Unbekannt\" }}\n        \n        {{ contact?.email || \"Keine E-Mail\" }}\n      \n    \n  \n\n\n\n  \n    \n  \n\n\n    \n\n    \n                \n                    ./contact-list.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.contact-list {\n  width: 100%;\n  max-width: 456px;\n  height: calc(100dvh - 100px);\n  max-height: none;\n  overflow-y: auto;\n  margin-top: -9px;\n  padding-bottom: 80px;\n  background-color: var(--background-light);\n  scrollbar-color: var(--background-default-dark) transparent;\n\n  .add-button {\n    @include btn;\n    @include btn-dark;\n    width: calc(100% - clamp(12px, 3vw, 24px));\n    max-width: 352px;\n    height: clamp(48px, 12vw, 56px);\n    margin-top: 22.5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: clamp(12px, 2.5vw, 16px);\n    transition: background-color 0.2s ease;\n\n    &::after {\n      content: \"\";\n      width: clamp(20px, 4vw, 24px);\n      height: clamp(20px, 4vw, 24px);\n      background-image: url(\"../../../../public/assets/img/svg/add-person.svg\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n  }\n\n  h4 {\n    margin-top: clamp(8px, 2vw, 16px);\n    font-family: \"Inter\", sans-serif;\n    font-weight: 400;\n    font-size: clamp(14px, 3vw, 20px);\n    color: #000000;\n    padding: clamp(8px, 1.5vw, 17px) clamp(12px, 3vw, 36px);\n    gap: 8px;\n    border-bottom: 1px solid var(--background-default-dark);\n    margin-bottom: clamp(4px, 1vw, 8px);\n    max-width: 352px;\n  }\n\n  .contact-entry {\n    display: flex;\n    align-items: center;\n    margin: clamp(4px, 1vw, 8px) 0;\n    padding: clamp(8px, 1.5vw, 15px) clamp(8px, 2vw, 24px);\n    gap: clamp(12px, 2vw, 24px);\n    flex-wrap: wrap;\n    position: relative;\n    cursor: pointer;\n    transition: background-color 0.2s;\n    border-radius: 10px;\n\n    &:hover {\n      background-color: #f5f5f5;\n    }\n\n    &.selected {\n      background-color: #2a3647;\n\n      .info .name {\n        color: #ffffff;\n      }\n\n      .avatar {\n        border: 2px solid #ffffff;\n      }\n    }\n\n    .active-user {\n      @include inter400-fs12;\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      color: var(--text-color-dark);\n      border-radius: 50%;\n      background-color: var(--background-light);\n      border: 2px solid var(--text-color-error);\n      padding: 4px;\n    }\n\n    .avatar {\n      width: 32px;\n      height: 32px;\n      border-radius: 45px;\n      background-color: #ccc;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-right: 10px;\n      font-family: \"Inter\", sans-serif;\n      font-weight: 400;\n      font-size: 12px;\n      color: #ffffff;\n      border: 2px solid transparent;\n      transition: border 0.2s ease;\n    }\n\n    .info {\n      flex: 1;\n      min-width: 0;\n      \n      .name {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(14px, 3vw, 20px);\n        color: #000000;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        margin-bottom: 2px;\n      }\n\n      .email {\n        font-family: \"Inter\", sans-serif;\n        font-weight: 400;\n        font-size: clamp(12px, 2.5vw, 16px);\n        color: #007cee;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n  }\n}\n\n@media(max-width: 1000px) {\n  .contact-list {\n    height: calc(100dvh - 190px);\n  }\n}\n\n@media (max-width: 780px) {\n  .contact-list {\n    width: 100%;\n    max-width: none;\n    margin: 0;\n    &::-webkit-scrollbar {\n      width: 4px;\n    }\n    &::-webkit-scrollbar-track {\n      background: transparent;\n    }\n    &::-webkit-scrollbar-thumb {\n      background-color: --background-default-dark;\n      border-radius: 4px;\n    }\n    \n    .add-button {\n      display: none;\n    }\n    \n    h4 {\n      max-width: none;\n      width: 100%;\n    }\n    \n    .contact-entry {\n      width: 100%;\n      max-width: none;\n    }\n  }\n  \n  .fab-container {\n    display: block !important;\n    bottom: 100px !important;\n    right: 20px !important;\n  }\n  \n  .fab {\n    width: 56px;\n    height: 56px;\n    \n    img {\n      width: 30px;\n      height: 21px;\n    }\n  }\n}\n\n.fab-container {\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n  z-index: 1000;\n  display: none;\n}\n\n.fab {\n  width: 56px;\n  height: 56px;\n  border-radius: 46px;\n  background-color: #2a3647;\n  border: none;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: #29ABE2;\n    border: none;\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);\n    transform: scale(1.1);\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  img {\n    width: 30px;\n    height: 21px;\n    filter: brightness(0) invert(1);\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Add new contact        {{ group.key }}                  {{ contactService.getInitials(contact?.name) }}            Me                        {{ contact?.name || \"Unbekannt\" }}                {{ contact?.email || \"Keine E-Mail\" }}                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactManager.html":{"url":"injectables/ContactManager.html","title":"injectable - ContactManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/contact-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                ContactManager handles all contact-related operations for the AddTaskComponent.\nThis includes contact selection, display, and dropdown management.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                selectedContacts\n                            \n                            \n                                    Private\n                                showContactDropdown\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContactInitials\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                getSelectedContacts\n                            \n                            \n                                getSelectedContactsText\n                            \n                            \n                                getShowContactDropdown\n                            \n                            \n                                isContactSelected\n                            \n                            \n                                selectContact\n                            \n                            \n                                setSelectedContacts\n                            \n                            \n                                setShowContactDropdown\n                            \n                            \n                                toggleContactDropdown\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/add-task/contact-manager.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Clears all selected contacts and resets dropdown state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns the color for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get color for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's color.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactInitials\n                        \n                    \n                \n            \n            \n                \ngetContactInitials(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the initials for a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to get initials for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The contact's initials.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames(remainingContacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Returns a comma-separated string of remaining contact names.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                remainingContacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe remaining contacts to display.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContacts\n                        \n                    \n                \n            \n            \n                \ngetSelectedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:20\n                        \n                    \n\n\n            \n                \n                        Gets all selected contacts\n\n\n                        \n                            Returns :         Contact[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedContactsText\n                        \n                    \n                \n            \n            \n                \ngetSelectedContactsText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Returns the text to display for selected contacts.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The text to display in the contact selector.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowContactDropdown\n                        \n                    \n                \n            \n            \n                \ngetShowContactDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Gets the contact dropdown visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isContactSelected\n                        \n                    \n                \n            \n            \n                \nisContactSelected(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:70\n                        \n                    \n\n\n            \n                \n                        Checks if a contact is currently selected.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the contact is selected, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Toggles the selection state of a contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select or deselect.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSelectedContacts\n                        \n                    \n                \n            \n            \n                \nsetSelectedContacts(contacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Sets the selected contacts array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                contacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowContactDropdown\n                        \n                    \n                \n            \n            \n                \nsetShowContactDropdown(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:41\n                        \n                    \n\n\n            \n                \n                        Sets the contact dropdown visibility state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleContactDropdown\n                        \n                    \n                \n            \n            \n                \ntoggleContactDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/contact-manager.ts:48\n                        \n                    \n\n\n            \n                \n                        Toggles the contact dropdown visibility.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContacts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showContactDropdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/contact-manager.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Contact, ContactService } from '../services/contact.service';\n\n/**\n * ContactManager handles all contact-related operations for the AddTaskComponent.\n * This includes contact selection, display, and dropdown management.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactManager {\n  private selectedContacts: Contact[] = [];\n  private showContactDropdown: boolean = false;\n\n  constructor(private contactService: ContactService) {}\n\n  /**\n   * Gets all selected contacts\n   */\n  getSelectedContacts(): Contact[] {\n    return this.selectedContacts;\n  }\n\n  /**\n   * Sets the selected contacts array\n   */\n  setSelectedContacts(contacts: Contact[]): void {\n    this.selectedContacts = contacts;\n  }\n\n  /**\n   * Gets the contact dropdown visibility state\n   */\n  getShowContactDropdown(): boolean {\n    return this.showContactDropdown;\n  }\n\n  /**\n   * Sets the contact dropdown visibility state\n   */\n  setShowContactDropdown(value: boolean): void {\n    this.showContactDropdown = value;\n  }\n\n  /**\n   * Toggles the contact dropdown visibility.\n   */\n  toggleContactDropdown(): void {\n    this.showContactDropdown = !this.showContactDropdown;\n  }\n\n  /**\n   * Toggles the selection state of a contact.\n   * @param contact - The contact to select or deselect.\n   */\n  selectContact(contact: Contact): void {\n    const index = this.selectedContacts.findIndex(c => c.id === contact.id);\n    if (index === -1) {\n      this.selectedContacts.push(contact);\n    } else {\n      this.selectedContacts.splice(index, 1);\n    }\n  }\n\n  /**\n   * Checks if a contact is currently selected.\n   * @param contact - The contact to check.\n   * @returns True if the contact is selected, false otherwise.\n   */\n  isContactSelected(contact: Contact): boolean {\n    return this.selectedContacts.some(c => c.id === contact.id);\n  }\n\n  /**\n   * Returns the text to display for selected contacts.\n   * @returns The text to display in the contact selector.\n   */\n  getSelectedContactsText(): string {\n    return 'Select contacts to assign';\n  }\n\n  /**\n   * Returns the initials for a contact.\n   * @param contact - The contact to get initials for.\n   * @returns The contact's initials.\n   */\n  getContactInitials(contact: Contact): string {\n    return this.contactService.getInitials(contact.name);\n  }\n\n  /**\n   * Returns the color for a contact.\n   * @param contact - The contact to get color for.\n   * @returns The contact's color.\n   */\n  getContactColor(contact: Contact): string {\n    return this.contactService.getContactColor(contact.name);\n  }\n\n  /**\n   * Returns a comma-separated string of remaining contact names.\n   * @param remainingContacts - The remaining contacts to display.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(remainingContacts: Contact[]): string {\n    return remainingContacts.map((contact) => contact.name).join(', ');\n  }\n\n  /**\n   * Clears all selected contacts and resets dropdown state.\n   */\n  clearAll(): void {\n    this.selectedContacts = [];\n    this.showContactDropdown = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactService.html":{"url":"injectables/ContactService.html","title":"injectable - ContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable service for managing contact data in Firestore.\nProvides reactive streams for selected contact, form visibility, and editing state.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                avatarColors\n                            \n                            \n                                    Public\n                                editContact$\n                            \n                            \n                                    Private\n                                editContactSubject\n                            \n                            \n                                    Public\n                                selectedContact$\n                            \n                            \n                                    Private\n                                selectedContactSubject\n                            \n                            \n                                    Public\n                                showForm$\n                            \n                            \n                                    Private\n                                showFormSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addContact\n                            \n                            \n                                clearSelection\n                            \n                            \n                                    Async\n                                deleteContact\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                    Async\n                                getContactById\n                            \n                            \n                                getContactColor\n                            \n                            \n                                getContacts\n                            \n                            \n                                getContactsRef\n                            \n                            \n                                getInitials\n                            \n                            \n                                getSingleContactsRef\n                            \n                            \n                                hideForm\n                            \n                            \n                                selectContact\n                            \n                            \n                                showAddForm\n                            \n                            \n                                showEditForm\n                            \n                            \n                                    Async\n                                updateContact\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/contact.service.ts:75\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    addContact(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Adds a new contact to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The added contact with its generated ID or null if failed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearSelection\n                        \n                    \n                \n            \n            \n                \nclearSelection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:182\n                        \n                    \n\n\n            \n                \n                        Clears the currently selected contact.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteContact(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:216\n                        \n                    \n\n\n            \n                \n                        Deletes a contact from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Returns a plain JSON object with only the allowed contact fields.\nThis is used to avoid including undefined or extra properties when updating Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact object to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Partial\n\n                        \n                            \n                                A JSON object containing name, email, and phone.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactById(contactId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:255\n                        \n                    \n\n\n            \n                \n                        Fetches a single contact by its Firestore document ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise resolving to the contact object or null if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactColor\n                        \n                    \n                \n            \n            \n                \ngetContactColor(contactName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:228\n                        \n                    \n\n\n            \n                \n                        Generates a consistent avatar color for a contact based on their name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contactName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact’s name used to calculate a hash.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A hexadecimal color string from the avatarColors array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContacts\n                        \n                    \n                \n            \n            \n                \ngetContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Returns an observable stream of all contacts from Firestore.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable of Contact array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getContactsRef\n                        \n                    \n                \n            \n            \n                \ngetContactsRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to the contacts collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitials\n                        \n                    \n                \n            \n            \n                \ngetInitials(name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:242\n                        \n                    \n\n\n            \n                \n                        Extracts the initials from a contact name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe full name of the contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string with one or two uppercase initials, or '?' if the name is invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleContactsRef\n                        \n                    \n                \n            \n            \n                \ngetSingleContactsRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Returns a Firestore reference to a single contact document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the contact document.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideForm\n                        \n                    \n                \n            \n            \n                \nhideForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:206\n                        \n                    \n\n\n            \n                \n                        Hides the contact form and clears the edit state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectContact\n                        \n                    \n                \n            \n            \n                \nselectContact(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Emits a contact to the selected contact observable.\nUsed to show the contact details in the UI.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showAddForm\n                        \n                    \n                \n            \n            \n                \nshowAddForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the add contact form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showEditForm\n                        \n                    \n                \n            \n            \n                \nshowEditForm(contact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the edit contact form with a prefilled contact.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe contact to edit.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateContact\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateContact(docId: string, updatedContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/contact.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Updates an existing contact in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firestore document ID of the contact to update.\n\n\n                                            \n                                        \n                                        \n                                                updatedContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated contact data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        avatarColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:69\n                        \n                    \n\n            \n                \n                    Preset avatar colors for visual identification\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        editContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.editContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:66\n                        \n                    \n\n            \n                \n                    Observable for the contact being edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:64\n                        \n                    \n\n            \n                \n                    Currently selected contact to be edited\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectedContact$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.selectedContactSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:56\n                        \n                    \n\n            \n                \n                    Observable for the selected contact\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedContactSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:54\n                        \n                    \n\n            \n                \n                    Currently selected contact (for viewing or interaction)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.showFormSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:61\n                        \n                    \n\n            \n                \n                    Observable for contact form visibility\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showFormSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/contact.service.ts:59\n                        \n                    \n\n            \n                \n                    Whether the contact form should be displayed\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  getDoc,\n  getDocs,\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { AuthService } from './auth.service';\n\n/**\n * Interface representing a contact.\n */\nexport interface Contact {\n  /** Unique identifier (automatically assigned by Firestore) */\n  id?: string;\n  /** Full name of the contact */\n  name: string;\n  /** Email address of the contact */\n  email: string;\n  /** Optional phone number of the contact */\n  phone?: string;\n}\n\n/**\n * Custom validator to check that a form input contains more than just whitespace.\n *\n * @param control - The form control to validate.\n * @returns A validation error object if invalid, otherwise null.\n */\nexport function notOnlyWhitespace(control: AbstractControl): ValidationErrors | null {\n  const value = control.value;\n  if (typeof value === 'string' && value.trim().length === 0) {\n    return { whitespace: true };\n  }\n  return null;\n}\n\n/**\n * Injectable service for managing contact data in Firestore.\n * Provides reactive streams for selected contact, form visibility, and editing state.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  /** Currently selected contact (for viewing or interaction) */\n  private selectedContactSubject = new BehaviorSubject(null);\n  /** Observable for the selected contact */\n  public selectedContact$ = this.selectedContactSubject.asObservable();\n\n  /** Whether the contact form should be displayed */\n  private showFormSubject = new BehaviorSubject(false);\n  /** Observable for contact form visibility */\n  public showForm$ = this.showFormSubject.asObservable();\n\n  /** Currently selected contact to be edited */\n  private editContactSubject = new BehaviorSubject(null);\n  /** Observable for the contact being edited */\n  public editContact$ = this.editContactSubject.asObservable();\n\n  /** Preset avatar colors for visual identification */\n  private avatarColors = [\n    '#9C27B0', '#2196F3', '#FF9800', '#4CAF50', '#F44336', '#00BCD4',\n    '#c44314ff', '#5191daff', '#E91E63', '#3F51B5', '#b3c511ff',\n    '#FF5722', '#388E3C', '#1976D2', '#5c0582ff', '#c90d0dff',\n    '#c303aaff', '#0118acff', '#0288D1', '#C2185B', '#049484ff',\n    '#FFA000', '#084c6bff', '#6bb604ff'\n  ];\n\n  constructor(\n    private firestore: Firestore,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Returns a Firestore reference to the `contacts` collection.\n   */\n  getContactsRef() {\n    return collection(this.firestore, 'contacts');\n  }\n\n  /**\n   * Returns a Firestore reference to a single contact document.\n   *\n   * @param docId - The ID of the contact document.\n   */\n  getSingleContactsRef(docId: string) {\n    return doc(this.getContactsRef(), docId);\n  }\n\n  /**\n   * Returns an observable stream of all contacts from Firestore.\n   *\n   * @returns Observable of Contact array.\n   */\n  getContacts(): Observable {\n    return new Observable((observer) => {\n      const contactsRef = this.getContactsRef();\n      const unsubscribe = onSnapshot(\n        contactsRef,\n        (snapshot) => {\n          const contacts: Contact[] = [];\n          snapshot.forEach((doc) => {\n            contacts.push({ id: doc.id, ...doc.data() } as Contact);\n          });\n          observer.next(contacts);\n        },\n        (error) => {\n          observer.error(error);\n        }\n      );\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new contact to Firestore.\n   *\n   * @param newContact - The contact to add.\n   * @returns The added contact with its generated ID or null if failed.\n   */\n  async addContact(newContact: Contact): Promise {\n    try {\n      const contactsRef = this.getContactsRef();\n      const docRef = await addDoc(contactsRef, newContact);\n      const fullContact: Contact = { id: docRef.id, ...newContact };\n      return fullContact;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n * Updates an existing contact in Firestore.\n *\n * @param docId - The Firestore document ID of the contact to update.\n * @param updatedContact - The updated contact data.\n */\nasync updateContact(docId: string, updatedContact: Contact): Promise {\n  let docRef = this.getSingleContactsRef(docId);\n  await updateDoc(docRef, this.getCleanJson(updatedContact)).catch((err) => {\n    console.error(err);\n  });\n}\n\n/**\n * Returns a plain JSON object with only the allowed contact fields.\n * This is used to avoid including undefined or extra properties when updating Firestore.\n *\n * @param updatedContact - The contact object to sanitize.\n * @returns A JSON object containing name, email, and phone.\n */\ngetCleanJson(updatedContact: Contact): Partial {\n  return {\n    name: updatedContact.name,\n    email: updatedContact.email,\n    phone: updatedContact.phone,\n  };\n}\n\n/**\n * Emits a contact to the selected contact observable.\n * Used to show the contact details in the UI.\n *\n * @param contact - The contact to select.\n */\nselectContact(contact: Contact): void {\n  this.selectedContactSubject.next(contact);\n}\n\n/**\n * Clears the currently selected contact.\n */\nclearSelection(): void {\n  this.selectedContactSubject.next(null);\n}\n\n/**\n * Triggers the display of the add contact form.\n */\nshowAddForm(): void {\n  this.showFormSubject.next(true);\n}\n\n/**\n * Triggers the display of the edit contact form with a prefilled contact.\n *\n * @param contact - The contact to edit.\n */\nshowEditForm(contact: Contact): void {\n  this.editContactSubject.next(contact);\n  this.showFormSubject.next(true);\n}\n\n/**\n * Hides the contact form and clears the edit state.\n */\nhideForm(): void {\n  this.showFormSubject.next(false);\n  this.editContactSubject.next(null);\n}\n\n/**\n * Deletes a contact from Firestore.\n *\n * @param docId - The Firestore document ID of the contact to delete.\n */\nasync deleteContact(docId: string): Promise {\n  await deleteDoc(this.getSingleContactsRef(docId)).catch((err) => {\n    console.log(err);\n  });\n}\n\n/**\n * Generates a consistent avatar color for a contact based on their name.\n *\n * @param contactName - The contact’s name used to calculate a hash.\n * @returns A hexadecimal color string from the avatarColors array.\n */\ngetContactColor(contactName: string): string {\n  let hash = 0;\n  for (let i = 0; i  {\n  const contactRef = this.getSingleContactsRef(contactId);\n  return getDoc(contactRef).then(snapshot => {\n    if (snapshot.exists()) {\n      return { id: snapshot.id, ...snapshot.data() } as Contact;\n    }\n    return null;\n  });\n}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContactsComponent.html":{"url":"components/ContactsComponent.html","title":"component - ContactsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ContactsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/contacts/contacts.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contacts\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                ContactListComponent\n                                ContactDetailsComponent\n                                ContactFormComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./contacts.component.html\n            \n\n\n\n            \n                styleUrl\n                ./contacts.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                animationDirection\n                            \n                            \n                                backgroundVisible\n                            \n                            \n                                showContactDetails\n                            \n                            \n                                showForm$\n                            \n                            \n                                toastAnimationState\n                            \n                            \n                                toastMessageVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToList\n                            \n                            \n                                onContactAdded\n                            \n                            \n                                onContactSelected\n                            \n                            \n                                onNoContactVisible\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                removeBackground\n                            \n                            \n                                setAnimationDirection\n                            \n                            \n                                startMessageAnimation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/contacts/contacts.component.ts:78\n                            \n                        \n\n                \n                    \n                            Initializes the component and subscribes to the form visibility observable.\nAlso sets up the resize event listener to dynamically adjust the animation direction.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service that manages contact data and UI state.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:93\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: Sets initial animation direction and attaches resize listener.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToList\n                        \n                    \n                \n            \n            \n                \nonBackToList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Handles the back button in mobile view, hiding the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactAdded\n                        \n                    \n                \n            \n            \n                \nonContactAdded(newContact: Contact)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:106\n                        \n                    \n\n\n            \n                \n                        Called when a new contact is added from the form.\nIt selects the new contact, shows the contact detail view, and triggers a toast.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newContact\n                                            \n                                                            Contact\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly added contact.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onContactSelected\n                        \n                    \n                \n            \n            \n                \nonContactSelected()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Triggers the display of the contact detail component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNoContactVisible\n                        \n                    \n                \n            \n            \n                \nonNoContactVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Hides the contact detail view if no contact is selected and the screen is small.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Called when the slide-in animation of an overlay is completed.\nDelays showing the background overlay to prevent flickering.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe animation transition event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Handles the event emitted by the contact form when it is closed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating the close state (e.g., 'closed').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Determines the animation direction based on screen width.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current window width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startMessageAnimation\n                        \n                    \n                \n            \n            \n                \nstartMessageAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/contacts/contacts.component.ts:123\n                        \n                    \n\n\n            \n                \n                        Starts the toast message animation and automatically hides it after 3 seconds.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:53\n                        \n                    \n\n            \n                \n                    Current direction of the animation for overlay transitions.\nIt switches between 'right' for desktop and 'bottom' for mobile views.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:68\n                        \n                    \n\n            \n                \n                    Whether the background overlay is visible behind the form or detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContactDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:78\n                        \n                    \n\n            \n                \n                    Controls whether the contact detail view is visible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showForm$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:73\n                        \n                    \n\n            \n                \n                    Observable that determines whether the contact form should be shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastAnimationState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\" | \"void\"\n\n                    \n                \n                \n                    \n                        Default value : 'void'\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:63\n                        \n                    \n\n            \n                \n                    Controls the current animation state of the toast.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastMessageVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/contacts/contacts.component.ts:58\n                        \n                    \n\n            \n                \n                    Whether the toast message is currently visible.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ContactListComponent } from './contact-list/contact-list.component';\nimport { ContactDetailsComponent } from './contact-details/contact-details.component';\nimport { ContactFormComponent } from './contact-form/contact-form.component';\nimport { ContactService, Contact } from './../services/contact.service';\nimport { Observable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { trigger, style, transition, animate, AnimationEvent } from '@angular/animations';\n\n@Component({\n  selector: 'app-contacts',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ContactListComponent,\n    ContactDetailsComponent,\n    ContactFormComponent,\n  ],\n  templateUrl: './contacts.component.html',\n  styleUrl: './contacts.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition('void => right', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateX(0)', opacity: 1 })),\n      ]),\n      transition('right => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateX(100%)', opacity: 0 })),\n      ]),\n      transition('void => bottom', [\n        style({ transform: 'translateY(100%)', opacity: 0 }),\n        animate('250ms ease-in-out', style({ transform: 'translateY(0)', opacity: 1 })),\n      ]),\n      transition('bottom => void', [\n        animate('250ms ease-in-out', style({ transform: 'translateY(100%)', opacity: 0 })),\n      ]),\n    ]),\n  ],\n})\nexport class ContactsComponent {\n\n  /**\n   * Current direction of the animation for overlay transitions.\n   * It switches between 'right' for desktop and 'bottom' for mobile views.\n   */\n  animationDirection: 'right' | 'bottom' = 'right';\n\n  /**\n   * Whether the toast message is currently visible.\n   */\n  toastMessageVisible = false;\n\n  /**\n   * Controls the current animation state of the toast.\n   */\n  toastAnimationState: 'right' | 'bottom' | 'void' = 'void';\n\n  /**\n   * Whether the background overlay is visible behind the form or detail view.\n   */\n  backgroundVisible = false;\n\n  /**\n   * Observable that determines whether the contact form should be shown.\n   */\n  showForm$: Observable;\n\n  /**\n   * Controls whether the contact detail view is visible.\n   */\n  showContactDetails = false;\n\n  /**\n   * Initializes the component and subscribes to the form visibility observable.\n   * Also sets up the resize event listener to dynamically adjust the animation direction.\n   * \n   * @param contactService - The service that manages contact data and UI state.\n   */\n  constructor(private contactService: ContactService) {\n    this.showForm$ = this.contactService.showForm$;\n  }\n\n  /**\n   * Lifecycle hook: Sets initial animation direction and attaches resize listener.\n   */\n  ngOnInit() {\n    this.setAnimationDirection(window.innerWidth);\n    window.addEventListener('resize', () => {\n      this.setAnimationDirection(window.innerWidth);\n    });\n  }\n\n  /**\n   * Called when a new contact is added from the form.\n   * It selects the new contact, shows the contact detail view, and triggers a toast.\n   * \n   * @param newContact - The newly added contact.\n   */\n  onContactAdded(newContact: Contact) {\n    this.contactService.selectContact(newContact);\n    this.onContactSelected();\n    this.startMessageAnimation();\n  }\n\n  /**\n   * Determines the animation direction based on screen width.\n   * @param width - The current window width.\n   */\n  setAnimationDirection(width: number) {\n    this.animationDirection = width  {\n      this.toastMessageVisible = false;\n      this.toastAnimationState = 'void';\n    }, 3000);\n  }\n\n  /**\n   * Handles the event emitted by the contact form when it is closed.\n   * @param event - A string indicating the close state (e.g., 'closed').\n   */\n  removeBackground(event: string) {\n    if (event === 'closed') {\n      this.backgroundVisible = false;\n    }\n  }\n\n  /**\n   * Called when the slide-in animation of an overlay is completed.\n   * Delays showing the background overlay to prevent flickering.\n   * \n   * @param event - The animation transition event.\n   */\n  onOverlayAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'right' || event.toState === 'bottom') {\n      setTimeout(() => {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Handles the back button in mobile view, hiding the contact detail component.\n   */\n  onBackToList() {\n    this.showContactDetails = false;\n  }\n\n  /**\n   * Triggers the display of the contact detail component.\n   */\n  onContactSelected() {\n    this.showContactDetails = true;\n  }\n\n  /**\n   * Hides the contact detail view if no contact is selected and the screen is small.\n   */\n  onNoContactVisible() {\n    if (window.innerWidth \n    \n\n    \n        \n    \n     \n    \n     \n      \n    \n\n\n\n  \n    \n  \n\n\n\n  Contact successfully created\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                      Contact successfully created'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContactsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DragDropManager.html":{"url":"injectables/DragDropManager.html","title":"injectable - DragDropManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DragDropManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/drag-drop-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                DragDropManager handles all drag-and-drop operations for the BoardComponent.\nThis includes drag delays, drop handling, auto-scrolling, and task status updates.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                getDragDelay\n                            \n                            \n                                handleDragMove\n                            \n                            \n                                handleDrop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/drag-drop-manager.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeTaskStatus\n                        \n                    \n                \n            \n            \n                \nchangeTaskStatus(taskId: string, status: string, taskList: Task[], reloadCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:102\n                        \n                    \n\n\n            \n                \n                        Updates the status of a task and persists the change via the task service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new status for the task.\n\n\n                                            \n                                        \n                                        \n                                                taskList\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current task list to find the task in.\n\n\n                                            \n                                        \n                                        \n                                                reloadCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to reload tasks after update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDragDelay\n                        \n                    \n                \n            \n            \n                \ngetDragDelay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:21\n                        \n                    \n\n\n            \n                \n                        Returns the delay for starting a drag action based on screen width.\nPrevents accidental drags on small screens.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                Drag delay in milliseconds.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDragMove\n                        \n                    \n                \n            \n            \n                \nhandleDragMove(event: CdkDragMove, scrollSection: ElementRef)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Handles automatic scrolling while dragging near the top or bottom edge\nof the scrollable task section.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        CdkDragMove\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragMove event containing the pointer position.\n\n\n                                            \n                                        \n                                        \n                                                scrollSection\n                                            \n                                                        ElementRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe scrollable section element reference.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDrop\n                        \n                    \n                \n            \n            \n                \nhandleDrop(event: CdkDragDrop, updateCallback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/drag-drop-manager.ts:32\n                        \n                    \n\n\n            \n                \n                        Handles drag-and-drop actions for tasks using the Angular CDK.\nUpdates the task's status and reorders task lists accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CdkDragDrop\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CdkDragDrop event containing task data and drop context.\n\n\n                                            \n                                        \n                                        \n                                                updateCallback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCallback function to update task lists after drop.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ElementRef } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem, CdkDragMove } from '@angular/cdk/drag-drop';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * DragDropManager handles all drag-and-drop operations for the BoardComponent.\n * This includes drag delays, drop handling, auto-scrolling, and task status updates.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DragDropManager {\n  constructor(private taskService: TaskService) {}\n\n  /**\n   * Returns the delay for starting a drag action based on screen width.\n   * Prevents accidental drags on small screens.\n   *\n   * @returns Drag delay in milliseconds.\n   */\n  getDragDelay(): number {\n    return window.innerWidth , updateCallback: () => void): void {\n    const task = event.item.data as Task;\n    let newStatus: Task['status'];\n    \n    if (event.container.id === 'todoList') {\n      newStatus = 'to-do';\n    } else if (event.container.id === 'inprogressList') {\n      newStatus = 'in-progress';\n    } else if (event.container.id === 'awaitfeedbackList') {\n      newStatus = 'await-feedback';\n    } else if (event.container.id === 'doneList') {\n      newStatus = 'done';\n    } else {\n      return;\n    }\n\n    if (event.previousContainer === event.container) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n      if (task.id && task.status !== newStatus) {\n        const updatedTask: Task = { ...task, status: newStatus };\n        this.taskService.updateTask(task.id, updatedTask).catch((error) => {\n          console.error('Error updating task status:', error);\n        });\n      }\n    }\n    updateCallback();\n  }\n\n  /**\n   * Handles automatic scrolling while dragging near the top or bottom edge\n   * of the scrollable task section.\n   *\n   * @param event - The CdkDragMove event containing the pointer position.\n   * @param scrollSection - The scrollable section element reference.\n   */\n  handleDragMove(event: CdkDragMove, scrollSection: ElementRef): void {\n    const mouseY = event.pointerPosition.y;\n    const threshold = 100;\n    const scrollStep = 30;\n    const section = scrollSection?.nativeElement;\n    \n    if (!section) return;\n    \n    const rect = section.getBoundingClientRect();\n    if (mouseY  void\n  ): void {\n    const task = taskList.find((t) => t.id === taskId);\n    if (task && task.status !== status) {\n      const updatedTask = { ...task, status };\n      this.taskService.updateTask(taskId, updatedTask).then(() => {\n        reloadCallback();\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirestoreTimestamp.html":{"url":"interfaces/FirestoreTimestamp.html","title":"interface - FirestoreTimestamp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FirestoreTimestamp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/summary/summary.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toDate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toDate\n                        \n                    \n                \n            \n            \n                \ntoDate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showGreeting = true;\n        this.greetingState = 'start';\n        setTimeout(() => {\n          this.greetingState = 'moved';\n          setTimeout(() => {\n            this.showGreeting = false;\n            sessionStorage.setItem('greetingShown', 'true');\n          }, 2000);\n        }, 500);\n      } else {\n        this.showGreeting = false;\n      }\n    });\n\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n\n      this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n      this.doneCount = this.countTasksByStatus(tasks, 'done');\n      this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n      this.awaitingFeedbackCount = this.countTasksByStatus(\n        tasks,\n        'await-feedback'\n      );\n\n      const now = new Date();\n      const futureTasks = tasks\n        .filter((t) => t.date && t.status !== 'done')\n        .map((t) => {\n          let dateObj: Date | null = null;\n          if (t.date instanceof Date) {\n            dateObj = t.date;\n          } else if (this.isFirestoreTimestamp(t.date)) {\n            dateObj = t.date.toDate();\n          } else if (typeof t.date === 'string' || typeof t.date === 'number') {\n            dateObj = new Date(t.date);\n          }\n          return { ...t, dateObj };\n        })\n        .filter((t) => t.dateObj && t.dateObj > now);\n\n      if (futureTasks.length > 0) {\n        futureTasks.sort((a, b) => a.dateObj!.getTime() - b.dateObj!.getTime());\n        const nextDate = futureTasks[0].dateObj!;\n        this.nextDeadlineDate = nextDate;\n        this.nextDeadlineCount = futureTasks.filter(\n          (t) => t.dateObj!.getTime() === nextDate.getTime()\n        ).length;\n      } else {\n        this.nextDeadlineDate = null;\n        this.nextDeadlineCount = 0;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/footer/footer.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n\n            \n                styleUrl\n                ./footer.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-footer',\n  imports: [\n    RouterModule,\n  ],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss'\n})\nexport class FooterComponent {}\n\n    \n\n    \n        \n    \n        \n            Privacy Policy\n        \n        \n            Legal notice\n        \n        \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Privacy Policy                            Legal notice                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/header/header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isMobile\n                            \n                            \n                                menuOpen\n                            \n                            \n                                    \n                                menuRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUserName\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/header/header.component.ts:62\n                            \n                        \n\n                \n                    \n                            Initializes the header component and injects the authentication service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service responsible for user authentication.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUserName\n                        \n                    \n                \n            \n            \n                \ngetCurrentUserName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:129\n                        \n                    \n\n\n            \n                \n                        Returns the display name or email of the currently authenticated user.\nIf no user is found, returns a default label.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The display name, email, or a fallback string ('User').\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Logs the user out by calling the authentication service,\nclears session storage, and closes the menu.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the menu to automatically close it\nwhen it is open and the user clicks elsewhere in the document.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The mouse click event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Updates the isMobile flag and closes the menu on window resize\nif the new width corresponds to a desktop view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The resize event from the window.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/header/header.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the mobile menu.\nStops propagation to prevent triggering the outside click handler.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The click event on the toggle button.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : window.innerWidth \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:57\n                        \n                    \n\n            \n                \n                    Indicates if the current viewport is considered mobile (width \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:52\n                        \n                    \n\n            \n                \n                    Tracks whether the mobile menu is currently open.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        menuRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('menu')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/header/header.component.ts:62\n                        \n                    \n\n            \n                \n                    Reference to the menu DOM element, used for detecting outside clicks.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, ViewChild, ElementRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n  animations: [\n    trigger('slideInOut', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)', opacity: 0 }),\n        animate(\n          '200ms ease-out',\n          style({ transform: 'translateX(0)', opacity: 1 })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '200ms ease-in',\n          style({ transform: 'translateX(100%)', opacity: 0 })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class HeaderComponent {\n  /**\n   * Tracks whether the mobile menu is currently open.\n   */\n  menuOpen = false;\n\n  /**\n   * Indicates if the current viewport is considered mobile (width  {\n    await this.authService.signOutUser();\n    sessionStorage.removeItem('greetingShown');\n    this.menuOpen = false;\n  }\n\n  /**\n   * Returns the display name or email of the currently authenticated user.\n   * If no user is found, returns a default label.\n   * \n   * @returns The display name, email, or a fallback string ('User').\n   */\n  getCurrentUserName(): string {\n    const user = this.authService.getCurrentUser();\n    return user?.displayName || user?.email || 'User';\n  }\n\n   /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n\n    \n      Kanban Project Management Tool\n    \n\n    \n      \n        \n      \n\n      \n        {{ getCurrentUserName().charAt(0).toUpperCase() }}\n        \n          Help\n          Privacy Policy\n          Legal notice\n          Log out\n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          Kanban Project Management Tool                                          {{ getCurrentUserName().charAt(0).toUpperCase() }}                  Help          Privacy Policy          Legal notice          Log out                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HelpComponent.html":{"url":"components/HelpComponent.html","title":"component - HelpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HelpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/help/help.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-help\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./help.component.html\n            \n\n\n\n            \n                styleUrl\n                ./help.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/help/help.component.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of HelpComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/help/help.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-help',\n  imports: [RouterModule],\n  templateUrl: './help.component.html',\n  styleUrl: './help.component.scss'\n})\nexport class HelpComponent {\n\n  /**\n   * Creates an instance of HelpComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n \n     Help\n     \n        \n            \n        \n     \n \n\n  \n    Welcome to the help page for Join, your guide to using our kanban project management tool.\n    Here, we'll provide an overview of what Join is, how it can benefit you, and how to use it.\n  \n\n  \n    What is Join?\n    \n      Join is a kanban-based project management tool designed and built by a group of dedicated\n      students as part of their web development bootcamp at the Developer Akademie.\n    \n    \n      Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit\n      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users\n      manage their tasks and projects in an intuitive, visual interface.\n    \n    \n      It is important to note that Join is designed as an educational exercise and is not intended for extensive\n      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent\n      availability, reliability, accuracy, or other aspects of quality regarding Join.\n    \n  \n\n  \n    How to use it\n    \n      \n        1. Exploring the Board\n        \n          In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you'll find a default board. \n          This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.\n        \n      \n      \n        2. Creating Contacts\n        \n          In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,\n          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board. \n          If you are logged in with your personal account, you will find yourself as a contact within the contact list.\n        \n      \n      \n        3. Adding Cards\n        \n          Now that you've added your contacts, you can start adding new cards. Cards represent individual tasks. Click the\n          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task\n          name, description, due date, assignees, etc.\n        \n      \n      \n        4. Moving Cards\n        \n          As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the\n          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages \n          in the board by clicking the \"...\" button.\n        \n      \n      \n        5. Deleting Cards\n        \n          Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will\n          permanently remove it from the board. Please exercise caution when deleting cards, as this action is\n          irreversible.\n        \n      \n    \n    \n      Remember that using Join effectively requires consistent updates from you and your team to ensure the board\n      reflects the current state of your project.\n    \n  \n\n  \n    Still have questions?\n    \n      Feel free to contact us at info&#64;michelle-puschkarow.de. We're here to help!\n    \n    Enjoy using Join!\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Help                                             Welcome to the help page for Join, your guide to using our kanban project management tool.    Here, we\\'ll provide an overview of what Join is, how it can benefit you, and how to use it.        What is Join?          Join is a kanban-based project management tool designed and built by a group of dedicated      students as part of their web development bootcamp at the Developer Akademie.              Kanban, a Japanese term meaning \"billboard\", is a highly effective method to visualize work, limit      work-in-progress, and maximize efficiency (or flow). Join leverages the principles of kanban to help users      manage their tasks and projects in an intuitive, visual interface.              It is important to note that Join is designed as an educational exercise and is not intended for extensive      business usage. While we strive to ensure the best possible user experience, we cannot guarantee consistent      availability, reliability, accuracy, or other aspects of quality regarding Join.            How to use it                  1. Exploring the Board                  In order to use the board, you need to log in first. You can either register or use the guest log in account. When you log in to Join, you\\'ll find a default board.           This board represents your project and contains four default lists: To Do, In Progress, Await feedback and Done.                            2. Creating Contacts                  In Join, you can add contacts to collaborate on your projects. Go to the Contacts section,          click on New contact, and fill in the required information. Once added, these contacts can be assigned tasks and they can interact with the tasks on the board.           If you are logged in with your personal account, you will find yourself as a contact within the contact list.                            3. Adding Cards                  Now that you\\'ve added your contacts, you can start adding new cards. Cards represent individual tasks. Click the          \"+\" button under the appropriate list to create a new card. Fill in the task details, like task          name, description, due date, assignees, etc.                            4. Moving Cards                  As the task moves from one stage to another, you can reflect that on the board by dragging and dropping the          card from one list to another. On mobile devices each card has an additional menu option, where you can assign tasks to specific stages           in the board by clicking the \"...\" button.                            5. Deleting Cards                  Once a task is completed, you can either move it to the Done list or delete it. Deleting a card will          permanently remove it from the board. Please exercise caution when deleting cards, as this action is          irreversible.                            Remember that using Join effectively requires consistent updates from you and your team to ensure the board      reflects the current state of your project.            Still have questions?          Feel free to contact us at info@michelle-puschkarow.de. We\\'re here to help!        Enjoy using Join!  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HelpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegalNoticeComponent.html":{"url":"components/LegalNoticeComponent.html","title":"component - LegalNoticeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LegalNoticeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/legal-notice/legal-notice.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-legal-notice\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./legal-notice.component.html\n            \n\n\n\n            \n                styleUrl\n                ./legal-notice.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/legal-notice/legal-notice.component.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of LegalNoticeComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService used to navigate back in the routing history.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/legal-notice/legal-notice.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-legal-notice',\n  imports: [RouterModule],\n  templateUrl: './legal-notice.component.html',\n  styleUrl: './legal-notice.component.scss'\n})\nexport class LegalNoticeComponent {\n\n  /**\n   * Creates an instance of LegalNoticeComponent.\n   *\n   * @param navigationService - Service used to navigate back in the routing history.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n    \n\n    \n        \n  \n     Legal Notice\n     \n        \n            \n        \n     \n  \n\n  \n    Imprint\n    Dr. Michelle Puschkarow\n    Waldingstraße 6\n    22391 Hamburg\n    info&#64;michelle-puschkarow.de\n    Represented by:\n    Marco Palummieri\n    Viktor Naumann\n    Jenny Domsgen\n  \n\n  \n    Acceptance of Terms\n    \n      By accessing and using Join (Product), you acknowledge and agree to the following terms and\n      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.\n      We, the listed students, may update or change the terms and conditions from time to time without notice.\n    \n  \n\n  \n    Scope and Ownership of the Product\n    \n      Join has been developed as part of a student group project in a web development bootcamp at the Developer\n      Akademie GmbH. It has an educational purpose and is not intended for extensive personal &amp; business usage. As\n      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality\n      regarding this Product.\n    \n    \n      The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,\n      distribution, or replication of the design is strictly prohibited.\n    \n  \n\n  \n    Proprietary Right\n    \n      Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in\n      Join, including any associated copyrighted material, trademarks,\n      and other proprietary information.\n    \n  \n\n  \n    Use of the Product\n    \n      Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.\n      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly\n      prohibited. You are solely responsible for your interactions with other users of Join.\n    \n  \n\n  \n    Disclaimer of Warranties and Limitation of Liability\n    \n      Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to\n      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.\n    \n    \n      In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,\n      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of\n      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such\n      damages, arising out of or in connection with the use or performance of Join.\n    \n  \n\n  \n    Indemnity\n    \n      You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our\n      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,\n      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join\n      and/or your breach of this Legal Notice.\n    \n  \n\n  Date: July 17, 2025\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '       Legal Notice                                              Imprint    Dr. Michelle Puschkarow    Waldingstraße 6    22391 Hamburg    info@michelle-puschkarow.de    Represented by:    Marco Palummieri    Viktor Naumann    Jenny Domsgen        Acceptance of Terms          By accessing and using Join (Product), you acknowledge and agree to the following terms and      conditions, and any policies, guidelines, or amendments thereto that may be presented to you from time to time.      We, the listed students, may update or change the terms and conditions from time to time without notice.            Scope and Ownership of the Product          Join has been developed as part of a student group project in a web development bootcamp at the Developer      Akademie GmbH. It has an educational purpose and is not intended for extensive personal & business usage. As      such, we cannot guarantee consistent availability, reliability, accuracy, or any other aspect of quality      regarding this Product.              The design of Join is owned by the Developer Akademie GmbH. Unauthorized use, reproduction, modification,      distribution, or replication of the design is strictly prohibited.            Proprietary Right          Aside from the design owned by Developer Akademie GmbH, we, the listed students, retain all proprietary rights in      Join, including any associated copyrighted material, trademarks,      and other proprietary information.            Use of the Product          Join is intended to be used for lawful purposes only, in accordance with all applicable laws and regulations.      Any use of Join for illegal activities, or to harass, harm, threaten, or intimidate another person, is strictly      prohibited. You are solely responsible for your interactions with other users of Join.            Disclaimer of Warranties and Limitation of Liability          Join is provided \"as is\" without warranty of any kind, whether express or implied, including but not limited to      the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.              In no event will we, the listed students, or the Developer Akademie, be liable for any direct, indirect,      incidental, special, consequential or exemplary damages, including but not limited to, damages for loss of      profits, goodwill, use, data, or other intangible losses, even if we have been advised of the possibility of such      damages, arising out of or in connection with the use or performance of Join.            Indemnity          You agree to indemnify, defend and hold harmless us, the listed students, the Developer Akademie, and our      affiliates, partners, officers, directors, agents, and employees, from and against any claim, demand, loss,      damage, cost, or liability (including reasonable legal fees) arising out of or relating to your use of Join      and/or your breach of this Legal Notice.        Date: July 17, 2025'\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LegalNoticeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login/login.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                LoginHeaderComponent\n                                FooterComponent\n                            CommonModule\n                            ReactiveFormsModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                isTouchDevice\n                            \n                            \n                                loginForm\n                            \n                            \n                                logoState\n                            \n                            \n                                pageLoaded\n                            \n                            \n                                showPassword\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkIfTouchDevice\n                            \n                            \n                                getValidationMessage\n                            \n                            \n                                    Private\n                                initializeAnimation\n                            \n                            \n                                    Private\n                                initializeForm\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Async\n                                onGuestLogin\n                            \n                            \n                                    Async\n                                onLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/login/login.component.ts:94\n                            \n                        \n\n                \n                    \n                            Initializes the LoginComponent and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder instance for creating the login form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling authentication\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router for navigation after login\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkIfTouchDevice\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfTouchDevice()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:122\n                        \n                    \n\n\n            \n                \n                        Checks whether the user's device is a touch-enabled device.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:195\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for a given form field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the form control (e.g. 'email' or 'password')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string message describing the validation issue.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:140\n                        \n                    \n\n\n            \n                \n                        Triggers a delayed logo animation if it hasn't already occurred.\nStores a flag in session storage to prevent repeat animation.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:129\n                        \n                    \n\n\n            \n                \n                        Initializes the reactive login form with validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:207\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: resets the loading state when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: initializes the login form, touch detection,\nand triggers logo animation on first visit.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onGuestLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onGuestLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:177\n                        \n                    \n\n\n            \n                \n                        Logs in as a guest user using the AuthService.\nNavigates to the summary page on success or displays an error.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    onLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login/login.component.ts:156\n                        \n                    \n\n\n            \n                \n                        Handles user login using credentials from the form.\nShows loading indicator and displays errors if authentication fails.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:79\n                        \n                    \n\n            \n                \n                    Displays the current error message if login fails.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:84\n                        \n                    \n\n            \n                \n                    Shows whether a login request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:94\n                        \n                    \n\n            \n                \n                    Detects if the device supports touch input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:74\n                        \n                    \n\n            \n                \n                    Reactive form group for email and password login fields.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:64\n                        \n                    \n\n            \n                \n                    State of the logo animation. 'start' before animation, 'moved' after.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageLoaded\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:69\n                        \n                    \n\n            \n                \n                    Indicates whether the page has finished loading (used for triggering animation).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login/login.component.ts:89\n                        \n                    \n\n            \n                \n                    Indicates whether the password should be shown in plain text.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FooterComponent } from '../footer/footer.component';\nimport { LoginHeaderComponent } from '../login-header/login-header.component';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  group\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router, RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    LoginHeaderComponent,\n    FooterComponent,\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n  animations: [\n    trigger('fadeOutWrapper', [\n      state('start', style({\n        opacity: 1\n      })),\n      state('moved', style({\n        opacity: 0\n      })),\n      transition('start => moved', [\n        animate('2s 0.5s ease-in-out')\n      ])\n    ])\n  ]\n})\nexport class LoginComponent {\n  /**\n   * State of the logo animation. `'start'` before animation, `'moved'` after.\n   */\n  logoState: 'start' | 'moved' = 'start';\n\n  /**\n   * Indicates whether the page has finished loading (used for triggering animation).\n   */\n  pageLoaded = false;\n\n  /**\n   * Reactive form group for email and password login fields.\n   */\n  loginForm!: FormGroup;\n\n  /**\n   * Displays the current error message if login fails.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Shows whether a login request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Indicates whether the password should be shown in plain text.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Detects if the device supports touch input.\n   */\n  isTouchDevice = false;\n\n  /**\n   * Initializes the LoginComponent and injects required services.\n   * \n   * @param fb FormBuilder instance for creating the login form\n   * @param authService Service for handling authentication\n   * @param router Router for navigation after login\n   */\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n  ) {}\n\n  /**\n   * Lifecycle hook: initializes the login form, touch detection,\n   * and triggers logo animation on first visit.\n   */\n  ngOnInit(): void {\n    this.initializeForm();\n    this.checkIfTouchDevice();\n    this.initializeAnimation();    \n  }\n\n  /**\n   * Checks whether the user's device is a touch-enabled device.\n   */\n  private checkIfTouchDevice(): void {\n    this.isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n  }\n\n  /**\n   * Initializes the reactive login form with validators.\n   */\n  private initializeForm(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  /**\n   * Triggers a delayed logo animation if it hasn't already occurred.\n   * Stores a flag in session storage to prevent repeat animation.\n   */\n  private initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoMoved')) {\n      setTimeout(() => {\n        this.pageLoaded = true;\n        this.logoState = 'moved';\n        sessionStorage.setItem('logoMoved', 'true');\n      }, 100);\n    } else {\n      this.logoState = 'moved';\n    }\n  }\n\n  /**\n   * Handles user login using credentials from the form.\n   * Shows loading indicator and displays errors if authentication fails.\n   */\n  async onLogin(): Promise {\n    if (this.loginForm.invalid) {\n      this.loginForm.markAllAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = '';\n    const { email, password } = this.loginForm.value;\n    const result = await this.authService.signIn(email, password);\n    if (result.success) {\n      this.router.navigate(['/summary']);\n    } else {\n      this.errorMessage = result.message || 'Login failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Logs in as a guest user using the AuthService.\n   * Navigates to the summary page on success or displays an error.\n   */\n  async onGuestLogin(): Promise {\n    this.isLoading = true;\n    this.errorMessage = '';\n    const result = await this.authService.signInAsGuest();\n    if (result.success) {\n      this.router.navigate(['/summary']);\n    } else {\n      this.errorMessage = result.message || 'Guest login failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for a given form field.\n   * \n   * @param field The name of the form control (e.g. 'email' or 'password')\n   * @returns A string message describing the validation issue.\n   */\n  getValidationMessage(field: string): string {\n    const control = this.loginForm.get(field);\n    if (!control || !control.touched || !control.errors) return '';\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['email']) return 'Please enter a valid email address';\n    if (control.errors['minlength']) return 'Password must be at least 8 characters long';\n    return '';\n  }\n\n  /**\n   * Lifecycle hook: resets the loading state when the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    this.isLoading = false;\n  }\n}\n\n    \n\n    \n        \n    \n    \n        \n    \n\n    \n        Log in\n        \n            \n                \n                    \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('email') }}\n                    \n                \n                \n                    \n                        \n                        \n                        \n                        \n                    \n                    \n                        {{ getValidationMessage('password') }}\n                    \n                \n                {{ errorMessage }}\n            \n            \n                \n                    {{ isLoading ? 'Loading...' : 'Log in' }}\n                \n                \n                    {{ isLoading ? 'Loading...' : 'Guest Log in' }}\n                \n            \n        \n    \n\n    \n        Not a Join user?\n        \n            Sign up\n        \n    \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                Log in                                                                                                                                                                                                {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                        {{ getValidationMessage(\\'password\\') }}                                                    {{ errorMessage }}                                                            {{ isLoading ? \\'Loading...\\' : \\'Log in\\' }}                                                    {{ isLoading ? \\'Loading...\\' : \\'Guest Log in\\' }}                                                    Not a Join user?                    Sign up                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginHeaderComponent.html":{"url":"components/LoginHeaderComponent.html","title":"component - LoginHeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginHeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/login-header/login-header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login-header\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login-header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login-header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTouchDevice\n                            \n                            \n                                logoState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initializeAnimation\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        initializeAnimation\n                        \n                    \n                \n            \n            \n                \ninitializeAnimation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:69\n                        \n                    \n\n\n            \n                \n                        Triggers the logo fade-in animation if it hasn’t already played during the session.\nStores a flag in sessionStorage to prevent the animation from repeating.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/login-header/login-header.component.ts:61\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that initializes the animation state when the component loads.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTouchDevice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:56\n                        \n                    \n\n            \n                \n                    Indicates whether the current device supports touch input.\nCurrently unused, but reserved for future enhancements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"appear\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/login-header/login-header.component.ts:50\n                        \n                    \n\n            \n                \n                    The current state of the logo animation.\n\n'start': hidden state with opacity 0\n'appear': visible state with opacity 1\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/animations';\n\n\n@Component({\n  selector: 'app-login-header',\n  imports: [\n    RouterModule,\n  ],\n  templateUrl: './login-header.component.html',\n  styleUrl: './login-header.component.scss',\n  animations: [\n    trigger('fadeOut', [\n      state('start', style({\n        opacity: 0\n      })),\n      state('appear', style({\n        opacity: 1\n      })),\n      transition('start => appear', [\n        animate('2s 0.7s ease-in-out')\n      ])\n    ])\n  ]\n})\nexport class LoginHeaderComponent {\n  /**\n   * The current state of the logo animation.\n   * - `'start'`: hidden state with opacity 0\n   * - `'appear'`: visible state with opacity 1\n   */\n  logoState: 'start' | 'appear' = 'start';\n\n  /**\n   * Indicates whether the current device supports touch input.\n   * Currently unused, but reserved for future enhancements.\n   */\n  isTouchDevice: boolean = false;\n\n  /**\n   * Lifecycle hook that initializes the animation state when the component loads.\n   */\n  ngOnInit(): void {\n    this.initializeAnimation();\n  }\n\n  /**\n   * Triggers the logo fade-in animation if it hasn’t already played during the session.\n   * Stores a flag in sessionStorage to prevent the animation from repeating.\n   */\n  initializeAnimation(): void {\n    if (!sessionStorage.getItem('logoAppeared')) {\n      setTimeout(() => {\n        this.logoState = 'appear';\n        sessionStorage.setItem('logoAppeared', 'true');\n      }, 100);\n    } else {\n      this.logoState = 'appear';\n    }\n  }\n}\n    \n\n    \n        \n    \n        \n    \n    \n        Not a Join user?\n        \n            Sign up\n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Not a Join user?                    Sign up            '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginHeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NavigationHistoryService.html":{"url":"injectables/NavigationHistoryService.html","title":"injectable - NavigationHistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NavigationHistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/navigation-history.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service to keep track of recent navigation history within the Angular application.\nStores the last 3 visited URLs (including the current one) and allows navigation\nback to the previous URL.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                history\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getHistory\n                            \n                            \n                                    Public\n                                getPreviousUrl\n                            \n                            \n                                    Public\n                                navigateBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/navigation-history.service.ts:16\n                            \n                        \n\n                \n                    \n                            Subscribes to Angular Router events and tracks navigation history.\nKeeps the last 3 visited URLs (including the current one), trimming\nthe oldest entry when the limit is reached.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router used to listen to navigation events.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Returns a copy of the navigation history.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of the last visited URLs (maximum of 3).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getPreviousUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPreviousUrl()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Gets the URL visited before the current one.\n\n\n                        \n                            Returns :     string | null\n\n                        \n                            \n                                The previous URL, or null if not available.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        navigateBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/navigation-history.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous URL if available.\nIf no previous URL is stored, navigates to the root path ('/').\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/services/navigation-history.service.ts:16\n                        \n                    \n\n            \n                \n                    Internal array holding the last 3 visited URLs\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n/**\n * A service to keep track of recent navigation history within the Angular application.\n * \n * Stores the last 3 visited URLs (including the current one) and allows navigation\n * back to the previous URL.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationHistoryService {\n  /** Internal array holding the last 3 visited URLs */\n  private history: string[] = [];\n\n  /**\n   * Subscribes to Angular Router events and tracks navigation history.\n   * \n   * Keeps the last 3 visited URLs (including the current one), trimming\n   * the oldest entry when the limit is reached.\n   * \n   * @param router - Angular Router used to listen to navigation events.\n   */\n  constructor(private router: Router) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        if (this.history.length === 3) {\n          this.history.shift(); // Remove the oldest URL\n        }\n        this.history.push(event.urlAfterRedirects);\n      });\n  }\n\n  /**\n   * Returns a copy of the navigation history.\n   * \n   * @returns An array of the last visited URLs (maximum of 3).\n   */\n  public getHistory(): string[] {\n    return [...this.history];\n  }\n\n  /**\n   * Gets the URL visited before the current one.\n   * \n   * @returns The previous URL, or null if not available.\n   */\n  public getPreviousUrl(): string | null {\n    if (this.history.length > 1) {\n      return this.history[this.history.length - 2];\n    }\n    return null;\n  }\n\n  /**\n   * Navigates back to the previous URL if available.\n   * \n   * If no previous URL is stored, navigates to the root path (`'/'`).\n   */\n  public navigateBack(): void {\n    const previousUrl = this.getPreviousUrl();\n    if (previousUrl) {\n      this.router.navigateByUrl(previousUrl);\n    } else {\n      this.router.navigateByUrl('/');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverlayManager.html":{"url":"injectables/OverlayManager.html","title":"injectable - OverlayManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OverlayManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/overlay-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                OverlayManager handles all overlay-related operations for the BoardComponent.\nThis includes opening/closing overlays, managing animation states, and handling responsive behavior.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                animationDirection\n                            \n                            \n                                    Private\n                                backgroundVisible\n                            \n                            \n                                    Private\n                                overlayVisible\n                            \n                            \n                                    Private\n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Private\n                                showAddOrEditTask\n                            \n                            \n                                    Private\n                                showTaskDetails\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDetailsOverlay\n                            \n                            \n                                getAnimationDirection\n                            \n                            \n                                getBackgroundVisible\n                            \n                            \n                                getOverlayVisible\n                            \n                            \n                                getSelectedTask\n                            \n                            \n                                getShowAddOrEditTask\n                            \n                            \n                                getShowTaskDetails\n                            \n                            \n                                onOverlayAnimationDone\n                            \n                            \n                                openAddOrEditOverlay\n                            \n                            \n                                openTaskDetail\n                            \n                            \n                                removeBackground\n                            \n                            \n                                resetOverlayStates\n                            \n                            \n                                setAnimationDirection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/overlay-manager.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDetailsOverlay\n                        \n                    \n                \n            \n            \n                \ncloseDetailsOverlay(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:142\n                        \n                    \n\n\n            \n                \n                        Closes the overlay for task details or task form.\nAlso resets relevant state variables and clears editing data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string indicating why the overlay is being closed (e.g., 'close', 'added').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAnimationDirection\n                        \n                    \n                \n            \n            \n                \ngetAnimationDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:29\n                        \n                    \n\n\n            \n                \n                        Gets the current animation direction\n\n\n                        \n                            Returns :     \"right\" | \"bottom\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBackgroundVisible\n                        \n                    \n                \n            \n            \n                \ngetBackgroundVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:36\n                        \n                    \n\n\n            \n                \n                        Gets the background visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayVisible\n                        \n                    \n                \n            \n            \n                \ngetOverlayVisible()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:43\n                        \n                    \n\n\n            \n                \n                        Gets the overlay visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSelectedTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Gets the currently selected task\n\n\n                        \n                            Returns :         Task | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowAddOrEditTask\n                        \n                    \n                \n            \n            \n                \ngetShowAddOrEditTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:57\n                        \n                    \n\n\n            \n                \n                        Gets the add/edit task visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowTaskDetails\n                        \n                    \n                \n            \n            \n                \ngetShowTaskDetails()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:50\n                        \n                    \n\n\n            \n                \n                        Gets the task details visibility state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOverlayAnimationDone\n                        \n                    \n                \n            \n            \n                \nonOverlayAnimationDone(event: AnimationEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:96\n                        \n                    \n\n\n            \n                \n                        Callback for when the overlay slide-in animation is finished.\nSlight delay before making the background visible for smooth UX.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        AnimationEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAnimationEvent from Angular.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openAddOrEditOverlay\n                        \n                    \n                \n            \n            \n                \nopenAddOrEditOverlay(event: string, status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:111\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for adding or editing a task.\nOn small screens, navigates to a separate route; otherwise opens the overlay inline.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nEither 'open' or 'edit', indicating the action type.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to prefill in the add/edit task form.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetail\n                        \n                    \n                \n            \n            \n                \nopenTaskDetail(selectedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:129\n                        \n                    \n\n\n            \n                \n                        Opens the overlay for viewing the details of a selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object to display in detail.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBackground\n                        \n                    \n                \n            \n            \n                \nremoveBackground(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:83\n                        \n                    \n\n\n            \n                \n                        Handles removal of background and overlay if the event indicates closure.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA string (expected: 'closed') that triggers background removal.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetOverlayStates\n                        \n                    \n                \n            \n            \n                \nresetOverlayStates()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:156\n                        \n                    \n\n\n            \n                \n                        Resets all overlay states to default values\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAnimationDirection\n                        \n                    \n                \n            \n            \n                \nsetAnimationDirection(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/overlay-manager.ts:74\n                        \n                    \n\n\n            \n                \n                        Sets the animation direction based on screen width.\nUsed for responsive slide-in overlays.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrent screen width.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        animationDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"right\" | \"bottom\"\n\n                    \n                \n                \n                    \n                        Default value : 'right'\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        backgroundVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showAddOrEditTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTaskDetails\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/overlay-manager.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AnimationEvent } from '@angular/animations';\nimport { Task, TaskService } from '../services/task.service';\n\n/**\n * OverlayManager handles all overlay-related operations for the BoardComponent.\n * This includes opening/closing overlays, managing animation states, and handling responsive behavior.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayManager {\n  private animationDirection: 'right' | 'bottom' = 'right';\n  private backgroundVisible = false;\n  private overlayVisible = false;\n  private showTaskDetails = false;\n  private showAddOrEditTask: boolean = false;\n  private selectedTask?: Task;\n\n  constructor(\n    private router: Router,\n    private taskService: TaskService\n  ) {}\n\n  /**\n   * Gets the current animation direction\n   */\n  getAnimationDirection(): 'right' | 'bottom' {\n    return this.animationDirection;\n  }\n\n  /**\n   * Gets the background visibility state\n   */\n  getBackgroundVisible(): boolean {\n    return this.backgroundVisible;\n  }\n\n  /**\n   * Gets the overlay visibility state\n   */\n  getOverlayVisible(): boolean {\n    return this.overlayVisible;\n  }\n\n  /**\n   * Gets the task details visibility state\n   */\n  getShowTaskDetails(): boolean {\n    return this.showTaskDetails;\n  }\n\n  /**\n   * Gets the add/edit task visibility state\n   */\n  getShowAddOrEditTask(): boolean {\n    return this.showAddOrEditTask;\n  }\n\n  /**\n   * Gets the currently selected task\n   */\n  getSelectedTask(): Task | undefined {\n    return this.selectedTask;\n  }\n\n  /**\n   * Sets the animation direction based on screen width.\n   * Used for responsive slide-in overlays.\n   *\n   * @param width - Current screen width.\n   */\n  setAnimationDirection(width: number): void {\n    this.animationDirection = width  {\n        this.backgroundVisible = true;\n      }, 50);\n    }\n  }\n\n  /**\n   * Opens the overlay for adding or editing a task.\n   * On small screens, navigates to a separate route; otherwise opens the overlay inline.\n   *\n   * @param event - Either 'open' or 'edit', indicating the action type.\n   * @param status - The status to prefill in the add/edit task form.\n   */\n  openAddOrEditOverlay(event: string, status: string): void {\n    const isSmallScreen = window.innerWidth \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PrivacyPolicyComponent.html":{"url":"components/PrivacyPolicyComponent.html","title":"component - PrivacyPolicyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PrivacyPolicyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/privacy-policy/privacy-policy.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-privacy-policy\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./privacy-policy.component.html\n            \n\n\n\n            \n                styleUrl\n                ./privacy-policy.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(navigationService: NavigationHistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrivacyPolicyComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        navigationService\n                                                  \n                                                        \n                                                                        NavigationHistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nA service used to handle navigation history and go back to the previous route.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/privacy-policy/privacy-policy.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous route using the NavigationHistoryService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationHistoryService } from '../../services/navigation-history.service';\n\n@Component({\n  selector: 'app-privacy-policy',\n  imports: [RouterModule],\n  templateUrl: './privacy-policy.component.html',\n  styleUrl: './privacy-policy.component.scss'\n})\nexport class PrivacyPolicyComponent {\n\n  /**\n   * Creates an instance of PrivacyPolicyComponent.\n   *\n   * @param navigationService - A service used to handle navigation history and go back to the previous route.\n   */\n  constructor(private navigationService: NavigationHistoryService) {}\n\n  /**\n   * Navigates back to the previous route using the NavigationHistoryService.\n   */\n  goBack(): void {\n    this.navigationService.navigateBack();\n  }\n}\n\n    \n\n    \n        \n    \n     Privacy Policy\n     \n        \n            \n        \n     \n    \n  Information in accordance with Section 5 of the German Digital Services Act (DDG)\n  Last updated: July 17, 2025\n\n  \n    1. Disclaimer\n    1.1 General Information\n    \n      This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your\n      information when You use Join, and tells You about Your privacy rights and how the law protects You.\n    \n    \n      We use Your Personal data to provide and improve the Service. By using the Service, You agree to the\n      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been\n      created with the help of the Privacy Policy Generator.\n    \n  \n\n  \n    1.2 Note on Data Transmission\n    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.\n  \n\n  \n    2. Interpretation and Definitions\n    2.1 Interpretation\n    \n      The words of which the initial letter is capitalized have meanings defined under the following conditions.\n      The following definitions shall have the same meaning regardless of whether they appear in singular or in\n      plural.\n    \n\n    2.2 Definitions\n    \n      Account\n      A unique account created for You to access the kanban board Join.\n\n      Application\n      Refers to Join, the software program provided by the Company.\n\n      Company\n      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.\n\n      Cookies\n      Small files placed on Your device by a website, containing browsing history details.\n\n      Device\n      Any device that can access the Service (e.g. computer, cellphone, tablet).\n\n      Personal Data\n      Any information relating to an identified or identifiable individual.\n\n      Service\n      The Application or the Website or both - meaning Join.\n\n      Service Provider\n       Any person or company processing data on behalf of the Company to facilitate or provide the Service.\n\n      Usage Data\n       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).\n\n      You\n      \n        The individual or legal entity accessing or using the Service, as applicable.\n      \n    \n  \n\n  \n    3. Collecting and Using Your Personal Data\n\n    3.1 Types of Data Collected\n    3.1.1 Personal Data\n    \n      We may ask You for personally identifiable information, such as email address, first and last name,\n      phone number, address, city, state/province, ZIP/postal code.\n    \n\n    3.1.2 Usage Data\n    \n      Collected automatically, including IP address, browser type and version, pages visited, visit time and date,\n      time spent, unique device identifiers and other diagnostic data.\n      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.\n      This data comes from your browser or mobile device when accessing the Service.\n    \n\n    3.1.3 Tracking Technologies and Cookies\n    \n      We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the\n      Service.\n    \n    \n      Cookies: small files you can reject via browser settings.\n      Web Beacons: pixel files for tracking email opens, page popularity, etc.\n    \n    Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).\n\n    Examples of Cookies Used\n    \n      Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.\n      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.\n      Functionality Cookies (Persistent) – remember login or language preferences.\n    \n    \n      For more details and cookie choices, please visit our Cookies Policy section.\n    \n  \n\n  \n    4. Use of Your Personal Data\n    \n      Provide and maintain our Service, monitor usage.\n      Manage Your Account and registration.\n      Perform contracts (orders, service compliance).\n      Contact You (email, phone, SMS, push notifications).\n      Provide news, offers, events (unless unsubscribed).\n      Manage your requests to Us.\n      Business transfers (merger, sale, restructuring).\n      Other: analytics, usage trends, improve campaigns & Service.\n    \n\n    4.1 Sharing of Personal Information\n    \n      With Service Providers: for analysis and support.\n      For Business Transfers: in events like sale or acquisition.\n      With Affiliates: under this same Privacy Policy.\n      With Business Partners: for related products, services, promotions.\n      With Other Users: any info you share publicly is visible.\n      With Your Consent: for any other purposes.\n    \n  \n\n  \n    4.2 Transfer of Your Personal Data\n    \n      Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We\n      take steps to ensure adequate controls and security are in place.\n    \n  \n\n  \n    4.3 Data Retention and Deletion\n    \n      We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.\n      Usage Data retained for analytics or security.\n      You can delete or request deletion of your data via account settings or by contacting us. We may retain\n      information if legally required.\n    \n  \n\n  \n    4.4 Disclosure of Your Personal Data\n\n    4.4.1 Business Transactions\n    \n      If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify\n      before such changes.\n    \n\n    4.4.2 Law Enforcement & Other Legal Requirements\n    \n      We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.\n    \n  \n\n  \n    5. Security of Your Personal Data\n    \n      We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to\n      internet and electronic storage methods.\n    \n  \n\n  \n    6. Links to Other Websites\n    \n      Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for\n      their policies or content. Please review their Privacy Policies.\n    \n  \n\n  \n    7. Changes to this Privacy Policy\n    \n      We may update this policy from time to time. We'll notify via email or Service notice and update the \"Last\n      updated\" date. Changes take effect when posted. Please review periodically.\n    \n  \n\n  \n    8. Data Storage and Third-Party Services\n    \n      Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.\n      Through the use of Firebase services the following data might be processed:\n    \n    \n      Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.\n      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.\n      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.\n      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.\n    \n    \n      The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to\n      Google´s Privacy Policy and \n      Firebase’s Data Processing and Security Terms\n    \n  \n\n  \n    9. Prohibition of unsolicited contact\n    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted. \n       As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.\n  \n\n  \n    10. Contact Us\n    \n      If there are still questions, please contact us at\n      info&#64;michelle-puschkarow.de.\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '         Privacy Policy                                            Information in accordance with Section 5 of the German Digital Services Act (DDG)  Last updated: July 17, 2025      1. Disclaimer    1.1 General Information          This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your      information when You use Join, and tells You about Your privacy rights and how the law protects You.              We use Your Personal data to provide and improve the Service. By using the Service, You agree to the      collection and use of information in accordance with this Privacy Policy. This Privacy Policy has been      created with the help of the Privacy Policy Generator.            1.2 Note on Data Transmission    Please note that data transmission over the Internet (e.g., via email) may have security vulnerabilities. Complete protection of data from third-party access is not possible.        2. Interpretation and Definitions    2.1 Interpretation          The words of which the initial letter is capitalized have meanings defined under the following conditions.      The following definitions shall have the same meaning regardless of whether they appear in singular or in      plural.        2.2 Definitions          Account      A unique account created for You to access the kanban board Join.      Application      Refers to Join, the software program provided by the Company.      Company      “the Company”, “We”, “Us” or “Our” refers to the providers of Join.      Cookies      Small files placed on Your device by a website, containing browsing history details.      Device      Any device that can access the Service (e.g. computer, cellphone, tablet).      Personal Data      Any information relating to an identified or identifiable individual.      Service      The Application or the Website or both - meaning Join.      Service Provider       Any person or company processing data on behalf of the Company to facilitate or provide the Service.      Usage Data       Data collected automatically when using the Service (e.g. IP address, browser type, time of visit).      You              The individual or legal entity accessing or using the Service, as applicable.                  3. Collecting and Using Your Personal Data    3.1 Types of Data Collected    3.1.1 Personal Data          We may ask You for personally identifiable information, such as email address, first and last name,      phone number, address, city, state/province, ZIP/postal code.        3.1.2 Usage Data          Collected automatically, including IP address, browser type and version, pages visited, visit time and date,      time spent, unique device identifiers and other diagnostic data.      On mobile devices, we may also collect device type, unique device ID, OS, browser, and similar diagnostics.      This data comes from your browser or mobile device when accessing the Service.        3.1.3 Tracking Technologies and Cookies          We use Cookies and similar tracking technologies (beacons, tags, scripts) to track activity and improve the      Service.              Cookies: small files you can reject via browser settings.      Web Beacons: pixel files for tracking email opens, page popularity, etc.        Cookies can be Session (deleted at browser close) or Persistent (remain until expiry).    Examples of Cookies Used          Necessary / Essential Cookies (Session) – authenticate users and prevent fraud.      Cookies Policy / Notice Acceptance Cookies (Persistent) – remember your cookie acceptance.      Functionality Cookies (Persistent) – remember login or language preferences.              For more details and cookie choices, please visit our Cookies Policy section.            4. Use of Your Personal Data          Provide and maintain our Service, monitor usage.      Manage Your Account and registration.      Perform contracts (orders, service compliance).      Contact You (email, phone, SMS, push notifications).      Provide news, offers, events (unless unsubscribed).      Manage your requests to Us.      Business transfers (merger, sale, restructuring).      Other: analytics, usage trends, improve campaigns & Service.        4.1 Sharing of Personal Information          With Service Providers: for analysis and support.      For Business Transfers: in events like sale or acquisition.      With Affiliates: under this same Privacy Policy.      With Business Partners: for related products, services, promotions.      With Other Users: any info you share publicly is visible.      With Your Consent: for any other purposes.            4.2 Transfer of Your Personal Data          Your data may be processed or stored outside your jurisdiction. You consent to this by using the Service. We      take steps to ensure adequate controls and security are in place.            4.3 Data Retention and Deletion          We keep Personal Data as long as necessary for policy purposes, legal obligations, disputes, and enforcement.      Usage Data retained for analytics or security.      You can delete or request deletion of your data via account settings or by contacting us. We may retain      information if legally required.            4.4 Disclosure of Your Personal Data    4.4.1 Business Transactions          If the Company undergoes merger, acquisition, or asset sale, your data may be transferred. We will notify      before such changes.        4.4.2 Law Enforcement & Other Legal Requirements          We may disclose data if required by law, to protect rights, investigate wrongdoing, or ensure public safety.            5. Security of Your Personal Data          We strive to protect your data with commercially acceptable methods, but cannot guarantee 100% security due to      internet and electronic storage methods.            6. Links to Other Websites          Our Service may contain links to third‑party sites. We have no control over and assume no responsibility for      their policies or content. Please review their Privacy Policies.            7. Changes to this Privacy Policy          We may update this policy from time to time. We\\'ll notify via email or Service notice and update the \"Last      updated\" date. Changes take effect when posted. Please review periodically.            8. Data Storage and Third-Party Services          Our application uses Firebase, a service provided by Google LLC, for storing and managing data related to your tasks, contacts, and account information.      Through the use of Firebase services the following data might be processed:              Firebase Authentication: Email addresses, encrypted passwords, authentication tokens, which our Service needs to manage user accounts and logins securely.      Firestore Database: To store user-generated data such as tasks, contact details, and project-related information.      Firestore Analytics: Anonymized usage statistics and understand how users interact with the Service. This might include  Device identifiers, App usage data like session duration and Events like task creation.      Cloud Functions: These functions process relevant data (e.g. task updates, database triggers) in real time to perform backend operations and therfore provide dynamic app features.              The data is stored securely in Google’s cloud infrastructure. Firebase may collect certain metadata for operational and security purposes. For more information, please refer to      Google´s Privacy Policy and       Firebase’s Data Processing and Security Terms            9. Prohibition of unsolicited contact    Use of the contact details provided in the legal notice for sending unsolicited advertising or information is not permitted.        As operator of the pages we reserves the right to take legal action against unsolicited advertising information, such as spam or similar abuses.        10. Contact Us          If there are still questions, please contact us at      info@michelle-puschkarow.de.      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PrivacyPolicyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SidebarComponent.html":{"url":"components/SidebarComponent.html","title":"component - SidebarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SidebarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/sidebar/sidebar.component.ts\n\n\n\n    \n        Description\n    \n    \n        Sidebar component for application navigation.\nDisplays navigation links and checks the user's authentication status.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sidebar\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sidebar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sidebar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLoggedIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/sidebar/sidebar.component.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs the SidebarComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing user authentication\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/sidebar/sidebar.component.ts:30\n                        \n                    \n\n\n            \n                \n                        Checks whether the user is currently logged in.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the user is authenticated, otherwise false\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Sidebar component for application navigation.\n * Displays navigation links and checks the user's authentication status.\n */\n@Component({\n  selector: 'app-sidebar',\n  imports: [\n    RouterModule,\n    CommonModule\n  ],\n  templateUrl: './sidebar.component.html',\n  styleUrl: './sidebar.component.scss'\n})\nexport class SidebarComponent {\n  /**\n   * Constructs the SidebarComponent.\n   * @param authService - Service for managing user authentication\n   */\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Checks whether the user is currently logged in.\n   * @returns True if the user is authenticated, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n}\n\n    \n\n    \n        \n  \n    \n  \n  \n    \n      \n        \n          \n          Summary\n        \n      \n      \n        \n          \n          Add Task\n        \n      \n      \n        \n          \n          Board\n        \n      \n      \n        \n          \n          Contacts\n        \n      \n    \n  \n  \n    \n      \n        \n          \n          Log In\n        \n      \n    \n  \n  \n    Privacy Policy\n    Legal notice\n  \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                Summary                                                Add Task                                                Board                                                Contacts                                                            Log In                          Privacy Policy    Legal notice  '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SidebarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login-signup/signup/signup.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                                FooterComponent\n                            ReactiveFormsModule\n                \n            \n\n            \n                styleUrls\n                ./signup.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                isLoading\n                            \n                            \n                                showConfirmPassword\n                            \n                            \n                                showPassword\n                            \n                            \n                                signupform\n                            \n                            \n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getValidationMessage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onBackToLogin\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                passwordsMatchValidator\n                            \n                            \n                                saveNewContact\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(form: FormBuilder, authService: AuthService, router: Router, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                            \n                        \n\n                \n                    \n                            Initializes the signup form and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder for creating the reactive form\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for user registration\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to store new users as contacts\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationMessage\n                        \n                    \n                \n            \n            \n                \ngetValidationMessage(field: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Returns a user-friendly validation message for the given form field.\nIncludes special handling for mismatched passwords.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the form control.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A descriptive validation message or empty string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: creates the signup form with all necessary validators.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBackToLogin\n                        \n                    \n                \n            \n            \n                \nonBackToLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Navigates the user back to the login screen.\nUses skipLocationChange to avoid adding the redirect to browser history.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:119\n                        \n                    \n\n\n            \n                \n                        Handles the form submission process, including validation,\nuser registration, contact saving, and navigation on success.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordsMatchValidator\n                        \n                    \n                \n            \n            \n                \npasswordsMatchValidator(group: AbstractControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Custom validator to ensure password and confirm password fields match.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                group\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The form group containing password fields.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                A validation error object or null if passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveNewContact\n                        \n                    \n                \n            \n            \n                \nsaveNewContact(newName: string, newEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login-signup/signup/signup.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Creates and stores a new contact based on registration input.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name entered during registration.\n\n                                            \n                                        \n                                        \n                                                newEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email address entered during registration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:49\n                        \n                    \n\n            \n                \n                    Holds the current error message for display on form failure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:59\n                        \n                    \n\n            \n                \n                    Indicates whether a registration request is currently in progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showConfirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:69\n                        \n                    \n\n            \n                \n                    Controls visibility of the confirm password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:64\n                        \n                    \n\n            \n                \n                    Controls visibility of the password input field.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signupform\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:44\n                        \n                    \n\n            \n                \n                    The reactive signup form with fields for name, email, password, etc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login-signup/signup/signup.component.ts:54\n                        \n                    \n\n            \n                \n                    Holds the success message shown after successful registration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ReactiveFormsModule } from '@angular/forms';\nimport { FooterComponent } from '../footer/footer.component';\nimport { RouterModule, Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../services/auth.service';\nimport { Contact, ContactService } from '../../services/contact.service';\n\n@Component({\n  selector: 'app-signup',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    FooterComponent,\n    ReactiveFormsModule\n  ],\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\n\nexport class SignupComponent implements OnInit {\n  /**\n   * The reactive signup form with fields for name, email, password, etc.\n   */\n  signupform!: FormGroup;\n\n  /**\n   * Holds the current error message for display on form failure.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Holds the success message shown after successful registration.\n   */\n  successMessage: string = '';\n\n  /**\n   * Indicates whether a registration request is currently in progress.\n   */\n  isLoading: boolean = false;\n\n  /**\n   * Controls visibility of the password input field.\n   */\n  showPassword: boolean = false;\n\n  /**\n   * Controls visibility of the confirm password input field.\n   */\n  showConfirmPassword: boolean = false;\n\n  /**\n   * Initializes the signup form and injects required services.\n   * \n   * @param form FormBuilder for creating the reactive form\n   * @param authService Service for user registration\n   * @param router Angular Router for navigation\n   * @param contactService Service to store new users as contacts\n   */\n  constructor(\n    private form: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private contactService: ContactService,\n  ) {}\n\n  /**\n   * Lifecycle hook: creates the signup form with all necessary validators.\n   */\n  ngOnInit(): void {\n    this.signupform = this.form.group({\n      name : ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.pattern(/^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_\\-+=\\[\\]{};:'\"\\\\|,.<>\\/?]).+$/)\n      ]],\n      confirmPassword: ['', Validators.required],\n      privacyPolicy: [false, [Validators.requiredTrue]],\n    }, { validators: this.passwordsMatchValidator });\n  }\n\n  /**\n   * Custom validator to ensure password and confirm password fields match.\n   * \n   * @param group The form group containing password fields.\n   * @returns A validation error object or null if passwords match.\n   */\n  passwordsMatchValidator(group: AbstractControl): ValidationErrors | null {\n    const password = group.get('password')?.value;\n    const confirm = group.get('confirmPassword')?.value;\n    return password === confirm ? null : { passwordsDontMatch: true };\n  }\n\n  /**\n   * Handles the form submission process, including validation,\n   * user registration, contact saving, and navigation on success.\n   */\n  async onSubmit(): Promise {\n    if (this.signupform.invalid) {\n      this.signupform.markAllAsTouched();\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = '';\n    this.successMessage = '';\n    const { name, email, password } = this.signupform.value;\n    const result = await this.authService.signUp(email, password, name);\n    this.saveNewContact(name, email);\n    if (result.success) {\n      this.successMessage = 'Registration successful! You will be redirected...';\n      setTimeout(() => {\n        this.router.navigate(['/summary']);\n      }, 2000);\n    } else {\n      this.errorMessage = result.message || 'Registration failed';\n    }\n    this.isLoading = false;\n  }\n\n  /**\n   * Creates and stores a new contact based on registration input.\n   * \n   * @param newName Name entered during registration.\n   * @param newEmail Email address entered during registration.\n   */\n  saveNewContact(newName: string, newEmail: string): void {\n    const newContact: Contact = {\n      name: newName,\n      email: newEmail,\n    };\n    this.contactService.addContact(newContact);\n    this.contactService.selectContact(newContact);\n  }\n\n  /**\n   * Navigates the user back to the login screen.\n   * Uses `skipLocationChange` to avoid adding the redirect to browser history.\n   */\n  onBackToLogin(): void {\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\n      this.router.navigate(['/login']);\n    });\n    this.isLoading = false;\n  }\n\n  /**\n   * Returns a user-friendly validation message for the given form field.\n   * Includes special handling for mismatched passwords.\n   * \n   * @param field The name of the form control.\n   * @returns A descriptive validation message or empty string.\n   */\n  getValidationMessage(field: string): string {\n    const control = this.signupform.get(field);\n\n    if (field === 'confirmPassword') {\n      const passwordMismatch = this.signupform.errors?.['passwordsDontMatch'];\n      const touched = control?.touched || this.signupform.get('password')?.touched;\n      const dirty = control?.dirty || this.signupform.get('password')?.dirty;\n      if (passwordMismatch && (touched || dirty)) {\n        return 'Passwords do not match';\n      }\n    }\n    if (!control || !control.touched || !control.errors) return '';\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['email']) return 'Please enter a valid email address';\n    if (control.errors['minlength']) {\n      return `Minimum ${control.errors['minlength'].requiredLength} characters required`;\n    }\n    if (control.errors['pattern']) {\n      return 'Password must contain uppercase, numbers and special characters';\n    }\n    if (control.errors['requiredTrue']) return 'You must accept the privacy policy';\n\n    return '';\n  }\n}\n    \n\n    \n            \n    \n        \n    \n\n    \n        \n            \n                \n            \n            Sign up\n        \n            \n                \n                    \n                        \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('name') }}\n                        \n                    \n                   \n                \n                    \n                        \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('email') }}\n                        \n                    \n                    \n                \n                    \n                        \n                            \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('password') }}\n                        \n                    \n                    \n                 \n\n\n\n                    \n                        \n                            \n                            \n                            \n                            \n                        \n                        \n                            {{ getValidationMessage('confirmPassword') }}\n                        \n                    \n\n\n\n                \n                    \n                    \n                        \n                        I accept the Privacy policy\n                    \n                    \n                \n                    \n                        Sign Up\n                        \n                            \n                            Signing up...\n                        \n                    \n                \n                {{ successMessage }}\n                {{ errorMessage }}\n                \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./signup.component.scss\n                \n                @import \"./../../../styles.scss\";\n\n.signup-content {\n    position:relative;\n    max-width: 1440px;\n    margin: 0 auto;\n}\n\n.dark-logo-wrapper {\n    padding: 32px;\n\n    img {\n        @media (max-width: 768px) {\n            height: 72px;\n            width: 64px;\n        }\n\n        @media (max-width: 406px){\n            height: 48px;\n            width: auto;\n            margin: 0 4px;\n        }\n    }\n\n    @media (max-width: 406px){\n        padding: 12px;\n    }\n}\n\n.signup-frame {\n  background-color: var(--background-light);\n  border-radius: 20px;\n  padding: clamp(32px, calc(1.8vw + 20px), 64px);\n  box-shadow: 0px 4px 24px rgba(0, 0, 0, 0.05);\n  width: clamp(440px, 5vw + 440px, 560px);\n  margin: 0 auto;\n  @include flex-center;\n  flex-direction: column;\n  align-items: center;\n  gap: clamp(24px, 2.5vh, 36px);\n  margin-top: 1rem;\n  overflow-x: hidden;\n\n\n  @media (max-width: 768px){\n    width: 90vw;\n    padding: 24px 12px;\n    gap: 20px;\n    box-sizing: border-box;\n    overflow-x: hidden;\n    max-height: 536px;\n  }\n\n\n  @media (max-width: 406px){\n    margin-top: 0.5rem;\n    overflow-y: auto;\n  }\n\n}  \n\n.signup-header {\n  width: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .btn-back {\n    @include btn();\n    position: absolute;\n    left: 0;\n\n    img {\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n    h2 {\n        @include inter700-fs47;\n        color: var(--text-color-main);\n        position: relative;\n        margin-bottom: 0;\n\n        &::after {\n        content: \"\";\n        display: block;\n        width: 80px;\n        height: 3px;\n        background-color: var(--accent-primary-color);\n        margin: 12px auto 0;\n        border-radius: 3px;\n        }\n\n       @media (max-width: 768px){\n            font-family: \"Inter\";\n            font-weight: 700;\n            font-size: 36px;\n        }\n\n        @media (max-width: 406px){\n            font-family: \"Inter\";\n            font-weight: 700;\n            font-size: 26px;\n        }\n    }\n}    \n\nform {\n    padding: 8px 33px;\n\n}\n\n\n.form-group-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 20px;\n\n    /*\n    @media(max-width: 768px) {\n        gap: 16px;\n    }\n    */\n}\n\n.form-group {\n    @include form-group();\n    background-color: var(--background-light);\n    position: relative;\n    \n\n    input {\n        width: 100%;\n        background-color: transparent;\n        color: var(--text-color-main);\n        padding-right: 28px;\n        @include inter400-fs20();\n        height: 16px;\n        font-size: 16px;\n    }\n\n    input::placeholder {\n        color: var(--text-color-medium);\n        opacity: 1; \n    }\n\n    input.invalid {\n        border: 2px solid var(--text-color-error);\n    }\n\n    .input-icon {\n        position: absolute;\n        right: clamp(12px, 2vw, 18px);\n        top: 50%;\n        transform: translateY(-50%);\n        height: 20px;\n        width: 20px;\n        opacity: 0.6;\n    }\n\n    @media(max-width: 768px) {\n        width: 100%;\n\n        input {\n            //width: 100%;\n            font-size: 15px;\n            height: 14px;\n        }\n\n        .input-icon {\n            width: 18px;\n            height: 18px;\n            right: 12px;\n        }\n    }\n\n}\n\n.checkbox-label {\n    @include flex-center;\n    gap: 8px;\n    margin: 8px;\n    margin-top: 16px;\n    width: 100%;\n    @include inter400-fs14();\n    color: var(--text-color-medium);\n    cursor: pointer;\n    position: relative;\n\n    input[type=\"checkbox\"] {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        cursor: pointer;\n        background-image: url(\"/assets/img/icons/checkbox.png\");\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        border: none;\n        margin: 0;\n        padding: 0;\n        flex-shrink: 0;\n    }\n\n    input[type=\"checkbox\"]:checked {\n        background-image: url(\"/assets/img/icons/checkbox-checked.png\");\n    }\n\n    .highlight {\n        color: var(--accent-primary-color);\n        text-decoration: none;\n        cursor: pointer;\n    }\n\n    @media (max-width: 406px){\n        font-size: 12px;\n        gap: 4px;\n        margin: 4px;\n    }\n}\n\n.btn-wrapper {\n    width: 100%;\n    @include flex-center;\n}\n\n.btn-signup {\n    cursor: pointer;\n    height: 44px;\n    border-radius: 8px;\n    border: unset;\n    min-width: 120px;\n    transition: background-color 0.2s ease;\n    justify-content: center;\n    @include btn-dark();\n\n    &:hover {\n        background-color: #29abe2;\n        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);\n    }\n\n    &:disabled {\n        background-color: #ccc;\n        color: #666;\n        cursor: not-allowed;\n        opacity: 0.6;\n    }\n\n    @media (max-width: 406px){\n        font-size: 16px;\n        height: 32px;\n        min-width: 96px;\n    }\n}\n\n.colorError {\n    border: 1px solid var(--text-color-error);\n}\n\n.error-message {\n    @include inter400-fs12;\n    color: var(--text-color-error);\n    display: hidden;\n\n    @media(max-width: 768px) {\n        font-size: 13px;\n    }\n}\n\n.success-message {\n    @include inter400-fs12;\n    color: var(--text-color-success);\n    display: block;\n    margin-top: 16px;\n    text-align: center;\n}\n\n.login-link {\n    @include inter400-fs12;\n    color: var(--text-color-light);\n    text-align: center;\n    margin-top: 16px;\n    \n    a {\n        color: var(--accent-color);\n        text-decoration: none;\n        \n        &:hover {\n            text-decoration: underline;\n        }\n    }\n}\n\ninput:focus {\n    border: unset;\n}\n\n.spinner {\n  border: 2px solid #fff;\n  border-top: 2px solid transparent;\n  border-radius: 50%;\n  width: 14px;\n  height: 14px;\n  display: inline-block;\n  animation: spin 0.8s linear infinite;\n  margin-right: 6px;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.input-icon.toggle-eye {\n    cursor: pointer;\n    right: 16px;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                    Sign up                                                                                                                                                                                                                                                {{ getValidationMessage(\\'name\\') }}                                                                                                                                                                                                                                                                                           {{ getValidationMessage(\\'email\\') }}                                                                                                                                                                                                                                                                                                                        {{ getValidationMessage(\\'password\\') }}                                                                                                                                                                                                                                                                                                                         {{ getValidationMessage(\\'confirmPassword\\') }}                                                                                                                                                    I accept the Privacy policy                                                                                                    Sign Up                                                                                Signing up...                                                                            {{ successMessage }}                {{ errorMessage }}                    '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask.html":{"url":"interfaces/Subtask.html","title":"interface - Subtask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/subtask-manager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            completed\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        completed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        completed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Subtask {\n  id: string | number;\n  text: string;\n  completed: boolean;\n}\n\n/**\n * SubtaskManager handles all subtask-related operations for the AddTaskComponent.\n * This includes adding, editing, deleting, and managing subtask state.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubtaskManager {\n  private subtasks: Subtask[] = [];\n  private nextSubtaskId: number = 1;\n  private editingSubtaskId: string | number | null = null;\n  private editingSubtaskText: string = '';\n  private subtaskInput: string = '';\n  private showSubtaskConfirmation: boolean = false;\n\n  /**\n   * Gets all subtasks\n   */\n  getSubtasks(): Subtask[] {\n    return this.subtasks;\n  }\n\n  /**\n   * Sets the subtasks array\n   */\n  setSubtasks(subtasks: Subtask[]): void {\n    this.subtasks = subtasks;\n    this.nextSubtaskId = subtasks.length + 1;\n  }\n\n  /**\n   * Gets the current subtask input value\n   */\n  getSubtaskInput(): string {\n    return this.subtaskInput;\n  }\n\n  /**\n   * Sets the subtask input value\n   */\n  setSubtaskInput(value: string): void {\n    this.subtaskInput = value;\n  }\n\n  /**\n   * Gets the subtask confirmation state\n   */\n  getShowSubtaskConfirmation(): boolean {\n    return this.showSubtaskConfirmation;\n  }\n\n  /**\n   * Sets the subtask confirmation state\n   */\n  setShowSubtaskConfirmation(value: boolean): void {\n    this.showSubtaskConfirmation = value;\n  }\n\n  /**\n   * Gets the editing subtask ID\n   */\n  getEditingSubtaskId(): string | number | null {\n    return this.editingSubtaskId;\n  }\n\n  /**\n   * Gets the editing subtask text\n   */\n  getEditingSubtaskText(): string {\n    return this.editingSubtaskText;\n  }\n\n  /**\n   * Sets the editing subtask text\n   */\n  setEditingSubtaskText(value: string): void {\n    this.editingSubtaskText = value;\n  }\n\n  /**\n   * Handles subtask input click to clear the input if confirmation is not shown.\n   */\n  onSubtaskInputClick(): void {\n    if (!this.showSubtaskConfirmation) {\n      this.subtaskInput = '';\n    }\n  }\n\n  /**\n   * Handles Enter key press on subtask input to add the subtask.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEnter(event: Event): void {\n    event.preventDefault();\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      this.addSubtask();\n    }\n  }\n\n  /**\n   * Confirms and adds the subtask.\n   * @param event - The event that triggered the confirmation.\n   */\n  confirmSubtask(event: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.addSubtask();\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Cancels subtask creation and clears the input.\n   */\n  cancelSubtask(): void {\n    this.subtaskInput = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Adds a new subtask to the task.\n   */\n  addSubtask(): void {\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      const newSubtask: Subtask = {\n        id: this.nextSubtaskId++,\n        text: this.subtaskInput.trim(),\n        completed: false\n      };\n      this.subtasks.push(newSubtask);\n      this.subtaskInput = '';\n      this.showSubtaskConfirmation = false;\n    }\n  }\n\n  /**\n   * Deletes a subtask by its ID.\n   * @param id - The ID of the subtask to delete.\n   */\n  deleteSubtask(id: string | number): void {\n    this.subtasks = this.subtasks.filter(subtask => subtask.id !== id);\n  }\n\n  /**\n   * Edits the text of a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param newText - The new text for the subtask.\n   */\n  editSubtask(id: string | number, newText: string): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.text = newText.trim();\n    }\n  }\n\n  /**\n   * Initiates editing mode for a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param currentText - The current text of the subtask.\n   */\n  editSubtaskPrompt(id: string | number, currentText: string): void {\n    this.editingSubtaskId = id;\n    this.editingSubtaskText = currentText;\n    setTimeout(() => {\n      const inputElement = document.querySelector('.subtask-edit-input') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = this.editingSubtaskText;\n        inputElement.focus();\n        inputElement.setSelectionRange(inputElement.value.length, inputElement.value.length);\n      }\n    }, 100);\n  }\n\n  /**\n   * Saves the edited subtask text.\n   */\n  saveSubtaskEdit(): void {\n    if (this.editingSubtaskId !== null) {\n      if (this.editingSubtaskText && this.editingSubtaskText.trim()) {\n        this.editSubtask(this.editingSubtaskId, this.editingSubtaskText.trim());\n      }\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Cancels subtask editing mode.\n   */\n  cancelSubtaskEdit(): void {\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n  }\n\n  /**\n   * Handles keyboard shortcuts for subtask editing.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEditKeydown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.saveSubtaskEdit();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Toggles the completion state of a subtask.\n   * @param id - The ID of the subtask to toggle.\n   */\n  toggleSubtaskCompletion(id: string | number): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.completed = !subtask.completed;\n    }\n  }\n\n  /**\n   * Clears all subtask data and resets to default state.\n   */\n  clearAll(): void {\n    this.subtasks = [];\n    this.subtaskInput = '';\n    this.nextSubtaskId = 1;\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n    this.showSubtaskConfirmation = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subtask-1.html":{"url":"interfaces/Subtask-1.html","title":"interface - Subtask-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subtask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a subtask belonging to a task.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Completion status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title or label of the subtask\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubtaskManager.html":{"url":"injectables/SubtaskManager.html","title":"injectable - SubtaskManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubtaskManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/add-task/subtask-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                SubtaskManager handles all subtask-related operations for the AddTaskComponent.\nThis includes adding, editing, deleting, and managing subtask state.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editingSubtaskId\n                            \n                            \n                                    Private\n                                editingSubtaskText\n                            \n                            \n                                    Private\n                                nextSubtaskId\n                            \n                            \n                                    Private\n                                showSubtaskConfirmation\n                            \n                            \n                                    Private\n                                subtaskInput\n                            \n                            \n                                    Private\n                                subtasks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addSubtask\n                            \n                            \n                                cancelSubtask\n                            \n                            \n                                cancelSubtaskEdit\n                            \n                            \n                                clearAll\n                            \n                            \n                                confirmSubtask\n                            \n                            \n                                deleteSubtask\n                            \n                            \n                                editSubtask\n                            \n                            \n                                editSubtaskPrompt\n                            \n                            \n                                getEditingSubtaskId\n                            \n                            \n                                getEditingSubtaskText\n                            \n                            \n                                getShowSubtaskConfirmation\n                            \n                            \n                                getSubtaskInput\n                            \n                            \n                                getSubtasks\n                            \n                            \n                                onSubtaskEditKeydown\n                            \n                            \n                                onSubtaskEnter\n                            \n                            \n                                onSubtaskInputClick\n                            \n                            \n                                saveSubtaskEdit\n                            \n                            \n                                setEditingSubtaskText\n                            \n                            \n                                setShowSubtaskConfirmation\n                            \n                            \n                                setSubtaskInput\n                            \n                            \n                                setSubtasks\n                            \n                            \n                                toggleSubtaskCompletion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addSubtask\n                        \n                    \n                \n            \n            \n                \naddSubtask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:132\n                        \n                    \n\n\n            \n                \n                        Adds a new subtask to the task.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cancelSubtask\n                        \n                    \n                \n            \n            \n                \ncancelSubtask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:124\n                        \n                    \n\n\n            \n                \n                        Cancels subtask creation and clears the input.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cancelSubtaskEdit\n                        \n                    \n                \n            \n            \n                \ncancelSubtaskEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:198\n                        \n                    \n\n\n            \n                \n                        Cancels subtask editing mode.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:231\n                        \n                    \n\n\n            \n                \n                        Clears all subtask data and resets to default state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmSubtask\n                        \n                    \n                \n            \n            \n                \nconfirmSubtask(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Confirms and adds the subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event that triggered the confirmation.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteSubtask\n                        \n                    \n                \n            \n            \n                \ndeleteSubtask(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:149\n                        \n                    \n\n\n            \n                \n                        Deletes a subtask by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editSubtask\n                        \n                    \n                \n            \n            \n                \neditSubtask(id: string | number, newText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:158\n                        \n                    \n\n\n            \n                \n                        Edits the text of a subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to edit.\n\n\n                                            \n                                        \n                                        \n                                                newText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new text for the subtask.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editSubtaskPrompt\n                        \n                    \n                \n            \n            \n                \neditSubtaskPrompt(id: string | number, currentText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:170\n                        \n                    \n\n\n            \n                \n                        Initiates editing mode for a subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to edit.\n\n\n                                            \n                                        \n                                        \n                                                currentText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current text of the subtask.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingSubtaskId\n                        \n                    \n                \n            \n            \n                \ngetEditingSubtaskId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:70\n                        \n                    \n\n\n            \n                \n                        Gets the editing subtask ID\n\n\n                        \n                            Returns :     string | number | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingSubtaskText\n                        \n                    \n                \n            \n            \n                \ngetEditingSubtaskText()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:77\n                        \n                    \n\n\n            \n                \n                        Gets the editing subtask text\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShowSubtaskConfirmation\n                        \n                    \n                \n            \n            \n                \ngetShowSubtaskConfirmation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:56\n                        \n                    \n\n\n            \n                \n                        Gets the subtask confirmation state\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtaskInput\n                        \n                    \n                \n            \n            \n                \ngetSubtaskInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:42\n                        \n                    \n\n\n            \n                \n                        Gets the current subtask input value\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasks\n                        \n                    \n                \n            \n            \n                \ngetSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Gets all subtasks\n\n\n                        \n                            Returns :     Subtask[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskEditKeydown\n                        \n                    \n                \n            \n            \n                \nonSubtaskEditKeydown(event: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:207\n                        \n                    \n\n\n            \n                \n                        Handles keyboard shortcuts for subtask editing.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe keyboard event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskEnter\n                        \n                    \n                \n            \n            \n                \nonSubtaskEnter(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:101\n                        \n                    \n\n\n            \n                \n                        Handles Enter key press on subtask input to add the subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe keyboard event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskInputClick\n                        \n                    \n                \n            \n            \n                \nonSubtaskInputClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:91\n                        \n                    \n\n\n            \n                \n                        Handles subtask input click to clear the input if confirmation is not shown.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveSubtaskEdit\n                        \n                    \n                \n            \n            \n                \nsaveSubtaskEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:186\n                        \n                    \n\n\n            \n                \n                        Saves the edited subtask text.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditingSubtaskText\n                        \n                    \n                \n            \n            \n                \nsetEditingSubtaskText(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:84\n                        \n                    \n\n\n            \n                \n                        Sets the editing subtask text\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setShowSubtaskConfirmation\n                        \n                    \n                \n            \n            \n                \nsetShowSubtaskConfirmation(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:63\n                        \n                    \n\n\n            \n                \n                        Sets the subtask confirmation state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSubtaskInput\n                        \n                    \n                \n            \n            \n                \nsetSubtaskInput(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:49\n                        \n                    \n\n\n            \n                \n                        Sets the subtask input value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSubtasks\n                        \n                    \n                \n            \n            \n                \nsetSubtasks(subtasks: Subtask[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Sets the subtasks array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                subtasks\n                                            \n                                                        Subtask[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSubtaskCompletion\n                        \n                    \n                \n            \n            \n                \ntoggleSubtaskCompletion(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/add-task/subtask-manager.ts:221\n                        \n                    \n\n\n            \n                \n                        Toggles the completion state of a subtask.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the subtask to toggle.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingSubtaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingSubtaskText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nextSubtaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showSubtaskConfirmation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtaskInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/add-task/subtask-manager.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface Subtask {\n  id: string | number;\n  text: string;\n  completed: boolean;\n}\n\n/**\n * SubtaskManager handles all subtask-related operations for the AddTaskComponent.\n * This includes adding, editing, deleting, and managing subtask state.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubtaskManager {\n  private subtasks: Subtask[] = [];\n  private nextSubtaskId: number = 1;\n  private editingSubtaskId: string | number | null = null;\n  private editingSubtaskText: string = '';\n  private subtaskInput: string = '';\n  private showSubtaskConfirmation: boolean = false;\n\n  /**\n   * Gets all subtasks\n   */\n  getSubtasks(): Subtask[] {\n    return this.subtasks;\n  }\n\n  /**\n   * Sets the subtasks array\n   */\n  setSubtasks(subtasks: Subtask[]): void {\n    this.subtasks = subtasks;\n    this.nextSubtaskId = subtasks.length + 1;\n  }\n\n  /**\n   * Gets the current subtask input value\n   */\n  getSubtaskInput(): string {\n    return this.subtaskInput;\n  }\n\n  /**\n   * Sets the subtask input value\n   */\n  setSubtaskInput(value: string): void {\n    this.subtaskInput = value;\n  }\n\n  /**\n   * Gets the subtask confirmation state\n   */\n  getShowSubtaskConfirmation(): boolean {\n    return this.showSubtaskConfirmation;\n  }\n\n  /**\n   * Sets the subtask confirmation state\n   */\n  setShowSubtaskConfirmation(value: boolean): void {\n    this.showSubtaskConfirmation = value;\n  }\n\n  /**\n   * Gets the editing subtask ID\n   */\n  getEditingSubtaskId(): string | number | null {\n    return this.editingSubtaskId;\n  }\n\n  /**\n   * Gets the editing subtask text\n   */\n  getEditingSubtaskText(): string {\n    return this.editingSubtaskText;\n  }\n\n  /**\n   * Sets the editing subtask text\n   */\n  setEditingSubtaskText(value: string): void {\n    this.editingSubtaskText = value;\n  }\n\n  /**\n   * Handles subtask input click to clear the input if confirmation is not shown.\n   */\n  onSubtaskInputClick(): void {\n    if (!this.showSubtaskConfirmation) {\n      this.subtaskInput = '';\n    }\n  }\n\n  /**\n   * Handles Enter key press on subtask input to add the subtask.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEnter(event: Event): void {\n    event.preventDefault();\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      this.addSubtask();\n    }\n  }\n\n  /**\n   * Confirms and adds the subtask.\n   * @param event - The event that triggered the confirmation.\n   */\n  confirmSubtask(event: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.addSubtask();\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Cancels subtask creation and clears the input.\n   */\n  cancelSubtask(): void {\n    this.subtaskInput = '';\n    this.showSubtaskConfirmation = false;\n  }\n\n  /**\n   * Adds a new subtask to the task.\n   */\n  addSubtask(): void {\n    if (this.subtaskInput && this.subtaskInput.trim()) {\n      const newSubtask: Subtask = {\n        id: this.nextSubtaskId++,\n        text: this.subtaskInput.trim(),\n        completed: false\n      };\n      this.subtasks.push(newSubtask);\n      this.subtaskInput = '';\n      this.showSubtaskConfirmation = false;\n    }\n  }\n\n  /**\n   * Deletes a subtask by its ID.\n   * @param id - The ID of the subtask to delete.\n   */\n  deleteSubtask(id: string | number): void {\n    this.subtasks = this.subtasks.filter(subtask => subtask.id !== id);\n  }\n\n  /**\n   * Edits the text of a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param newText - The new text for the subtask.\n   */\n  editSubtask(id: string | number, newText: string): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.text = newText.trim();\n    }\n  }\n\n  /**\n   * Initiates editing mode for a subtask.\n   * @param id - The ID of the subtask to edit.\n   * @param currentText - The current text of the subtask.\n   */\n  editSubtaskPrompt(id: string | number, currentText: string): void {\n    this.editingSubtaskId = id;\n    this.editingSubtaskText = currentText;\n    setTimeout(() => {\n      const inputElement = document.querySelector('.subtask-edit-input') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = this.editingSubtaskText;\n        inputElement.focus();\n        inputElement.setSelectionRange(inputElement.value.length, inputElement.value.length);\n      }\n    }, 100);\n  }\n\n  /**\n   * Saves the edited subtask text.\n   */\n  saveSubtaskEdit(): void {\n    if (this.editingSubtaskId !== null) {\n      if (this.editingSubtaskText && this.editingSubtaskText.trim()) {\n        this.editSubtask(this.editingSubtaskId, this.editingSubtaskText.trim());\n      }\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Cancels subtask editing mode.\n   */\n  cancelSubtaskEdit(): void {\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n  }\n\n  /**\n   * Handles keyboard shortcuts for subtask editing.\n   * @param event - The keyboard event.\n   */\n  onSubtaskEditKeydown(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.saveSubtaskEdit();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancelSubtaskEdit();\n    }\n  }\n\n  /**\n   * Toggles the completion state of a subtask.\n   * @param id - The ID of the subtask to toggle.\n   */\n  toggleSubtaskCompletion(id: string | number): void {\n    const subtask = this.subtasks.find(s => s.id === id);\n    if (subtask) {\n      subtask.completed = !subtask.completed;\n    }\n  }\n\n  /**\n   * Clears all subtask data and resets to default state.\n   */\n  clearAll(): void {\n    this.subtasks = [];\n    this.subtaskInput = '';\n    this.nextSubtaskId = 1;\n    this.editingSubtaskId = null;\n    this.editingSubtaskText = '';\n    this.showSubtaskConfirmation = false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SummaryComponent.html":{"url":"components/SummaryComponent.html","title":"component - SummaryComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SummaryComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/summary/summary.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-summary\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./summary.component.html\n            \n\n\n\n            \n                styleUrl\n                ./summary.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                awaitingFeedbackCount\n                            \n                            \n                                doneCount\n                            \n                            \n                                greeting\n                            \n                            \n                                greetingState\n                            \n                            \n                                inProgressCount\n                            \n                            \n                                isMobile\n                            \n                            \n                                nextDeadlineCount\n                            \n                            \n                                nextDeadlineDate\n                            \n                            \n                                showGreeting\n                            \n                            \n                                taskList\n                            \n                            \n                                todoCount\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                countTasksByStatus\n                            \n                            \n                                getGreeting\n                            \n                            \n                                goToBoard\n                            \n                            \n                                    Private\n                                isFirestoreTimestamp\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    totalTaskCount\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/summary/summary.component.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        countTasksByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    countTasksByStatus(tasks: Task[], status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:62\n                        \n                    \n\n\n            \n                \n                        Counts the number of tasks with a specific status.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of tasks.\n\n\n                                            \n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status to count.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of tasks with the given status.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGreeting\n                        \n                    \n                \n            \n            \n                \ngetGreeting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Returns a greeting depending on the current time.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The greeting (e.g., \"Good morning,\").\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goToBoard\n                        \n                    \n                \n            \n            \n                \ngoToBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Navigates to the board view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isFirestoreTimestamp\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFirestoreTimestamp(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Checks if the given object is a FirestoreTimestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         FirestoreTimestamp\n\n                        \n                            \n                                True if the object is a FirestoreTimestamp.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/summary/summary.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Initializes the component, loads user data and tasks,\ncalculates statistics, and controls the welcome greeting display.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        awaitingFeedbackCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doneCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greeting\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        greetingState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"start\" | \"moved\"\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inProgressCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextDeadlineDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showGreeting\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todoCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/summary/summary.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        totalTaskCount\n                    \n                \n\n                \n                    \n                        gettotalTaskCount()\n                    \n                \n                            \n                                \n                                    Defined in src/app/summary/summary.component.ts:83\n                                \n                            \n                    \n                        \n                                Returns the total number of all tasks.\n\n\n                                \n                                \n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { TaskService, Task } from '../services/task.service';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\ninterface FirestoreTimestamp {\n  toDate(): Date;\n}\n\n@Component({\n  selector: 'app-summary',\n  imports: [CommonModule],\n  templateUrl: './summary.component.html',\n  styleUrl: './summary.component.scss',\n  animations: [\n    trigger('fadeOutGreeting', [\n      state('start', style({ opacity: 1 })),\n      state('moved', style({ opacity: 0 })),\n      transition('start => moved', [animate('1.5s 0.5s ease-in-out')]),\n    ]),\n  ],\n})\nexport class SummaryComponent implements OnInit {\n  taskList: Task[] = [];\n  userName: string = '';\n\n  greetingState: 'start' | 'moved' = 'start';\n  showGreeting = true;\n  isMobile = false;\n\n  nextDeadlineDate: Date | null = null;\n  nextDeadlineCount: number = 0;\n  greeting: string = '';\n\n  todoCount = 0;\n  doneCount = 0;\n  inProgressCount = 0;\n  awaitingFeedbackCount = 0;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Counts the number of tasks with a specific status.\n   *\n   * @private\n   * @param {Task[]} tasks - The list of tasks.\n   * @param {string} status - The status to count.\n   * @returns {number} The number of tasks with the given status.\n   */\n  private countTasksByStatus(tasks: Task[], status: string): number {\n    return tasks.filter((t) => t.status === status).length;\n  }\n\n  /**\n   * Checks if the given object is a FirestoreTimestamp.\n   *\n   * @private\n   * @param {any} obj - The object to check.\n   * @returns {obj is FirestoreTimestamp} True if the object is a FirestoreTimestamp.\n   */\n  private isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n    return obj && typeof obj.toDate === 'function';\n  }\n\n  /**\n   * Returns the total number of all tasks.\n   *\n   * @readonly\n   * @returns {number} The total number of tasks.\n   */\n  get totalTaskCount(): number {\n    return (\n      this.todoCount +\n      this.inProgressCount +\n      this.awaitingFeedbackCount +\n      this.doneCount\n    );\n  }\n\n  /**\n   * Returns a greeting depending on the current time.\n   *\n   * @returns {string} The greeting (e.g., \"Good morning,\").\n   */\n  getGreeting(): string {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour = 12 && hour = 18 && hour  {\n      this.userName = userData?.displayName?.trim()\n        ? userData.displayName\n        : 'Nice to see you!';\n      this.greeting = this.getGreeting();\n\n      const greetingShown = sessionStorage.getItem('greetingShown');\n      if (this.isMobile && !greetingShown) {\n        this.showGreeting = true;\n        this.greetingState = 'start';\n        setTimeout(() => {\n          this.greetingState = 'moved';\n          setTimeout(() => {\n            this.showGreeting = false;\n            sessionStorage.setItem('greetingShown', 'true');\n          }, 2000);\n        }, 500);\n      } else {\n        this.showGreeting = false;\n      }\n    });\n\n    this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n\n      this.todoCount = this.countTasksByStatus(tasks, 'to-do');\n      this.doneCount = this.countTasksByStatus(tasks, 'done');\n      this.inProgressCount = this.countTasksByStatus(tasks, 'in-progress');\n      this.awaitingFeedbackCount = this.countTasksByStatus(\n        tasks,\n        'await-feedback'\n      );\n\n      const now = new Date();\n      const futureTasks = tasks\n        .filter((t) => t.date && t.status !== 'done')\n        .map((t) => {\n          let dateObj: Date | null = null;\n          if (t.date instanceof Date) {\n            dateObj = t.date;\n          } else if (this.isFirestoreTimestamp(t.date)) {\n            dateObj = t.date.toDate();\n          } else if (typeof t.date === 'string' || typeof t.date === 'number') {\n            dateObj = new Date(t.date);\n          }\n          return { ...t, dateObj };\n        })\n        .filter((t) => t.dateObj && t.dateObj > now);\n\n      if (futureTasks.length > 0) {\n        futureTasks.sort((a, b) => a.dateObj!.getTime() - b.dateObj!.getTime());\n        const nextDate = futureTasks[0].dateObj!;\n        this.nextDeadlineDate = nextDate;\n        this.nextDeadlineCount = futureTasks.filter(\n          (t) => t.dateObj!.getTime() === nextDate.getTime()\n        ).length;\n      } else {\n        this.nextDeadlineDate = null;\n        this.nextDeadlineCount = 0;\n      }\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    Join 360\n    \n    Key Metrics at a Glance\n    \n  \n\n  \n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n  \n    \n      \n        \n          \n            \n            \n              \n            \n            \n              \n            \n          \n\n          \n            {{ todoCount }}\n            To-do\n          \n        \n\n        \n          \n            \n            \n          \n          \n            {{ doneCount }}\n            Done\n          \n        \n      \n\n      \n        \n          \n            \n            \n          \n        \n\n        \n          {{ nextDeadlineCount }}\n          Urgent\n        \n        \n        \n          {{ nextDeadlineDate | date : \"MMMM d, y\" }}\n          Upcoming Deadline\n        \n      \n\n      \n        \n          \n            {{ totalTaskCount }}\n            Tasks inBoard\n          \n        \n        \n          \n            {{ inProgressCount }}\n            Tasks in Progress\n          \n        \n        \n          \n            {{ awaitingFeedbackCount }}\n            Awaiting Feedback\n          \n        \n      \n    \n\n    \n      {{ greeting }}\n      {{ userName }}\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Join 360        Key Metrics at a Glance                  {{ greeting }}      {{ userName }}                                                                                                                                                            {{ todoCount }}            To-do                                                                                            {{ doneCount }}            Done                                                                                                            {{ nextDeadlineCount }}          Urgent                                  {{ nextDeadlineDate | date : \"MMMM d, y\" }}          Upcoming Deadline                                                  {{ totalTaskCount }}            Tasks inBoard                                                {{ inProgressCount }}            Tasks in Progress                                                {{ awaitingFeedbackCount }}            Awaiting Feedback                                      {{ greeting }}      {{ userName }}      '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SummaryComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Task.html":{"url":"interfaces/Task.html","title":"interface - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a task in the system.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            assignedTo\n                                        \n                                \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            priority\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subtask\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        assignedTo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assignedTo:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional list of user IDs assigned to the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:     \"technical\" | \"user story\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"technical\" | \"user story\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Task category\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:     Date | Timestamp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | Timestamp\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Date of the task; may be a native Date object or Firestore Timestamp.\nFirestore stores it as a Timestamp and it needs conversion after reading.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Firestore-generated ID (optional when creating a task)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:     \"low\" | \"medium\" | \"urgent\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"low\" | \"medium\" | \"urgent\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Priority level of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current status of the task\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtask\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtask:     Subtask[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Subtask[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional array of subtasks (retrieved separately as subcollection)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title of the task\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskComponent.html":{"url":"components/TaskComponent.html","title":"component - TaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task/task.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                    Optional\n                                selectedTask\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeStatus\n                            \n                            \n                                getCompletedSubtasksCount\n                            \n                            \n                                    Async\n                                getContactList\n                            \n                            \n                                getRemainingContactNames\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    \n                                onDocumentClick\n                            \n                            \n                                openDotsMenuHandler\n                            \n                            \n                                openTaskDetails\n                            \n                            \n                                percentageCompleted\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                openedMenuTaskId\n                            \n                            \n                                subtaskList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changeTaskStatus\n                            \n                            \n                                closeDotsMenu\n                            \n                            \n                                contacts\n                            \n                            \n                                openDotsMenu\n                            \n                            \n                                taskSelected\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isDotsMenuOpen\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task/task.component.ts:94\n                            \n                        \n\n                \n                    \n                            Injects services required for task and contact operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for task data handling.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contact information.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        openedMenuTaskId\n                    \n                \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:76\n                            \n                        \n                \n                    \n                        The ID of the task for which the contextual \"dots\" menu is currently open.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskList\n                    \n                \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:56\n                            \n                        \n                \n                    \n                        The list of subtasks associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:51\n                            \n                        \n                \n                    \n                        /**\nThe task to be displayed in this component.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changeTaskStatus\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:91\n                            \n                        \n                \n                    \n                        Emits a status change for the task, along with its ID.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        closeDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:86\n                            \n                        \n                \n                    \n                        Emits an event when the \"dots\" menu should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        contacts\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:66\n                            \n                        \n                \n                    \n                        Emits the list of resolved contacts associated with the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        openDotsMenu\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:81\n                            \n                        \n                \n                    \n                        Emits the ID of the task when the \"dots\" menu is opened.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        taskSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task/task.component.ts:61\n                            \n                        \n                \n                    \n                        Emits the selected task when the user opens the task detail view.\n\n                    \n                \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:click\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:click(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeStatus\n                        \n                    \n                \n            \n            \n                \nchangeStatus(status: string, event: MouseEvent | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:152\n                        \n                    \n\n\n            \n                \n                        Emits a task status change and closes the dots menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new status to assign to the task.\n\n                                            \n                                        \n                                        \n                                                event\n                                            \n                                                        MouseEvent | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Optional mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCompletedSubtasksCount\n                        \n                    \n                \n            \n            \n                \ngetCompletedSubtasksCount(subtaskList: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:168\n                        \n                    \n\n\n            \n                \n                        Returns the number of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The number of completed subtasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getContactList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContactList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:223\n                        \n                    \n\n\n            \n                \n                        Loads the full contact details for each assigned contact in the task\nand emits the resolved contact list.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRemainingContactNames\n                        \n                    \n                \n            \n            \n                \ngetRemainingContactNames(remainingContacts: Contact[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:239\n                        \n                    \n\n\n            \n                \n                        Joins the names of remaining contacts into a comma-separated string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                remainingContacts\n                                            \n                                                            Contact[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of remaining Contact objects.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A comma-separated string of contact names.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:139\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when any data-bound @Input properties change.\nThis method checks whether the task input has changed (excluding the first change),\nand if so, resets and reloads the contact list based on the updated task data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An object of changed properties with current and previous values.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that loads the contact list for the task on component init.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onDocumentClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onDocumentClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Detects clicks outside the \"dots\" menu and closes it if open.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse click event on the document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDotsMenuHandler\n                        \n                    \n                \n            \n            \n                \nopenDotsMenuHandler(event: MouseEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:210\n                        \n                    \n\n\n            \n                \n                        Toggles the dots menu open or closed for this task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse event to stop propagation.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openTaskDetails\n                        \n                    \n                \n            \n            \n                \nopenTaskDetails(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:191\n                        \n                    \n\n\n            \n                \n                        Emits the selected task to open its detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The task to open.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        percentageCompleted\n                        \n                    \n                \n            \n            \n                \npercentageCompleted(subtaskList: Subtask[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task/task.component.ts:180\n                        \n                    \n\n\n            \n                \n                        Calculates the percentage of completed subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtaskList\n                                            \n                                                        Subtask[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list of subtasks to evaluate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The completion percentage as a number between 0 and 100.\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contactList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:44\n                        \n                    \n\n            \n                \n                    The full list of contacts assigned to the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:104\n                        \n                    \n\n            \n                \n                    Service for fetching contact information.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        selectedTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:71\n                        \n                    \n\n            \n                \n                    Holds the task currently selected to open its detail view.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task/task.component.ts:103\n                        \n                    \n\n            \n                \n                    Service for task data handling.\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isDotsMenuOpen\n                    \n                \n\n                \n                    \n                        getisDotsMenuOpen()\n                    \n                \n                            \n                                \n                                    Defined in src/app/board/task/task.component.ts:201\n                                \n                            \n                    \n                        \n                                Checks if the dots menu is currently open for this task.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n} from '@angular/core';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { TaskService } from '../../services/task.service';\nimport { Task } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { SimpleChanges, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-task',\n  imports: [CommonModule],\n  templateUrl: './task.component.html',\n  styleUrl: './task.component.scss',\n})\nexport class TaskComponent {\n\n  /**\n   * The full list of contacts assigned to the task.\n   */\n  contactList: Contact[] = [];\n\n  /**\n\n  /**\n   * The task to be displayed in this component.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  @Input() subtaskList: Subtask[] = [];\n\n  /**\n   * Emits the selected task when the user opens the task detail view.\n   */\n  @Output() taskSelected = new EventEmitter();\n\n  /**\n   * Emits the list of resolved contacts associated with the task.\n   */\n  @Output() contacts = new EventEmitter();\n\n  /**\n   * Holds the task currently selected to open its detail view.\n   */\n  selectedTask?: Task;\n\n  /**\n   * The ID of the task for which the contextual \"dots\" menu is currently open.\n   */\n  @Input() openedMenuTaskId: string | null = null;\n\n  /**\n   * Emits the ID of the task when the \"dots\" menu is opened.\n   */\n  @Output() openDotsMenu = new EventEmitter();\n\n  /**\n   * Emits an event when the \"dots\" menu should be closed.\n   */\n  @Output() closeDotsMenu = new EventEmitter();\n\n  /**\n   * Emits a status change for the task, along with its ID.\n   */\n  @Output() changeTaskStatus = new EventEmitter();\n\n  /**\n   * Injects services required for task and contact operations.\n   * \n   * @param taskService Service for task data handling.\n   * @param contactService Service for fetching contact information.\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService\n  ) {}\n\n  /**\n   * Detects clicks outside the \"dots\" menu and closes it if open.\n   * \n   * @param event Mouse click event on the document.\n   */\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (\n      !target.closest('.dots-menu-btn') &&\n      !target.closest('.dots-menu-overlay')\n    ) {\n      if (this.isDotsMenuOpen) {\n        this.closeDotsMenu.emit();\n      }\n    }\n  }\n\n  /**\n   * Lifecycle hook that loads the contact list for the task on component init.\n   */\n  ngOnInit(): void {\n    this.getContactList();\n  }\n\n  /**\n   * Lifecycle hook that is called when any data-bound @Input properties change.\n   * This method checks whether the `task` input has changed (excluding the first change),\n   * and if so, resets and reloads the contact list based on the updated task data.\n   *\n   * @param changes An object of changed properties with current and previous values.\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['task'] && !changes['task'].firstChange) {\n      this.contactList = [];\n      this.getContactList();\n    }\n  }\n\n  /**\n   * Emits a task status change and closes the dots menu.\n   * \n   * @param status The new status to assign to the task.\n   * @param event Optional mouse event to stop propagation.\n   */\n  changeStatus(status: string, event: MouseEvent | undefined) {\n    if (event) {\n      event.stopPropagation();\n    }\n    if (this.task.id) {\n      this.changeTaskStatus.emit({ taskId: this.task.id, status });\n      this.closeDotsMenu.emit();\n    }\n  }\n\n  /**\n   * Returns the number of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The number of completed subtasks.\n   */\n  getCompletedSubtasksCount(subtaskList: any[]): number {\n    return Array.isArray(subtaskList)\n      ? subtaskList.filter((el) => el.isCompleted).length\n      : 0;\n  }\n\n  /**\n   * Calculates the percentage of completed subtasks.\n   * \n   * @param subtaskList The list of subtasks to evaluate.\n   * @returns The completion percentage as a number between 0 and 100.\n   */\n  percentageCompleted(subtaskList: Subtask[]): number {\n    if (!subtaskList || subtaskList.length === 0) return 0;\n    let completed = this.getCompletedSubtasksCount(subtaskList);\n    return Math.round((completed / subtaskList.length) * 100);\n  }\n\n  /**\n   * Emits the selected task to open its detail view.\n   * \n   * @param task The task to open.\n   */\n  openTaskDetails(task: Task) {\n    this.selectedTask = task;\n    this.taskSelected.emit(this.selectedTask);\n  }\n\n  /**\n   * Checks if the dots menu is currently open for this task.\n   * \n   * @returns A boolean indicating if the dots menu is open.\n   */\n  get isDotsMenuOpen() {\n    return this.openedMenuTaskId === this.task.id;\n  }\n\n  /**\n   * Toggles the dots menu open or closed for this task.\n   * \n   * @param event Mouse event to stop propagation.\n   */\n  openDotsMenuHandler(event: MouseEvent) {\n    event.stopPropagation();\n    if (this.isDotsMenuOpen) {\n      this.closeDotsMenu.emit();\n    } else {\n      this.openDotsMenu.emit(this.task.id);\n    }\n  }\n\n  /**\n   * Loads the full contact details for each assigned contact in the task\n   * and emits the resolved contact list.\n   */\n  async getContactList() {\n    if (this.task?.assignedTo?.length) {\n      for (let contactId of this.task.assignedTo) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) this.contactList.push(contact);\n      }\n      this.contacts.emit(this.contactList);\n    }\n  }\n\n  /**\n   * Joins the names of remaining contacts into a comma-separated string.\n   * \n   * @param remainingContacts Array of remaining Contact objects.\n   * @returns A comma-separated string of contact names.\n   */\n  getRemainingContactNames(remainingContacts: Contact[]): string {\n    return remainingContacts.map((contact) => contact.name).join(', ');\n  }\n}\n    \n\n    \n        \n  \n    \n      {{ taskService.capitalize(task.category) }}\n    \n\n    \n      \n      \n      \n    \n\n    \n      To Do\n      In Progress\n      Awaiting Feedback\n      Done\n    \n  \n  \n    {{ taskService.capitalize(task.title) }}\n    \n      {{ taskService.capitalize(task.description) }}\n      …\n    \n     0 ? 'visible' : 'hidden'\n      \"\n    >\n      \n        \n      \n      \n        {{ getCompletedSubtasksCount(subtaskList) }} /\n        {{ subtaskList.length }} Subtasks\n      \n    \n    \n      \n        \n          @for (contact of contactList.slice(0, 4); track $index) {\n          \n            \n              {{ contactService.getInitials(contact.name) }}\n            \n          \n          }\n           4\"\n            [title]=\"getRemainingContactNames(contactList.slice(4))\"\n          >\n            +{{ contactList.length - 4 }}\n          \n        \n      \n      \n      \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ taskService.capitalize(task.category) }}                                        To Do      In Progress      Awaiting Feedback      Done            {{ taskService.capitalize(task.title) }}          {{ taskService.capitalize(task.description) }}      …         0 ? \\'visible\\' : \\'hidden\\'      \"    >                                  {{ getCompletedSubtasksCount(subtaskList) }} /        {{ subtaskList.length }} Subtasks                                      @for (contact of contactList.slice(0, 4); track $index) {                                    {{ contactService.getInitials(contact.name) }}                                }           4\"            [title]=\"getRemainingContactNames(contactList.slice(4))\"          >            +{{ contactList.length - 4 }}                                                '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskDetailsComponent.html":{"url":"components/TaskDetailsComponent.html","title":"component - TaskDetailsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskDetailsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/task-details/task-details.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task-details\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-details.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-details.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactService\n                            \n                            \n                                showContent\n                            \n                            \n                                subtasks\n                            \n                            \n                                    Public\n                                taskService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertDate\n                            \n                            \n                                deleteTask\n                            \n                            \n                                    Async\n                                loadAssignedContacts\n                            \n                            \n                                loadSubtasks\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                onSubtaskToggle\n                            \n                            \n                                openEditTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                contactList\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                closeTaskDetails\n                            \n                            \n                                editTask\n                            \n                            \n                                subtaskChanged\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, contactService: ContactService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-details/task-details.component.ts:70\n                            \n                        \n\n                \n                    \n                            Constructor injects task and contact services, and the Angular Router.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for handling tasks and subtasks.\n\n                                                        \n                                                \n                                                \n                                                        contactService\n                                                  \n                                                        \n                                                                        ContactService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for fetching contacts.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation (currently unused).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        contactList\n                    \n                \n                \n                    \n                        Type :         Contact[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:60\n                            \n                        \n                \n                    \n                        The list of contacts assigned to this task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:55\n                            \n                        \n                \n                    \n                        The task whose details are being displayed.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        closeTaskDetails\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:40\n                            \n                        \n                \n                    \n                        Emits an event when the task detail view should be closed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editTask\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:45\n                            \n                        \n                \n                    \n                        Emits an event when the user wants to edit the task.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        subtaskChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/task-details/task-details.component.ts:50\n                            \n                        \n                \n                    \n                        Emits the updated subtask list when a subtask is toggled.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Converts a Firebase Timestamp or Date to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The date or timestamp to convert.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string representation of the date.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n            \n                \ndeleteTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Deletes the task (if it has a valid ID), and closes the detail view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loadAssignedContacts\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadAssignedContacts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:174\n                        \n                    \n\n\n            \n                \n                        Fetches detailed contact information for all assigned contact IDs\nand updates the contactList accordingly.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \nloadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:162\n                        \n                    \n\n\n            \n                \n                        Loads subtasks associated with the current task from the database.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:88\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook to load assigned contacts and subtasks on component initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:96\n                        \n                    \n\n\n            \n                \n                        Closes the task detail view and emits the close event.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubtaskToggle\n                        \n                    \n                \n            \n            \n                \nonSubtaskToggle(subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Toggles a subtask's completion status and updates it in the backend.\nEmits the updated list of subtasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The subtask to toggle.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openEditTask\n                        \n                    \n                \n            \n            \n                \nopenEditTask(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-details/task-details.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Prepares the task for editing and emits the edit event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional event to stop propagation and prevent default behavior.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contactService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContactService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:81\n                        \n                    \n\n            \n                \n                    Service for fetching contacts.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showContent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:65\n                        \n                    \n\n            \n                \n                    Controls whether the detail view content is shown.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subtasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subtask[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:70\n                        \n                    \n\n            \n                \n                    The list of subtasks associated with the task.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taskService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-details/task-details.component.ts:80\n                        \n                    \n\n            \n                \n                    Service for handling tasks and subtasks.\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { Task, TaskService } from '../../services/task.service';\nimport { Subtask } from '../../services/task.service';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { ContactService } from '../../services/contact.service';\nimport { Contact } from '../../services/contact.service';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-task-details',\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  templateUrl: './task-details.component.html',\n  styleUrl: './task-details.component.scss'\n})\nexport class TaskDetailsComponent {\n  /**\n   * Emits an event when the task detail view should be closed.\n   */\n  @Output() closeTaskDetails = new EventEmitter();\n\n  /**\n   * Emits an event when the user wants to edit the task.\n   */\n  @Output() editTask = new EventEmitter();\n\n  /**\n   * Emits the updated subtask list when a subtask is toggled.\n   */\n  @Output() subtaskChanged = new EventEmitter();\n\n  /**\n   * The task whose details are being displayed.\n   */\n  @Input() task!: Task;\n\n  /**\n   * The list of contacts assigned to this task.\n   */\n  @Input() contactList: Contact[] = [];\n\n  /**\n   * Controls whether the detail view content is shown.\n   */\n  showContent = true;\n\n  /**\n   * The list of subtasks associated with the task.\n   */\n  subtasks: Subtask[] = [];\n\n  /**\n   * Constructor injects task and contact services, and the Angular Router.\n   * \n   * @param taskService Service for handling tasks and subtasks.\n   * @param contactService Service for fetching contacts.\n   * @param router Angular Router for navigation (currently unused).\n   */\n  constructor(\n    public taskService: TaskService,\n    public contactService: ContactService,\n    private router: Router\n  ) {}\n\n  /**\n   * Lifecycle hook to load assigned contacts and subtasks on component initialization.\n   */\n  ngOnInit(): void {\n    this.loadAssignedContacts();\n    this.loadSubtasks();\n  }\n\n  /**\n   * Closes the task detail view and emits the close event.\n   */\n  onClose() {\n    this.showContent = false;\n    this.closeTaskDetails.emit('close');\n  }\n\n  /**\n   * Converts a Firebase Timestamp or Date to a formatted string.\n   * \n   * @param date The date or timestamp to convert.\n   * @returns A string representation of the date.\n   */\n  convertDate(date: Timestamp | Date): string {\n    return this.taskService.convertDate(date);\n  }\n\n  /**\n   * Prepares the task for editing and emits the edit event.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  openEditTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    this.taskService.setEditingTask(this.task);\n    this.editTask.emit(\"edit\");\n  }\n\n  /**\n   * Deletes the task (if it has a valid ID), and closes the detail view.\n   * \n   * @param event Optional event to stop propagation and prevent default behavior.\n   */\n  deleteTask(event?: Event) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n    if (this.task.id) {\n      this.taskService.deleteTask(this.task.id);\n      this.onClose();\n    }\n  }\n\n  /**\n   * Toggles a subtask's completion status and updates it in the backend.\n   * Emits the updated list of subtasks.\n   * \n   * @param subtask The subtask to toggle.\n   */\n  onSubtaskToggle(subtask: Subtask) {\n    if (!this.task.id || !subtask.id) return;\n\n    this.taskService.updateSubtask(this.task.id, subtask.id, subtask)\n      .then(() => {\n        this.subtaskChanged.emit(this.subtasks);\n      })\n      .catch(error => {\n        console.error('Error updating subtask:', error);\n      });\n  }\n\n  /**\n   * Loads subtasks associated with the current task from the database.\n   */\n  loadSubtasks() {\n    if (this.task?.id) {\n      this.taskService.getSubtasks(this.task.id).subscribe((subtasks: Subtask[]) => {\n        this.subtasks = subtasks;\n      });\n    }\n  }\n\n  /**\n   * Fetches detailed contact information for all assigned contact IDs\n   * and updates the contactList accordingly.\n   */\n  async loadAssignedContacts() {\n    this.contactList = [];\n    if (this.task?.assignedTo?.length) {\n      for (let contactId of this.task.assignedTo) {\n        const contact = await this.contactService.getContactById(contactId);\n        if (contact) {\n          this.contactList.push(contact);\n        }\n      }\n    }\n  }\n}\n    \n\n    \n        \n    \n        {{taskService.capitalize(task.category)}}\n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n    \n        {{ taskService.capitalize(task.title) }}\n        {{ taskService.capitalize(task.description) }}\n        \n            Due date:\n            {{ convertDate(task.date) }}\n        \n        \n            Priority:\n            {{ task.priority }}\n            \n                \n                \n                \n            \n        \n        \n            Assigned To:\n            No contact selected\n            \n                @for (contact of contactList; track $index) {\n                    \n                        \n                            \n                                {{ contactService.getInitials(contact.name) }}\n                            \n                            {{ contact.name }}\n                        \n                    \n                }\n            \n        \n       \n            Subtasks:\n            No subtasks defined\n            \n                @for (subtask of subtasks; track $index) {\n                    \n                        \n                        \n                        {{ subtask.title }}\n                    \n                }\n            \n        \n        \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Delete\n            \n            \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                Edit\n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{taskService.capitalize(task.category)}}                                                                                                                                                                {{ taskService.capitalize(task.title) }}        {{ taskService.capitalize(task.description) }}                    Due date:            {{ convertDate(task.date) }}                            Priority:            {{ task.priority }}                                                                                                    Assigned To:            No contact selected                            @for (contact of contactList; track $index) {                                                                                                        {{ contactService.getInitials(contact.name) }}                                                        {{ contact.name }}                                                            }                                       Subtasks:            No subtasks defined                            @for (subtask of subtasks; track $index) {                                                                                            {{ subtask.title }}                                    }                                                                                                                                                                                                                Delete                                                                                                                                                                                                            Edit                        '\n    var COMPONENTS = [{'name': 'AddTaskComponent', 'selector': 'app-add-task'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'ContactDetailsComponent', 'selector': 'app-contact-details'},{'name': 'ContactFormComponent', 'selector': 'app-contact-form'},{'name': 'ContactListComponent', 'selector': 'app-contact-list'},{'name': 'ContactsComponent', 'selector': 'app-contacts'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HelpComponent', 'selector': 'app-help'},{'name': 'LegalNoticeComponent', 'selector': 'app-legal-notice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginHeaderComponent', 'selector': 'app-login-header'},{'name': 'PrivacyPolicyComponent', 'selector': 'app-privacy-policy'},{'name': 'SidebarComponent', 'selector': 'app-sidebar'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'SummaryComponent', 'selector': 'app-summary'},{'name': 'TaskComponent', 'selector': 'app-task'},{'name': 'TaskDetailsComponent', 'selector': 'app-task-details'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskDetailsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskListManager.html":{"url":"injectables/TaskListManager.html","title":"injectable - TaskListManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskListManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/task-list-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                TaskListManager handles all task list operations for the BoardComponent.\nThis includes loading, filtering, sorting, and managing task lists by status.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                awaitfeedback\n                            \n                            \n                                    Private\n                                done\n                            \n                            \n                                    Private\n                                inprogress\n                            \n                            \n                                    Private\n                                subtasksByTaskId\n                            \n                            \n                                    Private\n                                taskList\n                            \n                            \n                                    Private\n                                todo\n                            \n                            \n                                    Private\n                                unsubTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                destroy\n                            \n                            \n                                    Private\n                                emptyArrays\n                            \n                            \n                                getAwaitFeedbackTasks\n                            \n                            \n                                    Private\n                                getDateValue\n                            \n                            \n                                getDoneTasks\n                            \n                            \n                                getFilteredTasks\n                            \n                            \n                                getInProgressTasks\n                            \n                            \n                                getSubtasksByTaskId\n                            \n                            \n                                getSubtasksForSelectedTask\n                            \n                            \n                                getSubtasksForTask\n                            \n                            \n                                getTaskList\n                            \n                            \n                                getTodoTasks\n                            \n                            \n                                    Private\n                                loadSubtasks\n                            \n                            \n                                loadTasks\n                            \n                            \n                                sortTasksByDueDate\n                            \n                            \n                                trackByTaskId\n                            \n                            \n                                updateTaskLists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/task-list-manager.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        destroy\n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:229\n                        \n                    \n\n\n            \n                \n                        Clears all data and unsubscribes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emptyArrays\n                        \n                    \n                \n            \n            \n                \n                        \n                    emptyArrays()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:170\n                        \n                    \n\n\n            \n                \n                        Empties all task lists (to-do, in-progress, await-feedback, done).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAwaitFeedbackTasks\n                        \n                    \n                \n            \n            \n                \ngetAwaitFeedbackTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getDateValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDateValue(date: Date | any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Date | any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDate input to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDoneTasks\n                        \n                    \n                \n            \n            \n                \ngetDoneTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFilteredTasks\n                        \n                    \n                \n            \n            \n                \ngetFilteredTasks(status: string, searchTerm: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:65\n                        \n                    \n\n\n            \n                \n                        Filters tasks by given status and search term (case-insensitive).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTask status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n\n\n                                            \n                                        \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nSearch term to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Filtered list of tasks.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInProgressTasks\n                        \n                    \n                \n            \n            \n                \ngetInProgressTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksByTaskId\n                        \n                    \n                \n            \n            \n                \ngetSubtasksByTaskId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:54\n                        \n                    \n\n\n            \n                \n                        Gets subtasks by task ID\n\n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForSelectedTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForSelectedTask(selectedTask: Task | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:209\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks assigned to the currently selected task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedTask\n                                            \n                                                            Task | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently selected task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none are found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksForTask\n                        \n                    \n                \n            \n            \n                \ngetSubtasksForTask(taskId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:196\n                        \n                    \n\n\n            \n                \n                        Returns the subtasks for a given task ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to retrieve subtasks for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subtask[]\n\n                        \n                            \n                                Array of subtasks, or an empty array if none exist.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTaskList\n                        \n                    \n                \n            \n            \n                \ngetTaskList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:28\n                        \n                    \n\n\n            \n                \n                        Gets all tasks\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTodoTasks\n                        \n                    \n                \n            \n            \n                \ngetTodoTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:35\n                        \n                    \n\n\n            \n                \n                        Gets task lists by status\n\n\n                        \n                            Returns :         Task[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadSubtasks\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadSubtasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:180\n                        \n                    \n\n\n            \n                \n                        Loads subtasks for each task and stores them in a lookup table by task ID.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadTasks\n                        \n                    \n                \n            \n            \n                \nloadTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:133\n                        \n                    \n\n\n            \n                \n                        Loads tasks from the task service and distributes them into status-based lists.\nAlso sorts tasks by due date and loads their subtasks.\n\n\n                        \n                            Returns :         function\n\n                        \n                            \n                                A function to unsubscribe from the task observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortTasksByDueDate\n                        \n                    \n                \n            \n            \n                \nsortTasksByDueDate(tasks: Task[], ascending: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:91\n                        \n                    \n\n\n            \n                \n                        Sorts a list of tasks by their due date.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tasks\n                                            \n                                                            Task[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nArray of tasks to be sorted.\n\n\n                                            \n                                        \n                                        \n                                                ascending\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether to sort in ascending order (default: true).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Task[]\n\n                        \n                            \n                                Sorted task array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trackByTaskId\n                        \n                    \n                \n            \n            \n                \ntrackByTaskId(index: number, task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:123\n                        \n                    \n\n\n            \n                \n                        TrackBy function for use with ngFor to optimize rendering of tasks.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the item in the array.\n\n\n                                            \n                                        \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                The unique task ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTaskLists\n                        \n                    \n                \n            \n            \n                \nupdateTaskLists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/task-list-manager.ts:219\n                        \n                    \n\n\n            \n                \n                        Updates task lists after status changes\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        awaitfeedback\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inprogress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subtasksByTaskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        taskList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        unsubTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/task-list-manager.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Task, TaskService, Subtask } from '../services/task.service';\nimport { Subscription } from 'rxjs';\n\n/**\n * TaskListManager handles all task list operations for the BoardComponent.\n * This includes loading, filtering, sorting, and managing task lists by status.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskListManager {\n  private taskList: Task[] = [];\n  private subtasksByTaskId: { [taskId: string]: Subtask[] } = {};\n  private unsubTask!: Subscription;\n  \n  // Task status arrays\n  private todo: Task[] = [];\n  private inprogress: Task[] = [];\n  private awaitfeedback: Task[] = [];\n  private done: Task[] = [];\n\n  constructor(private taskService: TaskService) {}\n\n  /**\n   * Gets all tasks\n   */\n  getTaskList(): Task[] {\n    return this.taskList;\n  }\n\n  /**\n   * Gets task lists by status\n   */\n  getTodoTasks(): Task[] {\n    return this.todo;\n  }\n\n  getInProgressTasks(): Task[] {\n    return this.inprogress;\n  }\n\n  getAwaitFeedbackTasks(): Task[] {\n    return this.awaitfeedback;\n  }\n\n  getDoneTasks(): Task[] {\n    return this.done;\n  }\n\n  /**\n   * Gets subtasks by task ID\n   */\n  getSubtasksByTaskId(): { [taskId: string]: Subtask[] } {\n    return this.subtasksByTaskId;\n  }\n\n  /**\n   * Filters tasks by given status and search term (case-insensitive).\n   *\n   * @param status - Task status to filter by ('to-do', 'in-progress', 'await-feedback', 'done').\n   * @param searchTerm - Search term to filter by.\n   * @returns Filtered list of tasks.\n   */\n  getFilteredTasks(status: string, searchTerm: string): Task[] {\n    const statusArrayMap: { [key: string]: Task[] } = {\n      'to-do': this.todo,\n      'in-progress': this.inprogress,\n      'await-feedback': this.awaitfeedback,\n      done: this.done,\n    };\n    const tasksForStatus = statusArrayMap[status] || [];\n    if (!searchTerm.trim()) {\n      return tasksForStatus;\n    }\n    const searchLower = searchTerm.toLowerCase();\n    return tasksForStatus.filter(\n      (task) =>\n        task.title.toLowerCase().includes(searchLower) ||\n        task.description?.toLowerCase().includes(searchLower)\n    );\n  }\n\n  /**\n   * Sorts a list of tasks by their due date.\n   *\n   * @param tasks - Array of tasks to be sorted.\n   * @param ascending - Whether to sort in ascending order (default: true).\n   * @returns Sorted task array.\n   */\n  sortTasksByDueDate(tasks: Task[], ascending: boolean = true): Task[] {\n    return [...tasks].sort((a, b) => {\n      const dateA = this.getDateValue(a.date);\n      const dateB = this.getDateValue(b.date);\n      return ascending ? dateA - dateB : dateB - dateA;\n    });\n  }\n\n  /**\n   * Converts different date formats (Date, Firestore Timestamp, string) into a timestamp.\n   *\n   * @param date - Date input to convert.\n   * @returns Numeric timestamp, or Number.MAX_SAFE_INTEGER if invalid.\n   */\n  private getDateValue(date: Date | any): number {\n    if (date && typeof date.toDate === 'function') {\n      return date.toDate().getTime();\n    } else if (date instanceof Date) {\n      return date.getTime();\n    } else if (typeof date === 'string') {\n      return new Date(date).getTime();\n    }\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * TrackBy function for use with ngFor to optimize rendering of tasks.\n   *\n   * @param index - The index of the item in the array.\n   * @param task - The task object.\n   * @returns The unique task ID.\n   */\n  trackByTaskId(index: number, task: Task): string | undefined {\n    return task.id;\n  }\n\n  /**\n   * Loads tasks from the task service and distributes them into status-based lists.\n   * Also sorts tasks by due date and loads their subtasks.\n   *\n   * @returns A function to unsubscribe from the task observable.\n   */\n  loadTasks(): (() => void) {\n    this.unsubTask = this.taskService.getTasks().subscribe((tasks: Task[]) => {\n      this.taskList = tasks;\n      this.emptyArrays();\n      for (const task of tasks) {\n        switch (task.status) {\n          case 'to-do':\n            this.todo.push(task);\n            break;\n          case 'in-progress':\n            this.inprogress.push(task);\n            break;\n          case 'await-feedback':\n            this.awaitfeedback.push(task);\n            break;\n          case 'done':\n            this.done.push(task);\n            break;\n          default:\n            console.warn(\n              `Unbekannter Status bei Task ${task.title}:`,\n              task.status\n            );\n        }\n      }\n      this.todo = this.sortTasksByDueDate(this.todo);\n      this.inprogress = this.sortTasksByDueDate(this.inprogress);\n      this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n      this.done = this.sortTasksByDueDate(this.done);\n      this.loadSubtasks();\n    });\n    return () => this.unsubTask.unsubscribe();\n  }\n\n  /**\n   * Empties all task lists (to-do, in-progress, await-feedback, done).\n   */\n  private emptyArrays(): void {\n    this.todo = [];\n    this.inprogress = [];\n    this.awaitfeedback = [];\n    this.done = [];\n  }\n\n  /**\n   * Loads subtasks for each task and stores them in a lookup table by task ID.\n   */\n  private loadSubtasks(): void {\n    for (const task of this.taskList) {\n      if (task.id) {\n        this.taskService.getSubtasks(task.id).subscribe((subtasks) => {\n          this.subtasksByTaskId[task.id!] = subtasks;\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns the subtasks for a given task ID.\n   *\n   * @param taskId - The ID of the task to retrieve subtasks for.\n   * @returns Array of subtasks, or an empty array if none exist.\n   */\n  getSubtasksForTask(taskId: string | undefined): Subtask[] {\n    if (!taskId) {\n      return [];\n    }\n    return this.subtasksByTaskId[taskId] || [];\n  }\n\n  /**\n   * Returns the subtasks assigned to the currently selected task.\n   *\n   * @param selectedTask - The currently selected task.\n   * @returns Array of subtasks, or an empty array if none are found.\n   */\n  getSubtasksForSelectedTask(selectedTask: Task | undefined): Subtask[] {\n    if (selectedTask?.id) {\n      return this.subtasksByTaskId[selectedTask.id] || [];\n    }\n    return [];\n  }\n\n  /**\n   * Updates task lists after status changes\n   */\n  updateTaskLists(): void {\n    this.todo = this.sortTasksByDueDate(this.todo);\n    this.inprogress = this.sortTasksByDueDate(this.inprogress);\n    this.awaitfeedback = this.sortTasksByDueDate(this.awaitfeedback);\n    this.done = this.sortTasksByDueDate(this.done);\n  }\n\n  /**\n   * Clears all data and unsubscribes\n   */\n  destroy(): void {\n    if (this.unsubTask) {\n      this.unsubTask.unsubscribe();\n    }\n    this.emptyArrays();\n    this.taskList = [];\n    this.subtasksByTaskId = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/task.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing tasks and subtasks\nstored in Firestore.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                editingTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSubtask\n                            \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                capitalize\n                            \n                            \n                                clearEditingTask\n                            \n                            \n                                convertDate\n                            \n                            \n                                    Async\n                                deleteSubtask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                formatDate\n                            \n                            \n                                getCleanJson\n                            \n                            \n                                getEditingTask\n                            \n                            \n                                getSingleTaskRef\n                            \n                            \n                                getSubtasks\n                            \n                            \n                                getSubtasksRef\n                            \n                            \n                                getTasks\n                            \n                            \n                                getTasksRef\n                            \n                            \n                                setEditingTask\n                            \n                            \n                                    Async\n                                updateSubtask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/task.service.ts:71\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addSubtask(ColId: string, subtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Adds a subtask to a specific task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                        \n                                                subtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created subtask with ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addTask(newTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Adds a new task to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task to be added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created task including its generated ID, or null on failure.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(text: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:297\n                        \n                    \n\n\n            \n                \n                        Capitalizes the first letter of a string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe string to capitalize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Capitalized string or empty string if undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearEditingTask\n                        \n                    \n                \n            \n            \n                \nclearEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:287\n                        \n                    \n\n\n            \n                \n                        Clears the currently edited task.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertDate\n                        \n                    \n                \n            \n            \n                \nconvertDate(date: Timestamp | Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:247\n                        \n                    \n\n\n            \n                \n                        Converts a Firestore Timestamp or Date object to a formatted string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                        Timestamp | Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Timestamp or Date to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A formatted date string (dd/mm/yyyy).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSubtask(taskId: string, subtaskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Deletes a subtask from a task's subcollection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask ID to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:212\n                        \n                    \n\n\n            \n                \n                        Deletes a task from Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatDate\n                        \n                    \n                \n            \n            \n                \nformatDate(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:261\n                        \n                    \n\n\n            \n                \n                        Formats a Date object into a dd/mm/yyyy string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Date to format.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCleanJson\n                        \n                    \n                \n            \n            \n                \ngetCleanJson(updated: Task | Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Returns a plain object representation of a Task or Subtask for Firestore updates.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updated\n                                            \n                                                        Task | Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe object to clean.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { title: string; description: string; date: any; priority: \"low\" | \"medium\" | \"urgent\"; status: string; assignedTo: {}; category: \"technical\" | \"user story\"; isCompleted?: undefined; } | { ...; } | { ...; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEditingTask\n                        \n                    \n                \n            \n            \n                \ngetEditingTask()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:280\n                        \n                    \n\n\n            \n                \n                        Returns the task currently being edited.\n\n\n                        \n                            Returns :         Task | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSingleTaskRef\n                        \n                    \n                \n            \n            \n                \ngetSingleTaskRef(docId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns a document reference for a specific task by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasks\n                        \n                    \n                \n            \n            \n                \ngetSubtasks(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Observes the subtasks of a given task in real-time.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSubtasksRef\n                        \n                    \n                \n            \n            \n                \ngetSubtasksRef(subColId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'subtasks' subcollection for a given task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                subColId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe document ID of the parent task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasks\n                        \n                    \n                \n            \n            \n                \ngetTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Observes all tasks in Firestore and emits updates in real-time.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasksRef\n                        \n                    \n                \n            \n            \n                \ngetTasksRef()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Returns a reference to the 'tasks' Firestore collection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEditingTask\n                        \n                    \n                \n            \n            \n                \nsetEditingTask(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:273\n                        \n                    \n\n\n            \n                \n                        Sets the currently edited task.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe task being edited.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateSubtask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:191\n                        \n                    \n\n\n            \n                \n                        Updates a subtask document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parent task ID.\n\n\n                                            \n                                        \n                                        \n                                                subtaskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe subtask document ID.\n\n\n                                            \n                                        \n                                        \n                                                updatedSubtask\n                                            \n                                                            Subtask\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated subtask data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(docId: string, updatedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/task.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Updates a task document in Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task.\n\n\n                                            \n                                        \n                                        \n                                                updatedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated task data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        editingTask\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/services/task.service.ts:71\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collection,\n  onSnapshot,\n  addDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n  Timestamp\n} from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Represents a task in the system.\n */\nexport interface Task {\n  /** Firestore-generated ID (optional when creating a task) */\n  id?: string;\n\n  /** Title of the task */\n  title: string;\n\n  /** Optional description */\n  description?: string;\n\n  /**\n   * Date of the task; may be a native Date object or Firestore Timestamp.\n   * Firestore stores it as a Timestamp and it needs conversion after reading.\n   */\n  date: Date | Timestamp;\n\n  /** Priority level of the task */\n  priority: 'low' | 'medium' | 'urgent';\n\n  /** Current status of the task */\n  status: string;\n\n  /** Optional list of user IDs assigned to the task */\n  assignedTo?: string[];\n\n  /** Task category */\n  category: 'technical' | 'user story';\n\n  /** Optional array of subtasks (retrieved separately as subcollection) */\n  subtask?: Subtask[];\n}\n\n/**\n * Represents a subtask belonging to a task.\n */\nexport interface Subtask {\n  /** Firestore-generated ID (optional when creating) */\n  id?: string;\n\n  /** Title or label of the subtask */\n  title: string;\n\n  /** Completion status */\n  isCompleted: boolean;\n}\n\n/**\n * Service responsible for managing tasks and subtasks\n * stored in Firestore.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private editingTask: Task | null = null;\n\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Returns a reference to the 'tasks' Firestore collection.\n   */\n  getTasksRef() {\n    return collection(this.firestore, 'tasks');\n  }\n\n  /**\n   * Returns a reference to the 'subtasks' subcollection for a given task.\n   * \n   * @param subColId - The document ID of the parent task.\n   */\n  getSubtasksRef(subColId: string) {\n    return collection(this.getTasksRef(), subColId, 'subtasks');\n  }\n\n  /**\n   * Returns a document reference for a specific task by ID.\n   * \n   * @param docId - The document ID of the task.\n   */\n  getSingleTaskRef(docId: string) {\n    return doc(collection(this.firestore, 'tasks'), docId);\n  }\n\n  /**\n   * Observes all tasks in Firestore and emits updates in real-time.\n   */\n  getTasks(): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getTasksRef(), snapshot => {\n        const tasks: Task[] = [];\n        snapshot.forEach(doc => {\n          tasks.push({ id: doc.id, ...doc.data() } as Task);\n        });\n        observer.next(tasks);\n      }, error => {\n        observer.error(error);\n      });\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Observes the subtasks of a given task in real-time.\n   * \n   * @param taskId - The ID of the parent task.\n   */\n  getSubtasks(taskId: string): Observable {\n    return new Observable(observer => {\n      const unsubscribe = onSnapshot(this.getSubtasksRef(taskId), snapshot => {\n        const subtasks: Subtask[] = [];\n        snapshot.forEach(doc => {\n          subtasks.push({ id: doc.id, ...doc.data() } as Subtask);\n        });\n        observer.next(subtasks);\n      }, error => observer.error(error));\n\n      return () => unsubscribe();\n    });\n  }\n\n  /**\n   * Adds a new task to Firestore.\n   * \n   * @param newTask - The task to be added.\n   * @returns The created task including its generated ID, or null on failure.\n   */\n  async addTask(newTask: Task): Promise {\n    try {\n      const tasksRef = this.getTasksRef();\n      const docRef = await addDoc(tasksRef, newTask);\n      return { id: docRef.id, ...newTask };\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  /**\n   * Adds a subtask to a specific task's subcollection.\n   * \n   * @param ColId - The ID of the parent task.\n   * @param subtask - The subtask to add.\n   * @returns The created subtask with ID, or null on failure.\n   */\n  async addSubtask(ColId: string, subtask: Subtask): Promise {\n    try {\n      const subtasksRef = this.getSubtasksRef(ColId);\n      const docRef = await addDoc(subtasksRef, subtask);\n      return { id: docRef.id, ...subtask };\n    } catch (error) {\n      console.error('Error adding subtask:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task document in Firestore.\n   * \n   * @param docId - The ID of the task.\n   * @param updatedTask - The updated task data.\n   */\n  async updateTask(docId: string, updatedTask: Task) {\n    const docRef = this.getSingleTaskRef(docId);\n    await updateDoc(docRef, this.getCleanJson(updatedTask)).catch(console.error);\n  }\n\n  /**\n   * Updates a subtask document in Firestore.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask document ID.\n   * @param updatedSubtask - The updated subtask data.\n   */\n  async updateSubtask(taskId: string, subtaskId: string, updatedSubtask: Subtask) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await updateDoc(docRef, this.getCleanJson(updatedSubtask)).catch(console.error);\n  }\n\n  /**\n   * Deletes a subtask from a task's subcollection.\n   * \n   * @param taskId - The parent task ID.\n   * @param subtaskId - The subtask ID to delete.\n   */\n  async deleteSubtask(taskId: string, subtaskId: string) {\n    const docRef = doc(this.firestore, `tasks/${taskId}/subtasks/${subtaskId}`);\n    await deleteDoc(docRef).catch(err => console.error('Error deleting subtask:', err));\n  }\n\n  /**\n   * Deletes a task from Firestore.\n   * \n   * @param docId - The ID of the task to delete.\n   */\n  async deleteTask(docId: string) {\n    await deleteDoc(this.getSingleTaskRef(docId)).catch(console.error);\n  }\n\n  /**\n   * Returns a plain object representation of a Task or Subtask for Firestore updates.\n   * \n   * @param updated - The object to clean.\n   */\n  getCleanJson(updated: Task | Subtask) {\n    if ('category' in updated) {\n      return {\n        title: updated.title,\n        description: updated.description,\n        date: updated.date,\n        priority: updated.priority,\n        status: updated.status,\n        assignedTo: updated.assignedTo,\n        category: updated.category,\n      };\n    } else if ('isCompleted' in updated) {\n      return {\n        title: updated.title,\n        isCompleted: updated.isCompleted\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Converts a Firestore Timestamp or Date object to a formatted string.\n   * \n   * @param date - The Timestamp or Date to convert.\n   * @returns A formatted date string (`dd/mm/yyyy`).\n   */\n  convertDate(date: Timestamp | Date): string {\n    if (date instanceof Timestamp) {\n      return this.formatDate(date.toDate());\n    } else if (date instanceof Date) {\n      return this.formatDate(date);\n    }\n    return '';\n  }\n\n  /**\n   * Formats a Date object into a `dd/mm/yyyy` string.\n   * \n   * @param date - The Date to format.\n   */\n  formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Sets the currently edited task.\n   * \n   * @param task - The task being edited.\n   */\n  setEditingTask(task: Task) {\n    this.editingTask = task;\n  }\n\n  /**\n   * Returns the task currently being edited.\n   */\n  getEditingTask(): Task | null {\n    return this.editingTask;\n  }\n\n  /**\n   * Clears the currently edited task.\n   */\n  clearEditingTask() {\n    this.editingTask = null;\n  }\n\n  /**\n   * Capitalizes the first letter of a string.\n   * \n   * @param text - The string to capitalize.\n   * @returns Capitalized string or empty string if undefined.\n   */\n  capitalize(text: string | undefined): string {\n    if (!text) return '';\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserData.html":{"url":"interfaces/UserData.html","title":"interface - UserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for user data stored in Firestore.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            uid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { \n  Auth, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  User,\n  onAuthStateChanged,\n  updateProfile,\n  deleteUser\n} from '@angular/fire/auth';\nimport { \n  Firestore, \n  doc, \n  setDoc, \n  getDoc, \n  DocumentData \n} from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface for user data stored in Firestore.\n */\nexport interface UserData {\n  uid: string;\n  email: string;\n  displayName: string;\n  createdAt: Date;\n}\n\n/**\n * Authentication service for handling user registration, login, logout,\n * guest access, profile updates, account deletion, and state tracking.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject(null);\n\n  /**\n   * Observable emitting the current authenticated Firebase user.\n   */\n  public currentUser$: Observable = this.currentUserSubject.asObservable();\n\n  /**\n   * Initializes the AuthService and subscribes to authentication state changes.\n   * @param auth - Firebase Auth instance\n   * @param firestore - Firebase Firestore instance\n   * @param router - Angular Router for navigation\n   */\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router\n  ) {\n    onAuthStateChanged(this.auth, (user) => {\n      this.currentUserSubject.next(user);\n    });\n  }\n\n  /**\n   * Registers a new user with email, password, and display name.\n   * Stores user data in Firestore.\n   * @param email - User's email address\n   * @param password - User's password\n   * @param displayName - User's display name\n   * @returns A success status and optional error message\n   */\n  async signUp(email: string, password: string, displayName: string): Promise {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);\n      const user = userCredential.user;\n      await updateProfile(user, { displayName });\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email!,\n        displayName: displayName,\n        createdAt: new Date()\n      };\n      await setDoc(doc(this.firestore, 'users', user.uid), userData);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in a user with email and password.\n   * @param email - User's email\n   * @param password - User's password\n   * @returns A success status and optional error message\n   */\n  async signIn(email: string, password: string): Promise {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n\n  /**\n   * Signs in as a guest user. If guest user does not exist, it will be created.\n   * @returns A success status and optional error message\n   */\n  async signInAsGuest(): Promise {\n    try {\n      const guestEmail = 'guest@join.com';\n      const guestPassword = 'Guest123!';\n      await signInWithEmailAndPassword(this.auth, guestEmail, guestPassword);\n      return { success: true };\n    } catch (error: any) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(this.auth, 'guest@join.com', 'Guest123!');\n        const user = userCredential.user;\n        await updateProfile(user, { displayName: 'Guest User' });\n\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email!,\n          displayName: 'Guest User',\n          createdAt: new Date()\n        };\n\n        await setDoc(doc(this.firestore, 'users', user.uid), userData);\n        return { success: true };\n      } catch (createError: any) {\n        return { success: false, message: this.getErrorMessage(createError.code) };\n      }\n    }\n  }\n\n  /**\n   * Signs out the currently authenticated user and redirects to the login page.\n   */\n  async signOutUser(): Promise {\n    await signOut(this.auth);\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Retrieves the current user's data from Firestore.\n   * @returns The user's Firestore data or null if not found\n   */\n  async getCurrentUserData(): Promise {\n    const currentUser = this.auth.currentUser;\n    if (!currentUser) return null;\n\n    const userDoc = await getDoc(doc(this.firestore, 'users', currentUser.uid));\n    return userDoc.exists() ? userDoc.data() as UserData : null;\n  }\n\n  /**\n   * Checks whether a user is currently authenticated.\n   * @returns True if a user is signed in, otherwise false\n   */\n  isLoggedIn(): boolean {\n    return this.auth.currentUser !== null;\n  }\n\n  /**\n   * Gets the current authenticated Firebase user.\n   * @returns The current user or null if not logged in\n   */\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Maps Firebase Auth error codes to human-readable error messages.\n   * @param errorCode - Firebase Auth error code\n   * @returns A string describing the error\n   */\n  private getErrorMessage(errorCode: string): string {\n    switch (errorCode) {\n      case 'auth/user-not-found':\n        return 'User not found.';\n      case 'auth/wrong-password':\n        return 'Wrong password.';\n      case 'auth/email-already-in-use':\n        return 'Email address is already in use.';\n      case 'auth/weak-password':\n        return 'Password is too weak.';\n      case 'auth/invalid-email':\n        return 'Invalid email address.';\n      case 'auth/user-disabled':\n        return 'User account has been disabled.';\n      case 'auth/too-many-requests':\n        return 'Too many login attempts. Please try again later.';\n      case 'auth/network-request-failed':\n        return 'Network error. Please check your internet connection.';\n      default:\n        return 'An error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Deletes the currently authenticated user account.\n   * @returns A success status and optional error message\n   */\n  async deleteAccount(): Promise {\n    const user = this.auth.currentUser;\n    if (!user) {\n      return { success: false, message: 'No user is currently signed in.' };\n    }\n    try {\n      await deleteUser(user);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, message: this.getErrorMessage(error.code) };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/add-task/add-task.component.ts\n            \n            component\n            AddTaskComponent\n            \n                59 %\n                (25/42)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            injectable\n            CategoryManager\n            \n                80 %\n                (12/15)\n            \n        \n        \n            \n                \n                src/app/add-task/category-manager.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/add-task/contact-manager.ts\n            \n            injectable\n            ContactManager\n            \n                81 %\n                (13/16)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            injectable\n            SubtaskManager\n            \n                79 %\n                (23/29)\n            \n        \n        \n            \n                \n                src/app/add-task/subtask-manager.ts\n            \n            interface\n            Subtask\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/board.component.ts\n            \n            component\n            BoardComponent\n            \n                71 %\n                (25/35)\n            \n        \n        \n            \n                \n                src/app/board/drag-drop-manager.ts\n            \n            injectable\n            DragDropManager\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/board/overlay-manager.ts\n            \n            injectable\n            OverlayManager\n            \n                66 %\n                (14/21)\n            \n        \n        \n            \n                \n                src/app/board/task-details/task-details.component.ts\n            \n            component\n            TaskDetailsComponent\n            \n                94 %\n                (18/19)\n            \n        \n        \n            \n                \n                src/app/board/task-list-manager.ts\n            \n            injectable\n            TaskListManager\n            \n                57 %\n                (15/26)\n            \n        \n        \n            \n                \n                src/app/board/task/task.component.ts\n            \n            component\n            TaskComponent\n            \n                96 %\n                (24/25)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-details/contact-details.component.ts\n            \n            component\n            ContactDetailsComponent\n            \n                50 %\n                (13/26)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-form/contact-form.component.ts\n            \n            component\n            ContactFormComponent\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                src/app/contacts/contact-list/contact-list.component.ts\n            \n            component\n            ContactListComponent\n            \n                85 %\n                (17/20)\n            \n        \n        \n            \n                \n                src/app/contacts/contacts.component.ts\n            \n            component\n            ContactsComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/app/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/app/login-signup/footer/footer.component.ts\n            \n            component\n            FooterComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/login-signup/login-header/login-header.component.ts\n            \n            component\n            LoginHeaderComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/login-signup/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/app/login-signup/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                92 %\n                (13/14)\n            \n        \n        \n            \n                \n                src/app/services/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            interface\n            UserData\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            injectable\n            ContactService\n            \n                95 %\n                (23/24)\n            \n        \n        \n            \n                \n                src/app/services/contact.service.ts\n            \n            interface\n            Contact\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/app/services/contact.service.ts\n            \n            function\n            notOnlyWhitespace\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/navigation-history.service.ts\n            \n            injectable\n            NavigationHistoryService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            injectable\n            TaskService\n            \n                90 %\n                (19/21)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Subtask\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/task.service.ts\n            \n            interface\n            Task\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/shared/help/help.component.ts\n            \n            component\n            HelpComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/legal-notice/legal-notice.component.ts\n            \n            component\n            LegalNoticeComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/shared/privacy-policy/privacy-policy.component.ts\n            \n            component\n            PrivacyPolicyComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/sidebar/sidebar.component.ts\n            \n            component\n            SidebarComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            component\n            SummaryComponent\n            \n                26 %\n                (5/19)\n            \n        \n        \n            \n                \n                src/app/summary/summary.component.ts\n            \n            interface\n            FirestoreTimestamp\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.14\n        \n            @angular/cdk : ^19.2.14\n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/fire : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            notOnlyWhitespace   (src/.../contact.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/services/contact.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        notOnlyWhitespace\n                        \n                    \n                \n            \n            \n                \nnotOnlyWhitespace(control: AbstractControl)\n                \n            \n\n\n\n\n            \n                \n                        Custom validator to check that a form input contains more than just whitespace.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form control to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                A validation error object if invalid, otherwise null.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nJoin\nThis project was generated using Angular CLI version 19.2.12.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideFirebaseApp(() =>\n      initializeApp({\n        projectId: 'join-6125f',\n        appId: '1:703986298510:web:8cb9707daf583f2153a3df',\n        storageBucket: 'join-6125f.firebasestorage.app',\n        apiKey: 'AIzaSyAWyoU260eXmo3445mLTsqCjzRhEG6aq9A',\n        authDomain: 'join-6125f.firebaseapp.com',\n        messagingSenderId: '703986298510',\n      })\n    ),\n    provideFirestore(() => getFirestore()),\n    provideAnimations(),\n    provideAuth(() => getAuth()),\n    {\n      provide: CDK_DRAG_CONFIG,\n      useValue: {\n        dragStartThreshold: 5,\n        pointerDirectionChangeThreshold: 5,\n        zIndex: 1000,\n        scrollSpeed: 30,          \n        scrollProximity: 100,     // Distance to border\n      },\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
